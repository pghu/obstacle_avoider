
ROBOT.elf:     file format elf32-littlenios2
ROBOT.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00021328 memsz 0x00021328 flags r-x
    LOAD off    0x00022348 vaddr 0x02021348 paddr 0x02023124 align 2**12
         filesz 0x00001ddc memsz 0x00001ddc flags rw-
    LOAD off    0x00024f00 vaddr 0x02024f00 paddr 0x02024f00 align 2**12
         filesz 0x00000000 memsz 0x000036b8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00020564  020001bc  020001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c28  02020720  02020720  00021720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ddc  02021348  02023124  00022348  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000036b8  02024f00  02024f00  00024f00  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00024124  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001518  00000000  00000000  00024150  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002e06  00000000  00000000  00025668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00042ece  00000000  00000000  0002846e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000de58  00000000  00000000  0006b33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000280e9  00000000  00000000  00079194  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000037c8  00000000  00000000  000a1280  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000344e  00000000  00000000  000a4a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00014eca  00000000  00000000  000a7e96  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000bcd60  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d70  00000000  00000000  000bcdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000c3b1f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000c3b25  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000c3b28  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000c3b29  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000c3b2a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000c3b2e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000c3b32  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000c3b36  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000c3b3f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000c3b48  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  000c3b51  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002e  00000000  00000000  000c3b56  2**0
                  CONTENTS, READONLY
 29 .jdi          00004981  00000000  00000000  000c3b84  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000bce29  00000000  00000000  000c8505  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001bc l    d  .text	00000000 .text
02020720 l    d  .rodata	00000000 .rodata
02021348 l    d  .rwdata	00000000 .rwdata
02024f00 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
02000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 LSM303.c
00000000 l    df *ABS*	00000000 accelerometer_adxl345_spi.c
00000000 l    df *ABS*	00000000 adc_spi_read.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 terasic_spi.c
00000000 l    df *ABS*	00000000 main.c
02021348 l     O .rwdata	000001f8 szTestList
02002bbc l     F .text	00000058 KEY_ISR
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 w_atan2.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_atan2.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_atan.c
02020b8c l     O .rodata	00000020 atanhi
02020bac l     O .rodata	00000020 atanlo
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 fp-bit.c
020043ac l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
02004acc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02005978 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
02021540 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02006d48 l     F .text	00000058 __sprint_r
02020d66 l     O .rodata	00000010 blanks.3452
02020d56 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
02020d7e l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
02020ea1 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0200a52c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0200bf28 l     F .text	00000058 std
0200c034 l     F .text	00000008 __fp_lock
0200c03c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
02023074 l     O .rwdata	00000004 charset
02021044 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0202118c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0200ecac l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0200f0ac l     F .text	00000048 match
02021d68 l     O .rwdata	00000014 fpi.1950
020211a8 l     O .rodata	00000028 tinytens
02021d54 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
020117a4 l     F .text	00000024 htinit
02011830 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
02012098 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0201377c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
02013898 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02013a68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
02013d48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02013e28 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
02013f84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
020141cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0202309c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
02014728 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
020230a8 l     O .rwdata	00000004 lockid
02024f4c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
020230ac l     O .rwdata	00000004 lockid
02024f54 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
02016160 l     F .text	00000044 OS_InitMisc
020161a4 l     F .text	0000006c OS_InitRdyList
02016308 l     F .text	000000e0 OS_InitTCBList
02016084 l     F .text	000000dc OS_InitEventList
02016210 l     F .text	0000007c OS_InitTaskIdle
0201628c l     F .text	0000007c OS_InitTaskStat
0201657c l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0201849c l     F .text	00000110 OS_FlagTaskRdy
020181f4 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
02021f24 l     O .rwdata	000000c8 epcs
02021fec l     O .rwdata	0000106c jtag_uart
0201cdcc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0201ce90 l     F .text	00000288 alt_epcs_flash_query
0201ce58 l     F .text	00000038 alt_flash_device_register
0201d118 l     F .text	00000108 alt_epcs_flash_memcmp
0201d5a0 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0201da68 l     F .text	000002c4 altera_avalon_jtag_uart_irq
0201dd2c l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0201e544 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
0201e79c l     F .text	00000038 epcs_await_wip_released
0201e7d4 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0201f06c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0201f524 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0201f660 l     F .text	000000dc alt_file_locked
0201f8c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
020204fc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
020206b0 l     F .text	00000040 alt_sim_halt
0200d90c g     F .text	00000094 _mprec_log10
020002e0 g     F .text	00000104 I2C_Read
020230fa g     O .rwdata	00000002 OSTaskNameSize
0201d4a0 g     F .text	00000090 alt_epcs_flash_get_info
0200d9f8 g     F .text	00000088 __any_on
0201232c g     F .text	00000070 _isatty_r
02021164 g     O .rodata	00000028 __mprec_tinytens
02013fe4 g     F .text	000000c8 alt_main
02006b34 g     F .text	000000a0 _puts_r
02028328 g     O .bss	00000100 alt_irq
0200435c g     F .text	00000018 fabs
0201239c g     F .text	00000078 _lseek_r
02018d90 g     F .text	000000d0 OS_MemInit
0200357c g     F .text	00000130 sqrt
02000e24 g     F .text	00000070 setMagGain
02023124 g       *ABS*	00000000 __flash_rwdata_start
0201ccd0 g     F .text	00000064 OSTimeSet
0200103c g     F .text	00000044 heading_Y
02013224 g     F .text	00000088 __eqdf2
02014cdc g     F .text	000006b4 OSEventPendMulti
020285b8 g       *ABS*	00000000 __alt_heap_start
0201fd24 g     F .text	00000020 OSTaskCreateHook
02006abc g     F .text	00000044 printf
020230d2 g     O .rwdata	00000002 OSMboxEn
020153e4 g     F .text	0000007c OSIntEnter
02001620 g     F .text	000000d0 ADXL345_SPI_Init
0200eeac g     F .text	00000068 __sseek
0200bf90 g     F .text	000000a4 __sinit
020230e2 g     O .rwdata	00000002 OSQEn
0200ced0 g     F .text	00000084 _setlocale_r
0200c090 g     F .text	00000068 __sfmoreglue
02011454 g     F .text	0000001c ungetc
02014998 g     F .text	000000d0 __malloc_unlock
0200346c g     F .text	0000010c round
0201fd80 g     F .text	0000001c OSTaskStatHook
02024f5c g     O .bss	00000001 OSLockNesting
0200f0f4 g     F .text	000014e4 _strtod_r
02004844 g     F .text	00000174 __divsf3
02023120 g     O .rwdata	00000002 OSDataSize
02024f5d g     O .bss	00000001 OSRunning
02002c14 g     F .text	00000074 EnableKeyInterrupt
0200d388 g     F .text	000000e0 memmove
0201fdb8 g     F .text	0000001c OSInitHookBegin
02002c88 g     F .text	00000098 ShowMenu
02023118 g     O .rwdata	00000002 OSTmrSize
0200c080 g     F .text	00000010 _cleanup
0200da80 g     F .text	000000bc _Balloc
02000c04 g     F .text	00000020 getTimeout
02024f60 g     O .bss	00000004 OSIdleCtr
020055ec g     F .text	00000088 __gtdf2
0201f9f0 g       .text	00000000 OSStartTsk
02006344 g     F .text	00000010 __errno
020168b0 g     F .text	000002e0 OS_TCBInit
0201e6a4 g     F .text	000000f8 epcs_sector_erase
02000750 g     F .text	00000124 i2c_write
02000000 g     F .entry	0000001c __reset
0202311e g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
020230be g     O .rwdata	00000002 OSEventSize
02024f64 g     O .bss	00000001 OSPrioHighRdy
02011730 g     F .text	00000074 _fstat_r
0201fd44 g     F .text	00000020 OSTaskDelHook
02024f20 g     O .bss	00000004 errno
020058cc g     F .text	00000038 __make_dp
0200a2f0 g     F .text	00000024 __svfscanf
0201f9d0 g       .text	00000000 OSStartHighRdy
0201b4a4 g     F .text	00000200 OSTaskCreateExt
02017d10 g     F .text	00000068 OSFlagPendGetFlagsRdy
020230fe g     O .rwdata	00000002 OSTaskStatStkSize
02005e04 g     F .text	0000002c __make_fp
02016d1c g     F .text	00000334 OSFlagAccept
020194c8 g     F .text	000000c8 OSQFlush
02018e60 g     F .text	00000154 OSQAccept
02024f3c g     O .bss	00000004 alt_argv
0202b058 g       *ABS*	00000000 _gp
020144f0 g     F .text	00000118 usleep
02004590 g     F .text	00000070 __subsf3
02000cc0 g     F .text	00000068 enableDefault
0201b2d0 g     F .text	000001d4 OSTaskCreate
0201ad5c g     F .text	00000574 OSTaskChangePrio
02024f58 g     O .bss	00000004 alt_heapsem
02016b90 g     F .text	0000018c OSDebugInit
0201b6a4 g     F .text	0000040c OSTaskDel
020009c0 g     F .text	00000178 i2c_data_verify
020022a8 g     F .text	000005b0 FLASH_Verify
02001adc g     F .text	000000d0 Flash_Open
02021da4 g     O .rwdata	00000180 alt_fd_list
02025104 g     O .bss	00000370 OSFlagTbl
02001c04 g     F .text	0000013c Flash_GetBlockInfo
02015e60 g     F .text	000000b8 OS_EventTaskRemove
0201e9a8 g     F .text	00000064 epcs_write_status_register
02001014 g     F .text	00000028 LSM303_read
0201f194 g     F .text	00000094 alt_find_dev
0200d2e8 g     F .text	000000a0 memcpy
020120e4 g     F .text	00000248 __hexnan
020230e8 g     O .rwdata	00000002 OSRdyTblSize
0200c074 g     F .text	0000000c _cleanup_r
020056fc g     F .text	000000f8 __floatsidf
0201f5e8 g     F .text	00000078 alt_io_redirect
02005674 g     F .text	00000088 __ltdf2
02020720 g       *ABS*	00000000 __DTOR_END__
02006bd4 g     F .text	00000014 puts
02014a68 g     F .text	00000130 OSEventNameGet
020230cc g     O .rwdata	00000002 OSFlagMax
0200d184 g     F .text	00000040 mbrtowc
020018c8 g     F .text	00000044 ADXL345_SPI_IdRead
0201d634 g     F .text	0000011c alt_epcs_flash_write_block
02003310 g     F .text	000000dc DEMO_EEPROM
0200a314 g     F .text	00000068 _vfscanf_r
0200d85c g     F .text	000000b0 __ratio
02015460 g     F .text	00000100 OSIntExit
02023106 g     O .rwdata	00000002 OSTCBSize
02024f65 g     O .bss	00000001 OSPrioCur
0201dfa8 g     F .text	000002c0 altera_avalon_jtag_uart_read
02006368 g     F .text	00000014 malloc
02000bdc g     F .text	00000028 setTimeout
02006b00 g     F .text	00000034 _printf_r
02005ab4 g     F .text	00000008 __udivsi3
02013c88 g     F .text	000000c0 isatty
020230ec g     O .rwdata	00000002 OSStkWidth
0200ce80 g     F .text	0000002c iswspace
02021074 g     O .rodata	000000c8 __mprec_tens
020230e0 g     O .rwdata	00000002 OSPtrSize
0200ceac g     F .text	00000008 __locale_charset
020230c0 g     O .rwdata	00000002 OSEventTblSize
0201248c g     F .text	000000a4 __fixunsdfsi
0201f944 g       .text	00000000 OSCtxSw
02020278 g     F .text	00000090 alt_icache_flush
020004f4 g     F .text	0000015c I2C_MultipleRead
02024f14 g     O .bss	00000004 __malloc_top_pad
02024f68 g     O .bss	00000004 OSTCBList
02024f30 g     O .bss	00000004 alt_fd_list_lock
02010ec8 g     F .text	00000024 strtoul
02023070 g     O .rwdata	00000004 __mb_cur_max
0200ceb4 g     F .text	0000000c _localeconv_r
02010eec g     F .text	000002f0 _strtoull_r
0200e178 g     F .text	0000003c __i2b
0200c864 g     F .text	0000049c __sfvwrite_r
02025474 g     O .bss	00000c30 OSMemTbl
02024f6c g     O .bss	00000001 OSTickStepState
02006be8 g     F .text	00000070 _sbrk_r
020230e4 g     O .rwdata	00000002 OSQMax
020260a4 g     O .bss	00000800 OSTaskStatStk
02018978 g     F .text	0000010c OSMemNameGet
020230c4 g     O .rwdata	00000002 OSFlagEn
02012414 g     F .text	00000078 _read_r
0202310a g     O .rwdata	00000002 OSTimeTickHookEn
020137dc g     F .text	00000078 alt_dcache_flush
02019a2c g     F .text	00000180 OSQPost
020185ac g     F .text	000000ac OS_FlagUnlink
02021d48 g     O .rwdata	0000000c __lc_ctype
02023088 g     O .rwdata	00000004 alt_max_fd
0201643c g     F .text	0000006c OS_MemCopy
020164a8 g     F .text	000000d4 OS_Sched
02006144 g     F .text	00000138 __unpack_d
0201160c g     F .text	00000110 _fclose_r
02018874 g     F .text	00000104 OSMemGet
0201bdd8 g     F .text	000001c4 OSTaskNameSet
0200bef4 g     F .text	00000034 fflush
02024f18 g     O .bss	00000004 __malloc_max_sbrked_mem
02024f70 g     O .bss	00000004 OSCtxSwCtr
02003134 g     F .text	00000118 DEMO_ADC
0201fd9c g     F .text	0000001c OSTimeTickHook
02013ac8 g     F .text	000001c0 alt_irq_register
0200190c g     F .text	00000104 ADC_Read
020230ce g     O .rwdata	00000002 OSFlagNameSize
020049b8 g     F .text	00000054 __extendsfdf2
02015f18 g     F .text	00000104 OS_EventTaskRemoveMulti
02004f5c g     F .text	00000074 __adddf3
020130bc g     F .text	00000078 __nesf2
02015d0c g     F .text	00000154 OS_EventTaskWaitMulti
0201d530 g     F .text	00000070 alt_epcs_flash_erase_block
0200d73c g     F .text	00000120 __b2d
020230e6 g     O .rwdata	00000002 OSQSize
02012b0c g     F .text	000005b0 __umoddi3
02013e94 g     F .text	000000f0 lseek
0201a608 g     F .text	0000027c OSSemPend
02023058 g     O .rwdata	00000004 __fdlib_version
02023060 g     O .rwdata	00000004 _global_impure_ptr
020016f0 g     F .text	000000a4 ADXL345_SPI_WaitDataReady
0201ecc0 g     F .text	00000058 epcs_exit_4_bytes_mode
0200e4f4 g     F .text	000005f4 _realloc_r
020230d0 g     O .rwdata	00000002 OSLowestPrio
020285b8 g       *ABS*	00000000 __bss_end
0201f42c g     F .text	000000f8 alt_iic_isr_register
0201fe0c g     F .text	00000020 OSTCBInitHook
02023116 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
020143e0 g     F .text	00000110 alt_tick
02025004 g     O .bss	00000100 __hexdig
02012530 g     F .text	000005dc __udivdi3
020230b8 g     O .rwdata	00000002 OSEventEn
0202113c g     O .rodata	00000028 __mprec_bigtens
0200e3d4 g     F .text	00000120 __s2b
02023112 g     O .rwdata	00000002 OSTmrCfgNameSize
02013444 g     F .text	00000194 __floatunsidf
0200d65c g     F .text	00000060 __mcmp
0202306c g     O .rwdata	00000004 __ctype_ptr
0200c05c g     F .text	00000018 __fp_lock_all
0201f3e4 g     F .text	00000048 alt_ic_irq_enabled
02000208 g     F .text	000000d8 I2C_Write
020183b8 g     F .text	000000e4 OS_FlagInit
02014348 g     F .text	00000098 alt_alarm_stop
02000c24 g     F .text	0000009c LSM303_Init
0201095c g     F .text	00000024 strtol
020230f4 g     O .rwdata	00000002 OSTaskIdleStkSize
02024f34 g     O .bss	00000004 alt_irq_active
0201a194 g     F .text	000000c0 OSSemAccept
02018ba4 g     F .text	000000f0 OSMemPut
02018658 g     F .text	0000021c OSMemCreate
02024f74 g     O .bss	00000004 OSIdleCtrMax
020000ec g     F .exceptions	000000d0 alt_irq_handler
02021d7c g     O .rwdata	00000028 alt_dev_null
02023108 g     O .rwdata	00000002 OSTicksPerSec
02005d3c g     F .text	000000c8 __unpack_f
02000650 g     F .text	00000088 i2c_start
0201f944 g       .text	00000000 OSIntCtxSw
0200137c g     F .text	00000134 vector_cross
02013854 g     F .text	00000044 alt_dcache_flush_all
0200d528 g     F .text	00000070 __hi0bits
020033ec g     F .text	00000080 DEMO_EPCS
020057f4 g     F .text	000000d8 __fixdfsi
020106fc g     F .text	0000001c strtod
02024f78 g     O .bss	00000004 OSTCBFreeList
02023124 g       *ABS*	00000000 __ram_rwdata_end
0201a884 g     F .text	0000017c OSSemPendAbort
02023080 g     O .rwdata	00000008 alt_dev_list
02014608 g     F .text	00000120 write
020036ac g     F .text	00000350 __ieee754_atan2
0202310c g     O .rwdata	00000002 OSVersionNbr
02013134 g     F .text	00000078 __gtsf2
02024f00 g     O .bss	00000001 _device
02021348 g       *ABS*	00000000 __ram_rodata_end
02013994 g     F .text	000000d4 fstat
020133bc g     F .text	00000088 __ledf2
020230b4 g     O .rwdata	00000004 OSEndiannessTest
0200e2b4 g     F .text	00000120 __pow5mult
02024f24 g     O .bss	00000004 __nlocale_changed
02005abc g     F .text	00000008 __umodsi3
02002d20 g     F .text	00000184 DEMO_PWM
02006c58 g     F .text	00000034 _scanf_r
0201eb7c g     F .text	0000006c epcs_read_electronic_signature
020230c6 g     O .rwdata	00000002 OSFlagGrpSize
02001d40 g     F .text	000000b8 Flash_Read
020285b8 g       *ABS*	00000000 end
02005bdc g     F .text	00000160 __pack_f
0201d930 g     F .text	00000138 altera_avalon_jtag_uart_init
02016720 g     F .text	000000c8 OS_TaskStat
02024f04 g     O .bss	00000004 io_timeout
0202071c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02002a20 g     F .text	00000158 SPI_MultipleRead
0201e5b4 g     F .text	00000090 alt_avalon_timer_sc_init
02005b5c g     F .text	00000080 __clzsi2
0201e268 g     F .text	000002dc altera_avalon_jtag_uart_write
02001bac g     F .text	00000058 Flash_Close
0200bf80 g     F .text	00000004 __sfp_lock_acquire
0200d204 g     F .text	000000e4 memchr
020014b0 g     F .text	000000a8 vector_dot
020163e8 g     F .text	00000054 OS_MemClr
02006da0 g     F .text	00001eac ___vfprintf_internal_r
0201fa14 g     F .text	00000310 OSTaskStkInit
0200ee44 g     F .text	00000060 _sprintf_r
0200c550 g     F .text	00000314 _free_r
02015a68 g     F .text	00000194 OS_EventTaskRdy
02020500 g     F .text	000001b0 __call_exitprocs
02024f7c g     O .bss	00000001 OSCPUUsage
02024f28 g     O .bss	00000004 __mlocale_changed
02023068 g     O .rwdata	00000004 __malloc_sbrk_base
020001bc g     F .text	0000004c _start
02024f44 g     O .bss	00000004 _alt_tick_rate
02019590 g     F .text	00000320 OSQPend
02010980 g     F .text	00000318 _strtoll_r
0201c79c g     F .text	0000014c OSTimeDly
0200de44 g     F .text	0000014c __lshift
0201fe2c g     F .text	00000238 alt_avalon_spi_command
02003578 g     F .text	00000004 atan2
02024f48 g     O .bss	00000004 _alt_nticks
020140ac g     F .text	00000120 read
0201cd68 g     F .text	00000064 alt_sys_init
020203c8 g     F .text	00000134 __register_exitproc
020017fc g     F .text	000000cc ADXL345_SPI_XYZ_Read
02024f7d g     O .bss	00000001 OSTaskCtr
0201c8e8 g     F .text	00000174 OSTimeDlyHMSM
0200df90 g     F .text	000001e8 __multiply
0201de40 g     F .text	00000074 altera_avalon_jtag_uart_close
02021348 g       *ABS*	00000000 __ram_rwdata_start
02020720 g       *ABS*	00000000 __ram_rodata_start
02024fac g     O .bss	00000028 __malloc_current_mallinfo
020230ba g     O .rwdata	00000002 OSEventMax
0200db3c g     F .text	0000017c __d2b
0201aa00 g     F .text	00000128 OSSemPost
0201e644 g     F .text	00000060 epcs_read_status_register
020155ec g     F .text	000000e4 OSSchedUnlock
0201d7e8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
02010c98 g     F .text	00000230 _strtoul_r
02020184 g     F .text	000000f4 alt_get_fd
02024f80 g     O .bss	00000004 OSMemFreeList
02015740 g     F .text	000000ac OSStatInit
0201ee6c g     F .text	0000014c alt_busy_sleep
02018120 g     F .text	000000d4 OSFlagQuery
0200627c g     F .text	000000c8 __fpcmp_parts_d
02000e94 g     F .text	00000180 readMag
020230f0 g     O .rwdata	00000002 OSTaskCreateExtEn
0201159c g     F .text	00000070 _close_r
02024fd4 g     O .bss	0000000c m_min
0201ebe8 g     F .text	00000080 epcs_read_device_id
02020354 g     F .text	00000074 memcmp
02015a4c g     F .text	0000001c OS_Dummy
0201d898 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02000b38 g     F .text	00000084 I2C_Verify
020285b8 g       *ABS*	00000000 __alt_stack_base
0201d8e0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0200a3f0 g     F .text	0000013c __swsetup_r
020268a4 g     O .bss	000001e0 OSQTbl
02005394 g     F .text	00000258 __divdf3
0200c0f8 g     F .text	000000f0 __sfp
0200213c g     F .text	00000084 Flash_GetBlockCount
0200d9a0 g     F .text	00000058 __copybits
02021940 g     O .rwdata	00000408 __malloc_av_
0200bf8c g     F .text	00000004 __sinit_lock_release
020006d8 g     F .text	00000078 i2c_stop
02024f84 g     O .bss	00000004 OSTCBHighRdy
020030ec g     F .text	0000002c DEMO_COMPASS
02004fd0 g     F .text	000003c4 __muldf3
0200ef90 g     F .text	00000060 __sread
02020bcc g     O .rodata	00000010 __thenan_sf
0200c3e4 g     F .text	00000040 fread
02024f88 g     O .bss	00000004 OSQFreeList
02020064 g     F .text	00000120 alt_find_file
0201efb8 g     F .text	000000b4 alt_dev_llist_insert
02014890 g     F .text	00000108 __malloc_lock
0201428c g     F .text	000000bc sbrk
02014b98 g     F .text	00000144 OSEventNameSet
0200bcf8 g     F .text	000001fc _fflush_r
020114e8 g     F .text	000000b4 _calloc_r
02024f8c g     O .bss	00000001 OSRdyGrp
02023090 g     O .rwdata	00000008 alt_flash_dev_list
02001a10 g     F .text	000000cc Flash_InfoDump
02024f00 g       *ABS*	00000000 __bss_start
02024f10 g     O .bss	00000004 bKeyPressed
0200d468 g     F .text	00000098 memset
0200324c g     F .text	000000c4 main
02024f40 g     O .bss	00000004 alt_envp
02024f1c g     O .bss	00000004 __malloc_max_total_mem
0201d840 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
02000874 g     F .text	0000014c i2c_read
02021208 g     O .rodata	00000100 OSUnMapTbl
020131ac g     F .text	00000078 __ltsf2
0200c1e8 g     F .text	000001fc _fread_r
020230ea g     O .rwdata	00000002 OSSemEn
02017d78 g     F .text	000003a8 OSFlagPost
0200eea4 g     F .text	00000008 __sclose
020043a4 g     F .text	00000008 matherr
04000000 g       *ABS*	00000000 __alt_heap_limit
0201171c g     F .text	00000014 fclose
02015bfc g     F .text	00000110 OS_EventTaskWait
02010718 g     F .text	00000244 _strtol_r
02005904 g     F .text	00000074 __truncdfsf2
020167e8 g     F .text	000000c8 OS_TaskStatStkChk
02028428 g     O .bss	00000190 _atexit0
0201bab0 g     F .text	00000170 OSTaskDelReq
0200a744 g     F .text	000015b4 _dtoa_r
0200637c g     F .text	00000740 _malloc_r
0202308c g     O .rwdata	00000004 alt_errno
020156d0 g     F .text	00000070 OSStart
020111dc g     F .text	000000dc __submore
02014834 g     F .text	0000005c __env_unlock
0200cdc8 g     F .text	000000b8 _fwalk
0201bf9c g     F .text	00000218 OSTaskResume
02018c94 g     F .text	000000fc OSMemQuery
020230fc g     O .rwdata	00000002 OSTaskStatEn
0200d1c4 g     F .text	00000040 _mbtowc_r
020230d6 g     O .rwdata	00000002 OSMemMax
02019bac g     F .text	00000188 OSQPostFront
02001558 g     F .text	000000c8 vector_normalize
020059f4 g     F .text	00000060 __divsi3
02024f8d g     O .bss	00000003 OSRdyTbl
020230b0 g     O .rwdata	00000002 OSDebugEn
02020bdc g     O .rodata	00000014 __thenan_df
0200c424 g     F .text	0000012c _malloc_trim_r
02020720 g       *ABS*	00000000 __CTOR_END__
02004664 g     F .text	000001e0 __mulsf3
020230c8 g     O .rwdata	00000002 OSFlagNodeSize
02023110 g     O .rwdata	00000002 OSTmrCfgMax
0201d220 g     F .text	00000280 alt_epcs_flash_write
0200eff0 g     F .text	000000bc strcmp
02018fb4 g     F .text	00000214 OSQCreate
0201bc20 g     F .text	000001b8 OSTaskNameGet
02020720 g       *ABS*	00000000 __flash_rodata_start
02019d34 g     F .text	00000234 OSQPostOpt
020157ec g     F .text	00000240 OSTimeTick
020230f8 g     O .rwdata	00000002 OSTaskMax
02020720 g       *ABS*	00000000 __DTOR_LIST__
0201a254 g     F .text	00000114 OSSemCreate
0202311c g     O .rwdata	00000002 OSTmrWheelSize
020132ac g     F .text	00000088 __nedf2
02000d9c g     F .text	00000088 readMagReg
020230f2 g     O .rwdata	00000002 OSTaskDelEn
0201ab28 g     F .text	00000130 OSSemQuery
020191c8 g     F .text	00000300 OSQDel
020198b0 g     F .text	0000017c OSQPendAbort
0201cd34 g     F .text	00000034 alt_irq_init
0201422c g     F .text	00000060 alt_release_fd
02024f08 g     O .bss	00000001 acc_address
02003cc4 g     F .text	00000698 atan
020029dc g     F .text	00000044 SPI_Write
0200edd0 g     F .text	00000074 sprintf
02020bf0 g     O .rodata	00000100 __clz_tab
020021c0 g     F .text	000000e8 Flash_Size
02024f2c g     O .bss	00000004 _PathLocale
020105d8 g     F .text	00000124 strtof
02020308 g     F .text	00000014 atexit
02011470 g     F .text	00000078 _write_r
02003118 g     F .text	0000001c DEMO_ACCELEROMETER
02015560 g     F .text	0000008c OSSchedLock
0200cf54 g     F .text	0000001c setlocale
02006c8c g     F .text	00000048 scanf
02017050 g     F .text	0000013c OSFlagCreate
0200edc8 g     F .text	00000008 nanf
0202305c g     O .rwdata	00000004 _impure_ptr
02024f38 g     O .bss	00000004 alt_argc
0200d104 g     F .text	00000080 _mbrtowc_r
0201f130 g     F .text	00000064 _do_dtors
020230c2 g     O .rwdata	00000002 OSEventMultiEn
0200eae8 g     F .text	000001c4 __srefill_r
0201718c g     F .text	000002a8 OSFlagDel
02024f90 g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
0200d6bc g     F .text	00000080 __ulp
0200ecc8 g     F .text	00000040 __isinfd
020176cc g     F .text	00000644 OSFlagPend
0202310e g     O .rwdata	00000002 OSTmrEn
0200c044 g     F .text	00000018 __fp_unlock_all
020003e4 g     F .text	00000110 I2C_MultipleWrite
02023078 g     O .rwdata	00000008 alt_fs_list
020165ec g     F .text	00000080 OS_StrCopy
020230d8 g     O .rwdata	00000002 OSMemNameSize
02000d28 g     F .text	00000074 writeMagReg
0201fdd4 g     F .text	0000001c OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
02023104 g     O .rwdata	00000002 OSTCBPrioTblMax
0200cec0 g     F .text	00000010 localeconv
0201e80c g     F .text	0000014c epcs_read_buffer
020039fc g     F .text	000002c8 __ieee754_sqrt
02023100 g     O .rwdata	00000002 OSTaskStatStkChkEn
0201ce04 g     F .text	00000054 alt_epcs_flash_init
0201f258 g     F .text	00000050 alt_ic_isr_register
020230d4 g     O .rwdata	00000002 OSMemEn
020117c8 g     F .text	00000068 __hexdig_init
020230de g     O .rwdata	00000002 OSMutexEn
02023124 g       *ABS*	00000000 _edata
020285b8 g       *ABS*	00000000 _end
020138c4 g     F .text	0000007c alt_flash_open_dev
02024f94 g     O .bss	00000001 OSIntNesting
020001bc g       *ABS*	00000000 __ram_exceptions_end
0200a37c g     F .text	00000074 vfscanf
0201deb4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0201ca5c g     F .text	00000210 OSTimeDlyResume
02017578 g     F .text	00000154 OSFlagNameSet
0201c1b4 g     F .text	000001fc OSTaskStkChk
0201f344 g     F .text	000000a0 alt_ic_irq_disable
0201ec68 g     F .text	00000058 epcs_enter_4_bytes_mode
020230da g     O .rwdata	00000002 OSMemSize
02001df8 g     F .text	00000250 Flash_Write
0200ef14 g     F .text	0000007c __swrite
02023064 g     O .rwdata	00000004 __malloc_trim_threshold
02002ea4 g     F .text	00000248 DEMO_ENCODERS
0201f924 g     F .text	00000020 altera_nios2_qsys_irq_init
02024f98 g     O .bss	00000004 OSTCBCur
0202031c g     F .text	00000038 exit
02024fe0 g     O .bss	0000000c a
020230dc g     O .rwdata	00000002 OSMemTblSize
0200cd00 g     F .text	000000c8 _fwalk_reent
02004a0c g     F .text	000000c0 __floatunsisf
0200dcb8 g     F .text	0000018c __mdiff
02013940 g     F .text	00000054 alt_flash_close_dev
02005a54 g     F .text	00000060 __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
0200bf84 g     F .text	00000004 __sfp_lock_release
02015390 g     F .text	00000054 OSInit
02000000 g       *ABS*	00000000 __alt_mem_sdram
0201c5dc g     F .text	00000144 OSTaskQuery
02024fec g     O .bss	0000000c m_max
02001794 g     F .text	00000068 ADXL345_SPI_IsDataReady
0201a0e8 g     F .text	000000ac OS_QInit
0200ed08 g     F .text	000000c0 __sccl
0201666c g     F .text	00000058 OS_StrLen
02018a84 g     F .text	00000120 OSMemNameSet
02020da0 g     O .rodata	00000101 _ctype_
020230f6 g     O .rwdata	00000002 OSTaskProfileEn
02024f9c g     O .bss	00000004 OSTime
020028a4 g     F .text	00000138 SPI_MultipleWrite
020135d8 g     F .text	000000a8 __fpcmp_parts_f
02026a84 g     O .bss	00000800 OSTaskIdleStk
020206f0 g     F .text	0000002c _exit
02004374 g     F .text	00000030 __isnand
0201ed18 g     F .text	00000154 alt_alarm_start
02017434 g     F .text	00000144 OSFlagNameGet
0201cc6c g     F .text	00000064 OSTimeGet
02024ff8 g     O .bss	0000000c m
02005ac4 g     F .text	00000098 __muldi3
0200cf70 g     F .text	00000194 __smakebuf_r
02006cd4 g     F .text	00000074 strlen
0201e958 g     F .text	00000050 epcs_write_enable
0201fd64 g     F .text	0000001c OSTaskSwHook
0201f73c g     F .text	00000188 open
02027284 g     O .bss	00000b40 OSEventTbl
02013334 g     F .text	00000088 __gedf2
02027dc4 g     O .bss	00000510 OSTCBTbl
020118e0 g     F .text	000007b8 __gethex
0201ac58 g     F .text	00000104 OSSemSet
0201f228 g     F .text	00000030 alt_icache_flush_all
02002858 g     F .text	0000004c SPI_Init
02023098 g     O .rwdata	00000004 alt_priority_mask
0201a368 g     F .text	000002a0 OSSemDel
02024fa0 g     O .bss	00000004 OSFlagFreeList
0201f2a8 g     F .text	0000009c alt_ic_irq_enable
020230bc g     O .rwdata	00000002 OSEventNameSize
02008c4c g     F .text	00000024 __vfprintf_internal
02024fa4 g     O .bss	00000001 OSStatRdy
04000000 g       *ABS*	00000000 __alt_mem_epcs
020282d4 g     O .bss	00000054 OSTCBPrioTbl
02014788 g     F .text	000000ac __env_lock
02023102 g     O .rwdata	00000002 OSTaskSwHookEn
02004edc g     F .text	00000080 __subdf3
0201d750 g     F .text	00000098 alt_epcs_flash_read
02002b78 g     F .text	00000044 SPI_Read
02000bbc g     F .text	00000020 timeoutOccurred
0200d598 g     F .text	000000c4 __lo0bits
02002048 g     F .text	000000f4 Flash_Erase
02008c70 g     F .text	00001680 __svfscanf_r
02024f0c g     O .bss	00000004 did_timeout
020230a0 g     O .rwdata	00000008 alt_alarm_list
020112b8 g     F .text	0000019c _ungetc_r
020230ca g     O .rwdata	00000002 OSFlagWidth
0201f0cc g     F .text	00000064 _do_ctors
02013680 g     F .text	000000fc close
02004600 g     F .text	00000064 __addsf3
02024f50 g     O .bss	00000004 alt_envsem
02024fa8 g     O .bss	00000004 OSIdleCtrRun
02015a2c g     F .text	00000020 OSVersion
02023114 g     O .rwdata	00000002 OSTmrCfgWheelSize
02013da8 g     F .text	00000080 alt_load
0201c720 g     F .text	0000007c OS_TaskStkClr
02005e30 g     F .text	00000314 __pack_d
020230ee g     O .rwdata	00000002 OSTaskCreateEn
0201601c g     F .text	00000068 OS_EventWaitListInit
0201fdf0 g     F .text	0000001c OSTaskIdleHook
02006354 g     F .text	00000014 free
0200bf88 g     F .text	00000004 __sinit_lock_acquire
0201ea0c g     F .text	00000170 epcs_write_buffer
0200e1b4 g     F .text	00000100 __multadd
0201c3b0 g     F .text	0000022c OSTaskSuspend
0200d500 g     F .text	00000028 _Bfree
02001080 g     F .text	000002fc heading
020166c4 g     F .text	0000005c OS_TaskIdle
0202311a g     O .rwdata	00000002 OSTmrTblSize
02019f68 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00810014 	movui	r2,1024
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08406f14 	ori	at,at,444
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 20000fc:	20153e40 	call	20153e4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000100:	0005313a 	rdctl	r2,ipending
 2000104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 2000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000114:	00800044 	movi	r2,1
 2000118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200011c:	e0ffff17 	ldw	r3,-4(fp)
 2000120:	e0bffe17 	ldw	r2,-8(fp)
 2000124:	1884703a 	and	r2,r3,r2
 2000128:	1005003a 	cmpeq	r2,r2,zero
 200012c:	1000161e 	bne	r2,zero,2000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 2000130:	e0bffd17 	ldw	r2,-12(fp)
 2000134:	00c080f4 	movhi	r3,515
 2000138:	18e0ca04 	addi	r3,r3,-31960
 200013c:	100490fa 	slli	r2,r2,3
 2000140:	10c5883a 	add	r2,r2,r3
 2000144:	11400017 	ldw	r5,0(r2)
 2000148:	e0bffd17 	ldw	r2,-12(fp)
 200014c:	00c080f4 	movhi	r3,515
 2000150:	18e0ca04 	addi	r3,r3,-31960
 2000154:	100490fa 	slli	r2,r2,3
 2000158:	10c5883a 	add	r2,r2,r3
 200015c:	10800104 	addi	r2,r2,4
 2000160:	11000017 	ldw	r4,0(r2)
 2000164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000168:	0005313a 	rdctl	r2,ipending
 200016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 2000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000178:	e0bfff17 	ldw	r2,-4(fp)
 200017c:	1004c03a 	cmpne	r2,r2,zero
 2000180:	103fe31e 	bne	r2,zero,2000110 <alt_irq_handler+0x24>
 2000184:	00000706 	br	20001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000188:	e0bffe17 	ldw	r2,-8(fp)
 200018c:	1085883a 	add	r2,r2,r2
 2000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000194:	e0bffd17 	ldw	r2,-12(fp)
 2000198:	10800044 	addi	r2,r2,1
 200019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a0:	003fde06 	br	200011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001a4:	20154600 	call	2015460 <OSIntExit>
}
 20001a8:	e037883a 	mov	sp,fp
 20001ac:	dfc00117 	ldw	ra,4(sp)
 20001b0:	df000017 	ldw	fp,0(sp)
 20001b4:	dec00204 	addi	sp,sp,8
 20001b8:	f800283a 	ret

Disassembly of section .text:

020001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 20001bc:	00808014 	movui	r2,512
#endif

0:
    initd 0(r2)
 20001c0:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 20001c4:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 20001c8:	00bffd16 	blt	zero,r2,20001c0 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001cc:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001d0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001d4:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 20001d8:	d6ac1614 	ori	gp,gp,45144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001dc:	008080b4 	movhi	r2,514
    ori r2, r2, %lo(__bss_start)
 20001e0:	1093c014 	ori	r2,r2,20224

    movhi r3, %hi(__bss_end)
 20001e4:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 20001e8:	18e16e14 	ori	r3,r3,34232

    beq r2, r3, 1f
 20001ec:	10c00326 	beq	r2,r3,20001fc <_start+0x40>

0:
    stw zero, (r2)
 20001f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001f8:	10fffd36 	bltu	r2,r3,20001f0 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001fc:	2013da80 	call	2013da8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000200:	2013fe40 	call	2013fe4 <alt_main>

02000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000204:	003fff06 	br	2000204 <alt_after_alt_main>

02000208 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 2000208:	defff804 	addi	sp,sp,-32
 200020c:	dfc00715 	stw	ra,28(sp)
 2000210:	df000615 	stw	fp,24(sp)
 2000214:	df000604 	addi	fp,sp,24
 2000218:	e13ffb15 	stw	r4,-20(fp)
 200021c:	e17ffc15 	stw	r5,-16(fp)
 2000220:	e0800217 	ldw	r2,8(fp)
 2000224:	e1bffd05 	stb	r6,-12(fp)
 2000228:	e1fffe05 	stb	r7,-8(fp)
 200022c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 2000230:	00800044 	movi	r2,1
 2000234:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2000238:	e13ffb17 	ldw	r4,-20(fp)
 200023c:	e17ffc17 	ldw	r5,-16(fp)
 2000240:	20006500 	call	2000650 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2000244:	e0bffd03 	ldbu	r2,-12(fp)
 2000248:	11803fcc 	andi	r6,r2,255
 200024c:	e13ffb17 	ldw	r4,-20(fp)
 2000250:	e17ffc17 	ldw	r5,-16(fp)
 2000254:	20007500 	call	2000750 <i2c_write>
 2000258:	1004c03a 	cmpne	r2,r2,zero
 200025c:	1000011e 	bne	r2,zero,2000264 <I2C_Write+0x5c>
        bSuccess = FALSE;
 2000260:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2000264:	e0bffa17 	ldw	r2,-24(fp)
 2000268:	1005003a 	cmpeq	r2,r2,zero
 200026c:	1000071e 	bne	r2,zero,200028c <I2C_Write+0x84>
 2000270:	e1bffe03 	ldbu	r6,-8(fp)
 2000274:	e13ffb17 	ldw	r4,-20(fp)
 2000278:	e17ffc17 	ldw	r5,-16(fp)
 200027c:	20007500 	call	2000750 <i2c_write>
 2000280:	1004c03a 	cmpne	r2,r2,zero
 2000284:	1000011e 	bne	r2,zero,200028c <I2C_Write+0x84>
        bSuccess = FALSE;
 2000288:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 200028c:	e0bffa17 	ldw	r2,-24(fp)
 2000290:	1005003a 	cmpeq	r2,r2,zero
 2000294:	1000071e 	bne	r2,zero,20002b4 <I2C_Write+0xac>
 2000298:	e1bfff03 	ldbu	r6,-4(fp)
 200029c:	e13ffb17 	ldw	r4,-20(fp)
 20002a0:	e17ffc17 	ldw	r5,-16(fp)
 20002a4:	20007500 	call	2000750 <i2c_write>
 20002a8:	1004c03a 	cmpne	r2,r2,zero
 20002ac:	1000011e 	bne	r2,zero,20002b4 <I2C_Write+0xac>
        bSuccess = FALSE;
 20002b0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 20002b4:	e13ffb17 	ldw	r4,-20(fp)
 20002b8:	e17ffc17 	ldw	r5,-16(fp)
 20002bc:	20006d80 	call	20006d8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 20002c0:	0106d604 	movi	r4,7000
 20002c4:	20144f00 	call	20144f0 <usleep>
    
    return bSuccess;
 20002c8:	e0bffa17 	ldw	r2,-24(fp)

    
}
 20002cc:	e037883a 	mov	sp,fp
 20002d0:	dfc00117 	ldw	ra,4(sp)
 20002d4:	df000017 	ldw	fp,0(sp)
 20002d8:	dec00204 	addi	sp,sp,8
 20002dc:	f800283a 	ret

020002e0 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 20002e0:	defff904 	addi	sp,sp,-28
 20002e4:	dfc00615 	stw	ra,24(sp)
 20002e8:	df000515 	stw	fp,20(sp)
 20002ec:	df000504 	addi	fp,sp,20
 20002f0:	e13ffc15 	stw	r4,-16(fp)
 20002f4:	e17ffd15 	stw	r5,-12(fp)
 20002f8:	e1bffe05 	stb	r6,-8(fp)
 20002fc:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
 2000300:	00800044 	movi	r2,1
 2000304:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2000308:	e13ffc17 	ldw	r4,-16(fp)
 200030c:	e17ffd17 	ldw	r5,-12(fp)
 2000310:	20006500 	call	2000650 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2000314:	e0bffe03 	ldbu	r2,-8(fp)
 2000318:	11803fcc 	andi	r6,r2,255
 200031c:	e13ffc17 	ldw	r4,-16(fp)
 2000320:	e17ffd17 	ldw	r5,-12(fp)
 2000324:	20007500 	call	2000750 <i2c_write>
 2000328:	1004c03a 	cmpne	r2,r2,zero
 200032c:	1000011e 	bne	r2,zero,2000334 <I2C_Read+0x54>
        bSuccess = FALSE;
 2000330:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2000334:	e0bffb17 	ldw	r2,-20(fp)
 2000338:	1005003a 	cmpeq	r2,r2,zero
 200033c:	1000071e 	bne	r2,zero,200035c <I2C_Read+0x7c>
 2000340:	e1bfff03 	ldbu	r6,-4(fp)
 2000344:	e13ffc17 	ldw	r4,-16(fp)
 2000348:	e17ffd17 	ldw	r5,-12(fp)
 200034c:	20007500 	call	2000750 <i2c_write>
 2000350:	1004c03a 	cmpne	r2,r2,zero
 2000354:	1000011e 	bne	r2,zero,200035c <I2C_Read+0x7c>
        bSuccess = FALSE;
 2000358:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
 200035c:	e13ffc17 	ldw	r4,-16(fp)
 2000360:	e17ffd17 	ldw	r5,-12(fp)
 2000364:	20006500 	call	2000650 <i2c_start>
    DeviceAddr |= 1; // Read
 2000368:	e0bffe03 	ldbu	r2,-8(fp)
 200036c:	10800054 	ori	r2,r2,1
 2000370:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 2000374:	e0bffb17 	ldw	r2,-20(fp)
 2000378:	1005003a 	cmpeq	r2,r2,zero
 200037c:	1000081e 	bne	r2,zero,20003a0 <I2C_Read+0xc0>
 2000380:	e0bffe03 	ldbu	r2,-8(fp)
 2000384:	11803fcc 	andi	r6,r2,255
 2000388:	e13ffc17 	ldw	r4,-16(fp)
 200038c:	e17ffd17 	ldw	r5,-12(fp)
 2000390:	20007500 	call	2000750 <i2c_write>
 2000394:	1004c03a 	cmpne	r2,r2,zero
 2000398:	1000011e 	bne	r2,zero,20003a0 <I2C_Read+0xc0>
        bSuccess = FALSE;
 200039c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 20003a0:	e0bffb17 	ldw	r2,-20(fp)
 20003a4:	1005003a 	cmpeq	r2,r2,zero
 20003a8:	1000051e 	bne	r2,zero,20003c0 <I2C_Read+0xe0>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 20003ac:	e13ffc17 	ldw	r4,-16(fp)
 20003b0:	e17ffd17 	ldw	r5,-12(fp)
 20003b4:	e1800217 	ldw	r6,8(fp)
 20003b8:	000f883a 	mov	r7,zero
 20003bc:	20008740 	call	2000874 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 20003c0:	e13ffc17 	ldw	r4,-16(fp)
 20003c4:	e17ffd17 	ldw	r5,-12(fp)
 20003c8:	20006d80 	call	20006d8 <i2c_stop>
    
    return bSuccess;
 20003cc:	e0bffb17 	ldw	r2,-20(fp)
}
 20003d0:	e037883a 	mov	sp,fp
 20003d4:	dfc00117 	ldw	ra,4(sp)
 20003d8:	df000017 	ldw	fp,0(sp)
 20003dc:	dec00204 	addi	sp,sp,8
 20003e0:	f800283a 	ret

020003e4 <I2C_MultipleWrite>:


bool I2C_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pData, alt_u16 len){
 20003e4:	defff704 	addi	sp,sp,-36
 20003e8:	dfc00815 	stw	ra,32(sp)
 20003ec:	df000715 	stw	fp,28(sp)
 20003f0:	df000704 	addi	fp,sp,28
 20003f4:	e13ffb15 	stw	r4,-20(fp)
 20003f8:	e17ffc15 	stw	r5,-16(fp)
 20003fc:	e0800317 	ldw	r2,12(fp)
 2000400:	e1bffd05 	stb	r6,-12(fp)
 2000404:	e1fffe05 	stb	r7,-8(fp)
 2000408:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 200040c:	00800044 	movi	r2,1
 2000410:	e0bffa15 	stw	r2,-24(fp)
    int i;

    i2c_start(clk_base, data_base);
 2000414:	e13ffb17 	ldw	r4,-20(fp)
 2000418:	e17ffc17 	ldw	r5,-16(fp)
 200041c:	20006500 	call	2000650 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2000420:	e0bffd03 	ldbu	r2,-12(fp)
 2000424:	11803fcc 	andi	r6,r2,255
 2000428:	e13ffb17 	ldw	r4,-20(fp)
 200042c:	e17ffc17 	ldw	r5,-16(fp)
 2000430:	20007500 	call	2000750 <i2c_write>
 2000434:	1004c03a 	cmpne	r2,r2,zero
 2000438:	1000011e 	bne	r2,zero,2000440 <I2C_MultipleWrite+0x5c>
        bSuccess = FALSE;
 200043c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2000440:	e0bffa17 	ldw	r2,-24(fp)
 2000444:	1005003a 	cmpeq	r2,r2,zero
 2000448:	1000071e 	bne	r2,zero,2000468 <I2C_MultipleWrite+0x84>
 200044c:	e1bffe03 	ldbu	r6,-8(fp)
 2000450:	e13ffb17 	ldw	r4,-20(fp)
 2000454:	e17ffc17 	ldw	r5,-16(fp)
 2000458:	20007500 	call	2000750 <i2c_write>
 200045c:	1004c03a 	cmpne	r2,r2,zero
 2000460:	1000011e 	bne	r2,zero,2000468 <I2C_MultipleWrite+0x84>
        bSuccess = FALSE;
 2000464:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess){
 2000468:	e0bffa17 	ldw	r2,-24(fp)
 200046c:	1005003a 	cmpeq	r2,r2,zero
 2000470:	1000151e 	bne	r2,zero,20004c8 <I2C_MultipleWrite+0xe4>
        for(i=0;i<len && bSuccess;i++){
 2000474:	e03ff915 	stw	zero,-28(fp)
 2000478:	00000d06 	br	20004b0 <I2C_MultipleWrite+0xcc>
            bSuccess = i2c_write(clk_base, data_base, *pData);
 200047c:	e0800217 	ldw	r2,8(fp)
 2000480:	10800003 	ldbu	r2,0(r2)
 2000484:	11803fcc 	andi	r6,r2,255
 2000488:	e13ffb17 	ldw	r4,-20(fp)
 200048c:	e17ffc17 	ldw	r5,-16(fp)
 2000490:	20007500 	call	2000750 <i2c_write>
 2000494:	e0bffa15 	stw	r2,-24(fp)
            pData++;
 2000498:	e0800217 	ldw	r2,8(fp)
 200049c:	10800044 	addi	r2,r2,1
 20004a0:	e0800215 	stw	r2,8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 20004a4:	e0bff917 	ldw	r2,-28(fp)
 20004a8:	10800044 	addi	r2,r2,1
 20004ac:	e0bff915 	stw	r2,-28(fp)
 20004b0:	e0ffff0b 	ldhu	r3,-4(fp)
 20004b4:	e0bff917 	ldw	r2,-28(fp)
 20004b8:	10c0030e 	bge	r2,r3,20004c8 <I2C_MultipleWrite+0xe4>
 20004bc:	e0bffa17 	ldw	r2,-24(fp)
 20004c0:	1004c03a 	cmpne	r2,r2,zero
 20004c4:	103fed1e 	bne	r2,zero,200047c <I2C_MultipleWrite+0x98>
            pData++;
        }
        if (!bSuccess)         
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 20004c8:	e13ffb17 	ldw	r4,-20(fp)
 20004cc:	e17ffc17 	ldw	r5,-16(fp)
 20004d0:	20006d80 	call	20006d8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 20004d4:	0106d604 	movi	r4,7000
 20004d8:	20144f00 	call	20144f0 <usleep>
    
    return bSuccess;
 20004dc:	e0bffa17 	ldw	r2,-24(fp)

    
}
 20004e0:	e037883a 	mov	sp,fp
 20004e4:	dfc00117 	ldw	ra,4(sp)
 20004e8:	df000017 	ldw	fp,0(sp)
 20004ec:	dec00204 	addi	sp,sp,8
 20004f0:	f800283a 	ret

020004f4 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
 20004f4:	defff704 	addi	sp,sp,-36
 20004f8:	dfc00815 	stw	ra,32(sp)
 20004fc:	df000715 	stw	fp,28(sp)
 2000500:	df000704 	addi	fp,sp,28
 2000504:	e13ffb15 	stw	r4,-20(fp)
 2000508:	e17ffc15 	stw	r5,-16(fp)
 200050c:	e0800317 	ldw	r2,12(fp)
 2000510:	e1bffd05 	stb	r6,-12(fp)
 2000514:	e1fffe05 	stb	r7,-8(fp)
 2000518:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 200051c:	00800044 	movi	r2,1
 2000520:	e0bff915 	stw	r2,-28(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2000524:	e13ffb17 	ldw	r4,-20(fp)
 2000528:	e17ffc17 	ldw	r5,-16(fp)
 200052c:	20006500 	call	2000650 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2000530:	e0bffd03 	ldbu	r2,-12(fp)
 2000534:	11803fcc 	andi	r6,r2,255
 2000538:	e13ffb17 	ldw	r4,-20(fp)
 200053c:	e17ffc17 	ldw	r5,-16(fp)
 2000540:	20007500 	call	2000750 <i2c_write>
 2000544:	1004c03a 	cmpne	r2,r2,zero
 2000548:	1000011e 	bne	r2,zero,2000550 <I2C_MultipleRead+0x5c>
        bSuccess = FALSE;
 200054c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2000550:	e0bff917 	ldw	r2,-28(fp)
 2000554:	1005003a 	cmpeq	r2,r2,zero
 2000558:	1000071e 	bne	r2,zero,2000578 <I2C_MultipleRead+0x84>
 200055c:	e1bffe03 	ldbu	r6,-8(fp)
 2000560:	e13ffb17 	ldw	r4,-20(fp)
 2000564:	e17ffc17 	ldw	r5,-16(fp)
 2000568:	20007500 	call	2000750 <i2c_write>
 200056c:	1004c03a 	cmpne	r2,r2,zero
 2000570:	1000011e 	bne	r2,zero,2000578 <I2C_MultipleRead+0x84>
        bSuccess = FALSE;
 2000574:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
 2000578:	e0bff917 	ldw	r2,-28(fp)
 200057c:	1005003a 	cmpeq	r2,r2,zero
 2000580:	1000031e 	bne	r2,zero,2000590 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
 2000584:	e13ffb17 	ldw	r4,-20(fp)
 2000588:	e17ffc17 	ldw	r5,-16(fp)
 200058c:	20006500 	call	2000650 <i2c_start>
    DeviceAddr |= 1; // Read
 2000590:	e0bffd03 	ldbu	r2,-12(fp)
 2000594:	10800054 	ori	r2,r2,1
 2000598:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 200059c:	e0bff917 	ldw	r2,-28(fp)
 20005a0:	1005003a 	cmpeq	r2,r2,zero
 20005a4:	1000081e 	bne	r2,zero,20005c8 <I2C_MultipleRead+0xd4>
 20005a8:	e0bffd03 	ldbu	r2,-12(fp)
 20005ac:	11803fcc 	andi	r6,r2,255
 20005b0:	e13ffb17 	ldw	r4,-20(fp)
 20005b4:	e17ffc17 	ldw	r5,-16(fp)
 20005b8:	20007500 	call	2000750 <i2c_write>
 20005bc:	1004c03a 	cmpne	r2,r2,zero
 20005c0:	1000011e 	bne	r2,zero,20005c8 <I2C_MultipleRead+0xd4>
        bSuccess = FALSE;
 20005c4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 20005c8:	e0bff917 	ldw	r2,-28(fp)
 20005cc:	1005003a 	cmpeq	r2,r2,zero
 20005d0:	1000161e 	bne	r2,zero,200062c <I2C_MultipleRead+0x138>
        for(i=0;i<len && bSuccess;i++){
 20005d4:	e03ffa15 	stw	zero,-24(fp)
 20005d8:	00000e06 	br	2000614 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
 20005dc:	e0bfff0b 	ldhu	r2,-4(fp)
 20005e0:	10ffffc4 	addi	r3,r2,-1
 20005e4:	e0bffa17 	ldw	r2,-24(fp)
 20005e8:	188ec03a 	cmpne	r7,r3,r2
 20005ec:	e13ffb17 	ldw	r4,-20(fp)
 20005f0:	e17ffc17 	ldw	r5,-16(fp)
 20005f4:	e1800217 	ldw	r6,8(fp)
 20005f8:	20008740 	call	2000874 <i2c_read>
            pBuf++;
 20005fc:	e0800217 	ldw	r2,8(fp)
 2000600:	10800044 	addi	r2,r2,1
 2000604:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 2000608:	e0bffa17 	ldw	r2,-24(fp)
 200060c:	10800044 	addi	r2,r2,1
 2000610:	e0bffa15 	stw	r2,-24(fp)
 2000614:	e0ffff0b 	ldhu	r3,-4(fp)
 2000618:	e0bffa17 	ldw	r2,-24(fp)
 200061c:	10c0030e 	bge	r2,r3,200062c <I2C_MultipleRead+0x138>
 2000620:	e0bff917 	ldw	r2,-28(fp)
 2000624:	1004c03a 	cmpne	r2,r2,zero
 2000628:	103fec1e 	bne	r2,zero,20005dc <I2C_MultipleRead+0xe8>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
 200062c:	e13ffb17 	ldw	r4,-20(fp)
 2000630:	e17ffc17 	ldw	r5,-16(fp)
 2000634:	20006d80 	call	20006d8 <i2c_stop>
    
    return bSuccess;    
 2000638:	e0bff917 	ldw	r2,-28(fp)
    
}
 200063c:	e037883a 	mov	sp,fp
 2000640:	dfc00117 	ldw	ra,4(sp)
 2000644:	df000017 	ldw	fp,0(sp)
 2000648:	dec00204 	addi	sp,sp,8
 200064c:	f800283a 	ret

02000650 <i2c_start>:
///////////// Internal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 2000650:	defffc04 	addi	sp,sp,-16
 2000654:	dfc00315 	stw	ra,12(sp)
 2000658:	df000215 	stw	fp,8(sp)
 200065c:	df000204 	addi	fp,sp,8
 2000660:	e13ffe15 	stw	r4,-8(fp)
 2000664:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 2000668:	e0bfff17 	ldw	r2,-4(fp)
 200066c:	10800104 	addi	r2,r2,4
 2000670:	1007883a 	mov	r3,r2
 2000674:	00800044 	movi	r2,1
 2000678:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
 200067c:	e0bfff17 	ldw	r2,-4(fp)
 2000680:	1007883a 	mov	r3,r2
 2000684:	00800044 	movi	r2,1
 2000688:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
 200068c:	e0bffe17 	ldw	r2,-8(fp)
 2000690:	1007883a 	mov	r3,r2
 2000694:	00800044 	movi	r2,1
 2000698:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
 200069c:	01000044 	movi	r4,1
 20006a0:	20144f00 	call	20144f0 <usleep>
     
    SDA_LOW(data_base); // data low
 20006a4:	e0bfff17 	ldw	r2,-4(fp)
 20006a8:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
 20006ac:	01000044 	movi	r4,1
 20006b0:	20144f00 	call	20144f0 <usleep>
    SCL_LOW(clk_base); // clock low
 20006b4:	e0bffe17 	ldw	r2,-8(fp)
 20006b8:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
 20006bc:	01000044 	movi	r4,1
 20006c0:	20144f00 	call	20144f0 <usleep>
}
 20006c4:	e037883a 	mov	sp,fp
 20006c8:	dfc00117 	ldw	ra,4(sp)
 20006cc:	df000017 	ldw	fp,0(sp)
 20006d0:	dec00204 	addi	sp,sp,8
 20006d4:	f800283a 	ret

020006d8 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 20006d8:	defffc04 	addi	sp,sp,-16
 20006dc:	dfc00315 	stw	ra,12(sp)
 20006e0:	df000215 	stw	fp,8(sp)
 20006e4:	df000204 	addi	fp,sp,8
 20006e8:	e13ffe15 	stw	r4,-8(fp)
 20006ec:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 20006f0:	e0bfff17 	ldw	r2,-4(fp)
 20006f4:	10800104 	addi	r2,r2,4
 20006f8:	1007883a 	mov	r3,r2
 20006fc:	00800044 	movi	r2,1
 2000700:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 2000704:	e0bfff17 	ldw	r2,-4(fp)
 2000708:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 200070c:	e0bffe17 	ldw	r2,-8(fp)
 2000710:	1007883a 	mov	r3,r2
 2000714:	00800044 	movi	r2,1
 2000718:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
 200071c:	01000044 	movi	r4,1
 2000720:	20144f00 	call	20144f0 <usleep>
    SDA_HIGH(data_base); // data high
 2000724:	e0bfff17 	ldw	r2,-4(fp)
 2000728:	1007883a 	mov	r3,r2
 200072c:	00800044 	movi	r2,1
 2000730:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
 2000734:	01000044 	movi	r4,1
 2000738:	20144f00 	call	20144f0 <usleep>
    

    
}
 200073c:	e037883a 	mov	sp,fp
 2000740:	dfc00117 	ldw	ra,4(sp)
 2000744:	df000017 	ldw	fp,0(sp)
 2000748:	dec00204 	addi	sp,sp,8
 200074c:	f800283a 	ret

02000750 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 2000750:	defff804 	addi	sp,sp,-32
 2000754:	dfc00715 	stw	ra,28(sp)
 2000758:	df000615 	stw	fp,24(sp)
 200075c:	df000604 	addi	fp,sp,24
 2000760:	e13ffd15 	stw	r4,-12(fp)
 2000764:	e17ffe15 	stw	r5,-8(fp)
 2000768:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
 200076c:	00bfe004 	movi	r2,-128
 2000770:	e0bffc05 	stb	r2,-16(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 2000774:	e0bffe17 	ldw	r2,-8(fp)
 2000778:	10800104 	addi	r2,r2,4
 200077c:	1007883a 	mov	r3,r2
 2000780:	00800044 	movi	r2,1
 2000784:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 2000788:	e03ffa15 	stw	zero,-24(fp)
 200078c:	00001f06 	br	200080c <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 2000790:	e0bffd17 	ldw	r2,-12(fp)
 2000794:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 2000798:	e0ffff03 	ldbu	r3,-4(fp)
 200079c:	e0bffc03 	ldbu	r2,-16(fp)
 20007a0:	1884703a 	and	r2,r3,r2
 20007a4:	10803fcc 	andi	r2,r2,255
 20007a8:	1005003a 	cmpeq	r2,r2,zero
 20007ac:	1000051e 	bne	r2,zero,20007c4 <i2c_write+0x74>
            SDA_HIGH(data_base);
 20007b0:	e0bffe17 	ldw	r2,-8(fp)
 20007b4:	1007883a 	mov	r3,r2
 20007b8:	00800044 	movi	r2,1
 20007bc:	18800035 	stwio	r2,0(r3)
 20007c0:	00000206 	br	20007cc <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
 20007c4:	e0bffe17 	ldw	r2,-8(fp)
 20007c8:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 20007cc:	e0bffc03 	ldbu	r2,-16(fp)
 20007d0:	1004d07a 	srli	r2,r2,1
 20007d4:	e0bffc05 	stb	r2,-16(fp)
        // clock high
        SCL_HIGH(clk_base);
 20007d8:	e0bffd17 	ldw	r2,-12(fp)
 20007dc:	1007883a 	mov	r3,r2
 20007e0:	00800044 	movi	r2,1
 20007e4:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 20007e8:	01000044 	movi	r4,1
 20007ec:	20144f00 	call	20144f0 <usleep>
        SCL_LOW(clk_base);
 20007f0:	e0bffd17 	ldw	r2,-12(fp)
 20007f4:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 20007f8:	01000044 	movi	r4,1
 20007fc:	20144f00 	call	20144f0 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 2000800:	e0bffa17 	ldw	r2,-24(fp)
 2000804:	10800044 	addi	r2,r2,1
 2000808:	e0bffa15 	stw	r2,-24(fp)
 200080c:	e0bffa17 	ldw	r2,-24(fp)
 2000810:	10800210 	cmplti	r2,r2,8
 2000814:	103fde1e 	bne	r2,zero,2000790 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 2000818:	e0bffe17 	ldw	r2,-8(fp)
 200081c:	10800104 	addi	r2,r2,4
 2000820:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
 2000824:	e0bffd17 	ldw	r2,-12(fp)
 2000828:	1007883a 	mov	r3,r2
 200082c:	00800044 	movi	r2,1
 2000830:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;  // clock high delay
 2000834:	01000044 	movi	r4,1
 2000838:	20144f00 	call	20144f0 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 200083c:	e0bffe17 	ldw	r2,-8(fp)
 2000840:	10800037 	ldwio	r2,0(r2)
 2000844:	1005003a 	cmpeq	r2,r2,zero
 2000848:	e0bffb15 	stw	r2,-20(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 200084c:	e0bffd17 	ldw	r2,-12(fp)
 2000850:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 2000854:	01000044 	movi	r4,1
 2000858:	20144f00 	call	20144f0 <usleep>
    return bAck;
 200085c:	e0bffb17 	ldw	r2,-20(fp)
}    
 2000860:	e037883a 	mov	sp,fp
 2000864:	dfc00117 	ldw	ra,4(sp)
 2000868:	df000017 	ldw	fp,0(sp)
 200086c:	dec00204 	addi	sp,sp,8
 2000870:	f800283a 	ret

02000874 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 2000874:	defff804 	addi	sp,sp,-32
 2000878:	dfc00715 	stw	ra,28(sp)
 200087c:	df000615 	stw	fp,24(sp)
 2000880:	df000604 	addi	fp,sp,24
 2000884:	e13ffc15 	stw	r4,-16(fp)
 2000888:	e17ffd15 	stw	r5,-12(fp)
 200088c:	e1bffe15 	stw	r6,-8(fp)
 2000890:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 2000894:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 2000898:	e0bffd17 	ldw	r2,-12(fp)
 200089c:	10800104 	addi	r2,r2,4
 20008a0:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
 20008a4:	e0bffc17 	ldw	r2,-16(fp)
 20008a8:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 20008ac:	01000044 	movi	r4,1
 20008b0:	20144f00 	call	20144f0 <usleep>

    for(i=0;i<8;i++){
 20008b4:	e03ffa15 	stw	zero,-24(fp)
 20008b8:	00001706 	br	2000918 <i2c_read+0xa4>
        Data <<= 1;
 20008bc:	e0bffb03 	ldbu	r2,-20(fp)
 20008c0:	1085883a 	add	r2,r2,r2
 20008c4:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
 20008c8:	e0bffc17 	ldw	r2,-16(fp)
 20008cc:	1007883a 	mov	r3,r2
 20008d0:	00800044 	movi	r2,1
 20008d4:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 20008d8:	01000044 	movi	r4,1
 20008dc:	20144f00 	call	20144f0 <usleep>
        if (SDA_READ(data_base))  // read data   
 20008e0:	e0bffd17 	ldw	r2,-12(fp)
 20008e4:	10800037 	ldwio	r2,0(r2)
 20008e8:	1005003a 	cmpeq	r2,r2,zero
 20008ec:	1000031e 	bne	r2,zero,20008fc <i2c_read+0x88>
            Data |= 0x01;
 20008f0:	e0bffb03 	ldbu	r2,-20(fp)
 20008f4:	10800054 	ori	r2,r2,1
 20008f8:	e0bffb05 	stb	r2,-20(fp)
        SCL_LOW(clk_base);  // clock log  
 20008fc:	e0bffc17 	ldw	r2,-16(fp)
 2000900:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 2000904:	01000044 	movi	r4,1
 2000908:	20144f00 	call	20144f0 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 200090c:	e0bffa17 	ldw	r2,-24(fp)
 2000910:	10800044 	addi	r2,r2,1
 2000914:	e0bffa15 	stw	r2,-24(fp)
 2000918:	e0bffa17 	ldw	r2,-24(fp)
 200091c:	10800210 	cmplti	r2,r2,8
 2000920:	103fe61e 	bne	r2,zero,20008bc <i2c_read+0x48>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 2000924:	e0bffc17 	ldw	r2,-16(fp)
 2000928:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 200092c:	e0bffd17 	ldw	r2,-12(fp)
 2000930:	10800104 	addi	r2,r2,4
 2000934:	1007883a 	mov	r3,r2
 2000938:	00800044 	movi	r2,1
 200093c:	18800035 	stwio	r2,0(r3)
    if (bAck)
 2000940:	e0bfff17 	ldw	r2,-4(fp)
 2000944:	1005003a 	cmpeq	r2,r2,zero
 2000948:	1000031e 	bne	r2,zero,2000958 <i2c_read+0xe4>
        SDA_LOW(data_base);
 200094c:	e0bffd17 	ldw	r2,-12(fp)
 2000950:	10000035 	stwio	zero,0(r2)
 2000954:	00000406 	br	2000968 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
 2000958:	e0bffd17 	ldw	r2,-12(fp)
 200095c:	1007883a 	mov	r3,r2
 2000960:	00800044 	movi	r2,1
 2000964:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
 2000968:	e0bffc17 	ldw	r2,-16(fp)
 200096c:	1007883a 	mov	r3,r2
 2000970:	00800044 	movi	r2,1
 2000974:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high  delay
 2000978:	01000044 	movi	r4,1
 200097c:	20144f00 	call	20144f0 <usleep>
    SCL_LOW(clk_base); // clock low
 2000980:	e0bffc17 	ldw	r2,-16(fp)
 2000984:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 2000988:	01000044 	movi	r4,1
 200098c:	20144f00 	call	20144f0 <usleep>
    SDA_LOW(data_base);  // data low
 2000990:	e0bffd17 	ldw	r2,-12(fp)
 2000994:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
 2000998:	01000044 	movi	r4,1
 200099c:	20144f00 	call	20144f0 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 20009a0:	e0fffe17 	ldw	r3,-8(fp)
 20009a4:	e0bffb03 	ldbu	r2,-20(fp)
 20009a8:	18800005 	stb	r2,0(r3)
}
 20009ac:	e037883a 	mov	sp,fp
 20009b0:	dfc00117 	ldw	ra,4(sp)
 20009b4:	df000017 	ldw	fp,0(sp)
 20009b8:	dec00204 	addi	sp,sp,8
 20009bc:	f800283a 	ret

020009c0 <i2c_data_verify>:

//==========================================================
// function for verify

bool i2c_data_verify(alt_u32 scl_base, alt_u32 sda_base, alt_u8 ControlAddr){
 20009c0:	defff704 	addi	sp,sp,-36
 20009c4:	dfc00815 	stw	ra,32(sp)
 20009c8:	df000715 	stw	fp,28(sp)
 20009cc:	df000704 	addi	fp,sp,28
 20009d0:	e13ffd15 	stw	r4,-12(fp)
 20009d4:	e17ffe15 	stw	r5,-8(fp)
 20009d8:	e1bfff05 	stb	r6,-4(fp)
    bool bPass;
    const alt_8 DeviceAddr = 0xA0;
 20009dc:	00bfe804 	movi	r2,-96
 20009e0:	e0bffa45 	stb	r2,-23(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20009e4:	008080b4 	movhi	r2,514
 20009e8:	1093d204 	addi	r2,r2,20296
 20009ec:	10800017 	ldw	r2,0(r2)
    alt_u8 OrgData, TestData, Data;
    
    TestData = alt_nticks();
 20009f0:	e0bffa05 	stb	r2,-24(fp)
    if (TestData == 0)
 20009f4:	e0bffa03 	ldbu	r2,-24(fp)
 20009f8:	1004c03a 	cmpne	r2,r2,zero
 20009fc:	1000021e 	bne	r2,zero,2000a08 <i2c_data_verify+0x48>
        TestData = 0x12;
 2000a00:	00800484 	movi	r2,18
 2000a04:	e0bffa05 	stb	r2,-24(fp)
    
    bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &OrgData);
 2000a08:	e1bffa47 	ldb	r6,-23(fp)
 2000a0c:	e1ffff03 	ldbu	r7,-4(fp)
 2000a10:	e0bffc04 	addi	r2,fp,-16
 2000a14:	d8800015 	stw	r2,0(sp)
 2000a18:	e13ffd17 	ldw	r4,-12(fp)
 2000a1c:	e17ffe17 	ldw	r5,-8(fp)
 2000a20:	20002e00 	call	20002e0 <I2C_Read>
 2000a24:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // write
 2000a28:	e0bffb17 	ldw	r2,-20(fp)
 2000a2c:	1005003a 	cmpeq	r2,r2,zero
 2000a30:	1000081e 	bne	r2,zero,2000a54 <i2c_data_verify+0x94>
        bPass = I2C_Write(scl_base, sda_base, DeviceAddr, ControlAddr, TestData);
 2000a34:	e1bffa47 	ldb	r6,-23(fp)
 2000a38:	e1ffff03 	ldbu	r7,-4(fp)
 2000a3c:	e0bffa03 	ldbu	r2,-24(fp)
 2000a40:	d8800015 	stw	r2,0(sp)
 2000a44:	e13ffd17 	ldw	r4,-12(fp)
 2000a48:	e17ffe17 	ldw	r5,-8(fp)
 2000a4c:	20002080 	call	2000208 <I2C_Write>
 2000a50:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // read        
 2000a54:	e0bffb17 	ldw	r2,-20(fp)
 2000a58:	1005003a 	cmpeq	r2,r2,zero
 2000a5c:	1000081e 	bne	r2,zero,2000a80 <i2c_data_verify+0xc0>
        bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &Data);
 2000a60:	e1bffa47 	ldb	r6,-23(fp)
 2000a64:	e1ffff03 	ldbu	r7,-4(fp)
 2000a68:	e0bffc44 	addi	r2,fp,-15
 2000a6c:	d8800015 	stw	r2,0(sp)
 2000a70:	e13ffd17 	ldw	r4,-12(fp)
 2000a74:	e17ffe17 	ldw	r5,-8(fp)
 2000a78:	20002e00 	call	20002e0 <I2C_Read>
 2000a7c:	e0bffb15 	stw	r2,-20(fp)
    if (bPass && (Data != TestData)) // verify
 2000a80:	e0bffb17 	ldw	r2,-20(fp)
 2000a84:	1005003a 	cmpeq	r2,r2,zero
 2000a88:	1000051e 	bne	r2,zero,2000aa0 <i2c_data_verify+0xe0>
 2000a8c:	e0bffc43 	ldbu	r2,-15(fp)
 2000a90:	10c03fcc 	andi	r3,r2,255
 2000a94:	e0bffa03 	ldbu	r2,-24(fp)
 2000a98:	18800126 	beq	r3,r2,2000aa0 <i2c_data_verify+0xe0>
        bPass = FALSE;        
 2000a9c:	e03ffb15 	stw	zero,-20(fp)
    // restore        
    if (bPass) // write back
 2000aa0:	e0bffb17 	ldw	r2,-20(fp)
 2000aa4:	1005003a 	cmpeq	r2,r2,zero
 2000aa8:	1000091e 	bne	r2,zero,2000ad0 <i2c_data_verify+0x110>
        bPass = I2C_Write(scl_base, sda_base, DeviceAddr, ControlAddr, OrgData);
 2000aac:	e1bffa47 	ldb	r6,-23(fp)
 2000ab0:	e1ffff03 	ldbu	r7,-4(fp)
 2000ab4:	e0bffc03 	ldbu	r2,-16(fp)
 2000ab8:	10803fcc 	andi	r2,r2,255
 2000abc:	d8800015 	stw	r2,0(sp)
 2000ac0:	e13ffd17 	ldw	r4,-12(fp)
 2000ac4:	e17ffe17 	ldw	r5,-8(fp)
 2000ac8:	20002080 	call	2000208 <I2C_Write>
 2000acc:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // read        
 2000ad0:	e0bffb17 	ldw	r2,-20(fp)
 2000ad4:	1005003a 	cmpeq	r2,r2,zero
 2000ad8:	1000081e 	bne	r2,zero,2000afc <i2c_data_verify+0x13c>
        bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &Data);
 2000adc:	e1bffa47 	ldb	r6,-23(fp)
 2000ae0:	e1ffff03 	ldbu	r7,-4(fp)
 2000ae4:	e0bffc44 	addi	r2,fp,-15
 2000ae8:	d8800015 	stw	r2,0(sp)
 2000aec:	e13ffd17 	ldw	r4,-12(fp)
 2000af0:	e17ffe17 	ldw	r5,-8(fp)
 2000af4:	20002e00 	call	20002e0 <I2C_Read>
 2000af8:	e0bffb15 	stw	r2,-20(fp)
    if (bPass && (Data != OrgData)) // verify
 2000afc:	e0bffb17 	ldw	r2,-20(fp)
 2000b00:	1005003a 	cmpeq	r2,r2,zero
 2000b04:	1000061e 	bne	r2,zero,2000b20 <i2c_data_verify+0x160>
 2000b08:	e0bffc43 	ldbu	r2,-15(fp)
 2000b0c:	e0fffc03 	ldbu	r3,-16(fp)
 2000b10:	11003fcc 	andi	r4,r2,255
 2000b14:	18803fcc 	andi	r2,r3,255
 2000b18:	20800126 	beq	r4,r2,2000b20 <i2c_data_verify+0x160>
        bPass = FALSE; 
 2000b1c:	e03ffb15 	stw	zero,-20(fp)
        
    return bPass;
 2000b20:	e0bffb17 	ldw	r2,-20(fp)
}
 2000b24:	e037883a 	mov	sp,fp
 2000b28:	dfc00117 	ldw	ra,4(sp)
 2000b2c:	df000017 	ldw	fp,0(sp)
 2000b30:	dec00204 	addi	sp,sp,8
 2000b34:	f800283a 	ret

02000b38 <I2C_Verify>:




bool I2C_Verify(alt_u32 scl_base, alt_u32 sda_base, alt_u32 size){
 2000b38:	defffa04 	addi	sp,sp,-24
 2000b3c:	dfc00515 	stw	ra,20(sp)
 2000b40:	df000415 	stw	fp,16(sp)
 2000b44:	df000404 	addi	fp,sp,16
 2000b48:	e13ffd15 	stw	r4,-12(fp)
 2000b4c:	e17ffe15 	stw	r5,-8(fp)
 2000b50:	e1bfff15 	stw	r6,-4(fp)
    bool bPass;
    if (size <= 256){
 2000b54:	e0bfff17 	ldw	r2,-4(fp)
 2000b58:	10804068 	cmpgeui	r2,r2,257
 2000b5c:	1000101e 	bne	r2,zero,2000ba0 <I2C_Verify+0x68>
        // less or equal to 256 Bytes
        bPass = i2c_data_verify(scl_base, sda_base, 0);
 2000b60:	e13ffd17 	ldw	r4,-12(fp)
 2000b64:	e17ffe17 	ldw	r5,-8(fp)
 2000b68:	000d883a 	mov	r6,zero
 2000b6c:	20009c00 	call	20009c0 <i2c_data_verify>
 2000b70:	e0bffc15 	stw	r2,-16(fp)
        if (bPass)
 2000b74:	e0bffc17 	ldw	r2,-16(fp)
 2000b78:	1005003a 	cmpeq	r2,r2,zero
 2000b7c:	1000091e 	bne	r2,zero,2000ba4 <I2C_Verify+0x6c>
            bPass = i2c_data_verify(scl_base, sda_base, size-1);
 2000b80:	e0bfff17 	ldw	r2,-4(fp)
 2000b84:	10bfffc4 	addi	r2,r2,-1
 2000b88:	11803fcc 	andi	r6,r2,255
 2000b8c:	e13ffd17 	ldw	r4,-12(fp)
 2000b90:	e17ffe17 	ldw	r5,-8(fp)
 2000b94:	20009c00 	call	20009c0 <i2c_data_verify>
 2000b98:	e0bffc15 	stw	r2,-16(fp)
 2000b9c:	00000106 	br	2000ba4 <I2C_Verify+0x6c>
    }else{
        bPass = FALSE;
 2000ba0:	e03ffc15 	stw	zero,-16(fp)
        bPass = i2cl_data_verify(scl_base, sda_base, 0);
        if (bPass)
            bPass = i2cl_data_verify(scl_base, sda_base, size-1);
            */
    }
    return bPass;
 2000ba4:	e0bffc17 	ldw	r2,-16(fp)
}
 2000ba8:	e037883a 	mov	sp,fp
 2000bac:	dfc00117 	ldw	ra,4(sp)
 2000bb0:	df000017 	ldw	fp,0(sp)
 2000bb4:	dec00204 	addi	sp,sp,8
 2000bb8:	f800283a 	ret

02000bbc <timeoutOccurred>:
unsigned int io_timeout;
bool did_timeout;

// Check timeout Methods //////////////////////////////////////////////////////////////
bool timeoutOccurred()
{
 2000bbc:	deffff04 	addi	sp,sp,-4
 2000bc0:	df000015 	stw	fp,0(sp)
 2000bc4:	d839883a 	mov	fp,sp
  return did_timeout;
 2000bc8:	d0a7ad17 	ldw	r2,-24908(gp)
}
 2000bcc:	e037883a 	mov	sp,fp
 2000bd0:	df000017 	ldw	fp,0(sp)
 2000bd4:	dec00104 	addi	sp,sp,4
 2000bd8:	f800283a 	ret

02000bdc <setTimeout>:

void setTimeout(unsigned int timeout)
{
 2000bdc:	defffe04 	addi	sp,sp,-8
 2000be0:	df000115 	stw	fp,4(sp)
 2000be4:	df000104 	addi	fp,sp,4
 2000be8:	e13fff15 	stw	r4,-4(fp)
  io_timeout = timeout;
 2000bec:	e0bfff17 	ldw	r2,-4(fp)
 2000bf0:	d0a7ab15 	stw	r2,-24916(gp)
}
 2000bf4:	e037883a 	mov	sp,fp
 2000bf8:	df000017 	ldw	fp,0(sp)
 2000bfc:	dec00104 	addi	sp,sp,4
 2000c00:	f800283a 	ret

02000c04 <getTimeout>:

unsigned int getTimeout()
{
 2000c04:	deffff04 	addi	sp,sp,-4
 2000c08:	df000015 	stw	fp,0(sp)
 2000c0c:	d839883a 	mov	fp,sp
  return io_timeout;
 2000c10:	d0a7ab17 	ldw	r2,-24916(gp)
}
 2000c14:	e037883a 	mov	sp,fp
 2000c18:	df000017 	ldw	fp,0(sp)
 2000c1c:	dec00104 	addi	sp,sp,4
 2000c20:	f800283a 	ret

02000c24 <LSM303_Init>:

// Initialize the LSM303
void LSM303_Init(void)
{  
 2000c24:	deffff04 	addi	sp,sp,-4
 2000c28:	df000015 	stw	fp,0(sp)
 2000c2c:	d839883a 	mov	fp,sp
	acc_address = ACC_ADDRESS_SA0_A_HIGH;
 2000c30:	00800c84 	movi	r2,50
 2000c34:	d0a7ac05 	stb	r2,-24912(gp)
    _device = LSM303DLHC_DEVICE;
 2000c38:	00800084 	movi	r2,2
 2000c3c:	d0a7aa05 	stb	r2,-24920(gp)

    m_max.x = +540; m_max.y = +500; m_max.z = 180;
 2000c40:	00c080b4 	movhi	r3,514
 2000c44:	18d3fb04 	addi	r3,r3,20460
 2000c48:	009101f4 	movhi	r2,17415
 2000c4c:	18800015 	stw	r2,0(r3)
 2000c50:	00c080b4 	movhi	r3,514
 2000c54:	18d3fb04 	addi	r3,r3,20460
 2000c58:	0090feb4 	movhi	r2,17402
 2000c5c:	18800115 	stw	r2,4(r3)
 2000c60:	00c080b4 	movhi	r3,514
 2000c64:	18d3fb04 	addi	r3,r3,20460
 2000c68:	0090cd34 	movhi	r2,17204
 2000c6c:	18800215 	stw	r2,8(r3)
     m_min.x = -520; m_min.y = -570; m_min.z = -770;
 2000c70:	00c080b4 	movhi	r3,514
 2000c74:	18d3f504 	addi	r3,r3,20436
 2000c78:	00b100b4 	movhi	r2,50178
 2000c7c:	18800015 	stw	r2,0(r3)
 2000c80:	00c080b4 	movhi	r3,514
 2000c84:	18d3f504 	addi	r3,r3,20436
 2000c88:	00b103f4 	movhi	r2,50191
 2000c8c:	10a00004 	addi	r2,r2,-32768
 2000c90:	18800115 	stw	r2,4(r3)
 2000c94:	00c080b4 	movhi	r3,514
 2000c98:	18d3f504 	addi	r3,r3,20436
 2000c9c:	00b11074 	movhi	r2,50241
 2000ca0:	10a00004 	addi	r2,r2,-32768
 2000ca4:	18800215 	stw	r2,8(r3)

     io_timeout = 0;  // 0 = no timeout
 2000ca8:	d027ab15 	stw	zero,-24916(gp)
     did_timeout = FALSE;
 2000cac:	d027ad15 	stw	zero,-24908(gp)
}
 2000cb0:	e037883a 	mov	sp,fp
 2000cb4:	df000017 	ldw	fp,0(sp)
 2000cb8:	dec00104 	addi	sp,sp,4
 2000cbc:	f800283a 	ret

02000cc0 <enableDefault>:

// Turns on the LSM303's accelerometer and magnetometers and places them in normal
// mode.
void enableDefault(void)
{
 2000cc0:	defffd04 	addi	sp,sp,-12
 2000cc4:	dfc00215 	stw	ra,8(sp)
 2000cc8:	df000115 	stw	fp,4(sp)
 2000ccc:	df000104 	addi	fp,sp,4
 // writeMagReg(LSM303_MR_REG_M, 0x00);

	//For magnetic sensors the default (factory) 7-bit slave address is 0011110xb. R = 1, W = 0 so READ = 0x00111101 = 0x3D
  //I2C_Multiple_Write(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, MAG_ADDRESS, LSM303_MR_REG_M, 0x00, MAX_BUFFER_SIZE); //

  if (I2C_Write(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, MAG_ADDRESS, LSM303_MR_REG_M, 0x00)){
 2000cd0:	d8000015 	stw	zero,0(sp)
 2000cd4:	01010034 	movhi	r4,1024
 2000cd8:	21021004 	addi	r4,r4,2112
 2000cdc:	01410034 	movhi	r5,1024
 2000ce0:	29421404 	addi	r5,r5,2128
 2000ce4:	01800f04 	movi	r6,60
 2000ce8:	01c00084 	movi	r7,2
 2000cec:	20002080 	call	2000208 <I2C_Write>
 2000cf0:	1005003a 	cmpeq	r2,r2,zero
 2000cf4:	1000041e 	bne	r2,zero,2000d08 <enableDefault+0x48>
	  printf("Success!\n");
 2000cf8:	010080b4 	movhi	r4,514
 2000cfc:	2101c804 	addi	r4,r4,1824
 2000d00:	2006bd40 	call	2006bd4 <puts>
 2000d04:	00000306 	br	2000d14 <enableDefault+0x54>
  }else{
        printf("Failed to enable magnetometer\r\n");
 2000d08:	010080b4 	movhi	r4,514
 2000d0c:	2101cb04 	addi	r4,r4,1836
 2000d10:	2006bd40 	call	2006bd4 <puts>
  }
}
 2000d14:	e037883a 	mov	sp,fp
 2000d18:	dfc00117 	ldw	ra,4(sp)
 2000d1c:	df000017 	ldw	fp,0(sp)
 2000d20:	dec00204 	addi	sp,sp,8
 2000d24:	f800283a 	ret

02000d28 <writeMagReg>:

// Writes a magnetometer register
void writeMagReg(alt_u8 reg, alt_u8 value)
{
 2000d28:	defffb04 	addi	sp,sp,-20
 2000d2c:	dfc00415 	stw	ra,16(sp)
 2000d30:	df000315 	stw	fp,12(sp)
 2000d34:	df000304 	addi	fp,sp,12
 2000d38:	e13ffe05 	stb	r4,-8(fp)
 2000d3c:	e17fff05 	stb	r5,-4(fp)
  Wire.write(reg);
  Wire.write(value);
  last_status = Wire.endTransmission();
  */

  if (I2C_Write(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, MAG_ADDRESS, reg, value)){
 2000d40:	e1fffe03 	ldbu	r7,-8(fp)
 2000d44:	e0bfff03 	ldbu	r2,-4(fp)
 2000d48:	d8800015 	stw	r2,0(sp)
 2000d4c:	01010034 	movhi	r4,1024
 2000d50:	21021004 	addi	r4,r4,2112
 2000d54:	01410034 	movhi	r5,1024
 2000d58:	29421404 	addi	r5,r5,2128
 2000d5c:	01800f04 	movi	r6,60
 2000d60:	20002080 	call	2000208 <I2C_Write>
 2000d64:	1005003a 	cmpeq	r2,r2,zero
 2000d68:	1000041e 	bne	r2,zero,2000d7c <writeMagReg+0x54>
	  printf("Success!\n");
 2000d6c:	010080b4 	movhi	r4,514
 2000d70:	2101c804 	addi	r4,r4,1824
 2000d74:	2006bd40 	call	2006bd4 <puts>
 2000d78:	00000306 	br	2000d88 <writeMagReg+0x60>
  }else{
        printf("Failed to write magnetometer\r\n");
 2000d7c:	010080b4 	movhi	r4,514
 2000d80:	2101d304 	addi	r4,r4,1868
 2000d84:	2006bd40 	call	2006bd4 <puts>
  }
}
 2000d88:	e037883a 	mov	sp,fp
 2000d8c:	dfc00117 	ldw	ra,4(sp)
 2000d90:	df000017 	ldw	fp,0(sp)
 2000d94:	dec00204 	addi	sp,sp,8
 2000d98:	f800283a 	ret

02000d9c <readMagReg>:

// Reads a magnetometer register
alt_u8 readMagReg(int reg)
{
 2000d9c:	defffb04 	addi	sp,sp,-20
 2000da0:	dfc00415 	stw	ra,16(sp)
 2000da4:	df000315 	stw	fp,12(sp)
 2000da8:	df000304 	addi	fp,sp,12
 2000dac:	e13fff15 	stw	r4,-4(fp)
  Wire.requestFrom(MAG_ADDRESS, 1);
  value = Wire.read();
  Wire.endTransmission();
  */

  if (I2C_Read(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, MAG_ADDRESS, reg, value)){
 2000db0:	e0bfff17 	ldw	r2,-4(fp)
 2000db4:	11c03fcc 	andi	r7,r2,255
 2000db8:	e0bffe17 	ldw	r2,-8(fp)
 2000dbc:	d8800015 	stw	r2,0(sp)
 2000dc0:	01010034 	movhi	r4,1024
 2000dc4:	21021004 	addi	r4,r4,2112
 2000dc8:	01410034 	movhi	r5,1024
 2000dcc:	29421404 	addi	r5,r5,2128
 2000dd0:	01800f04 	movi	r6,60
 2000dd4:	20002e00 	call	20002e0 <I2C_Read>
 2000dd8:	1005003a 	cmpeq	r2,r2,zero
 2000ddc:	1000051e 	bne	r2,zero,2000df4 <readMagReg+0x58>
	  printf("Success! %02xh \n", (int) value);
 2000de0:	e17ffe17 	ldw	r5,-8(fp)
 2000de4:	010080b4 	movhi	r4,514
 2000de8:	2101db04 	addi	r4,r4,1900
 2000dec:	2006abc0 	call	2006abc <printf>
 2000df0:	00000406 	br	2000e04 <readMagReg+0x68>
  }else{
        printf("Failed to read magnetometer\r\n");
 2000df4:	010080b4 	movhi	r4,514
 2000df8:	2101e004 	addi	r4,r4,1920
 2000dfc:	2006bd40 	call	2006bd4 <puts>
        value = 0;
 2000e00:	e03ffe15 	stw	zero,-8(fp)
  }

  return *value;
 2000e04:	e0bffe17 	ldw	r2,-8(fp)
 2000e08:	10800003 	ldbu	r2,0(r2)
 2000e0c:	10803fcc 	andi	r2,r2,255
}
 2000e10:	e037883a 	mov	sp,fp
 2000e14:	dfc00117 	ldw	ra,4(sp)
 2000e18:	df000017 	ldw	fp,0(sp)
 2000e1c:	dec00204 	addi	sp,sp,8
 2000e20:	f800283a 	ret

02000e24 <setMagGain>:

void setMagGain(alt_u8 value)
{
 2000e24:	defffc04 	addi	sp,sp,-16
 2000e28:	dfc00315 	stw	ra,12(sp)
 2000e2c:	df000215 	stw	fp,8(sp)
 2000e30:	df000204 	addi	fp,sp,8
 2000e34:	e13fff05 	stb	r4,-4(fp)
  Wire.write((byte) value);
  Wire.endTransmission();
  */
	//check to see if value is in maggain

  if (I2C_Write(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, MAG_ADDRESS, LSM303_CRB_REG_M, value)){
 2000e38:	e0bfff03 	ldbu	r2,-4(fp)
 2000e3c:	d8800015 	stw	r2,0(sp)
 2000e40:	01010034 	movhi	r4,1024
 2000e44:	21021004 	addi	r4,r4,2112
 2000e48:	01410034 	movhi	r5,1024
 2000e4c:	29421404 	addi	r5,r5,2128
 2000e50:	01800f04 	movi	r6,60
 2000e54:	01c00044 	movi	r7,1
 2000e58:	20002080 	call	2000208 <I2C_Write>
 2000e5c:	1005003a 	cmpeq	r2,r2,zero
 2000e60:	1000041e 	bne	r2,zero,2000e74 <setMagGain+0x50>
	  printf("Success!\n");
 2000e64:	010080b4 	movhi	r4,514
 2000e68:	2101c804 	addi	r4,r4,1824
 2000e6c:	2006bd40 	call	2006bd4 <puts>
 2000e70:	00000306 	br	2000e80 <setMagGain+0x5c>
  }else{
        printf("Failed to write magnetometer gain\r\n");
 2000e74:	010080b4 	movhi	r4,514
 2000e78:	2101e804 	addi	r4,r4,1952
 2000e7c:	2006bd40 	call	2006bd4 <puts>
  }
}
 2000e80:	e037883a 	mov	sp,fp
 2000e84:	dfc00117 	ldw	ra,4(sp)
 2000e88:	df000017 	ldw	fp,0(sp)
 2000e8c:	dec00204 	addi	sp,sp,8
 2000e90:	f800283a 	ret

02000e94 <readMag>:

// Reads the 3 magnetometer channels and stores them in vector m
void readMag(void)
{
 2000e94:	defff504 	addi	sp,sp,-44
 2000e98:	dfc00a15 	stw	ra,40(sp)
 2000e9c:	df000915 	stw	fp,36(sp)
 2000ea0:	df000904 	addi	fp,sp,36
	alt_u16 xhm, xlm, yhm, ylm, zhm, zlm;
	alt_u8 szBuf[5]; //need 6 values
	int Num, i;

	if (I2C_MultipleRead(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, MAG_ADDRESS, LSM303_OUT_X_H_M, szBuf, sizeof(szBuf)))
 2000ea4:	e0bffe04 	addi	r2,fp,-8
 2000ea8:	d8800015 	stw	r2,0(sp)
 2000eac:	00800144 	movi	r2,5
 2000eb0:	d8800115 	stw	r2,4(sp)
 2000eb4:	01010034 	movhi	r4,1024
 2000eb8:	21021004 	addi	r4,r4,2112
 2000ebc:	01410034 	movhi	r5,1024
 2000ec0:	29421404 	addi	r5,r5,2128
 2000ec4:	01800f04 	movi	r6,60
 2000ec8:	01c000c4 	movi	r7,3
 2000ecc:	20004f40 	call	20004f4 <I2C_MultipleRead>
 2000ed0:	1005003a 	cmpeq	r2,r2,zero
 2000ed4:	1000261e 	bne	r2,zero,2000f70 <readMag+0xdc>
	{
		Num = sizeof(szBuf)/sizeof(szBuf[0]);
 2000ed8:	00800144 	movi	r2,5
 2000edc:	e0bffa15 	stw	r2,-24(fp)
        for(i=0;i<Num;i++){
 2000ee0:	e03ff915 	stw	zero,-28(fp)
 2000ee4:	00000c06 	br	2000f18 <readMag+0x84>
            printf("Addr[%d] = %02xh\r\n", i, szBuf[i]);
 2000ee8:	e0fff917 	ldw	r3,-28(fp)
 2000eec:	e0bffe04 	addi	r2,fp,-8
 2000ef0:	10c5883a 	add	r2,r2,r3
 2000ef4:	10800003 	ldbu	r2,0(r2)
 2000ef8:	11803fcc 	andi	r6,r2,255
 2000efc:	010080b4 	movhi	r4,514
 2000f00:	2101f104 	addi	r4,r4,1988
 2000f04:	e17ff917 	ldw	r5,-28(fp)
 2000f08:	2006abc0 	call	2006abc <printf>
	int Num, i;

	if (I2C_MultipleRead(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, MAG_ADDRESS, LSM303_OUT_X_H_M, szBuf, sizeof(szBuf)))
	{
		Num = sizeof(szBuf)/sizeof(szBuf[0]);
        for(i=0;i<Num;i++){
 2000f0c:	e0bff917 	ldw	r2,-28(fp)
 2000f10:	10800044 	addi	r2,r2,1
 2000f14:	e0bff915 	stw	r2,-28(fp)
 2000f18:	e0fff917 	ldw	r3,-28(fp)
 2000f1c:	e0bffa17 	ldw	r2,-24(fp)
 2000f20:	18bff116 	blt	r3,r2,2000ee8 <readMag+0x54>
            printf("Addr[%d] = %02xh\r\n", i, szBuf[i]);
        }

        xhm = szBuf[0];
 2000f24:	e0bffe03 	ldbu	r2,-8(fp)
 2000f28:	10803fcc 	andi	r2,r2,255
 2000f2c:	e0bffd8d 	sth	r2,-10(fp)
        xlm = szBuf[1];
 2000f30:	e0bffe43 	ldbu	r2,-7(fp)
 2000f34:	10803fcc 	andi	r2,r2,255
 2000f38:	e0bffd0d 	sth	r2,-12(fp)
        zhm = szBuf[2];
 2000f3c:	e0bffe83 	ldbu	r2,-6(fp)
 2000f40:	10803fcc 	andi	r2,r2,255
 2000f44:	e0bffb8d 	sth	r2,-18(fp)
        zlm = szBuf[3];
 2000f48:	e0bffec3 	ldbu	r2,-5(fp)
 2000f4c:	10803fcc 	andi	r2,r2,255
 2000f50:	e0bffb0d 	sth	r2,-20(fp)
        yhm = szBuf[4];
 2000f54:	e0bfff03 	ldbu	r2,-4(fp)
 2000f58:	10803fcc 	andi	r2,r2,255
 2000f5c:	e0bffc8d 	sth	r2,-14(fp)
        ylm = szBuf[5];
 2000f60:	e0bfff43 	ldbu	r2,-3(fp)
 2000f64:	10803fcc 	andi	r2,r2,255
 2000f68:	e0bffc0d 	sth	r2,-16(fp)
 2000f6c:	00000306 	br	2000f7c <readMag+0xe8>
    }
	else{
        printf("Failed to read magnetometer\r\n");
 2000f70:	010080b4 	movhi	r4,514
 2000f74:	2101e004 	addi	r4,r4,1920
 2000f78:	2006bd40 	call	2006bd4 <puts>
	yhm = Wire.read();
	ylm = Wire.read();
*/

  // combine high and low bytes
  m.x = (alt_u16)(xhm << 8 | xlm);
 2000f7c:	e0bffd8b 	ldhu	r2,-10(fp)
 2000f80:	1004923a 	slli	r2,r2,8
 2000f84:	1007883a 	mov	r3,r2
 2000f88:	e0bffd0b 	ldhu	r2,-12(fp)
 2000f8c:	1884b03a 	or	r2,r3,r2
 2000f90:	113fffcc 	andi	r4,r2,65535
 2000f94:	2004a0c0 	call	2004a0c <__floatunsisf>
 2000f98:	1007883a 	mov	r3,r2
 2000f9c:	008080b4 	movhi	r2,514
 2000fa0:	1093fe04 	addi	r2,r2,20472
 2000fa4:	10c00015 	stw	r3,0(r2)
  m.y = (alt_u16)(yhm << 8 | ylm);
 2000fa8:	e0bffc8b 	ldhu	r2,-14(fp)
 2000fac:	1004923a 	slli	r2,r2,8
 2000fb0:	1007883a 	mov	r3,r2
 2000fb4:	e0bffc0b 	ldhu	r2,-16(fp)
 2000fb8:	1884b03a 	or	r2,r3,r2
 2000fbc:	113fffcc 	andi	r4,r2,65535
 2000fc0:	2004a0c0 	call	2004a0c <__floatunsisf>
 2000fc4:	1007883a 	mov	r3,r2
 2000fc8:	008080b4 	movhi	r2,514
 2000fcc:	1093fe04 	addi	r2,r2,20472
 2000fd0:	10c00115 	stw	r3,4(r2)
  m.z = (alt_u16)(zhm << 8 | zlm);
 2000fd4:	e0bffb8b 	ldhu	r2,-18(fp)
 2000fd8:	1004923a 	slli	r2,r2,8
 2000fdc:	1007883a 	mov	r3,r2
 2000fe0:	e0bffb0b 	ldhu	r2,-20(fp)
 2000fe4:	1884b03a 	or	r2,r3,r2
 2000fe8:	113fffcc 	andi	r4,r2,65535
 2000fec:	2004a0c0 	call	2004a0c <__floatunsisf>
 2000ff0:	1007883a 	mov	r3,r2
 2000ff4:	008080b4 	movhi	r2,514
 2000ff8:	1093fe04 	addi	r2,r2,20472
 2000ffc:	10c00215 	stw	r3,8(r2)
}
 2001000:	e037883a 	mov	sp,fp
 2001004:	dfc00117 	ldw	ra,4(sp)
 2001008:	df000017 	ldw	fp,0(sp)
 200100c:	dec00204 	addi	sp,sp,8
 2001010:	f800283a 	ret

02001014 <LSM303_read>:

// Reads all 6 channels of the LSM303 and stores them in the object variables
void LSM303_read()
{
 2001014:	defffe04 	addi	sp,sp,-8
 2001018:	dfc00115 	stw	ra,4(sp)
 200101c:	df000015 	stw	fp,0(sp)
 2001020:	d839883a 	mov	fp,sp
  //readAcc();
  readMag();
 2001024:	2000e940 	call	2000e94 <readMag>
}
 2001028:	e037883a 	mov	sp,fp
 200102c:	dfc00117 	ldw	ra,4(sp)
 2001030:	df000017 	ldw	fp,0(sp)
 2001034:	dec00204 	addi	sp,sp,8
 2001038:	f800283a 	ret

0200103c <heading_Y>:

// Returns the number of degrees from the -Y axis that it
// is pointing.
int heading_Y()
{
 200103c:	defffb04 	addi	sp,sp,-20
 2001040:	dfc00415 	stw	ra,16(sp)
 2001044:	df000315 	stw	fp,12(sp)
 2001048:	df000304 	addi	fp,sp,12
	vector new = {0, -1, 0};
 200104c:	e03ffd15 	stw	zero,-12(fp)
 2001050:	00afe034 	movhi	r2,49024
 2001054:	e0bffe15 	stw	r2,-8(fp)
 2001058:	e03fff15 	stw	zero,-4(fp)
	return heading(new);
 200105c:	e13ffd17 	ldw	r4,-12(fp)
 2001060:	e17ffe17 	ldw	r5,-8(fp)
 2001064:	e1bfff17 	ldw	r6,-4(fp)
 2001068:	20010800 	call	2001080 <heading>
}
 200106c:	e037883a 	mov	sp,fp
 2001070:	dfc00117 	ldw	ra,4(sp)
 2001074:	df000017 	ldw	fp,0(sp)
 2001078:	dec00204 	addi	sp,sp,8
 200107c:	f800283a 	ret

02001080 <heading>:
// vectors is East. The vectors East and North form a basis for the
// horizontal plane. The From vector is projected into the horizontal
// plane and the angle between the projected vector and north is
// returned.
int heading(vector from)
{
 2001080:	deffef04 	addi	sp,sp,-68
 2001084:	dfc01015 	stw	ra,64(sp)
 2001088:	df000f15 	stw	fp,60(sp)
 200108c:	dc400e15 	stw	r17,56(sp)
 2001090:	dc000d15 	stw	r16,52(sp)
 2001094:	df000d04 	addi	fp,sp,52
 2001098:	e13ffd15 	stw	r4,-12(fp)
 200109c:	e17ffe15 	stw	r5,-8(fp)
 20010a0:	e1bfff15 	stw	r6,-4(fp)
    // shift and scale
    m.x = (m.x - m_min.x) / (m_max.x - m_min.x) * 2 - 1.0;
 20010a4:	008080b4 	movhi	r2,514
 20010a8:	1093fe04 	addi	r2,r2,20472
 20010ac:	10c00017 	ldw	r3,0(r2)
 20010b0:	008080b4 	movhi	r2,514
 20010b4:	1093f504 	addi	r2,r2,20436
 20010b8:	10800017 	ldw	r2,0(r2)
 20010bc:	1809883a 	mov	r4,r3
 20010c0:	100b883a 	mov	r5,r2
 20010c4:	20045900 	call	2004590 <__subsf3>
 20010c8:	1021883a 	mov	r16,r2
 20010cc:	008080b4 	movhi	r2,514
 20010d0:	1093fb04 	addi	r2,r2,20460
 20010d4:	10c00017 	ldw	r3,0(r2)
 20010d8:	008080b4 	movhi	r2,514
 20010dc:	1093f504 	addi	r2,r2,20436
 20010e0:	10800017 	ldw	r2,0(r2)
 20010e4:	1809883a 	mov	r4,r3
 20010e8:	100b883a 	mov	r5,r2
 20010ec:	20045900 	call	2004590 <__subsf3>
 20010f0:	8009883a 	mov	r4,r16
 20010f4:	100b883a 	mov	r5,r2
 20010f8:	20048440 	call	2004844 <__divsf3>
 20010fc:	1009883a 	mov	r4,r2
 2001100:	100b883a 	mov	r5,r2
 2001104:	20046000 	call	2004600 <__addsf3>
 2001108:	1009883a 	mov	r4,r2
 200110c:	014fe034 	movhi	r5,16256
 2001110:	20045900 	call	2004590 <__subsf3>
 2001114:	1007883a 	mov	r3,r2
 2001118:	008080b4 	movhi	r2,514
 200111c:	1093fe04 	addi	r2,r2,20472
 2001120:	10c00015 	stw	r3,0(r2)
    m.y = (m.y - m_min.y) / (m_max.y - m_min.y) * 2 - 1.0;
 2001124:	008080b4 	movhi	r2,514
 2001128:	1093fe04 	addi	r2,r2,20472
 200112c:	10c00117 	ldw	r3,4(r2)
 2001130:	008080b4 	movhi	r2,514
 2001134:	1093f504 	addi	r2,r2,20436
 2001138:	10800117 	ldw	r2,4(r2)
 200113c:	1809883a 	mov	r4,r3
 2001140:	100b883a 	mov	r5,r2
 2001144:	20045900 	call	2004590 <__subsf3>
 2001148:	1021883a 	mov	r16,r2
 200114c:	008080b4 	movhi	r2,514
 2001150:	1093fb04 	addi	r2,r2,20460
 2001154:	10c00117 	ldw	r3,4(r2)
 2001158:	008080b4 	movhi	r2,514
 200115c:	1093f504 	addi	r2,r2,20436
 2001160:	10800117 	ldw	r2,4(r2)
 2001164:	1809883a 	mov	r4,r3
 2001168:	100b883a 	mov	r5,r2
 200116c:	20045900 	call	2004590 <__subsf3>
 2001170:	8009883a 	mov	r4,r16
 2001174:	100b883a 	mov	r5,r2
 2001178:	20048440 	call	2004844 <__divsf3>
 200117c:	1009883a 	mov	r4,r2
 2001180:	100b883a 	mov	r5,r2
 2001184:	20046000 	call	2004600 <__addsf3>
 2001188:	1009883a 	mov	r4,r2
 200118c:	014fe034 	movhi	r5,16256
 2001190:	20045900 	call	2004590 <__subsf3>
 2001194:	1007883a 	mov	r3,r2
 2001198:	008080b4 	movhi	r2,514
 200119c:	1093fe04 	addi	r2,r2,20472
 20011a0:	10c00115 	stw	r3,4(r2)
    m.z = (m.z - m_min.z) / (m_max.z - m_min.z) * 2 - 1.0;
 20011a4:	008080b4 	movhi	r2,514
 20011a8:	1093fe04 	addi	r2,r2,20472
 20011ac:	10c00217 	ldw	r3,8(r2)
 20011b0:	008080b4 	movhi	r2,514
 20011b4:	1093f504 	addi	r2,r2,20436
 20011b8:	10800217 	ldw	r2,8(r2)
 20011bc:	1809883a 	mov	r4,r3
 20011c0:	100b883a 	mov	r5,r2
 20011c4:	20045900 	call	2004590 <__subsf3>
 20011c8:	1021883a 	mov	r16,r2
 20011cc:	008080b4 	movhi	r2,514
 20011d0:	1093fb04 	addi	r2,r2,20460
 20011d4:	10c00217 	ldw	r3,8(r2)
 20011d8:	008080b4 	movhi	r2,514
 20011dc:	1093f504 	addi	r2,r2,20436
 20011e0:	10800217 	ldw	r2,8(r2)
 20011e4:	1809883a 	mov	r4,r3
 20011e8:	100b883a 	mov	r5,r2
 20011ec:	20045900 	call	2004590 <__subsf3>
 20011f0:	8009883a 	mov	r4,r16
 20011f4:	100b883a 	mov	r5,r2
 20011f8:	20048440 	call	2004844 <__divsf3>
 20011fc:	1009883a 	mov	r4,r2
 2001200:	100b883a 	mov	r5,r2
 2001204:	20046000 	call	2004600 <__addsf3>
 2001208:	1009883a 	mov	r4,r2
 200120c:	014fe034 	movhi	r5,16256
 2001210:	20045900 	call	2004590 <__subsf3>
 2001214:	1007883a 	mov	r3,r2
 2001218:	008080b4 	movhi	r2,514
 200121c:	1093fe04 	addi	r2,r2,20472
 2001220:	10c00215 	stw	r3,8(r2)

    vector temp_a = a;
 2001224:	00c080b4 	movhi	r3,514
 2001228:	18d3f804 	addi	r3,r3,20448
 200122c:	18800017 	ldw	r2,0(r3)
 2001230:	e0bff415 	stw	r2,-48(fp)
 2001234:	18800117 	ldw	r2,4(r3)
 2001238:	e0bff515 	stw	r2,-44(fp)
 200123c:	18800217 	ldw	r2,8(r3)
 2001240:	e0bff615 	stw	r2,-40(fp)
    // normalize
    vector_normalize(&temp_a);
 2001244:	e13ff404 	addi	r4,fp,-48
 2001248:	20015580 	call	2001558 <vector_normalize>
    //vector_normalize(&m);

    // compute E and N
    vector E;
    vector N;
    vector_cross(&m, &temp_a, &E);
 200124c:	e17ff404 	addi	r5,fp,-48
 2001250:	e1bff704 	addi	r6,fp,-36
 2001254:	010080b4 	movhi	r4,514
 2001258:	2113fe04 	addi	r4,r4,20472
 200125c:	200137c0 	call	200137c <vector_cross>
    vector_normalize(&E);
 2001260:	e13ff704 	addi	r4,fp,-36
 2001264:	20015580 	call	2001558 <vector_normalize>
    vector_cross(&temp_a, &E, &N);
 2001268:	e13ff404 	addi	r4,fp,-48
 200126c:	e17ff704 	addi	r5,fp,-36
 2001270:	e1bffa04 	addi	r6,fp,-24
 2001274:	200137c0 	call	200137c <vector_cross>
  
    // compute heading
    int heading = round(atan2(vector_dot(&E, &from), vector_dot(&N, &from)) * 180 / M_PI);
 2001278:	e13ff704 	addi	r4,fp,-36
 200127c:	e17ffd04 	addi	r5,fp,-12
 2001280:	20014b00 	call	20014b0 <vector_dot>
 2001284:	1009883a 	mov	r4,r2
 2001288:	20049b80 	call	20049b8 <__extendsfdf2>
 200128c:	1021883a 	mov	r16,r2
 2001290:	1823883a 	mov	r17,r3
 2001294:	e13ffa04 	addi	r4,fp,-24
 2001298:	e17ffd04 	addi	r5,fp,-12
 200129c:	20014b00 	call	20014b0 <vector_dot>
 20012a0:	1009883a 	mov	r4,r2
 20012a4:	20049b80 	call	20049b8 <__extendsfdf2>
 20012a8:	100f883a 	mov	r7,r2
 20012ac:	1811883a 	mov	r8,r3
 20012b0:	8009883a 	mov	r4,r16
 20012b4:	880b883a 	mov	r5,r17
 20012b8:	380d883a 	mov	r6,r7
 20012bc:	400f883a 	mov	r7,r8
 20012c0:	20035780 	call	2003578 <atan2>
 20012c4:	100b883a 	mov	r5,r2
 20012c8:	180d883a 	mov	r6,r3
 20012cc:	2809883a 	mov	r4,r5
 20012d0:	300b883a 	mov	r5,r6
 20012d4:	000d883a 	mov	r6,zero
 20012d8:	01d019f4 	movhi	r7,16487
 20012dc:	39e00004 	addi	r7,r7,-32768
 20012e0:	2004fd00 	call	2004fd0 <__muldf3>
 20012e4:	1009883a 	mov	r4,r2
 20012e8:	180b883a 	mov	r5,r3
 20012ec:	2005883a 	mov	r2,r4
 20012f0:	2807883a 	mov	r3,r5
 20012f4:	1009883a 	mov	r4,r2
 20012f8:	180b883a 	mov	r5,r3
 20012fc:	01951134 	movhi	r6,21572
 2001300:	318b4604 	addi	r6,r6,11544
 2001304:	01d00274 	movhi	r7,16393
 2001308:	39c87ec4 	addi	r7,r7,8699
 200130c:	20053940 	call	2005394 <__divdf3>
 2001310:	1009883a 	mov	r4,r2
 2001314:	180b883a 	mov	r5,r3
 2001318:	2005883a 	mov	r2,r4
 200131c:	2807883a 	mov	r3,r5
 2001320:	1009883a 	mov	r4,r2
 2001324:	180b883a 	mov	r5,r3
 2001328:	200346c0 	call	200346c <round>
 200132c:	100b883a 	mov	r5,r2
 2001330:	180d883a 	mov	r6,r3
 2001334:	2809883a 	mov	r4,r5
 2001338:	300b883a 	mov	r5,r6
 200133c:	20057f40 	call	20057f4 <__fixdfsi>
 2001340:	e0bff315 	stw	r2,-52(fp)
    if (heading < 0) heading += 360;
 2001344:	e0bff317 	ldw	r2,-52(fp)
 2001348:	1004403a 	cmpge	r2,r2,zero
 200134c:	1000031e 	bne	r2,zero,200135c <heading+0x2dc>
 2001350:	e0bff317 	ldw	r2,-52(fp)
 2001354:	10805a04 	addi	r2,r2,360
 2001358:	e0bff315 	stw	r2,-52(fp)
  return heading;
 200135c:	e0bff317 	ldw	r2,-52(fp)
}
 2001360:	e037883a 	mov	sp,fp
 2001364:	dfc00317 	ldw	ra,12(sp)
 2001368:	df000217 	ldw	fp,8(sp)
 200136c:	dc400117 	ldw	r17,4(sp)
 2001370:	dc000017 	ldw	r16,0(sp)
 2001374:	dec00404 	addi	sp,sp,16
 2001378:	f800283a 	ret

0200137c <vector_cross>:

void vector_cross(const vector *a,const vector *b, vector *out)
{
 200137c:	defffa04 	addi	sp,sp,-24
 2001380:	dfc00515 	stw	ra,20(sp)
 2001384:	df000415 	stw	fp,16(sp)
 2001388:	dc000315 	stw	r16,12(sp)
 200138c:	df000304 	addi	fp,sp,12
 2001390:	e13ffd15 	stw	r4,-12(fp)
 2001394:	e17ffe15 	stw	r5,-8(fp)
 2001398:	e1bfff15 	stw	r6,-4(fp)
  out->x = a->y*b->z - a->z*b->y;
 200139c:	e0bffd17 	ldw	r2,-12(fp)
 20013a0:	10c00117 	ldw	r3,4(r2)
 20013a4:	e0bffe17 	ldw	r2,-8(fp)
 20013a8:	10800217 	ldw	r2,8(r2)
 20013ac:	1809883a 	mov	r4,r3
 20013b0:	100b883a 	mov	r5,r2
 20013b4:	20046640 	call	2004664 <__mulsf3>
 20013b8:	1021883a 	mov	r16,r2
 20013bc:	e0bffd17 	ldw	r2,-12(fp)
 20013c0:	10c00217 	ldw	r3,8(r2)
 20013c4:	e0bffe17 	ldw	r2,-8(fp)
 20013c8:	10800117 	ldw	r2,4(r2)
 20013cc:	1809883a 	mov	r4,r3
 20013d0:	100b883a 	mov	r5,r2
 20013d4:	20046640 	call	2004664 <__mulsf3>
 20013d8:	8009883a 	mov	r4,r16
 20013dc:	100b883a 	mov	r5,r2
 20013e0:	20045900 	call	2004590 <__subsf3>
 20013e4:	1007883a 	mov	r3,r2
 20013e8:	e0bfff17 	ldw	r2,-4(fp)
 20013ec:	10c00015 	stw	r3,0(r2)
  out->y = a->z*b->x - a->x*b->z;
 20013f0:	e0bffd17 	ldw	r2,-12(fp)
 20013f4:	10c00217 	ldw	r3,8(r2)
 20013f8:	e0bffe17 	ldw	r2,-8(fp)
 20013fc:	10800017 	ldw	r2,0(r2)
 2001400:	1809883a 	mov	r4,r3
 2001404:	100b883a 	mov	r5,r2
 2001408:	20046640 	call	2004664 <__mulsf3>
 200140c:	1021883a 	mov	r16,r2
 2001410:	e0bffd17 	ldw	r2,-12(fp)
 2001414:	10c00017 	ldw	r3,0(r2)
 2001418:	e0bffe17 	ldw	r2,-8(fp)
 200141c:	10800217 	ldw	r2,8(r2)
 2001420:	1809883a 	mov	r4,r3
 2001424:	100b883a 	mov	r5,r2
 2001428:	20046640 	call	2004664 <__mulsf3>
 200142c:	8009883a 	mov	r4,r16
 2001430:	100b883a 	mov	r5,r2
 2001434:	20045900 	call	2004590 <__subsf3>
 2001438:	1007883a 	mov	r3,r2
 200143c:	e0bfff17 	ldw	r2,-4(fp)
 2001440:	10c00115 	stw	r3,4(r2)
  out->z = a->x*b->y - a->y*b->x;
 2001444:	e0bffd17 	ldw	r2,-12(fp)
 2001448:	10c00017 	ldw	r3,0(r2)
 200144c:	e0bffe17 	ldw	r2,-8(fp)
 2001450:	10800117 	ldw	r2,4(r2)
 2001454:	1809883a 	mov	r4,r3
 2001458:	100b883a 	mov	r5,r2
 200145c:	20046640 	call	2004664 <__mulsf3>
 2001460:	1021883a 	mov	r16,r2
 2001464:	e0bffd17 	ldw	r2,-12(fp)
 2001468:	10c00117 	ldw	r3,4(r2)
 200146c:	e0bffe17 	ldw	r2,-8(fp)
 2001470:	10800017 	ldw	r2,0(r2)
 2001474:	1809883a 	mov	r4,r3
 2001478:	100b883a 	mov	r5,r2
 200147c:	20046640 	call	2004664 <__mulsf3>
 2001480:	8009883a 	mov	r4,r16
 2001484:	100b883a 	mov	r5,r2
 2001488:	20045900 	call	2004590 <__subsf3>
 200148c:	1007883a 	mov	r3,r2
 2001490:	e0bfff17 	ldw	r2,-4(fp)
 2001494:	10c00215 	stw	r3,8(r2)
}
 2001498:	e037883a 	mov	sp,fp
 200149c:	dfc00217 	ldw	ra,8(sp)
 20014a0:	df000117 	ldw	fp,4(sp)
 20014a4:	dc000017 	ldw	r16,0(sp)
 20014a8:	dec00304 	addi	sp,sp,12
 20014ac:	f800283a 	ret

020014b0 <vector_dot>:

float vector_dot(const vector *a,const vector *b)
{
 20014b0:	defffb04 	addi	sp,sp,-20
 20014b4:	dfc00415 	stw	ra,16(sp)
 20014b8:	df000315 	stw	fp,12(sp)
 20014bc:	dc000215 	stw	r16,8(sp)
 20014c0:	df000204 	addi	fp,sp,8
 20014c4:	e13ffe15 	stw	r4,-8(fp)
 20014c8:	e17fff15 	stw	r5,-4(fp)
  return a->x*b->x+a->y*b->y+a->z*b->z;
 20014cc:	e0bffe17 	ldw	r2,-8(fp)
 20014d0:	10c00017 	ldw	r3,0(r2)
 20014d4:	e0bfff17 	ldw	r2,-4(fp)
 20014d8:	10800017 	ldw	r2,0(r2)
 20014dc:	1809883a 	mov	r4,r3
 20014e0:	100b883a 	mov	r5,r2
 20014e4:	20046640 	call	2004664 <__mulsf3>
 20014e8:	1021883a 	mov	r16,r2
 20014ec:	e0bffe17 	ldw	r2,-8(fp)
 20014f0:	10c00117 	ldw	r3,4(r2)
 20014f4:	e0bfff17 	ldw	r2,-4(fp)
 20014f8:	10800117 	ldw	r2,4(r2)
 20014fc:	1809883a 	mov	r4,r3
 2001500:	100b883a 	mov	r5,r2
 2001504:	20046640 	call	2004664 <__mulsf3>
 2001508:	8009883a 	mov	r4,r16
 200150c:	100b883a 	mov	r5,r2
 2001510:	20046000 	call	2004600 <__addsf3>
 2001514:	1021883a 	mov	r16,r2
 2001518:	e0bffe17 	ldw	r2,-8(fp)
 200151c:	10c00217 	ldw	r3,8(r2)
 2001520:	e0bfff17 	ldw	r2,-4(fp)
 2001524:	10800217 	ldw	r2,8(r2)
 2001528:	1809883a 	mov	r4,r3
 200152c:	100b883a 	mov	r5,r2
 2001530:	20046640 	call	2004664 <__mulsf3>
 2001534:	8009883a 	mov	r4,r16
 2001538:	100b883a 	mov	r5,r2
 200153c:	20046000 	call	2004600 <__addsf3>
}
 2001540:	e037883a 	mov	sp,fp
 2001544:	dfc00217 	ldw	ra,8(sp)
 2001548:	df000117 	ldw	fp,4(sp)
 200154c:	dc000017 	ldw	r16,0(sp)
 2001550:	dec00304 	addi	sp,sp,12
 2001554:	f800283a 	ret

02001558 <vector_normalize>:

void vector_normalize(vector *a)
{
 2001558:	defffc04 	addi	sp,sp,-16
 200155c:	dfc00315 	stw	ra,12(sp)
 2001560:	df000215 	stw	fp,8(sp)
 2001564:	df000204 	addi	fp,sp,8
 2001568:	e13fff15 	stw	r4,-4(fp)
  float mag = sqrt(vector_dot(a,a));
 200156c:	e13fff17 	ldw	r4,-4(fp)
 2001570:	e17fff17 	ldw	r5,-4(fp)
 2001574:	20014b00 	call	20014b0 <vector_dot>
 2001578:	1009883a 	mov	r4,r2
 200157c:	20049b80 	call	20049b8 <__extendsfdf2>
 2001580:	100b883a 	mov	r5,r2
 2001584:	180d883a 	mov	r6,r3
 2001588:	2809883a 	mov	r4,r5
 200158c:	300b883a 	mov	r5,r6
 2001590:	200357c0 	call	200357c <sqrt>
 2001594:	100b883a 	mov	r5,r2
 2001598:	180d883a 	mov	r6,r3
 200159c:	2809883a 	mov	r4,r5
 20015a0:	300b883a 	mov	r5,r6
 20015a4:	20059040 	call	2005904 <__truncdfsf2>
 20015a8:	e0bffe15 	stw	r2,-8(fp)
  a->x /= mag;
 20015ac:	e0bfff17 	ldw	r2,-4(fp)
 20015b0:	10800017 	ldw	r2,0(r2)
 20015b4:	1009883a 	mov	r4,r2
 20015b8:	e17ffe17 	ldw	r5,-8(fp)
 20015bc:	20048440 	call	2004844 <__divsf3>
 20015c0:	1007883a 	mov	r3,r2
 20015c4:	e0bfff17 	ldw	r2,-4(fp)
 20015c8:	10c00015 	stw	r3,0(r2)
  a->y /= mag;
 20015cc:	e0bfff17 	ldw	r2,-4(fp)
 20015d0:	10800117 	ldw	r2,4(r2)
 20015d4:	1009883a 	mov	r4,r2
 20015d8:	e17ffe17 	ldw	r5,-8(fp)
 20015dc:	20048440 	call	2004844 <__divsf3>
 20015e0:	1007883a 	mov	r3,r2
 20015e4:	e0bfff17 	ldw	r2,-4(fp)
 20015e8:	10c00115 	stw	r3,4(r2)
  a->z /= mag;
 20015ec:	e0bfff17 	ldw	r2,-4(fp)
 20015f0:	10800217 	ldw	r2,8(r2)
 20015f4:	1009883a 	mov	r4,r2
 20015f8:	e17ffe17 	ldw	r5,-8(fp)
 20015fc:	20048440 	call	2004844 <__divsf3>
 2001600:	1007883a 	mov	r3,r2
 2001604:	e0bfff17 	ldw	r2,-4(fp)
 2001608:	10c00215 	stw	r3,8(r2)
}
 200160c:	e037883a 	mov	sp,fp
 2001610:	dfc00117 	ldw	ra,4(sp)
 2001614:	df000017 	ldw	fp,0(sp)
 2001618:	dec00204 	addi	sp,sp,8
 200161c:	f800283a 	ret

02001620 <ADXL345_SPI_Init>:

#define DATA_READY_TIMEOUT  (alt_ticks_per_second()/3)



bool ADXL345_SPI_Init(alt_u32 device_base){
 2001620:	defffc04 	addi	sp,sp,-16
 2001624:	dfc00315 	stw	ra,12(sp)
 2001628:	df000215 	stw	fp,8(sp)
 200162c:	df000204 	addi	fp,sp,8
 2001630:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    
    // clear fifo
    SPI_Init(device_base);
 2001634:	e13fff17 	ldw	r4,-4(fp)
 2001638:	20028580 	call	2002858 <SPI_Init>
   
    // 3-wire spi
    bSuccess = SPI_Write(device_base, ADXL345_REG_DATA_FORMAT, XL345_SPI3WIRE);
 200163c:	e13fff17 	ldw	r4,-4(fp)
 2001640:	01400c44 	movi	r5,49
 2001644:	01801004 	movi	r6,64
 2001648:	20029dc0 	call	20029dc <SPI_Write>
 200164c:	e0bffe15 	stw	r2,-8(fp)
 
    // clear fifo   
    SPI_Init(device_base);
 2001650:	e13fff17 	ldw	r4,-4(fp)
 2001654:	20028580 	call	2002858 <SPI_Init>
        
    //Output Data Rate: 40Hz
    if (bSuccess){
 2001658:	e0bffe17 	ldw	r2,-8(fp)
 200165c:	1005003a 	cmpeq	r2,r2,zero
 2001660:	1000051e 	bne	r2,zero,2001678 <ADXL345_SPI_Init+0x58>
        bSuccess = SPI_Write(device_base, ADXL345_REG_BW_RATE, XL345_RATE_400); // 400 MHZ
 2001664:	e13fff17 	ldw	r4,-4(fp)
 2001668:	01400b04 	movi	r5,44
 200166c:	01800304 	movi	r6,12
 2001670:	20029dc0 	call	20029dc <SPI_Write>
 2001674:	e0bffe15 	stw	r2,-8(fp)
    }
    
        
    //INT_Enable: Data Ready
    if (bSuccess){   
 2001678:	e0bffe17 	ldw	r2,-8(fp)
 200167c:	1005003a 	cmpeq	r2,r2,zero
 2001680:	1000051e 	bne	r2,zero,2001698 <ADXL345_SPI_Init+0x78>
        bSuccess = SPI_Write(device_base, ADXL345_REG_INT_ENALBE, XL345_DATAREADY);
 2001684:	e13fff17 	ldw	r4,-4(fp)
 2001688:	01400b84 	movi	r5,46
 200168c:	01802004 	movi	r6,128
 2001690:	20029dc0 	call	20029dc <SPI_Write>
 2001694:	e0bffe15 	stw	r2,-8(fp)
    }
    
    // stop measure
    if (bSuccess){
 2001698:	e0bffe17 	ldw	r2,-8(fp)
 200169c:	1005003a 	cmpeq	r2,r2,zero
 20016a0:	1000051e 	bne	r2,zero,20016b8 <ADXL345_SPI_Init+0x98>
        bSuccess = SPI_Write(device_base, ADXL345_REG_POWER_CTL, XL345_STANDBY);
 20016a4:	e13fff17 	ldw	r4,-4(fp)
 20016a8:	01400b44 	movi	r5,45
 20016ac:	000d883a 	mov	r6,zero
 20016b0:	20029dc0 	call	20029dc <SPI_Write>
 20016b4:	e0bffe15 	stw	r2,-8(fp)
    }

    // start measure
    if (bSuccess){
 20016b8:	e0bffe17 	ldw	r2,-8(fp)
 20016bc:	1005003a 	cmpeq	r2,r2,zero
 20016c0:	1000051e 	bne	r2,zero,20016d8 <ADXL345_SPI_Init+0xb8>
        bSuccess = SPI_Write(device_base, ADXL345_REG_POWER_CTL, XL345_MEASURE);
 20016c4:	e13fff17 	ldw	r4,-4(fp)
 20016c8:	01400b44 	movi	r5,45
 20016cc:	01800204 	movi	r6,8
 20016d0:	20029dc0 	call	20029dc <SPI_Write>
 20016d4:	e0bffe15 	stw	r2,-8(fp)
        
    }
    
            
    return bSuccess;
 20016d8:	e0bffe17 	ldw	r2,-8(fp)
}
 20016dc:	e037883a 	mov	sp,fp
 20016e0:	dfc00117 	ldw	ra,4(sp)
 20016e4:	df000017 	ldw	fp,0(sp)
 20016e8:	dec00204 	addi	sp,sp,8
 20016ec:	f800283a 	ret

020016f0 <ADXL345_SPI_WaitDataReady>:

bool ADXL345_SPI_WaitDataReady(alt_u32 device_base){
 20016f0:	defffa04 	addi	sp,sp,-24
 20016f4:	dfc00515 	stw	ra,20(sp)
 20016f8:	df000415 	stw	fp,16(sp)
 20016fc:	dc000315 	stw	r16,12(sp)
 2001700:	df000304 	addi	fp,sp,12
 2001704:	e13fff15 	stw	r4,-4(fp)
 2001708:	008080b4 	movhi	r2,514
 200170c:	1093d204 	addi	r2,r2,20296
 2001710:	10800017 	ldw	r2,0(r2)
    bool bDataReady;
    alt_u32 TimeStart;
    
    TimeStart = alt_nticks();
 2001714:	e0bffd15 	stw	r2,-12(fp)
    do{
        bDataReady = ADXL345_SPI_IsDataReady(device_base);
 2001718:	e13fff17 	ldw	r4,-4(fp)
 200171c:	20017940 	call	2001794 <ADXL345_SPI_IsDataReady>
 2001720:	e0bffe15 	stw	r2,-8(fp)
        if (!bDataReady)
 2001724:	e0bffe17 	ldw	r2,-8(fp)
 2001728:	1004c03a 	cmpne	r2,r2,zero
 200172c:	1000021e 	bne	r2,zero,2001738 <ADXL345_SPI_WaitDataReady+0x48>
            usleep(500); 
 2001730:	01007d04 	movi	r4,500
 2001734:	20144f00 	call	20144f0 <usleep>
    }while (!bDataReady && ( (alt_nticks() - TimeStart) < DATA_READY_TIMEOUT) );
 2001738:	e0bffe17 	ldw	r2,-8(fp)
 200173c:	1004c03a 	cmpne	r2,r2,zero
 2001740:	10000d1e 	bne	r2,zero,2001778 <ADXL345_SPI_WaitDataReady+0x88>
 2001744:	008080b4 	movhi	r2,514
 2001748:	1093d204 	addi	r2,r2,20296
 200174c:	10800017 	ldw	r2,0(r2)
 2001750:	1007883a 	mov	r3,r2
 2001754:	e0bffd17 	ldw	r2,-12(fp)
 2001758:	18a1c83a 	sub	r16,r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200175c:	008080b4 	movhi	r2,514
 2001760:	1093d104 	addi	r2,r2,20292
 2001764:	10800017 	ldw	r2,0(r2)
 2001768:	1009883a 	mov	r4,r2
 200176c:	014000c4 	movi	r5,3
 2001770:	2005ab40 	call	2005ab4 <__udivsi3>
 2001774:	80bfe836 	bltu	r16,r2,2001718 <ADXL345_SPI_WaitDataReady+0x28>
    
    return bDataReady;
 2001778:	e0bffe17 	ldw	r2,-8(fp)
        
}    
 200177c:	e037883a 	mov	sp,fp
 2001780:	dfc00217 	ldw	ra,8(sp)
 2001784:	df000117 	ldw	fp,4(sp)
 2001788:	dc000017 	ldw	r16,0(sp)
 200178c:	dec00304 	addi	sp,sp,12
 2001790:	f800283a 	ret

02001794 <ADXL345_SPI_IsDataReady>:

bool ADXL345_SPI_IsDataReady(alt_u32 device_base){
 2001794:	defffb04 	addi	sp,sp,-20
 2001798:	dfc00415 	stw	ra,16(sp)
 200179c:	df000315 	stw	fp,12(sp)
 20017a0:	df000304 	addi	fp,sp,12
 20017a4:	e13fff15 	stw	r4,-4(fp)
    bool bReady = FALSE;
 20017a8:	e03ffd15 	stw	zero,-12(fp)
    alt_u8 data8;
    
    if (SPI_Read(device_base, ADXL345_REG_INT_SOURCE,&data8)){
 20017ac:	e1bffe04 	addi	r6,fp,-8
 20017b0:	e13fff17 	ldw	r4,-4(fp)
 20017b4:	01400c04 	movi	r5,48
 20017b8:	2002b780 	call	2002b78 <SPI_Read>
 20017bc:	1005003a 	cmpeq	r2,r2,zero
 20017c0:	1000081e 	bne	r2,zero,20017e4 <ADXL345_SPI_IsDataReady+0x50>
        if (data8 & XL345_DATAREADY)
 20017c4:	e0bffe03 	ldbu	r2,-8(fp)
 20017c8:	10803fcc 	andi	r2,r2,255
 20017cc:	1080201c 	xori	r2,r2,128
 20017d0:	10bfe004 	addi	r2,r2,-128
 20017d4:	1004403a 	cmpge	r2,r2,zero
 20017d8:	1000021e 	bne	r2,zero,20017e4 <ADXL345_SPI_IsDataReady+0x50>
            bReady = TRUE;
 20017dc:	00800044 	movi	r2,1
 20017e0:	e0bffd15 	stw	r2,-12(fp)
    }            
    
    return bReady;
 20017e4:	e0bffd17 	ldw	r2,-12(fp)
}
 20017e8:	e037883a 	mov	sp,fp
 20017ec:	dfc00117 	ldw	ra,4(sp)
 20017f0:	df000017 	ldw	fp,0(sp)
 20017f4:	dec00204 	addi	sp,sp,8
 20017f8:	f800283a 	ret

020017fc <ADXL345_SPI_XYZ_Read>:



bool ADXL345_SPI_XYZ_Read(alt_u32 device_base, alt_u16 szData16[3]){
 20017fc:	defff904 	addi	sp,sp,-28
 2001800:	dfc00615 	stw	ra,24(sp)
 2001804:	df000515 	stw	fp,20(sp)
 2001808:	df000504 	addi	fp,sp,20
 200180c:	e13ffe15 	stw	r4,-8(fp)
 2001810:	e17fff15 	stw	r5,-4(fp)
    bool bPass;
    alt_u8 szData8[6];
    bPass = SPI_MultipleRead(device_base, 0x32, (alt_u8 *)&szData8, sizeof(szData8));
 2001814:	e1bffc04 	addi	r6,fp,-16
 2001818:	e13ffe17 	ldw	r4,-8(fp)
 200181c:	01400c84 	movi	r5,50
 2001820:	01c00184 	movi	r7,6
 2001824:	2002a200 	call	2002a20 <SPI_MultipleRead>
 2001828:	e0bffb15 	stw	r2,-20(fp)
    if (bPass){
 200182c:	e0bffb17 	ldw	r2,-20(fp)
 2001830:	1005003a 	cmpeq	r2,r2,zero
 2001834:	10001e1e 	bne	r2,zero,20018b0 <ADXL345_SPI_XYZ_Read+0xb4>
        szData16[0] = (szData8[1] << 8) | szData8[0]; 
 2001838:	e0bffc43 	ldbu	r2,-15(fp)
 200183c:	10803fcc 	andi	r2,r2,255
 2001840:	1004923a 	slli	r2,r2,8
 2001844:	1007883a 	mov	r3,r2
 2001848:	e0bffc03 	ldbu	r2,-16(fp)
 200184c:	10803fcc 	andi	r2,r2,255
 2001850:	1884b03a 	or	r2,r3,r2
 2001854:	1007883a 	mov	r3,r2
 2001858:	e0bfff17 	ldw	r2,-4(fp)
 200185c:	10c0000d 	sth	r3,0(r2)
        szData16[1] = (szData8[3] << 8) | szData8[2];
 2001860:	e0bfff17 	ldw	r2,-4(fp)
 2001864:	11000084 	addi	r4,r2,2
 2001868:	e0bffcc3 	ldbu	r2,-13(fp)
 200186c:	10803fcc 	andi	r2,r2,255
 2001870:	1004923a 	slli	r2,r2,8
 2001874:	1007883a 	mov	r3,r2
 2001878:	e0bffc83 	ldbu	r2,-14(fp)
 200187c:	10803fcc 	andi	r2,r2,255
 2001880:	1884b03a 	or	r2,r3,r2
 2001884:	2080000d 	sth	r2,0(r4)
        szData16[2] = (szData8[5] << 8) | szData8[4];
 2001888:	e0bfff17 	ldw	r2,-4(fp)
 200188c:	11000104 	addi	r4,r2,4
 2001890:	e0bffd43 	ldbu	r2,-11(fp)
 2001894:	10803fcc 	andi	r2,r2,255
 2001898:	1004923a 	slli	r2,r2,8
 200189c:	1007883a 	mov	r3,r2
 20018a0:	e0bffd03 	ldbu	r2,-12(fp)
 20018a4:	10803fcc 	andi	r2,r2,255
 20018a8:	1884b03a 	or	r2,r3,r2
 20018ac:	2080000d 	sth	r2,0(r4)
    }        
    
    return bPass;
 20018b0:	e0bffb17 	ldw	r2,-20(fp)
}
 20018b4:	e037883a 	mov	sp,fp
 20018b8:	dfc00117 	ldw	ra,4(sp)
 20018bc:	df000017 	ldw	fp,0(sp)
 20018c0:	dec00204 	addi	sp,sp,8
 20018c4:	f800283a 	ret

020018c8 <ADXL345_SPI_IdRead>:

bool ADXL345_SPI_IdRead(alt_u32 device_base, alt_u8 *pId){
 20018c8:	defffb04 	addi	sp,sp,-20
 20018cc:	dfc00415 	stw	ra,16(sp)
 20018d0:	df000315 	stw	fp,12(sp)
 20018d4:	df000304 	addi	fp,sp,12
 20018d8:	e13ffe15 	stw	r4,-8(fp)
 20018dc:	e17fff15 	stw	r5,-4(fp)
    bool bPass;
    bPass = SPI_Read(device_base, ADXL345_REG_DEVID, pId);
 20018e0:	e13ffe17 	ldw	r4,-8(fp)
 20018e4:	000b883a 	mov	r5,zero
 20018e8:	e1bfff17 	ldw	r6,-4(fp)
 20018ec:	2002b780 	call	2002b78 <SPI_Read>
 20018f0:	e0bffd15 	stw	r2,-12(fp)
    
    return bPass;
 20018f4:	e0bffd17 	ldw	r2,-12(fp)
}
 20018f8:	e037883a 	mov	sp,fp
 20018fc:	dfc00117 	ldw	ra,4(sp)
 2001900:	df000017 	ldw	fp,0(sp)
 2001904:	dec00204 	addi	sp,sp,8
 2001908:	f800283a 	ret

0200190c <ADC_Read>:
#include "adc_spi_read.h"

#define START_FLAG  0x8000
#define DONE_FLAG   0x8000

alt_u16 ADC_Read(alt_u8 NextChannel){
 200190c:	defff904 	addi	sp,sp,-28
 2001910:	dfc00615 	stw	ra,24(sp)
 2001914:	df000515 	stw	fp,20(sp)
 2001918:	df000504 	addi	fp,sp,20
 200191c:	e13fff05 	stb	r4,-4(fp)
    alt_u16 Data16, DigitalValue = 0;
 2001920:	e03ffe0d 	sth	zero,-8(fp)
    bool bDone = FALSE;
 2001924:	e03ffd15 	stw	zero,-12(fp)
    const int nMaxWait = 1000;
 2001928:	0080fa04 	movi	r2,1000
 200192c:	e0bffc15 	stw	r2,-16(fp)
    int nWaitCnt = 0;
 2001930:	e03ffb15 	stw	zero,-20(fp)
    
    // start
    Data16 = NextChannel; //0, 1, 2 ...
 2001934:	e0bfff03 	ldbu	r2,-4(fp)
 2001938:	e0bffe8d 	sth	r2,-6(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
 200193c:	e0fffe8b 	ldhu	r3,-6(fp)
 2001940:	00818034 	movhi	r2,1536
 2001944:	10841e04 	addi	r2,r2,4216
 2001948:	10c00035 	stwio	r3,0(r2)
    Data16 |= START_FLAG;
 200194c:	e0fffe8b 	ldhu	r3,-6(fp)
 2001950:	00a00004 	movi	r2,-32768
 2001954:	1884b03a 	or	r2,r3,r2
 2001958:	e0bffe8d 	sth	r2,-6(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
 200195c:	e0fffe8b 	ldhu	r3,-6(fp)
 2001960:	00818034 	movhi	r2,1536
 2001964:	10841e04 	addi	r2,r2,4216
 2001968:	10c00035 	stwio	r3,0(r2)
    usleep(10000); // wait 10ms
 200196c:	0109c404 	movi	r4,10000
 2001970:	20144f00 	call	20144f0 <usleep>
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
 2001974:	00000a06 	br	20019a0 <ADC_Read+0x94>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
 2001978:	00818034 	movhi	r2,1536
 200197c:	10841e04 	addi	r2,r2,4216
 2001980:	10800037 	ldwio	r2,0(r2)
 2001984:	e0bffe8d 	sth	r2,-6(fp)
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
 2001988:	e0bffe8b 	ldhu	r2,-6(fp)
 200198c:	10bfffcc 	andi	r2,r2,65535
 2001990:	10a0001c 	xori	r2,r2,32768
 2001994:	10a00004 	addi	r2,r2,-32768
 2001998:	1004d7fa 	srli	r2,r2,31
 200199c:	e0bffd15 	stw	r2,-12(fp)
    Data16 |= START_FLAG;
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
    usleep(10000); // wait 10ms
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
 20019a0:	e0bffd17 	ldw	r2,-12(fp)
 20019a4:	1004c03a 	cmpne	r2,r2,zero
 20019a8:	10000a1e 	bne	r2,zero,20019d4 <ADC_Read+0xc8>
 20019ac:	e0fffb17 	ldw	r3,-20(fp)
 20019b0:	e0bffc17 	ldw	r2,-16(fp)
 20019b4:	10c4403a 	cmpge	r2,r2,r3
 20019b8:	1007883a 	mov	r3,r2
 20019bc:	e0bffb17 	ldw	r2,-20(fp)
 20019c0:	10800044 	addi	r2,r2,1
 20019c4:	e0bffb15 	stw	r2,-20(fp)
 20019c8:	18803fcc 	andi	r2,r3,255
 20019cc:	1004c03a 	cmpne	r2,r2,zero
 20019d0:	103fe91e 	bne	r2,zero,2001978 <ADC_Read+0x6c>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
    }
    
    if (bDone)
 20019d4:	e0bffd17 	ldw	r2,-12(fp)
 20019d8:	1005003a 	cmpeq	r2,r2,zero
 20019dc:	1000031e 	bne	r2,zero,20019ec <ADC_Read+0xe0>
        DigitalValue = Data16 & 0xFFF; // 12 bits
 20019e0:	e0bffe8b 	ldhu	r2,-6(fp)
 20019e4:	1083ffcc 	andi	r2,r2,4095
 20019e8:	e0bffe0d 	sth	r2,-8(fp)
    
    // stop
    IOWR(ADC_SPI_READ_BASE, 0, 0);
 20019ec:	00818034 	movhi	r2,1536
 20019f0:	10841e04 	addi	r2,r2,4216
 20019f4:	10000035 	stwio	zero,0(r2)
    
    return DigitalValue;
 20019f8:	e0bffe0b 	ldhu	r2,-8(fp)
}
 20019fc:	e037883a 	mov	sp,fp
 2001a00:	dfc00117 	ldw	ra,4(sp)
 2001a04:	df000017 	ldw	fp,0(sp)
 2001a08:	dec00204 	addi	sp,sp,8
 2001a0c:	f800283a 	ret

02001a10 <Flash_InfoDump>:
    int number_of_regions_flash;
}FLASH_INFO;



bool Flash_InfoDump(char *pFlashName){
 2001a10:	defff304 	addi	sp,sp,-52
 2001a14:	dfc00c15 	stw	ra,48(sp)
 2001a18:	df000b15 	stw	fp,44(sp)
 2001a1c:	df000b04 	addi	fp,sp,44
 2001a20:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
 2001a24:	e03ffc15 	stw	zero,-16(fp)
    alt_flash_fd* fd;
    int number_of_regions;
    int ret_code;
    /* Set write_data to all 0xa */
    FLASH_DEBUG(("Flash_InfoDump\r\n"));
    fd = alt_flash_open_dev(pFlashName);
 2001a28:	e13fff17 	ldw	r4,-4(fp)
 2001a2c:	20138c40 	call	20138c4 <alt_flash_open_dev>
 2001a30:	e0bffa15 	stw	r2,-24(fp)
    if (fd){
 2001a34:	e0bffa17 	ldw	r2,-24(fp)
 2001a38:	1005003a 	cmpeq	r2,r2,zero
 2001a3c:	1000211e 	bne	r2,zero,2001ac4 <Flash_InfoDump+0xb4>
 2001a40:	e0bffa17 	ldw	r2,-24(fp)
 2001a44:	e0bff515 	stw	r2,-44(fp)
 2001a48:	e0bffd04 	addi	r2,fp,-12
 2001a4c:	e0bff615 	stw	r2,-40(fp)
 2001a50:	e0bffe04 	addi	r2,fp,-8
 2001a54:	e0bff715 	stw	r2,-36(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
 2001a58:	e0bff517 	ldw	r2,-44(fp)
 2001a5c:	10800717 	ldw	r2,28(r2)
 2001a60:	e13ff517 	ldw	r4,-44(fp)
 2001a64:	e17ff617 	ldw	r5,-40(fp)
 2001a68:	e1bff717 	ldw	r6,-36(fp)
 2001a6c:	103ee83a 	callr	r2
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
 2001a70:	e0bff915 	stw	r2,-28(fp)
        if (ret_code == 0){
 2001a74:	e0bff917 	ldw	r2,-28(fp)
 2001a78:	1004c03a 	cmpne	r2,r2,zero
 2001a7c:	10000f1e 	bne	r2,zero,2001abc <Flash_InfoDump+0xac>
            int i;
            bSuccess = TRUE;
 2001a80:	00800044 	movi	r2,1
 2001a84:	e0bffc15 	stw	r2,-16(fp)
            nextreg = regions;
 2001a88:	e0bffd17 	ldw	r2,-12(fp)
 2001a8c:	e0bffb15 	stw	r2,-20(fp)
            FLASH_DEBUG(("number_of_regsion:%d\r\n", number_of_regions));
            for(i=0;i<number_of_regions;i++){
 2001a90:	e03ff815 	stw	zero,-32(fp)
 2001a94:	00000606 	br	2001ab0 <Flash_InfoDump+0xa0>
                FLASH_DEBUG(("regsion[%d]\r\n", i));
                FLASH_DEBUG(("  offset:%d\r\n", nextreg->offset));
                FLASH_DEBUG(("  region_size:%d\r\n", nextreg->region_size));
                FLASH_DEBUG(("  number_of_blocks:%d\r\n", nextreg->number_of_blocks));
                FLASH_DEBUG(("  block_size;:%d\r\n", nextreg->block_size));
                nextreg++;
 2001a98:	e0bffb17 	ldw	r2,-20(fp)
 2001a9c:	10800404 	addi	r2,r2,16
 2001aa0:	e0bffb15 	stw	r2,-20(fp)
        if (ret_code == 0){
            int i;
            bSuccess = TRUE;
            nextreg = regions;
            FLASH_DEBUG(("number_of_regsion:%d\r\n", number_of_regions));
            for(i=0;i<number_of_regions;i++){
 2001aa4:	e0bff817 	ldw	r2,-32(fp)
 2001aa8:	10800044 	addi	r2,r2,1
 2001aac:	e0bff815 	stw	r2,-32(fp)
 2001ab0:	e0fffe17 	ldw	r3,-8(fp)
 2001ab4:	e0bff817 	ldw	r2,-32(fp)
 2001ab8:	10fff716 	blt	r2,r3,2001a98 <Flash_InfoDump+0x88>
                nextreg++;
            }                
        }else{
            FLASH_DEBUG(("alt_get_flash_info error, ret_code:%d fail\r\n", ret_code));
        }
        alt_flash_close_dev(fd);
 2001abc:	e13ffa17 	ldw	r4,-24(fp)
 2001ac0:	20139400 	call	2013940 <alt_flash_close_dev>
    }
    
    if (!bSuccess)        
        FLASH_DEBUG(("Flash_InfoDump fail\r\n"));

    return bSuccess;
 2001ac4:	e0bffc17 	ldw	r2,-16(fp)
    
}
 2001ac8:	e037883a 	mov	sp,fp
 2001acc:	dfc00117 	ldw	ra,4(sp)
 2001ad0:	df000017 	ldw	fp,0(sp)
 2001ad4:	dec00204 	addi	sp,sp,8
 2001ad8:	f800283a 	ret

02001adc <Flash_Open>:



FLASH_HANDLE Flash_Open(char *pFlashName){
 2001adc:	defff704 	addi	sp,sp,-36
 2001ae0:	dfc00815 	stw	ra,32(sp)
 2001ae4:	df000715 	stw	fp,28(sp)
 2001ae8:	df000704 	addi	fp,sp,28
 2001aec:	e13fff15 	stw	r4,-4(fp)
    int error_code;
    bool bSuccess = FALSE;
 2001af0:	e03ffd15 	stw	zero,-12(fp)
    FLASH_INFO *pFlash=NULL;
 2001af4:	e03ffc15 	stw	zero,-16(fp)
    
    pFlash = (FLASH_INFO *)malloc(sizeof(FLASH_INFO));
 2001af8:	01000304 	movi	r4,12
 2001afc:	20063680 	call	2006368 <malloc>
 2001b00:	e0bffc15 	stw	r2,-16(fp)
    pFlash->fd_flash = alt_flash_open_dev(pFlashName);
 2001b04:	e13fff17 	ldw	r4,-4(fp)
 2001b08:	20138c40 	call	20138c4 <alt_flash_open_dev>
 2001b0c:	1007883a 	mov	r3,r2
 2001b10:	e0bffc17 	ldw	r2,-16(fp)
 2001b14:	10c00015 	stw	r3,0(r2)
    if (pFlash->fd_flash){
 2001b18:	e0bffc17 	ldw	r2,-16(fp)
 2001b1c:	10800017 	ldw	r2,0(r2)
 2001b20:	1005003a 	cmpeq	r2,r2,zero
 2001b24:	1000151e 	bne	r2,zero,2001b7c <Flash_Open+0xa0>
        error_code = alt_get_flash_info(pFlash->fd_flash,&pFlash->regions_flash,&pFlash->number_of_regions_flash);
 2001b28:	e0bffc17 	ldw	r2,-16(fp)
 2001b2c:	10c00017 	ldw	r3,0(r2)
 2001b30:	e0bffc17 	ldw	r2,-16(fp)
 2001b34:	11000104 	addi	r4,r2,4
 2001b38:	e0bffc17 	ldw	r2,-16(fp)
 2001b3c:	10800204 	addi	r2,r2,8
 2001b40:	e0fff915 	stw	r3,-28(fp)
 2001b44:	e13ffa15 	stw	r4,-24(fp)
 2001b48:	e0bffb15 	stw	r2,-20(fp)
 2001b4c:	e0bff917 	ldw	r2,-28(fp)
 2001b50:	10800717 	ldw	r2,28(r2)
 2001b54:	e13ff917 	ldw	r4,-28(fp)
 2001b58:	e17ffa17 	ldw	r5,-24(fp)
 2001b5c:	e1bffb17 	ldw	r6,-20(fp)
 2001b60:	103ee83a 	callr	r2
 2001b64:	e0bffe15 	stw	r2,-8(fp)
        if (error_code == 0){
 2001b68:	e0bffe17 	ldw	r2,-8(fp)
 2001b6c:	1004c03a 	cmpne	r2,r2,zero
 2001b70:	1000021e 	bne	r2,zero,2001b7c <Flash_Open+0xa0>
            bSuccess = TRUE;
 2001b74:	00800044 	movi	r2,1
 2001b78:	e0bffd15 	stw	r2,-12(fp)
        }            
    }
    
    if (!bSuccess){
 2001b7c:	e0bffd17 	ldw	r2,-12(fp)
 2001b80:	1004c03a 	cmpne	r2,r2,zero
 2001b84:	1000031e 	bne	r2,zero,2001b94 <Flash_Open+0xb8>
        free(pFlash);
 2001b88:	e13ffc17 	ldw	r4,-16(fp)
 2001b8c:	20063540 	call	2006354 <free>
        pFlash= NULL;
 2001b90:	e03ffc15 	stw	zero,-16(fp)
    }        
    return pFlash;
 2001b94:	e0bffc17 	ldw	r2,-16(fp)
            
}
 2001b98:	e037883a 	mov	sp,fp
 2001b9c:	dfc00117 	ldw	ra,4(sp)
 2001ba0:	df000017 	ldw	fp,0(sp)
 2001ba4:	dec00204 	addi	sp,sp,8
 2001ba8:	f800283a 	ret

02001bac <Flash_Close>:

bool Flash_Close(FLASH_HANDLE Handle){
 2001bac:	defffc04 	addi	sp,sp,-16
 2001bb0:	dfc00315 	stw	ra,12(sp)
 2001bb4:	df000215 	stw	fp,8(sp)
 2001bb8:	df000204 	addi	fp,sp,8
 2001bbc:	e13fff15 	stw	r4,-4(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 2001bc0:	e0bfff17 	ldw	r2,-4(fp)
 2001bc4:	e0bffe15 	stw	r2,-8(fp)
    if (pFlash->fd_flash){
 2001bc8:	e0bffe17 	ldw	r2,-8(fp)
 2001bcc:	10800017 	ldw	r2,0(r2)
 2001bd0:	1005003a 	cmpeq	r2,r2,zero
 2001bd4:	1000031e 	bne	r2,zero,2001be4 <Flash_Close+0x38>
        alt_flash_close_dev(pFlash->fd_flash);
 2001bd8:	e0bffe17 	ldw	r2,-8(fp)
 2001bdc:	11000017 	ldw	r4,0(r2)
 2001be0:	20139400 	call	2013940 <alt_flash_close_dev>
    }
    free(Handle);
 2001be4:	e13fff17 	ldw	r4,-4(fp)
 2001be8:	20063540 	call	2006354 <free>
    return TRUE;
 2001bec:	00800044 	movi	r2,1
}
 2001bf0:	e037883a 	mov	sp,fp
 2001bf4:	dfc00117 	ldw	ra,4(sp)
 2001bf8:	df000017 	ldw	fp,0(sp)
 2001bfc:	dec00204 	addi	sp,sp,8
 2001c00:	f800283a 	ret

02001c04 <Flash_GetBlockInfo>:

bool Flash_GetBlockInfo(FLASH_HANDLE Handle, alt_u16 block_index, alt_32 *poffset, alt_32 *psize){
 2001c04:	defff204 	addi	sp,sp,-56
 2001c08:	df000d15 	stw	fp,52(sp)
 2001c0c:	df000d04 	addi	fp,sp,52
 2001c10:	e13ffb15 	stw	r4,-20(fp)
 2001c14:	e1bffd15 	stw	r6,-12(fp)
 2001c18:	e1fffe15 	stw	r7,-8(fp)
 2001c1c:	e17ffc0d 	sth	r5,-16(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 2001c20:	e0bffb17 	ldw	r2,-20(fp)
 2001c24:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 offset=0, length;        
 2001c28:	e03ff915 	stw	zero,-28(fp)
    int r, i, block_count=0;
 2001c2c:	e03ff515 	stw	zero,-44(fp)
    flash_region *nextreg = pFlash->regions_flash;
 2001c30:	e0bffa17 	ldw	r2,-24(fp)
 2001c34:	10800117 	ldw	r2,4(r2)
 2001c38:	e0bff415 	stw	r2,-48(fp)
    bool bFind = FALSE;
 2001c3c:	e03ff315 	stw	zero,-52(fp)
    
    if (!pFlash->fd_flash)
 2001c40:	e0bffa17 	ldw	r2,-24(fp)
 2001c44:	10800017 	ldw	r2,0(r2)
 2001c48:	1004c03a 	cmpne	r2,r2,zero
 2001c4c:	1000021e 	bne	r2,zero,2001c58 <Flash_GetBlockInfo+0x54>
        return FALSE;
 2001c50:	e03fff15 	stw	zero,-4(fp)
 2001c54:	00003506 	br	2001d2c <Flash_GetBlockInfo+0x128>
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
 2001c58:	e03ff715 	stw	zero,-36(fp)
 2001c5c:	00002106 	br	2001ce4 <Flash_GetBlockInfo+0xe0>
        for(i=0;i<nextreg->number_of_blocks;i++){
 2001c60:	e03ff615 	stw	zero,-40(fp)
 2001c64:	00001506 	br	2001cbc <Flash_GetBlockInfo+0xb8>
            if (block_count == block_index){
 2001c68:	e0fffc0b 	ldhu	r3,-16(fp)
 2001c6c:	e0bff517 	ldw	r2,-44(fp)
 2001c70:	1880061e 	bne	r3,r2,2001c8c <Flash_GetBlockInfo+0x88>
                bFind = TRUE;
 2001c74:	00800044 	movi	r2,1
 2001c78:	e0bff315 	stw	r2,-52(fp)
                length = nextreg->block_size;
 2001c7c:	e0bff417 	ldw	r2,-48(fp)
 2001c80:	10800317 	ldw	r2,12(r2)
 2001c84:	e0bff815 	stw	r2,-32(fp)
 2001c88:	00000906 	br	2001cb0 <Flash_GetBlockInfo+0xac>
            }else{
                offset += nextreg->block_size;
 2001c8c:	e0bff417 	ldw	r2,-48(fp)
 2001c90:	10800317 	ldw	r2,12(r2)
 2001c94:	1007883a 	mov	r3,r2
 2001c98:	e0bff917 	ldw	r2,-28(fp)
 2001c9c:	10c5883a 	add	r2,r2,r3
 2001ca0:	e0bff915 	stw	r2,-28(fp)
                block_count++;
 2001ca4:	e0bff517 	ldw	r2,-44(fp)
 2001ca8:	10800044 	addi	r2,r2,1
 2001cac:	e0bff515 	stw	r2,-44(fp)
    if (!pFlash->fd_flash)
        return FALSE;
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
        for(i=0;i<nextreg->number_of_blocks;i++){
 2001cb0:	e0bff617 	ldw	r2,-40(fp)
 2001cb4:	10800044 	addi	r2,r2,1
 2001cb8:	e0bff615 	stw	r2,-40(fp)
 2001cbc:	e0bff417 	ldw	r2,-48(fp)
 2001cc0:	10c00217 	ldw	r3,8(r2)
 2001cc4:	e0bff617 	ldw	r2,-40(fp)
 2001cc8:	10ffe716 	blt	r2,r3,2001c68 <Flash_GetBlockInfo+0x64>
            }else{
                offset += nextreg->block_size;
                block_count++;
            }
        }
        nextreg++;
 2001ccc:	e0bff417 	ldw	r2,-48(fp)
 2001cd0:	10800404 	addi	r2,r2,16
 2001cd4:	e0bff415 	stw	r2,-48(fp)
    
    if (!pFlash->fd_flash)
        return FALSE;
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
 2001cd8:	e0bff717 	ldw	r2,-36(fp)
 2001cdc:	10800044 	addi	r2,r2,1
 2001ce0:	e0bff715 	stw	r2,-36(fp)
 2001ce4:	e0bffa17 	ldw	r2,-24(fp)
 2001ce8:	10c00217 	ldw	r3,8(r2)
 2001cec:	e0bff717 	ldw	r2,-36(fp)
 2001cf0:	10c0030e 	bge	r2,r3,2001d00 <Flash_GetBlockInfo+0xfc>
 2001cf4:	e0bff317 	ldw	r2,-52(fp)
 2001cf8:	1005003a 	cmpeq	r2,r2,zero
 2001cfc:	103fd81e 	bne	r2,zero,2001c60 <Flash_GetBlockInfo+0x5c>
                block_count++;
            }
        }
        nextreg++;
    }    
    if (bFind){
 2001d00:	e0bff317 	ldw	r2,-52(fp)
 2001d04:	1005003a 	cmpeq	r2,r2,zero
 2001d08:	1000061e 	bne	r2,zero,2001d24 <Flash_GetBlockInfo+0x120>
        *poffset = offset;
 2001d0c:	e0fff917 	ldw	r3,-28(fp)
 2001d10:	e0bffd17 	ldw	r2,-12(fp)
 2001d14:	10c00015 	stw	r3,0(r2)
        *psize = length;
 2001d18:	e0fff817 	ldw	r3,-32(fp)
 2001d1c:	e0bffe17 	ldw	r2,-8(fp)
 2001d20:	10c00015 	stw	r3,0(r2)
    }
    
    return bFind;
 2001d24:	e0bff317 	ldw	r2,-52(fp)
 2001d28:	e0bfff15 	stw	r2,-4(fp)
 2001d2c:	e0bfff17 	ldw	r2,-4(fp)
    
}
 2001d30:	e037883a 	mov	sp,fp
 2001d34:	df000017 	ldw	fp,0(sp)
 2001d38:	dec00104 	addi	sp,sp,4
 2001d3c:	f800283a 	ret

02001d40 <Flash_Read>:

bool Flash_Read(FLASH_HANDLE Handle, alt_u32 offset, alt_u8 *szBuf, alt_u32 size){
 2001d40:	defff304 	addi	sp,sp,-52
 2001d44:	dfc00c15 	stw	ra,48(sp)
 2001d48:	df000b15 	stw	fp,44(sp)
 2001d4c:	df000b04 	addi	fp,sp,44
 2001d50:	e13ffb15 	stw	r4,-20(fp)
 2001d54:	e17ffc15 	stw	r5,-16(fp)
 2001d58:	e1bffd15 	stw	r6,-12(fp)
 2001d5c:	e1fffe15 	stw	r7,-8(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 2001d60:	e0bffb17 	ldw	r2,-20(fp)
 2001d64:	e0bffa15 	stw	r2,-24(fp)
    int error_code;
    if (!pFlash->fd_flash)
 2001d68:	e0bffa17 	ldw	r2,-24(fp)
 2001d6c:	10800017 	ldw	r2,0(r2)
 2001d70:	1004c03a 	cmpne	r2,r2,zero
 2001d74:	1000021e 	bne	r2,zero,2001d80 <Flash_Read+0x40>
        return FALSE;
 2001d78:	e03fff15 	stw	zero,-4(fp)
 2001d7c:	00001806 	br	2001de0 <Flash_Read+0xa0>
    error_code = alt_read_flash(pFlash->fd_flash, offset, szBuf, size);
 2001d80:	e0bffa17 	ldw	r2,-24(fp)
 2001d84:	10800017 	ldw	r2,0(r2)
 2001d88:	e0fffc17 	ldw	r3,-16(fp)
 2001d8c:	e13ffe17 	ldw	r4,-8(fp)
 2001d90:	e0bff515 	stw	r2,-44(fp)
 2001d94:	e0fff615 	stw	r3,-40(fp)
 2001d98:	e0bffd17 	ldw	r2,-12(fp)
 2001d9c:	e0bff715 	stw	r2,-36(fp)
 2001da0:	e13ff815 	stw	r4,-32(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
 2001da4:	e0bff517 	ldw	r2,-44(fp)
 2001da8:	10800617 	ldw	r2,24(r2)
 2001dac:	e13ff517 	ldw	r4,-44(fp)
 2001db0:	e17ff617 	ldw	r5,-40(fp)
 2001db4:	e1bff717 	ldw	r6,-36(fp)
 2001db8:	e1fff817 	ldw	r7,-32(fp)
 2001dbc:	103ee83a 	callr	r2
 2001dc0:	e0bff915 	stw	r2,-28(fp)
    if (error_code == 0)
 2001dc4:	e0bff917 	ldw	r2,-28(fp)
 2001dc8:	1004c03a 	cmpne	r2,r2,zero
 2001dcc:	1000031e 	bne	r2,zero,2001ddc <Flash_Read+0x9c>
        return TRUE;
 2001dd0:	00800044 	movi	r2,1
 2001dd4:	e0bfff15 	stw	r2,-4(fp)
 2001dd8:	00000106 	br	2001de0 <Flash_Read+0xa0>
    return FALSE;                    
 2001ddc:	e03fff15 	stw	zero,-4(fp)
 2001de0:	e0bfff17 	ldw	r2,-4(fp)
    
}
 2001de4:	e037883a 	mov	sp,fp
 2001de8:	dfc00117 	ldw	ra,4(sp)
 2001dec:	df000017 	ldw	fp,0(sp)
 2001df0:	dec00204 	addi	sp,sp,8
 2001df4:	f800283a 	ret

02001df8 <Flash_Write>:

bool Flash_Write(FLASH_HANDLE Handle, alt_u32 offset, alt_u8 *szData, alt_u32 size){
 2001df8:	deffe804 	addi	sp,sp,-96
 2001dfc:	dfc01715 	stw	ra,92(sp)
 2001e00:	df001615 	stw	fp,88(sp)
 2001e04:	df001604 	addi	fp,sp,88
 2001e08:	e13ffb15 	stw	r4,-20(fp)
 2001e0c:	e17ffc15 	stw	r5,-16(fp)
 2001e10:	e1bffd15 	stw	r6,-12(fp)
 2001e14:	e1fffe15 	stw	r7,-8(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 2001e18:	e0bffb17 	ldw	r2,-20(fp)
 2001e1c:	e0bffa15 	stw	r2,-24(fp)
    bool bSuccess = TRUE;
 2001e20:	00800044 	movi	r2,1
 2001e24:	e0bff915 	stw	r2,-28(fp)
    int error_code;
    
    if (!pFlash->fd_flash)
 2001e28:	e0bffa17 	ldw	r2,-24(fp)
 2001e2c:	10800017 	ldw	r2,0(r2)
 2001e30:	1004c03a 	cmpne	r2,r2,zero
 2001e34:	1000021e 	bne	r2,zero,2001e40 <Flash_Write+0x48>
        return FALSE;
 2001e38:	e03fff15 	stw	zero,-4(fp)
 2001e3c:	00007c06 	br	2002030 <Flash_Write+0x238>
    }else{
        FLASH_DEBUG(("alt_write_flash fail, error_code=%d\r\n", error_code));
    }    
#else
    int block_offset, block_size, write_count, this_write_size, r, i;//, first_offset;        
    flash_region *nextreg = pFlash->regions_flash;
 2001e40:	e0bffa17 	ldw	r2,-24(fp)
 2001e44:	10800117 	ldw	r2,4(r2)
 2001e48:	e0bff115 	stw	r2,-60(fp)

    
    block_offset = 0;
 2001e4c:	e03ff715 	stw	zero,-36(fp)
    write_count = 0;
 2001e50:	e03ff515 	stw	zero,-44(fp)
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
 2001e54:	e03ff315 	stw	zero,-52(fp)
 2001e58:	00006c06 	br	200200c <Flash_Write+0x214>
        for(i=0;i<nextreg->number_of_blocks && bSuccess;i++){
 2001e5c:	e03ff215 	stw	zero,-56(fp)
 2001e60:	00005d06 	br	2001fd8 <Flash_Write+0x1e0>
            block_size = nextreg->block_size;
 2001e64:	e0bff117 	ldw	r2,-60(fp)
 2001e68:	10800317 	ldw	r2,12(r2)
 2001e6c:	e0bff615 	stw	r2,-40(fp)
//            FLASH_DEBUG(("block_offset=%d, block_size=%d\r\n", block_offset, block_size));
//            if ((offset >= block_offset) && ((offset+size) <= (block_offset + block_size))){
            if (((offset+write_count) >= block_offset) && (write_count < size)){
 2001e70:	e0fff517 	ldw	r3,-44(fp)
 2001e74:	e0bffc17 	ldw	r2,-16(fp)
 2001e78:	1887883a 	add	r3,r3,r2
 2001e7c:	e0bff717 	ldw	r2,-36(fp)
 2001e80:	18804e36 	bltu	r3,r2,2001fbc <Flash_Write+0x1c4>
 2001e84:	e0fff517 	ldw	r3,-44(fp)
 2001e88:	e0bffe17 	ldw	r2,-8(fp)
 2001e8c:	18804b2e 	bgeu	r3,r2,2001fbc <Flash_Write+0x1c4>
                // write
                this_write_size = size - write_count;
 2001e90:	e0fff517 	ldw	r3,-44(fp)
 2001e94:	e0bffe17 	ldw	r2,-8(fp)
 2001e98:	10c5c83a 	sub	r2,r2,r3
 2001e9c:	e0bff415 	stw	r2,-48(fp)
                if (write_count == 0){
 2001ea0:	e0bff517 	ldw	r2,-44(fp)
 2001ea4:	1004c03a 	cmpne	r2,r2,zero
 2001ea8:	1000101e 	bne	r2,zero,2001eec <Flash_Write+0xf4>
                    // first block
                    if (this_write_size > (block_offset + block_size - offset))
 2001eac:	e13ff417 	ldw	r4,-48(fp)
 2001eb0:	e0fff717 	ldw	r3,-36(fp)
 2001eb4:	e0bff617 	ldw	r2,-40(fp)
 2001eb8:	1885883a 	add	r2,r3,r2
 2001ebc:	1007883a 	mov	r3,r2
 2001ec0:	e0bffc17 	ldw	r2,-16(fp)
 2001ec4:	1885c83a 	sub	r2,r3,r2
 2001ec8:	11000d2e 	bgeu	r2,r4,2001f00 <Flash_Write+0x108>
                        this_write_size = block_offset + block_size - offset;
 2001ecc:	e0fff717 	ldw	r3,-36(fp)
 2001ed0:	e0bff617 	ldw	r2,-40(fp)
 2001ed4:	1885883a 	add	r2,r3,r2
 2001ed8:	1007883a 	mov	r3,r2
 2001edc:	e0bffc17 	ldw	r2,-16(fp)
 2001ee0:	1885c83a 	sub	r2,r3,r2
 2001ee4:	e0bff415 	stw	r2,-48(fp)
 2001ee8:	00000506 	br	2001f00 <Flash_Write+0x108>
                }else{
                    // block aligement
                    if (this_write_size > block_size)
 2001eec:	e0fff417 	ldw	r3,-48(fp)
 2001ef0:	e0bff617 	ldw	r2,-40(fp)
 2001ef4:	10c0020e 	bge	r2,r3,2001f00 <Flash_Write+0x108>
                        this_write_size = block_size;
 2001ef8:	e0bff617 	ldw	r2,-40(fp)
 2001efc:	e0bff415 	stw	r2,-48(fp)
                }        
                error_code = alt_write_flash_block(pFlash->fd_flash, block_offset, offset+write_count, szData+write_count, this_write_size);
 2001f00:	e0bffa17 	ldw	r2,-24(fp)
 2001f04:	11000017 	ldw	r4,0(r2)
 2001f08:	e0fff517 	ldw	r3,-44(fp)
 2001f0c:	e0bffc17 	ldw	r2,-16(fp)
 2001f10:	1885883a 	add	r2,r3,r2
 2001f14:	100b883a 	mov	r5,r2
 2001f18:	e0bff517 	ldw	r2,-44(fp)
 2001f1c:	1007883a 	mov	r3,r2
 2001f20:	e0bffd17 	ldw	r2,-12(fp)
 2001f24:	1887883a 	add	r3,r3,r2
 2001f28:	e13feb15 	stw	r4,-84(fp)
 2001f2c:	e0bff717 	ldw	r2,-36(fp)
 2001f30:	e0bfec15 	stw	r2,-80(fp)
 2001f34:	e17fed15 	stw	r5,-76(fp)
 2001f38:	e0ffee15 	stw	r3,-72(fp)
 2001f3c:	e0bff417 	ldw	r2,-48(fp)
 2001f40:	e0bfef15 	stw	r2,-68(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
 2001f44:	e0bfeb17 	ldw	r2,-84(fp)
 2001f48:	10c00917 	ldw	r3,36(r2)
 2001f4c:	e0bfef17 	ldw	r2,-68(fp)
 2001f50:	d8800015 	stw	r2,0(sp)
 2001f54:	e13feb17 	ldw	r4,-84(fp)
 2001f58:	e17fec17 	ldw	r5,-80(fp)
 2001f5c:	e1bfed17 	ldw	r6,-76(fp)
 2001f60:	e1ffee17 	ldw	r7,-72(fp)
 2001f64:	183ee83a 	callr	r3
 2001f68:	e0bff015 	stw	r2,-64(fp)

  if(!ret_code)
 2001f6c:	e0bff017 	ldw	r2,-64(fp)
 2001f70:	1004c03a 	cmpne	r2,r2,zero
 2001f74:	1000071e 	bne	r2,zero,2001f94 <Flash_Write+0x19c>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
 2001f78:	e0bfeb17 	ldw	r2,-84(fp)
 2001f7c:	10800a17 	ldw	r2,40(r2)
 2001f80:	1007883a 	mov	r3,r2
 2001f84:	e0bfed17 	ldw	r2,-76(fp)
 2001f88:	1889883a 	add	r4,r3,r2
 2001f8c:	e17fef17 	ldw	r5,-68(fp)
 2001f90:	20137dc0 	call	20137dc <alt_dcache_flush>

  return ret_code;
 2001f94:	e0bff017 	ldw	r2,-64(fp)
 2001f98:	e0bff815 	stw	r2,-32(fp)
                //FLASH_DEBUG(("alt_write_flash_block, block_offset:%d, offset:%d, len:%d, this block_size:%d\r\n", block_offset, offset+write_count, this_write_size, block_size));
                if (error_code != 0){
 2001f9c:	e0bff817 	ldw	r2,-32(fp)
 2001fa0:	1005003a 	cmpeq	r2,r2,zero
 2001fa4:	1000011e 	bne	r2,zero,2001fac <Flash_Write+0x1b4>
                    bSuccess = FALSE;
 2001fa8:	e03ff915 	stw	zero,-28(fp)
                    FLASH_DEBUG(("alt_write_flash_block fail, error_code=%d\r\n", error_code));
                }    
                write_count += this_write_size;
 2001fac:	e0bff517 	ldw	r2,-44(fp)
 2001fb0:	e0fff417 	ldw	r3,-48(fp)
 2001fb4:	10c5883a 	add	r2,r2,r3
 2001fb8:	e0bff515 	stw	r2,-44(fp)
            }
            block_offset += block_size;
 2001fbc:	e0fff717 	ldw	r3,-36(fp)
 2001fc0:	e0bff617 	ldw	r2,-40(fp)
 2001fc4:	1885883a 	add	r2,r3,r2
 2001fc8:	e0bff715 	stw	r2,-36(fp)

    
    block_offset = 0;
    write_count = 0;
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
        for(i=0;i<nextreg->number_of_blocks && bSuccess;i++){
 2001fcc:	e0bff217 	ldw	r2,-56(fp)
 2001fd0:	10800044 	addi	r2,r2,1
 2001fd4:	e0bff215 	stw	r2,-56(fp)
 2001fd8:	e0bff117 	ldw	r2,-60(fp)
 2001fdc:	10c00217 	ldw	r3,8(r2)
 2001fe0:	e0bff217 	ldw	r2,-56(fp)
 2001fe4:	10c0030e 	bge	r2,r3,2001ff4 <Flash_Write+0x1fc>
 2001fe8:	e0bff917 	ldw	r2,-28(fp)
 2001fec:	1004c03a 	cmpne	r2,r2,zero
 2001ff0:	103f9c1e 	bne	r2,zero,2001e64 <Flash_Write+0x6c>
                }    
                write_count += this_write_size;
            }
            block_offset += block_size;
        }
        nextreg++;
 2001ff4:	e0bff117 	ldw	r2,-60(fp)
 2001ff8:	10800404 	addi	r2,r2,16
 2001ffc:	e0bff115 	stw	r2,-60(fp)
    flash_region *nextreg = pFlash->regions_flash;

    
    block_offset = 0;
    write_count = 0;
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
 2002000:	e0bff317 	ldw	r2,-52(fp)
 2002004:	10800044 	addi	r2,r2,1
 2002008:	e0bff315 	stw	r2,-52(fp)
 200200c:	e0bffa17 	ldw	r2,-24(fp)
 2002010:	10c00217 	ldw	r3,8(r2)
 2002014:	e0bff317 	ldw	r2,-52(fp)
 2002018:	10c0030e 	bge	r2,r3,2002028 <Flash_Write+0x230>
 200201c:	e0bff917 	ldw	r2,-28(fp)
 2002020:	1004c03a 	cmpne	r2,r2,zero
 2002024:	103f8d1e 	bne	r2,zero,2001e5c <Flash_Write+0x64>
    error_code = alt_write_flash(fd_flash, offset, szData, size); // it will erase flash block content before write data
//    error_code = alt_write_flash_block(fd_flash, offset, offset+size, szData, size); // it will preserve flash content
    if (error_code == 0)
        return TRUE;
*/        
    return bSuccess;                    
 2002028:	e0bff917 	ldw	r2,-28(fp)
 200202c:	e0bfff15 	stw	r2,-4(fp)
 2002030:	e0bfff17 	ldw	r2,-4(fp)
}
 2002034:	e037883a 	mov	sp,fp
 2002038:	dfc00117 	ldw	ra,4(sp)
 200203c:	df000017 	ldw	fp,0(sp)
 2002040:	dec00204 	addi	sp,sp,8
 2002044:	f800283a 	ret

02002048 <Flash_Erase>:

bool Flash_Erase(FLASH_HANDLE Handle, alt_u16 block_index){
 2002048:	defff204 	addi	sp,sp,-56
 200204c:	dfc00d15 	stw	ra,52(sp)
 2002050:	df000c15 	stw	fp,48(sp)
 2002054:	df000c04 	addi	fp,sp,48
 2002058:	e13ffd15 	stw	r4,-12(fp)
 200205c:	e17ffe0d 	sth	r5,-8(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 2002060:	e0bffd17 	ldw	r2,-12(fp)
 2002064:	e0bffa15 	stw	r2,-24(fp)
    if (!pFlash->fd_flash)
 2002068:	e0bffa17 	ldw	r2,-24(fp)
 200206c:	10800017 	ldw	r2,0(r2)
 2002070:	1004c03a 	cmpne	r2,r2,zero
 2002074:	1000021e 	bne	r2,zero,2002080 <Flash_Erase+0x38>
        return FALSE;
 2002078:	e03fff15 	stw	zero,-4(fp)
 200207c:	00002906 	br	2002124 <Flash_Erase+0xdc>
    alt_u32 offset;
    alt_u32 length;        
    int error_code;
    bool bSuccess = FALSE;
 2002080:	e03ff815 	stw	zero,-32(fp)

    
    if (Flash_GetBlockInfo(Handle, block_index, &offset, &length)){
 2002084:	e17ffe0b 	ldhu	r5,-8(fp)
 2002088:	e1bffb04 	addi	r6,fp,-20
 200208c:	e1fffc04 	addi	r7,fp,-16
 2002090:	e13ffd17 	ldw	r4,-12(fp)
 2002094:	2001c040 	call	2001c04 <Flash_GetBlockInfo>
 2002098:	1005003a 	cmpeq	r2,r2,zero
 200209c:	10001f1e 	bne	r2,zero,200211c <Flash_Erase+0xd4>
        error_code = alt_erase_flash_block(pFlash->fd_flash, offset, length);
 20020a0:	e0bffa17 	ldw	r2,-24(fp)
 20020a4:	10c00017 	ldw	r3,0(r2)
 20020a8:	e0bffb17 	ldw	r2,-20(fp)
 20020ac:	1009883a 	mov	r4,r2
 20020b0:	e0bffc17 	ldw	r2,-16(fp)
 20020b4:	e0fff415 	stw	r3,-48(fp)
 20020b8:	e13ff515 	stw	r4,-44(fp)
 20020bc:	e0bff615 	stw	r2,-40(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
 20020c0:	e0bff417 	ldw	r2,-48(fp)
 20020c4:	10800817 	ldw	r2,32(r2)
 20020c8:	e13ff417 	ldw	r4,-48(fp)
 20020cc:	e17ff517 	ldw	r5,-44(fp)
 20020d0:	103ee83a 	callr	r2
 20020d4:	e0bff715 	stw	r2,-36(fp)
  
  if(!ret_code)
 20020d8:	e0bff717 	ldw	r2,-36(fp)
 20020dc:	1004c03a 	cmpne	r2,r2,zero
 20020e0:	1000071e 	bne	r2,zero,2002100 <Flash_Erase+0xb8>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
 20020e4:	e0bff417 	ldw	r2,-48(fp)
 20020e8:	10800a17 	ldw	r2,40(r2)
 20020ec:	1007883a 	mov	r3,r2
 20020f0:	e0bff517 	ldw	r2,-44(fp)
 20020f4:	1889883a 	add	r4,r3,r2
 20020f8:	e17ff617 	ldw	r5,-40(fp)
 20020fc:	20137dc0 	call	20137dc <alt_dcache_flush>

  return ret_code;
 2002100:	e0bff717 	ldw	r2,-36(fp)
 2002104:	e0bff915 	stw	r2,-28(fp)
        //DEBUG_FLASH("Erase block[%d], offset=%Xh, lenght=%Xh", block_no, offset, length);
        if (error_code == 0)
 2002108:	e0bff917 	ldw	r2,-28(fp)
 200210c:	1004c03a 	cmpne	r2,r2,zero
 2002110:	1000021e 	bne	r2,zero,200211c <Flash_Erase+0xd4>
            bSuccess = TRUE;
 2002114:	00800044 	movi	r2,1
 2002118:	e0bff815 	stw	r2,-32(fp)
    }        
    
    return bSuccess;    
 200211c:	e0bff817 	ldw	r2,-32(fp)
 2002120:	e0bfff15 	stw	r2,-4(fp)
 2002124:	e0bfff17 	ldw	r2,-4(fp)
}
 2002128:	e037883a 	mov	sp,fp
 200212c:	dfc00117 	ldw	ra,4(sp)
 2002130:	df000017 	ldw	fp,0(sp)
 2002134:	dec00204 	addi	sp,sp,8
 2002138:	f800283a 	ret

0200213c <Flash_GetBlockCount>:

alt_u16 Flash_GetBlockCount(FLASH_HANDLE Handle){
 200213c:	defffa04 	addi	sp,sp,-24
 2002140:	df000515 	stw	fp,20(sp)
 2002144:	df000504 	addi	fp,sp,20
 2002148:	e13fff15 	stw	r4,-4(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;    
 200214c:	e0bfff17 	ldw	r2,-4(fp)
 2002150:	e0bffe15 	stw	r2,-8(fp)
    alt_u16 no=0;
 2002154:	e03ffd0d 	sth	zero,-12(fp)
    flash_region *nextreg = pFlash->regions_flash;
 2002158:	e0bffe17 	ldw	r2,-8(fp)
 200215c:	10800117 	ldw	r2,4(r2)
 2002160:	e0bffc15 	stw	r2,-16(fp)
    int r;
    for(r=0;r<pFlash->number_of_regions_flash;r++){
 2002164:	e03ffb15 	stw	zero,-20(fp)
 2002168:	00000c06 	br	200219c <Flash_GetBlockCount+0x60>
        no += nextreg->number_of_blocks;
 200216c:	e0bffc17 	ldw	r2,-16(fp)
 2002170:	10800217 	ldw	r2,8(r2)
 2002174:	1007883a 	mov	r3,r2
 2002178:	e0bffd0b 	ldhu	r2,-12(fp)
 200217c:	10c5883a 	add	r2,r2,r3
 2002180:	e0bffd0d 	sth	r2,-12(fp)
        nextreg++;
 2002184:	e0bffc17 	ldw	r2,-16(fp)
 2002188:	10800404 	addi	r2,r2,16
 200218c:	e0bffc15 	stw	r2,-16(fp)
alt_u16 Flash_GetBlockCount(FLASH_HANDLE Handle){
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;    
    alt_u16 no=0;
    flash_region *nextreg = pFlash->regions_flash;
    int r;
    for(r=0;r<pFlash->number_of_regions_flash;r++){
 2002190:	e0bffb17 	ldw	r2,-20(fp)
 2002194:	10800044 	addi	r2,r2,1
 2002198:	e0bffb15 	stw	r2,-20(fp)
 200219c:	e0bffe17 	ldw	r2,-8(fp)
 20021a0:	10c00217 	ldw	r3,8(r2)
 20021a4:	e0bffb17 	ldw	r2,-20(fp)
 20021a8:	10fff016 	blt	r2,r3,200216c <Flash_GetBlockCount+0x30>
        no += nextreg->number_of_blocks;
        nextreg++;
    }
    return no;
 20021ac:	e0bffd0b 	ldhu	r2,-12(fp)
}
 20021b0:	e037883a 	mov	sp,fp
 20021b4:	df000017 	ldw	fp,0(sp)
 20021b8:	dec00104 	addi	sp,sp,4
 20021bc:	f800283a 	ret

020021c0 <Flash_Size>:


alt_u32 Flash_Size(char *pFlashName){
 20021c0:	defff304 	addi	sp,sp,-52
 20021c4:	dfc00c15 	stw	ra,48(sp)
 20021c8:	df000b15 	stw	fp,44(sp)
 20021cc:	df000b04 	addi	fp,sp,44
 20021d0:	e13fff15 	stw	r4,-4(fp)
    alt_u32 FlashSize = 0;
 20021d4:	e03ffc15 	stw	zero,-16(fp)
    flash_region *regions, *nextreg;
    alt_flash_fd* fd;
    int number_of_regions;
    int ret_code, i;
    /* Set write_data to all 0xa */
    fd = alt_flash_open_dev(pFlashName);
 20021d8:	e13fff17 	ldw	r4,-4(fp)
 20021dc:	20138c40 	call	20138c4 <alt_flash_open_dev>
 20021e0:	e0bffa15 	stw	r2,-24(fp)
    if (fd){
 20021e4:	e0bffa17 	ldw	r2,-24(fp)
 20021e8:	1005003a 	cmpeq	r2,r2,zero
 20021ec:	1000281e 	bne	r2,zero,2002290 <Flash_Size+0xd0>
 20021f0:	e0bffa17 	ldw	r2,-24(fp)
 20021f4:	e0bff515 	stw	r2,-44(fp)
 20021f8:	e0bffd04 	addi	r2,fp,-12
 20021fc:	e0bff615 	stw	r2,-40(fp)
 2002200:	e0bffe04 	addi	r2,fp,-8
 2002204:	e0bff715 	stw	r2,-36(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
 2002208:	e0bff517 	ldw	r2,-44(fp)
 200220c:	10800717 	ldw	r2,28(r2)
 2002210:	e13ff517 	ldw	r4,-44(fp)
 2002214:	e17ff617 	ldw	r5,-40(fp)
 2002218:	e1bff717 	ldw	r6,-36(fp)
 200221c:	103ee83a 	callr	r2
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
 2002220:	e0bff915 	stw	r2,-28(fp)
        if (ret_code == 0 && number_of_regions >= 1){
 2002224:	e0bff917 	ldw	r2,-28(fp)
 2002228:	1004c03a 	cmpne	r2,r2,zero
 200222c:	1000161e 	bne	r2,zero,2002288 <Flash_Size+0xc8>
 2002230:	e0bffe17 	ldw	r2,-8(fp)
 2002234:	10800050 	cmplti	r2,r2,1
 2002238:	1000131e 	bne	r2,zero,2002288 <Flash_Size+0xc8>
            nextreg = regions;
 200223c:	e0bffd17 	ldw	r2,-12(fp)
 2002240:	e0bffb15 	stw	r2,-20(fp)
            for(i=0;i<number_of_regions;i++){
 2002244:	e03ff815 	stw	zero,-32(fp)
 2002248:	00000c06 	br	200227c <Flash_Size+0xbc>
                FlashSize += nextreg->region_size;
 200224c:	e0bffb17 	ldw	r2,-20(fp)
 2002250:	10800117 	ldw	r2,4(r2)
 2002254:	1007883a 	mov	r3,r2
 2002258:	e0bffc17 	ldw	r2,-16(fp)
 200225c:	10c5883a 	add	r2,r2,r3
 2002260:	e0bffc15 	stw	r2,-16(fp)
                nextreg++;
 2002264:	e0bffb17 	ldw	r2,-20(fp)
 2002268:	10800404 	addi	r2,r2,16
 200226c:	e0bffb15 	stw	r2,-20(fp)
    fd = alt_flash_open_dev(pFlashName);
    if (fd){
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
        if (ret_code == 0 && number_of_regions >= 1){
            nextreg = regions;
            for(i=0;i<number_of_regions;i++){
 2002270:	e0bff817 	ldw	r2,-32(fp)
 2002274:	10800044 	addi	r2,r2,1
 2002278:	e0bff815 	stw	r2,-32(fp)
 200227c:	e0fffe17 	ldw	r3,-8(fp)
 2002280:	e0bff817 	ldw	r2,-32(fp)
 2002284:	10fff116 	blt	r2,r3,200224c <Flash_Size+0x8c>
                FlashSize += nextreg->region_size;
                nextreg++;
            }
        }
        alt_flash_close_dev(fd);
 2002288:	e13ffa17 	ldw	r4,-24(fp)
 200228c:	20139400 	call	2013940 <alt_flash_close_dev>
    }
    return FlashSize;
 2002290:	e0bffc17 	ldw	r2,-16(fp)
}    
 2002294:	e037883a 	mov	sp,fp
 2002298:	dfc00117 	ldw	ra,4(sp)
 200229c:	df000017 	ldw	fp,0(sp)
 20022a0:	dec00204 	addi	sp,sp,8
 20022a4:	f800283a 	ret

020022a8 <FLASH_Verify>:



// bQuick=TRUE: just check first and last block 
bool FLASH_Verify(char *pFlashName, alt_u8 InitValue, bool bShowMessage, bool bQuickVerify){
 20022a8:	deffea04 	addi	sp,sp,-88
 20022ac:	dfc01515 	stw	ra,84(sp)
 20022b0:	df001415 	stw	fp,80(sp)
 20022b4:	df001404 	addi	fp,sp,80
 20022b8:	e13ffb15 	stw	r4,-20(fp)
 20022bc:	e1bffd15 	stw	r6,-12(fp)
 20022c0:	e1fffe15 	stw	r7,-8(fp)
 20022c4:	e17ffc05 	stb	r5,-16(fp)
    bool bPass = TRUE;
 20022c8:	00800044 	movi	r2,1
 20022cc:	e0bff815 	stw	r2,-32(fp)
    int i, k, BlockNum;
    FLASH_HANDLE hFlash;
    alt_u32 Offset, Size;
    alt_u8 *pBuf, Cnt;
    const int nBufSize = 8*1024; // 16K
 20022d0:	00880004 	movi	r2,8192
 20022d4:	e0bff115 	stw	r2,-60(fp)
    int nWriteSizeSum, nWriteSize;
    int nReadSizeSum, nReadSize;
    
    hFlash = Flash_Open(pFlashName);
 20022d8:	e13ffb17 	ldw	r4,-20(fp)
 20022dc:	2001adc0 	call	2001adc <Flash_Open>
 20022e0:	e0bff415 	stw	r2,-48(fp)
    if (!hFlash){
 20022e4:	e0bff417 	ldw	r2,-48(fp)
 20022e8:	1004c03a 	cmpne	r2,r2,zero
 20022ec:	1000081e 	bne	r2,zero,2002310 <FLASH_Verify+0x68>
        if (bShowMessage)
 20022f0:	e0bffd17 	ldw	r2,-12(fp)
 20022f4:	1005003a 	cmpeq	r2,r2,zero
 20022f8:	1000031e 	bne	r2,zero,2002308 <FLASH_Verify+0x60>
            printf("Failed to open flash.\r\n");
 20022fc:	010080b4 	movhi	r4,514
 2002300:	2101f604 	addi	r4,r4,2008
 2002304:	2006bd40 	call	2006bd4 <puts>
        return FALSE;
 2002308:	e03fff15 	stw	zero,-4(fp)
 200230c:	00014c06 	br	2002840 <FLASH_Verify+0x598>
    }        
        
        
    BlockNum = Flash_GetBlockCount(hFlash);
 2002310:	e13ff417 	ldw	r4,-48(fp)
 2002314:	200213c0 	call	200213c <Flash_GetBlockCount>
 2002318:	10bfffcc 	andi	r2,r2,65535
 200231c:	e0bff515 	stw	r2,-44(fp)
    
    //===== alloc buffer
    pBuf = (alt_u8 *)malloc(nBufSize);
 2002320:	e13ff117 	ldw	r4,-60(fp)
 2002324:	20063680 	call	2006368 <malloc>
 2002328:	e0bff315 	stw	r2,-52(fp)
    if (!pBuf){
 200232c:	e0bff317 	ldw	r2,-52(fp)
 2002330:	1004c03a 	cmpne	r2,r2,zero
 2002334:	1000081e 	bne	r2,zero,2002358 <FLASH_Verify+0xb0>
        if (bShowMessage)
 2002338:	e0bffd17 	ldw	r2,-12(fp)
 200233c:	1005003a 	cmpeq	r2,r2,zero
 2002340:	1000031e 	bne	r2,zero,2002350 <FLASH_Verify+0xa8>
            printf("[Error] Failed to alloc memory.\r\n");
 2002344:	010080b4 	movhi	r4,514
 2002348:	2101fc04 	addi	r4,r4,2032
 200234c:	2006bd40 	call	2006bd4 <puts>
        return FALSE;
 2002350:	e03fff15 	stw	zero,-4(fp)
 2002354:	00013a06 	br	2002840 <FLASH_Verify+0x598>
    }        
    
    
    //===== erase
    for(i=0;i<BlockNum && bPass;i++){
 2002358:	e03ff715 	stw	zero,-36(fp)
 200235c:	00002306 	br	20023ec <FLASH_Verify+0x144>
        if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 2002360:	e0bffe17 	ldw	r2,-8(fp)
 2002364:	1005003a 	cmpeq	r2,r2,zero
 2002368:	1000071e 	bne	r2,zero,2002388 <FLASH_Verify+0xe0>
 200236c:	e0bff717 	ldw	r2,-36(fp)
 2002370:	1005003a 	cmpeq	r2,r2,zero
 2002374:	1000041e 	bne	r2,zero,2002388 <FLASH_Verify+0xe0>
 2002378:	e0bff517 	ldw	r2,-44(fp)
 200237c:	10ffffc4 	addi	r3,r2,-1
 2002380:	e0bff717 	ldw	r2,-36(fp)
 2002384:	1880161e 	bne	r3,r2,20023e0 <FLASH_Verify+0x138>
            continue;
        bPass = Flash_Erase(hFlash, i);
 2002388:	e0bff717 	ldw	r2,-36(fp)
 200238c:	117fffcc 	andi	r5,r2,65535
 2002390:	e13ff417 	ldw	r4,-48(fp)
 2002394:	20020480 	call	2002048 <Flash_Erase>
 2002398:	e0bff815 	stw	r2,-32(fp)
        if (bShowMessage){
 200239c:	e0bffd17 	ldw	r2,-12(fp)
 20023a0:	1005003a 	cmpeq	r2,r2,zero
 20023a4:	10000e1e 	bne	r2,zero,20023e0 <FLASH_Verify+0x138>
            if (!bPass)
 20023a8:	e0bff817 	ldw	r2,-32(fp)
 20023ac:	1004c03a 	cmpne	r2,r2,zero
 20023b0:	1000061e 	bne	r2,zero,20023cc <FLASH_Verify+0x124>
                printf("[Error] Failed to erase flash block %d/%d\r\n.\r\n", i, BlockNum);
 20023b4:	010080b4 	movhi	r4,514
 20023b8:	21020504 	addi	r4,r4,2068
 20023bc:	e17ff717 	ldw	r5,-36(fp)
 20023c0:	e1bff517 	ldw	r6,-44(fp)
 20023c4:	2006abc0 	call	2006abc <printf>
 20023c8:	00000506 	br	20023e0 <FLASH_Verify+0x138>
            else
                printf("Erase Block %d/%d\r\n", i, BlockNum);
 20023cc:	010080b4 	movhi	r4,514
 20023d0:	21021104 	addi	r4,r4,2116
 20023d4:	e17ff717 	ldw	r5,-36(fp)
 20023d8:	e1bff517 	ldw	r6,-44(fp)
 20023dc:	2006abc0 	call	2006abc <printf>
        return FALSE;
    }        
    
    
    //===== erase
    for(i=0;i<BlockNum && bPass;i++){
 20023e0:	e0bff717 	ldw	r2,-36(fp)
 20023e4:	10800044 	addi	r2,r2,1
 20023e8:	e0bff715 	stw	r2,-36(fp)
 20023ec:	e0fff717 	ldw	r3,-36(fp)
 20023f0:	e0bff517 	ldw	r2,-44(fp)
 20023f4:	1880030e 	bge	r3,r2,2002404 <FLASH_Verify+0x15c>
 20023f8:	e0bff817 	ldw	r2,-32(fp)
 20023fc:	1004c03a 	cmpne	r2,r2,zero
 2002400:	103fd71e 	bne	r2,zero,2002360 <FLASH_Verify+0xb8>
                printf("Erase Block %d/%d\r\n", i, BlockNum);
        }            
    }        
    
    //===== write
    if (bPass){
 2002404:	e0bff817 	ldw	r2,-32(fp)
 2002408:	1005003a 	cmpeq	r2,r2,zero
 200240c:	1000681e 	bne	r2,zero,20025b0 <FLASH_Verify+0x308>
        Cnt = InitValue;
 2002410:	e0bffc03 	ldbu	r2,-16(fp)
 2002414:	e0bff205 	stb	r2,-56(fp)
        for(i=0;i<BlockNum && bPass;i++){
 2002418:	e03ff715 	stw	zero,-36(fp)
 200241c:	00005e06 	br	2002598 <FLASH_Verify+0x2f0>
            if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 2002420:	e0bffe17 	ldw	r2,-8(fp)
 2002424:	1005003a 	cmpeq	r2,r2,zero
 2002428:	1000071e 	bne	r2,zero,2002448 <FLASH_Verify+0x1a0>
 200242c:	e0bff717 	ldw	r2,-36(fp)
 2002430:	1005003a 	cmpeq	r2,r2,zero
 2002434:	1000041e 	bne	r2,zero,2002448 <FLASH_Verify+0x1a0>
 2002438:	e0bff517 	ldw	r2,-44(fp)
 200243c:	10ffffc4 	addi	r3,r2,-1
 2002440:	e0bff717 	ldw	r2,-36(fp)
 2002444:	1880511e 	bne	r3,r2,200258c <FLASH_Verify+0x2e4>
                continue;
            
            bPass = Flash_GetBlockInfo(hFlash, i, &Offset, &Size);
 2002448:	e0bff717 	ldw	r2,-36(fp)
 200244c:	117fffcc 	andi	r5,r2,65535
 2002450:	e1bff904 	addi	r6,fp,-28
 2002454:	e1fffa04 	addi	r7,fp,-24
 2002458:	e13ff417 	ldw	r4,-48(fp)
 200245c:	2001c040 	call	2001c04 <Flash_GetBlockInfo>
 2002460:	e0bff815 	stw	r2,-32(fp)
            if (!bPass)
 2002464:	e0bff817 	ldw	r2,-32(fp)
 2002468:	1005003a 	cmpeq	r2,r2,zero
 200246c:	1000471e 	bne	r2,zero,200258c <FLASH_Verify+0x2e4>
                continue;
                
            if (bShowMessage)            
 2002470:	e0bffd17 	ldw	r2,-12(fp)
 2002474:	1005003a 	cmpeq	r2,r2,zero
 2002478:	1000071e 	bne	r2,zero,2002498 <FLASH_Verify+0x1f0>
                printf("Write Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
 200247c:	e0bffa17 	ldw	r2,-24(fp)
 2002480:	100f883a 	mov	r7,r2
 2002484:	010080b4 	movhi	r4,514
 2002488:	21021604 	addi	r4,r4,2136
 200248c:	e17ff717 	ldw	r5,-36(fp)
 2002490:	e1bff517 	ldw	r6,-44(fp)
 2002494:	2006abc0 	call	2006abc <printf>
            nWriteSizeSum = 0;
 2002498:	e03ff015 	stw	zero,-64(fp)
            while(nWriteSizeSum < Size && bPass){
 200249c:	00003506 	br	2002574 <FLASH_Verify+0x2cc>
                // cal write size
                nWriteSize = nBufSize;
 20024a0:	e0bff117 	ldw	r2,-60(fp)
 20024a4:	e0bfef15 	stw	r2,-68(fp)
                if (nWriteSize > (Size - nWriteSizeSum))
 20024a8:	e13fef17 	ldw	r4,-68(fp)
 20024ac:	e0fffa17 	ldw	r3,-24(fp)
 20024b0:	e0bff017 	ldw	r2,-64(fp)
 20024b4:	1885c83a 	sub	r2,r3,r2
 20024b8:	1100042e 	bgeu	r2,r4,20024cc <FLASH_Verify+0x224>
                    nWriteSize = Size - nWriteSizeSum;
 20024bc:	e0bffa17 	ldw	r2,-24(fp)
 20024c0:	e0fff017 	ldw	r3,-64(fp)
 20024c4:	10c5c83a 	sub	r2,r2,r3
 20024c8:	e0bfef15 	stw	r2,-68(fp)
                // fill data
                for(k=0;k<nWriteSize;k++){
 20024cc:	e03ff615 	stw	zero,-40(fp)
 20024d0:	00000c06 	br	2002504 <FLASH_Verify+0x25c>
                    *(pBuf+k) = Cnt++;
 20024d4:	e0bff617 	ldw	r2,-40(fp)
 20024d8:	1007883a 	mov	r3,r2
 20024dc:	e0bff317 	ldw	r2,-52(fp)
 20024e0:	1887883a 	add	r3,r3,r2
 20024e4:	e0bff203 	ldbu	r2,-56(fp)
 20024e8:	18800005 	stb	r2,0(r3)
 20024ec:	e0bff203 	ldbu	r2,-56(fp)
 20024f0:	10800044 	addi	r2,r2,1
 20024f4:	e0bff205 	stb	r2,-56(fp)
                // cal write size
                nWriteSize = nBufSize;
                if (nWriteSize > (Size - nWriteSizeSum))
                    nWriteSize = Size - nWriteSizeSum;
                // fill data
                for(k=0;k<nWriteSize;k++){
 20024f8:	e0bff617 	ldw	r2,-40(fp)
 20024fc:	10800044 	addi	r2,r2,1
 2002500:	e0bff615 	stw	r2,-40(fp)
 2002504:	e0fff617 	ldw	r3,-40(fp)
 2002508:	e0bfef17 	ldw	r2,-68(fp)
 200250c:	18bff116 	blt	r3,r2,20024d4 <FLASH_Verify+0x22c>
                    *(pBuf+k) = Cnt++;
                }                     
                // write data block
                bPass = Flash_Write(hFlash, Offset+nWriteSizeSum, pBuf, nWriteSize);
 2002510:	e0fff917 	ldw	r3,-28(fp)
 2002514:	e0bff017 	ldw	r2,-64(fp)
 2002518:	188b883a 	add	r5,r3,r2
 200251c:	e1ffef17 	ldw	r7,-68(fp)
 2002520:	e13ff417 	ldw	r4,-48(fp)
 2002524:	e1bff317 	ldw	r6,-52(fp)
 2002528:	2001df80 	call	2001df8 <Flash_Write>
 200252c:	e0bff815 	stw	r2,-32(fp)
                if (bShowMessage && !bPass)            
 2002530:	e0bffd17 	ldw	r2,-12(fp)
 2002534:	1005003a 	cmpeq	r2,r2,zero
 2002538:	1000081e 	bne	r2,zero,200255c <FLASH_Verify+0x2b4>
 200253c:	e0bff817 	ldw	r2,-32(fp)
 2002540:	1004c03a 	cmpne	r2,r2,zero
 2002544:	1000051e 	bne	r2,zero,200255c <FLASH_Verify+0x2b4>
                    printf("[Error] Write Block[%d/%d] NG\r\n", i, BlockNum);
 2002548:	010080b4 	movhi	r4,514
 200254c:	21021e04 	addi	r4,r4,2168
 2002550:	e17ff717 	ldw	r5,-36(fp)
 2002554:	e1bff517 	ldw	r6,-44(fp)
 2002558:	2006abc0 	call	2006abc <printf>
                //
                usleep(20*1000);
 200255c:	01138804 	movi	r4,20000
 2002560:	20144f00 	call	20144f0 <usleep>
                //
                nWriteSizeSum += nWriteSize;
 2002564:	e0bff017 	ldw	r2,-64(fp)
 2002568:	e0ffef17 	ldw	r3,-68(fp)
 200256c:	10c5883a 	add	r2,r2,r3
 2002570:	e0bff015 	stw	r2,-64(fp)
                continue;
                
            if (bShowMessage)            
                printf("Write Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
            nWriteSizeSum = 0;
            while(nWriteSizeSum < Size && bPass){
 2002574:	e0fff017 	ldw	r3,-64(fp)
 2002578:	e0bffa17 	ldw	r2,-24(fp)
 200257c:	1880032e 	bgeu	r3,r2,200258c <FLASH_Verify+0x2e4>
 2002580:	e0bff817 	ldw	r2,-32(fp)
 2002584:	1004c03a 	cmpne	r2,r2,zero
 2002588:	103fc51e 	bne	r2,zero,20024a0 <FLASH_Verify+0x1f8>
    }        
    
    //===== write
    if (bPass){
        Cnt = InitValue;
        for(i=0;i<BlockNum && bPass;i++){
 200258c:	e0bff717 	ldw	r2,-36(fp)
 2002590:	10800044 	addi	r2,r2,1
 2002594:	e0bff715 	stw	r2,-36(fp)
 2002598:	e0fff717 	ldw	r3,-36(fp)
 200259c:	e0bff517 	ldw	r2,-44(fp)
 20025a0:	1880030e 	bge	r3,r2,20025b0 <FLASH_Verify+0x308>
 20025a4:	e0bff817 	ldw	r2,-32(fp)
 20025a8:	1004c03a 	cmpne	r2,r2,zero
 20025ac:	103f9c1e 	bne	r2,zero,2002420 <FLASH_Verify+0x178>
                nWriteSizeSum += nWriteSize;
            }
        }
    }
  
    if (bPass){
 20025b0:	e0bff817 	ldw	r2,-32(fp)
 20025b4:	1005003a 	cmpeq	r2,r2,zero
 20025b8:	1000071e 	bne	r2,zero,20025d8 <FLASH_Verify+0x330>
        if (bShowMessage)      
 20025bc:	e0bffd17 	ldw	r2,-12(fp)
 20025c0:	1005003a 	cmpeq	r2,r2,zero
 20025c4:	1000031e 	bne	r2,zero,20025d4 <FLASH_Verify+0x32c>
            printf("alt_dcache_flush_all\r\n");
 20025c8:	010080b4 	movhi	r4,514
 20025cc:	21022604 	addi	r4,r4,2200
 20025d0:	2006bd40 	call	2006bd4 <puts>
        alt_dcache_flush_all();
 20025d4:	20138540 	call	2013854 <alt_dcache_flush_all>
    }        
      
    //===== read & verify
    if (bPass){
 20025d8:	e0bff817 	ldw	r2,-32(fp)
 20025dc:	1005003a 	cmpeq	r2,r2,zero
 20025e0:	10008b1e 	bne	r2,zero,2002810 <FLASH_Verify+0x568>
        Cnt = InitValue;
 20025e4:	e0bffc03 	ldbu	r2,-16(fp)
 20025e8:	e0bff205 	stb	r2,-56(fp)
        for(i=0;i<BlockNum && bPass;i++){
 20025ec:	e03ff715 	stw	zero,-36(fp)
 20025f0:	00008106 	br	20027f8 <FLASH_Verify+0x550>
            if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 20025f4:	e0bffe17 	ldw	r2,-8(fp)
 20025f8:	1005003a 	cmpeq	r2,r2,zero
 20025fc:	1000071e 	bne	r2,zero,200261c <FLASH_Verify+0x374>
 2002600:	e0bff717 	ldw	r2,-36(fp)
 2002604:	1005003a 	cmpeq	r2,r2,zero
 2002608:	1000041e 	bne	r2,zero,200261c <FLASH_Verify+0x374>
 200260c:	e0bff517 	ldw	r2,-44(fp)
 2002610:	10ffffc4 	addi	r3,r2,-1
 2002614:	e0bff717 	ldw	r2,-36(fp)
 2002618:	1880741e 	bne	r3,r2,20027ec <FLASH_Verify+0x544>
                continue;
            
            bPass = Flash_GetBlockInfo(hFlash, i, &Offset, &Size);
 200261c:	e0bff717 	ldw	r2,-36(fp)
 2002620:	117fffcc 	andi	r5,r2,65535
 2002624:	e1bff904 	addi	r6,fp,-28
 2002628:	e1fffa04 	addi	r7,fp,-24
 200262c:	e13ff417 	ldw	r4,-48(fp)
 2002630:	2001c040 	call	2001c04 <Flash_GetBlockInfo>
 2002634:	e0bff815 	stw	r2,-32(fp)
            if (!bPass){
 2002638:	e0bff817 	ldw	r2,-32(fp)
 200263c:	1004c03a 	cmpne	r2,r2,zero
 2002640:	1000081e 	bne	r2,zero,2002664 <FLASH_Verify+0x3bc>
                if (bShowMessage)      
 2002644:	e0bffd17 	ldw	r2,-12(fp)
 2002648:	1005003a 	cmpeq	r2,r2,zero
 200264c:	1000671e 	bne	r2,zero,20027ec <FLASH_Verify+0x544>
                    printf("[Error] Flash_GetBlockInfo at block %d\r\n", i);
 2002650:	010080b4 	movhi	r4,514
 2002654:	21022c04 	addi	r4,r4,2224
 2002658:	e17ff717 	ldw	r5,-36(fp)
 200265c:	2006abc0 	call	2006abc <printf>
                continue;
 2002660:	00006206 	br	20027ec <FLASH_Verify+0x544>
            }    
            if (bShowMessage)            
 2002664:	e0bffd17 	ldw	r2,-12(fp)
 2002668:	1005003a 	cmpeq	r2,r2,zero
 200266c:	1000071e 	bne	r2,zero,200268c <FLASH_Verify+0x3e4>
                printf("Read Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
 2002670:	e0bffa17 	ldw	r2,-24(fp)
 2002674:	100f883a 	mov	r7,r2
 2002678:	010080b4 	movhi	r4,514
 200267c:	21023704 	addi	r4,r4,2268
 2002680:	e17ff717 	ldw	r5,-36(fp)
 2002684:	e1bff517 	ldw	r6,-44(fp)
 2002688:	2006abc0 	call	2006abc <printf>
            nReadSizeSum = 0;
 200268c:	e03fee15 	stw	zero,-72(fp)
            while(nReadSizeSum < Size && bPass){
 2002690:	00005006 	br	20027d4 <FLASH_Verify+0x52c>
                // cal write size
                nReadSize = nBufSize;
 2002694:	e0bff117 	ldw	r2,-60(fp)
 2002698:	e0bfed15 	stw	r2,-76(fp)
                if (nReadSize > (Size - nReadSizeSum))
 200269c:	e13fed17 	ldw	r4,-76(fp)
 20026a0:	e0fffa17 	ldw	r3,-24(fp)
 20026a4:	e0bfee17 	ldw	r2,-72(fp)
 20026a8:	1885c83a 	sub	r2,r3,r2
 20026ac:	1100042e 	bgeu	r2,r4,20026c0 <FLASH_Verify+0x418>
                    nReadSize = Size - nReadSizeSum;
 20026b0:	e0bffa17 	ldw	r2,-24(fp)
 20026b4:	e0ffee17 	ldw	r3,-72(fp)
 20026b8:	10c5c83a 	sub	r2,r2,r3
 20026bc:	e0bfed15 	stw	r2,-76(fp)
                    
                // read data block
                bPass = Flash_Read(hFlash, Offset+nReadSizeSum, pBuf, nReadSize);
 20026c0:	e0fff917 	ldw	r3,-28(fp)
 20026c4:	e0bfee17 	ldw	r2,-72(fp)
 20026c8:	188b883a 	add	r5,r3,r2
 20026cc:	e1ffed17 	ldw	r7,-76(fp)
 20026d0:	e13ff417 	ldw	r4,-48(fp)
 20026d4:	e1bff317 	ldw	r6,-52(fp)
 20026d8:	2001d400 	call	2001d40 <Flash_Read>
 20026dc:	e0bff815 	stw	r2,-32(fp)
                if (!bPass){
 20026e0:	e0bff817 	ldw	r2,-32(fp)
 20026e4:	1004c03a 	cmpne	r2,r2,zero
 20026e8:	10000c1e 	bne	r2,zero,200271c <FLASH_Verify+0x474>
                    if (bShowMessage)      
 20026ec:	e0bffd17 	ldw	r2,-12(fp)
 20026f0:	1005003a 	cmpeq	r2,r2,zero
 20026f4:	1000331e 	bne	r2,zero,20027c4 <FLASH_Verify+0x51c>
                        printf("[Error] Flash_Read fail at block-offset %d-%d\r\n", i, (int)Offset+nReadSizeSum);
 20026f8:	e0bff917 	ldw	r2,-28(fp)
 20026fc:	1007883a 	mov	r3,r2
 2002700:	e0bfee17 	ldw	r2,-72(fp)
 2002704:	188d883a 	add	r6,r3,r2
 2002708:	010080b4 	movhi	r4,514
 200270c:	21023f04 	addi	r4,r4,2300
 2002710:	e17ff717 	ldw	r5,-36(fp)
 2002714:	2006abc0 	call	2006abc <printf>
 2002718:	00002a06 	br	20027c4 <FLASH_Verify+0x51c>
                }else{
                    // verify
                    // verify data
                    for(k=0;k<nReadSize && bPass;k++){
 200271c:	e03ff615 	stw	zero,-40(fp)
 2002720:	00002206 	br	20027ac <FLASH_Verify+0x504>
                        if (*(pBuf+k) != Cnt){
 2002724:	e0bff617 	ldw	r2,-40(fp)
 2002728:	1007883a 	mov	r3,r2
 200272c:	e0bff317 	ldw	r2,-52(fp)
 2002730:	1885883a 	add	r2,r3,r2
 2002734:	10800003 	ldbu	r2,0(r2)
 2002738:	10c03fcc 	andi	r3,r2,255
 200273c:	e0bff203 	ldbu	r2,-56(fp)
 2002740:	18801426 	beq	r3,r2,2002794 <FLASH_Verify+0x4ec>
                            if (bShowMessage)      
 2002744:	e0bffd17 	ldw	r2,-12(fp)
 2002748:	1005003a 	cmpeq	r2,r2,zero
 200274c:	10000f1e 	bne	r2,zero,200278c <FLASH_Verify+0x4e4>
                                printf("[Error] Verify fail, block:%d, index:%d, read=%Xh, expected=%Xh\r\n", i, nReadSizeSum+k, *(pBuf+k), Cnt);
 2002750:	e0ffee17 	ldw	r3,-72(fp)
 2002754:	e0bff617 	ldw	r2,-40(fp)
 2002758:	188d883a 	add	r6,r3,r2
 200275c:	e0bff617 	ldw	r2,-40(fp)
 2002760:	1007883a 	mov	r3,r2
 2002764:	e0bff317 	ldw	r2,-52(fp)
 2002768:	1885883a 	add	r2,r3,r2
 200276c:	10800003 	ldbu	r2,0(r2)
 2002770:	11c03fcc 	andi	r7,r2,255
 2002774:	e0bff203 	ldbu	r2,-56(fp)
 2002778:	d8800015 	stw	r2,0(sp)
 200277c:	010080b4 	movhi	r4,514
 2002780:	21024b04 	addi	r4,r4,2348
 2002784:	e17ff717 	ldw	r5,-36(fp)
 2002788:	2006abc0 	call	2006abc <printf>
                            bPass = FALSE;
 200278c:	e03ff815 	stw	zero,-32(fp)
 2002790:	00000306 	br	20027a0 <FLASH_Verify+0x4f8>
                        }else{    
                            Cnt++;
 2002794:	e0bff203 	ldbu	r2,-56(fp)
 2002798:	10800044 	addi	r2,r2,1
 200279c:	e0bff205 	stb	r2,-56(fp)
                    if (bShowMessage)      
                        printf("[Error] Flash_Read fail at block-offset %d-%d\r\n", i, (int)Offset+nReadSizeSum);
                }else{
                    // verify
                    // verify data
                    for(k=0;k<nReadSize && bPass;k++){
 20027a0:	e0bff617 	ldw	r2,-40(fp)
 20027a4:	10800044 	addi	r2,r2,1
 20027a8:	e0bff615 	stw	r2,-40(fp)
 20027ac:	e0fff617 	ldw	r3,-40(fp)
 20027b0:	e0bfed17 	ldw	r2,-76(fp)
 20027b4:	1880030e 	bge	r3,r2,20027c4 <FLASH_Verify+0x51c>
 20027b8:	e0bff817 	ldw	r2,-32(fp)
 20027bc:	1004c03a 	cmpne	r2,r2,zero
 20027c0:	103fd81e 	bne	r2,zero,2002724 <FLASH_Verify+0x47c>
                            Cnt++;
                        }
                    }                     
                }                        
                //
                nReadSizeSum += nReadSize;
 20027c4:	e0bfee17 	ldw	r2,-72(fp)
 20027c8:	e0ffed17 	ldw	r3,-76(fp)
 20027cc:	10c5883a 	add	r2,r2,r3
 20027d0:	e0bfee15 	stw	r2,-72(fp)
                continue;
            }    
            if (bShowMessage)            
                printf("Read Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
            nReadSizeSum = 0;
            while(nReadSizeSum < Size && bPass){
 20027d4:	e0ffee17 	ldw	r3,-72(fp)
 20027d8:	e0bffa17 	ldw	r2,-24(fp)
 20027dc:	1880032e 	bgeu	r3,r2,20027ec <FLASH_Verify+0x544>
 20027e0:	e0bff817 	ldw	r2,-32(fp)
 20027e4:	1004c03a 	cmpne	r2,r2,zero
 20027e8:	103faa1e 	bne	r2,zero,2002694 <FLASH_Verify+0x3ec>
    }        
      
    //===== read & verify
    if (bPass){
        Cnt = InitValue;
        for(i=0;i<BlockNum && bPass;i++){
 20027ec:	e0bff717 	ldw	r2,-36(fp)
 20027f0:	10800044 	addi	r2,r2,1
 20027f4:	e0bff715 	stw	r2,-36(fp)
 20027f8:	e0fff717 	ldw	r3,-36(fp)
 20027fc:	e0bff517 	ldw	r2,-44(fp)
 2002800:	1880030e 	bge	r3,r2,2002810 <FLASH_Verify+0x568>
 2002804:	e0bff817 	ldw	r2,-32(fp)
 2002808:	1004c03a 	cmpne	r2,r2,zero
 200280c:	103f791e 	bne	r2,zero,20025f4 <FLASH_Verify+0x34c>
                nReadSizeSum += nReadSize;
            }
        }  
    }
    
    if (pBuf)
 2002810:	e0bff317 	ldw	r2,-52(fp)
 2002814:	1005003a 	cmpeq	r2,r2,zero
 2002818:	1000021e 	bne	r2,zero,2002824 <FLASH_Verify+0x57c>
        free(pBuf);
 200281c:	e13ff317 	ldw	r4,-52(fp)
 2002820:	20063540 	call	2006354 <free>
    
    if (hFlash)
 2002824:	e0bff417 	ldw	r2,-48(fp)
 2002828:	1005003a 	cmpeq	r2,r2,zero
 200282c:	1000021e 	bne	r2,zero,2002838 <FLASH_Verify+0x590>
        Flash_Close(hFlash);
 2002830:	e13ff417 	ldw	r4,-48(fp)
 2002834:	2001bac0 	call	2001bac <Flash_Close>
    
    //
    return bPass;
 2002838:	e0bff817 	ldw	r2,-32(fp)
 200283c:	e0bfff15 	stw	r2,-4(fp)
 2002840:	e0bfff17 	ldw	r2,-4(fp)
}
 2002844:	e037883a 	mov	sp,fp
 2002848:	dfc00117 	ldw	ra,4(sp)
 200284c:	df000017 	ldw	fp,0(sp)
 2002850:	dec00204 	addi	sp,sp,8
 2002854:	f800283a 	ret

02002858 <SPI_Init>:

typedef enum{
        SPI_STATUS_FLAG_DONE = 0x01
}SPI_STATUS_FLAG;

void SPI_Init(alt_u32 spi_base){
 2002858:	defffe04 	addi	sp,sp,-8
 200285c:	df000115 	stw	fp,4(sp)
 2002860:	df000104 	addi	fp,sp,4
 2002864:	e13fff15 	stw	r4,-4(fp)
    // clear fifo
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 2002868:	e0bfff17 	ldw	r2,-4(fp)
 200286c:	10800104 	addi	r2,r2,4
 2002870:	10000035 	stwio	zero,0(r2)
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_CLEAR_FIFO);
 2002874:	e0bfff17 	ldw	r2,-4(fp)
 2002878:	10800104 	addi	r2,r2,4
 200287c:	1007883a 	mov	r3,r2
 2002880:	00800104 	movi	r2,4
 2002884:	18800035 	stwio	r2,0(r3)
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 2002888:	e0bfff17 	ldw	r2,-4(fp)
 200288c:	10800104 	addi	r2,r2,4
 2002890:	10000035 	stwio	zero,0(r2)
   
}
 2002894:	e037883a 	mov	sp,fp
 2002898:	df000017 	ldw	fp,0(sp)
 200289c:	dec00104 	addi	sp,sp,4
 20028a0:	f800283a 	ret

020028a4 <SPI_MultipleWrite>:


bool SPI_MultipleWrite(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 szData[], alt_u8 nByteNum){
 20028a4:	defff504 	addi	sp,sp,-44
 20028a8:	dfc00a15 	stw	ra,40(sp)
 20028ac:	df000915 	stw	fp,36(sp)
 20028b0:	df000904 	addi	fp,sp,36
 20028b4:	e13ffb15 	stw	r4,-20(fp)
 20028b8:	e1bffd15 	stw	r6,-12(fp)
 20028bc:	e17ffc05 	stb	r5,-16(fp)
 20028c0:	e1fffe05 	stb	r7,-8(fp)
    alt_u8 Status;
    const int nMaxTry = 100;
 20028c4:	00801904 	movi	r2,100
 20028c8:	e0bff915 	stw	r2,-28(fp)
    int nTryCnt = 0;
 20028cc:	e03ff815 	stw	zero,-32(fp)
    int i;
    
    // make sure processs is stoped, and set write flag
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 20028d0:	e0bffb17 	ldw	r2,-20(fp)
 20028d4:	10800104 	addi	r2,r2,4
 20028d8:	10000035 	stwio	zero,0(r2)
    
    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
 20028dc:	e0bffb17 	ldw	r2,-20(fp)
 20028e0:	10800204 	addi	r2,r2,8
 20028e4:	e0fffc03 	ldbu	r3,-16(fp)
 20028e8:	10c00035 	stwio	r3,0(r2)
    
    // write data to fifo
    for(i=0;i<nByteNum;i++)
 20028ec:	e03ff715 	stw	zero,-36(fp)
 20028f0:	00000c06 	br	2002924 <SPI_MultipleWrite+0x80>
        IOWR(spi_base, SPI_REG_DATA, szData[i]);
 20028f4:	e13ffb17 	ldw	r4,-20(fp)
 20028f8:	e0bff717 	ldw	r2,-36(fp)
 20028fc:	1007883a 	mov	r3,r2
 2002900:	e0bffd17 	ldw	r2,-12(fp)
 2002904:	1885883a 	add	r2,r3,r2
 2002908:	10800003 	ldbu	r2,0(r2)
 200290c:	10c03fcc 	andi	r3,r2,255
 2002910:	2005883a 	mov	r2,r4
 2002914:	10c00035 	stwio	r3,0(r2)
    
    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
    
    // write data to fifo
    for(i=0;i<nByteNum;i++)
 2002918:	e0bff717 	ldw	r2,-36(fp)
 200291c:	10800044 	addi	r2,r2,1
 2002920:	e0bff715 	stw	r2,-36(fp)
 2002924:	e0fffe03 	ldbu	r3,-8(fp)
 2002928:	e0bff717 	ldw	r2,-36(fp)
 200292c:	10fff116 	blt	r2,r3,20028f4 <SPI_MultipleWrite+0x50>
        IOWR(spi_base, SPI_REG_DATA, szData[i]);
    
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR);
 2002930:	e0bffb17 	ldw	r2,-20(fp)
 2002934:	10800104 	addi	r2,r2,4
 2002938:	1007883a 	mov	r3,r2
 200293c:	00800044 	movi	r2,1
 2002940:	18800035 	stwio	r2,0(r3)
    
    // check status
    usleep(10);
 2002944:	01000284 	movi	r4,10
 2002948:	20144f00 	call	20144f0 <usleep>
    do{    
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
 200294c:	e0bffb17 	ldw	r2,-20(fp)
 2002950:	10800104 	addi	r2,r2,4
 2002954:	10800037 	ldwio	r2,0(r2)
 2002958:	e0bffa05 	stb	r2,-24(fp)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
 200295c:	e0bffa03 	ldbu	r2,-24(fp)
 2002960:	1080004c 	andi	r2,r2,1
 2002964:	1004c03a 	cmpne	r2,r2,zero
 2002968:	10000a1e 	bne	r2,zero,2002994 <SPI_MultipleWrite+0xf0>
 200296c:	e0fff817 	ldw	r3,-32(fp)
 2002970:	e0bff917 	ldw	r2,-28(fp)
 2002974:	1884803a 	cmplt	r2,r3,r2
 2002978:	1007883a 	mov	r3,r2
 200297c:	e0bff817 	ldw	r2,-32(fp)
 2002980:	10800044 	addi	r2,r2,1
 2002984:	e0bff815 	stw	r2,-32(fp)
 2002988:	18803fcc 	andi	r2,r3,255
 200298c:	1004c03a 	cmpne	r2,r2,zero
 2002990:	103fee1e 	bne	r2,zero,200294c <SPI_MultipleWrite+0xa8>
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
 2002994:	e0bffb17 	ldw	r2,-20(fp)
 2002998:	10800104 	addi	r2,r2,4
 200299c:	10000035 	stwio	zero,0(r2)
    
    if (Status & SPI_STATUS_FLAG_DONE)
 20029a0:	e0bffa03 	ldbu	r2,-24(fp)
 20029a4:	1080004c 	andi	r2,r2,1
 20029a8:	10803fcc 	andi	r2,r2,255
 20029ac:	1005003a 	cmpeq	r2,r2,zero
 20029b0:	1000031e 	bne	r2,zero,20029c0 <SPI_MultipleWrite+0x11c>
        return TRUE;
 20029b4:	00800044 	movi	r2,1
 20029b8:	e0bfff15 	stw	r2,-4(fp)
 20029bc:	00000106 	br	20029c4 <SPI_MultipleWrite+0x120>
    
    return FALSE;
 20029c0:	e03fff15 	stw	zero,-4(fp)
 20029c4:	e0bfff17 	ldw	r2,-4(fp)
}
 20029c8:	e037883a 	mov	sp,fp
 20029cc:	dfc00117 	ldw	ra,4(sp)
 20029d0:	df000017 	ldw	fp,0(sp)
 20029d4:	dec00204 	addi	sp,sp,8
 20029d8:	f800283a 	ret

020029dc <SPI_Write>:

bool SPI_Write(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 Value){
 20029dc:	defffb04 	addi	sp,sp,-20
 20029e0:	dfc00415 	stw	ra,16(sp)
 20029e4:	df000315 	stw	fp,12(sp)
 20029e8:	df000304 	addi	fp,sp,12
 20029ec:	e13ffd15 	stw	r4,-12(fp)
 20029f0:	e17ffe05 	stb	r5,-8(fp)
 20029f4:	e1bfff05 	stb	r6,-4(fp)
    return SPI_MultipleWrite(spi_base, RegIndex, &Value, 1);
 20029f8:	e17ffe03 	ldbu	r5,-8(fp)
 20029fc:	e1bfff04 	addi	r6,fp,-4
 2002a00:	e13ffd17 	ldw	r4,-12(fp)
 2002a04:	01c00044 	movi	r7,1
 2002a08:	20028a40 	call	20028a4 <SPI_MultipleWrite>
}    
 2002a0c:	e037883a 	mov	sp,fp
 2002a10:	dfc00117 	ldw	ra,4(sp)
 2002a14:	df000017 	ldw	fp,0(sp)
 2002a18:	dec00204 	addi	sp,sp,8
 2002a1c:	f800283a 	ret

02002a20 <SPI_MultipleRead>:

bool SPI_MultipleRead(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 szBuf[], alt_u8 nByteNum){
 2002a20:	defff504 	addi	sp,sp,-44
 2002a24:	dfc00a15 	stw	ra,40(sp)
 2002a28:	df000915 	stw	fp,36(sp)
 2002a2c:	df000904 	addi	fp,sp,36
 2002a30:	e13ffb15 	stw	r4,-20(fp)
 2002a34:	e1bffd15 	stw	r6,-12(fp)
 2002a38:	e17ffc05 	stb	r5,-16(fp)
 2002a3c:	e1fffe05 	stb	r7,-8(fp)
    alt_u8 Status, Value8;
    const int nMaxTry = 100;
 2002a40:	00801904 	movi	r2,100
 2002a44:	e0bff915 	stw	r2,-28(fp)
    int nTryCnt = 0;
 2002a48:	e03ff815 	stw	zero,-32(fp)
    int i;
    
    // make sure processs is stoped, and set read flag
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLGA_REG_READ);
 2002a4c:	e0bffb17 	ldw	r2,-20(fp)
 2002a50:	10800104 	addi	r2,r2,4
 2002a54:	1007883a 	mov	r3,r2
 2002a58:	00800084 	movi	r2,2
 2002a5c:	18800035 	stwio	r2,0(r3)
    

    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
 2002a60:	e0bffb17 	ldw	r2,-20(fp)
 2002a64:	10800204 	addi	r2,r2,8
 2002a68:	e0fffc03 	ldbu	r3,-16(fp)
 2002a6c:	10c00035 	stwio	r3,0(r2)

    // set read byte count
    IOWR(spi_base, SPI_REG_READ_NUM, nByteNum-1);
 2002a70:	e0bffb17 	ldw	r2,-20(fp)
 2002a74:	11000304 	addi	r4,r2,12
 2002a78:	e0bffe03 	ldbu	r2,-8(fp)
 2002a7c:	10ffffc4 	addi	r3,r2,-1
 2002a80:	2005883a 	mov	r2,r4
 2002a84:	10c00035 	stwio	r3,0(r2)
    
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR | SPI_FLGA_REG_READ);
 2002a88:	e0bffb17 	ldw	r2,-20(fp)
 2002a8c:	10800104 	addi	r2,r2,4
 2002a90:	1007883a 	mov	r3,r2
 2002a94:	008000c4 	movi	r2,3
 2002a98:	18800035 	stwio	r2,0(r3)
    
    // check status
    usleep(10);
 2002a9c:	01000284 	movi	r4,10
 2002aa0:	20144f00 	call	20144f0 <usleep>
    do{    
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
 2002aa4:	e0bffb17 	ldw	r2,-20(fp)
 2002aa8:	10800104 	addi	r2,r2,4
 2002aac:	10800037 	ldwio	r2,0(r2)
 2002ab0:	e0bffa45 	stb	r2,-23(fp)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
 2002ab4:	e0bffa43 	ldbu	r2,-23(fp)
 2002ab8:	1080004c 	andi	r2,r2,1
 2002abc:	1004c03a 	cmpne	r2,r2,zero
 2002ac0:	10000a1e 	bne	r2,zero,2002aec <SPI_MultipleRead+0xcc>
 2002ac4:	e0fff817 	ldw	r3,-32(fp)
 2002ac8:	e0bff917 	ldw	r2,-28(fp)
 2002acc:	1884803a 	cmplt	r2,r3,r2
 2002ad0:	1007883a 	mov	r3,r2
 2002ad4:	e0bff817 	ldw	r2,-32(fp)
 2002ad8:	10800044 	addi	r2,r2,1
 2002adc:	e0bff815 	stw	r2,-32(fp)
 2002ae0:	18803fcc 	andi	r2,r3,255
 2002ae4:	1004c03a 	cmpne	r2,r2,zero
 2002ae8:	103fee1e 	bne	r2,zero,2002aa4 <SPI_MultipleRead+0x84>
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
 2002aec:	e0bffb17 	ldw	r2,-20(fp)
 2002af0:	10800104 	addi	r2,r2,4
 2002af4:	10000035 	stwio	zero,0(r2)
    
    if (Status & SPI_STATUS_FLAG_DONE){
 2002af8:	e0bffa43 	ldbu	r2,-23(fp)
 2002afc:	1080004c 	andi	r2,r2,1
 2002b00:	10803fcc 	andi	r2,r2,255
 2002b04:	1005003a 	cmpeq	r2,r2,zero
 2002b08:	1000141e 	bne	r2,zero,2002b5c <SPI_MultipleRead+0x13c>
        for(i=0;i<nByteNum;i++){
 2002b0c:	e03ff715 	stw	zero,-36(fp)
 2002b10:	00000c06 	br	2002b44 <SPI_MultipleRead+0x124>
            Value8 = IORD(spi_base, SPI_REG_DATA);
 2002b14:	e0bffb17 	ldw	r2,-20(fp)
 2002b18:	10800037 	ldwio	r2,0(r2)
 2002b1c:	e0bffa05 	stb	r2,-24(fp)
            szBuf[i] = Value8;
 2002b20:	e0bff717 	ldw	r2,-36(fp)
 2002b24:	1007883a 	mov	r3,r2
 2002b28:	e0bffd17 	ldw	r2,-12(fp)
 2002b2c:	1887883a 	add	r3,r3,r2
 2002b30:	e0bffa03 	ldbu	r2,-24(fp)
 2002b34:	18800005 	stb	r2,0(r3)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
    
    if (Status & SPI_STATUS_FLAG_DONE){
        for(i=0;i<nByteNum;i++){
 2002b38:	e0bff717 	ldw	r2,-36(fp)
 2002b3c:	10800044 	addi	r2,r2,1
 2002b40:	e0bff715 	stw	r2,-36(fp)
 2002b44:	e0fffe03 	ldbu	r3,-8(fp)
 2002b48:	e0bff717 	ldw	r2,-36(fp)
 2002b4c:	10fff116 	blt	r2,r3,2002b14 <SPI_MultipleRead+0xf4>
            Value8 = IORD(spi_base, SPI_REG_DATA);
            szBuf[i] = Value8;
        }
        return TRUE;
 2002b50:	00800044 	movi	r2,1
 2002b54:	e0bfff15 	stw	r2,-4(fp)
 2002b58:	00000106 	br	2002b60 <SPI_MultipleRead+0x140>
    }        
    return FALSE;
 2002b5c:	e03fff15 	stw	zero,-4(fp)
 2002b60:	e0bfff17 	ldw	r2,-4(fp)
}
 2002b64:	e037883a 	mov	sp,fp
 2002b68:	dfc00117 	ldw	ra,4(sp)
 2002b6c:	df000017 	ldw	fp,0(sp)
 2002b70:	dec00204 	addi	sp,sp,8
 2002b74:	f800283a 	ret

02002b78 <SPI_Read>:

bool SPI_Read(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 *pBuf){
 2002b78:	defffb04 	addi	sp,sp,-20
 2002b7c:	dfc00415 	stw	ra,16(sp)
 2002b80:	df000315 	stw	fp,12(sp)
 2002b84:	df000304 	addi	fp,sp,12
 2002b88:	e13ffd15 	stw	r4,-12(fp)
 2002b8c:	e1bfff15 	stw	r6,-4(fp)
 2002b90:	e17ffe05 	stb	r5,-8(fp)
    return SPI_MultipleRead(spi_base, RegIndex, pBuf, 1);
 2002b94:	e17ffe03 	ldbu	r5,-8(fp)
 2002b98:	e13ffd17 	ldw	r4,-12(fp)
 2002b9c:	e1bfff17 	ldw	r6,-4(fp)
 2002ba0:	01c00044 	movi	r7,1
 2002ba4:	2002a200 	call	2002a20 <SPI_MultipleRead>
}
 2002ba8:	e037883a 	mov	sp,fp
 2002bac:	dfc00117 	ldw	ra,4(sp)
 2002bb0:	df000017 	ldw	fp,0(sp)
 2002bb4:	dec00204 	addi	sp,sp,8
 2002bb8:	f800283a 	ret

02002bbc <KEY_ISR>:
//void * MyQueue[ 100 ];
bool bKeyPressed = FALSE;
//double encoder0a_count;
//volatile int edge_capture;

static void KEY_ISR(void* context, alt_u32 id){
 2002bbc:	defffc04 	addi	sp,sp,-16
 2002bc0:	dfc00315 	stw	ra,12(sp)
 2002bc4:	df000215 	stw	fp,8(sp)
 2002bc8:	df000204 	addi	fp,sp,8
 2002bcc:	e13ffe15 	stw	r4,-8(fp)
 2002bd0:	e17fff15 	stw	r5,-4(fp)
    if (id == KEY_IRQ){
 2002bd4:	e0bfff17 	ldw	r2,-4(fp)
 2002bd8:	10800058 	cmpnei	r2,r2,1
 2002bdc:	1000081e 	bne	r2,zero,2002c00 <KEY_ISR+0x44>
        bKeyPressed = TRUE;
 2002be0:	00800044 	movi	r2,1
 2002be4:	d0a7ae15 	stw	r2,-24904(gp)
        printf("Button pressed!\n");
 2002be8:	010080b4 	movhi	r4,514
 2002bec:	21025c04 	addi	r4,r4,2416
 2002bf0:	2006bd40 	call	2006bd4 <puts>

        // clear interrupt flag
        IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0);
 2002bf4:	00814034 	movhi	r2,1280
 2002bf8:	10801b04 	addi	r2,r2,108
 2002bfc:	10000035 	stwio	zero,0(r2)
    }
}
 2002c00:	e037883a 	mov	sp,fp
 2002c04:	dfc00117 	ldw	ra,4(sp)
 2002c08:	df000017 	ldw	fp,0(sp)
 2002c0c:	dec00204 	addi	sp,sp,8
 2002c10:	f800283a 	ret

02002c14 <EnableKeyInterrupt>:

void EnableKeyInterrupt(void){
 2002c14:	defffd04 	addi	sp,sp,-12
 2002c18:	dfc00215 	stw	ra,8(sp)
 2002c1c:	df000115 	stw	fp,4(sp)
 2002c20:	df000104 	addi	fp,sp,4
    int error;

    // enable interrupt, 2-keybutton
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE,0x03);
 2002c24:	00c14034 	movhi	r3,1280
 2002c28:	18c01a04 	addi	r3,r3,104
 2002c2c:	008000c4 	movi	r2,3
 2002c30:	18800035 	stwio	r2,0(r3)

    // clear capture flag
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0);
 2002c34:	00814034 	movhi	r2,1280
 2002c38:	10801b04 	addi	r2,r2,108
 2002c3c:	10000035 	stwio	zero,0(r2)
    //

    bKeyPressed = FALSE;
 2002c40:	d027ae15 	stw	zero,-24904(gp)
    // register interrupt isr
    error = alt_irq_register (KEY_IRQ, 0, KEY_ISR);
 2002c44:	01808034 	movhi	r6,512
 2002c48:	318aef04 	addi	r6,r6,11196
 2002c4c:	01000044 	movi	r4,1
 2002c50:	000b883a 	mov	r5,zero
 2002c54:	2013ac80 	call	2013ac8 <alt_irq_register>
 2002c58:	e0bfff15 	stw	r2,-4(fp)
    if (error)
 2002c5c:	e0bfff17 	ldw	r2,-4(fp)
 2002c60:	1005003a 	cmpeq	r2,r2,zero
 2002c64:	1000031e 	bne	r2,zero,2002c74 <EnableKeyInterrupt+0x60>
        printf("Failed to register interrupt\r\n");
 2002c68:	010080b4 	movhi	r4,514
 2002c6c:	21026004 	addi	r4,r4,2432
 2002c70:	2006bd40 	call	2006bd4 <puts>

}
 2002c74:	e037883a 	mov	sp,fp
 2002c78:	dfc00117 	ldw	ra,4(sp)
 2002c7c:	df000017 	ldw	fp,0(sp)
 2002c80:	dec00204 	addi	sp,sp,8
 2002c84:	f800283a 	ret

02002c88 <ShowMenu>:



void ShowMenu(void){
 2002c88:	defffc04 	addi	sp,sp,-16
 2002c8c:	dfc00315 	stw	ra,12(sp)
 2002c90:	df000215 	stw	fp,8(sp)
 2002c94:	df000204 	addi	fp,sp,8
    int i,num;
    printf("---------------------------------\r\n");
 2002c98:	010080b4 	movhi	r4,514
 2002c9c:	21026804 	addi	r4,r4,2464
 2002ca0:	2006bd40 	call	2006bd4 <puts>
    printf("- Selection function:\r\n");
 2002ca4:	010080b4 	movhi	r4,514
 2002ca8:	21027104 	addi	r4,r4,2500
 2002cac:	2006bd40 	call	2006bd4 <puts>
    num = sizeof(szTestList)/sizeof(szTestList[0]);
 2002cb0:	008001c4 	movi	r2,7
 2002cb4:	e0bffe15 	stw	r2,-8(fp)
    for(i=0;i<num;i++){
 2002cb8:	e03fff15 	stw	zero,-4(fp)
 2002cbc:	00000d06 	br	2002cf4 <ShowMenu+0x6c>
        printf("- [%d]%s\r\n", i, szTestList[i].szName);
 2002cc0:	e0bfff17 	ldw	r2,-4(fp)
 2002cc4:	10801224 	muli	r2,r2,72
 2002cc8:	10c00104 	addi	r3,r2,4
 2002ccc:	008080b4 	movhi	r2,514
 2002cd0:	1084d204 	addi	r2,r2,4936
 2002cd4:	188d883a 	add	r6,r3,r2
 2002cd8:	010080b4 	movhi	r4,514
 2002cdc:	21027704 	addi	r4,r4,2524
 2002ce0:	e17fff17 	ldw	r5,-4(fp)
 2002ce4:	2006abc0 	call	2006abc <printf>
void ShowMenu(void){
    int i,num;
    printf("---------------------------------\r\n");
    printf("- Selection function:\r\n");
    num = sizeof(szTestList)/sizeof(szTestList[0]);
    for(i=0;i<num;i++){
 2002ce8:	e0bfff17 	ldw	r2,-4(fp)
 2002cec:	10800044 	addi	r2,r2,1
 2002cf0:	e0bfff15 	stw	r2,-4(fp)
 2002cf4:	e0ffff17 	ldw	r3,-4(fp)
 2002cf8:	e0bffe17 	ldw	r2,-8(fp)
 2002cfc:	18bff016 	blt	r3,r2,2002cc0 <ShowMenu+0x38>
        printf("- [%d]%s\r\n", i, szTestList[i].szName);
    }
    printf("---------------------------------\r\n");
 2002d00:	010080b4 	movhi	r4,514
 2002d04:	21026804 	addi	r4,r4,2464
 2002d08:	2006bd40 	call	2006bd4 <puts>
}
 2002d0c:	e037883a 	mov	sp,fp
 2002d10:	dfc00117 	ldw	ra,4(sp)
 2002d14:	df000017 	ldw	fp,0(sp)
 2002d18:	dec00204 	addi	sp,sp,8
 2002d1c:	f800283a 	ret

02002d20 <DEMO_PWM>:


void DEMO_PWM(void){
 2002d20:	defffc04 	addi	sp,sp,-16
 2002d24:	dfc00315 	stw	ra,12(sp)
 2002d28:	df000215 	stw	fp,8(sp)
 2002d2c:	df000204 	addi	fp,sp,8
	double duty = 0;
 2002d30:	e03ffe15 	stw	zero,-8(fp)
 2002d34:	e03fff15 	stw	zero,-4(fp)
	duty = 0.75;
 2002d38:	e03ffe15 	stw	zero,-8(fp)
 2002d3c:	008ffa34 	movhi	r2,16360
 2002d40:	e0bfff15 	stw	r2,-4(fp)

	//reset PWM pins
	IOWR(PWM_0_BASE, 0, 0);
 2002d44:	00818034 	movhi	r2,1536
 2002d48:	10841a04 	addi	r2,r2,4200
 2002d4c:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_1_BASE, 0, 0);
 2002d50:	00818034 	movhi	r2,1536
 2002d54:	10841804 	addi	r2,r2,4192
 2002d58:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_2_BASE, 0, 0);
 2002d5c:	00818034 	movhi	r2,1536
 2002d60:	10841604 	addi	r2,r2,4184
 2002d64:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_3_BASE, 0, 0);
 2002d68:	00818034 	movhi	r2,1536
 2002d6c:	10841404 	addi	r2,r2,4176
 2002d70:	10000035 	stwio	zero,0(r2)

	while (1)
	{
		//IOWR(PWM_0_BASE, 0, 1 * 31250);

		IOWR(PWM_0_BASE, 0, 0.25 * 31250);
 2002d74:	00c18034 	movhi	r3,1536
 2002d78:	18c41a04 	addi	r3,r3,4200
 2002d7c:	0087a104 	movi	r2,7812
 2002d80:	18800035 	stwio	r2,0(r3)
		usleep(2000000); //sleep 2 seconds
 2002d84:	010007f4 	movhi	r4,31
 2002d88:	21212004 	addi	r4,r4,-31616
 2002d8c:	20144f00 	call	20144f0 <usleep>
		IOWR(PWM_0_BASE, 0, 0.50 * 31250);
 2002d90:	00c18034 	movhi	r3,1536
 2002d94:	18c41a04 	addi	r3,r3,4200
 2002d98:	008f4244 	movi	r2,15625
 2002d9c:	18800035 	stwio	r2,0(r3)
		usleep(3000000);
 2002da0:	01000bb4 	movhi	r4,46
 2002da4:	2131b004 	addi	r4,r4,-14656
 2002da8:	20144f00 	call	20144f0 <usleep>
		IOWR(PWM_0_BASE, 0, 0.75 * 31250);
 2002dac:	00c18034 	movhi	r3,1536
 2002db0:	18c41a04 	addi	r3,r3,4200
 2002db4:	0096e344 	movi	r2,23437
 2002db8:	18800035 	stwio	r2,0(r3)
		usleep(4000000);
 2002dbc:	01000f74 	movhi	r4,61
 2002dc0:	21024004 	addi	r4,r4,2304
 2002dc4:	20144f00 	call	20144f0 <usleep>
		IOWR(PWM_0_BASE, 0, 1 * 31250);
 2002dc8:	00c18034 	movhi	r3,1536
 2002dcc:	18c41a04 	addi	r3,r3,4200
 2002dd0:	009e8484 	movi	r2,31250
 2002dd4:	18800035 	stwio	r2,0(r3)
		usleep(3000000);
 2002dd8:	01000bb4 	movhi	r4,46
 2002ddc:	2131b004 	addi	r4,r4,-14656
 2002de0:	20144f00 	call	20144f0 <usleep>
		IOWR(PWM_0_BASE, 0, 0.75 * 31250);
 2002de4:	00c18034 	movhi	r3,1536
 2002de8:	18c41a04 	addi	r3,r3,4200
 2002dec:	0096e344 	movi	r2,23437
 2002df0:	18800035 	stwio	r2,0(r3)
		usleep(4000000);
 2002df4:	01000f74 	movhi	r4,61
 2002df8:	21024004 	addi	r4,r4,2304
 2002dfc:	20144f00 	call	20144f0 <usleep>
		IOWR(PWM_0_BASE, 0, 0.5 * 31250);
 2002e00:	00c18034 	movhi	r3,1536
 2002e04:	18c41a04 	addi	r3,r3,4200
 2002e08:	008f4244 	movi	r2,15625
 2002e0c:	18800035 	stwio	r2,0(r3)
		usleep(3000000);
 2002e10:	01000bb4 	movhi	r4,46
 2002e14:	2131b004 	addi	r4,r4,-14656
 2002e18:	20144f00 	call	20144f0 <usleep>
		IOWR(PWM_0_BASE, 0, 0); //STOP
 2002e1c:	00818034 	movhi	r2,1536
 2002e20:	10841a04 	addi	r2,r2,4200
 2002e24:	10000035 	stwio	zero,0(r2)
		usleep(3000000);
 2002e28:	01000bb4 	movhi	r4,46
 2002e2c:	2131b004 	addi	r4,r4,-14656
 2002e30:	20144f00 	call	20144f0 <usleep>

		//reverse direction
		IOWR(PWM_1_BASE, 0, 0.65 * 31250);
 2002e34:	00c18034 	movhi	r3,1536
 2002e38:	18c41804 	addi	r3,r3,4192
 2002e3c:	0093d604 	movi	r2,20312
 2002e40:	18800035 	stwio	r2,0(r3)
		usleep(3000000);
 2002e44:	01000bb4 	movhi	r4,46
 2002e48:	2131b004 	addi	r4,r4,-14656
 2002e4c:	20144f00 	call	20144f0 <usleep>
		IOWR(PWM_1_BASE, 0, 0.9 * 31250);
 2002e50:	00c18034 	movhi	r3,1536
 2002e54:	18c41804 	addi	r3,r3,4192
 2002e58:	009b7744 	movi	r2,28125
 2002e5c:	18800035 	stwio	r2,0(r3)
		usleep(8000000);
 2002e60:	01001eb4 	movhi	r4,122
 2002e64:	21048004 	addi	r4,r4,4608
 2002e68:	20144f00 	call	20144f0 <usleep>
		IOWR(PWM_1_BASE, 0, 0.7 * 31250);
 2002e6c:	00c18034 	movhi	r3,1536
 2002e70:	18c41804 	addi	r3,r3,4192
 2002e74:	00955cc4 	movi	r2,21875
 2002e78:	18800035 	stwio	r2,0(r3)
		usleep(3000000);
 2002e7c:	01000bb4 	movhi	r4,46
 2002e80:	2131b004 	addi	r4,r4,-14656
 2002e84:	20144f00 	call	20144f0 <usleep>
		IOWR(PWM_1_BASE, 0, 0);
 2002e88:	00818034 	movhi	r2,1536
 2002e8c:	10841804 	addi	r2,r2,4192
 2002e90:	10000035 	stwio	zero,0(r2)
		usleep(2000000);
 2002e94:	010007f4 	movhi	r4,31
 2002e98:	21212004 	addi	r4,r4,-31616
 2002e9c:	20144f00 	call	20144f0 <usleep>
		//IOWR(PWM_2_BASE, 0, 0.75 * 31250);
        //usleep(2000000);
	}
 2002ea0:	003fb406 	br	2002d74 <DEMO_PWM+0x54>

02002ea4 <DEMO_ENCODERS>:
}


void DEMO_ENCODERS(void){
 2002ea4:	defff204 	addi	sp,sp,-56
 2002ea8:	dfc00d15 	stw	ra,52(sp)
 2002eac:	df000c15 	stw	fp,48(sp)
 2002eb0:	df000c04 	addi	fp,sp,48
	//read from pins like for PWM
	double encode_0_a, encode_1_a; //encode_b;
	double counts_0_new, counts_0_old;
	double counts_1_new, counts_1_old;
	counts_0_old = 0;
 2002eb4:	e03ff815 	stw	zero,-32(fp)
 2002eb8:	e03ff915 	stw	zero,-28(fp)
	counts_1_old = 0;
 2002ebc:	e03ff415 	stw	zero,-48(fp)
 2002ec0:	e03ff515 	stw	zero,-44(fp)

	/* Init motor */
	IOWR(PWM_0_BASE, 0, 0);
 2002ec4:	00818034 	movhi	r2,1536
 2002ec8:	10841a04 	addi	r2,r2,4200
 2002ecc:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_1_BASE, 0, 0);
 2002ed0:	00818034 	movhi	r2,1536
 2002ed4:	10841804 	addi	r2,r2,4192
 2002ed8:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_2_BASE, 0, 0);
 2002edc:	00818034 	movhi	r2,1536
 2002ee0:	10841604 	addi	r2,r2,4184
 2002ee4:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_3_BASE, 0, 0);
 2002ee8:	00818034 	movhi	r2,1536
 2002eec:	10841404 	addi	r2,r2,4176
 2002ef0:	10000035 	stwio	zero,0(r2)

	IOWR(PWM_0_BASE, 0, 1 * 31250);
 2002ef4:	00c18034 	movhi	r3,1536
 2002ef8:	18c41a04 	addi	r3,r3,4200
 2002efc:	009e8484 	movi	r2,31250
 2002f00:	18800035 	stwio	r2,0(r3)
*/

	while (1)
	{
		//1st motor
		counts_0_new = ((double) IORD(ENCODER_0A_BASE, 0)) / 32;
 2002f04:	00818034 	movhi	r2,1536
 2002f08:	10840c04 	addi	r2,r2,4144
 2002f0c:	11000037 	ldwio	r4,0(r2)
 2002f10:	20056fc0 	call	20056fc <__floatsidf>
 2002f14:	100b883a 	mov	r5,r2
 2002f18:	180d883a 	mov	r6,r3
 2002f1c:	2809883a 	mov	r4,r5
 2002f20:	300b883a 	mov	r5,r6
 2002f24:	000d883a 	mov	r6,zero
 2002f28:	01d01034 	movhi	r7,16448
 2002f2c:	20053940 	call	2005394 <__divdf3>
 2002f30:	1009883a 	mov	r4,r2
 2002f34:	180b883a 	mov	r5,r3
 2002f38:	e13ffa15 	stw	r4,-24(fp)
 2002f3c:	e17ffb15 	stw	r5,-20(fp)
		encode_0_a = (counts_0_new-counts_0_old);
 2002f40:	e13ffa17 	ldw	r4,-24(fp)
 2002f44:	e17ffb17 	ldw	r5,-20(fp)
 2002f48:	e1bff817 	ldw	r6,-32(fp)
 2002f4c:	e1fff917 	ldw	r7,-28(fp)
 2002f50:	2004edc0 	call	2004edc <__subdf3>
 2002f54:	1009883a 	mov	r4,r2
 2002f58:	180b883a 	mov	r5,r3
 2002f5c:	e13ffe15 	stw	r4,-8(fp)
 2002f60:	e17fff15 	stw	r5,-4(fp)
		//encode_b = (((double) IORD(ENCODER_0B_BASE, 0)) / 32) - encode_b;
		if (encode_0_a < 0){
 2002f64:	e13ffe17 	ldw	r4,-8(fp)
 2002f68:	e17fff17 	ldw	r5,-4(fp)
 2002f6c:	000d883a 	mov	r6,zero
 2002f70:	000f883a 	mov	r7,zero
 2002f74:	20056740 	call	2005674 <__ltdf2>
 2002f78:	1004803a 	cmplt	r2,r2,zero
 2002f7c:	1000011e 	bne	r2,zero,2002f84 <DEMO_ENCODERS+0xe0>
 2002f80:	00000406 	br	2002f94 <DEMO_ENCODERS+0xf0>
			encode_0_a = counts_0_new;
 2002f84:	e0bffa17 	ldw	r2,-24(fp)
 2002f88:	e0bffe15 	stw	r2,-8(fp)
 2002f8c:	e0bffb17 	ldw	r2,-20(fp)
 2002f90:	e0bfff15 	stw	r2,-4(fp)
		}
		counts_0_old = counts_0_new;
 2002f94:	e0bffa17 	ldw	r2,-24(fp)
 2002f98:	e0bff815 	stw	r2,-32(fp)
 2002f9c:	e0bffb17 	ldw	r2,-20(fp)
 2002fa0:	e0bff915 	stw	r2,-28(fp)

		//2nd motor
		counts_1_new = ((double) IORD(ENCODER_1A_BASE, 0)) / 32;
 2002fa4:	00818034 	movhi	r2,1536
 2002fa8:	10840404 	addi	r2,r2,4112
 2002fac:	11000037 	ldwio	r4,0(r2)
 2002fb0:	20056fc0 	call	20056fc <__floatsidf>
 2002fb4:	100b883a 	mov	r5,r2
 2002fb8:	180d883a 	mov	r6,r3
 2002fbc:	2809883a 	mov	r4,r5
 2002fc0:	300b883a 	mov	r5,r6
 2002fc4:	000d883a 	mov	r6,zero
 2002fc8:	01d01034 	movhi	r7,16448
 2002fcc:	20053940 	call	2005394 <__divdf3>
 2002fd0:	1009883a 	mov	r4,r2
 2002fd4:	180b883a 	mov	r5,r3
 2002fd8:	e13ff615 	stw	r4,-40(fp)
 2002fdc:	e17ff715 	stw	r5,-36(fp)
		encode_1_a = (counts_1_new-counts_1_old);
 2002fe0:	e13ff617 	ldw	r4,-40(fp)
 2002fe4:	e17ff717 	ldw	r5,-36(fp)
 2002fe8:	e1bff417 	ldw	r6,-48(fp)
 2002fec:	e1fff517 	ldw	r7,-44(fp)
 2002ff0:	2004edc0 	call	2004edc <__subdf3>
 2002ff4:	1009883a 	mov	r4,r2
 2002ff8:	180b883a 	mov	r5,r3
 2002ffc:	e13ffc15 	stw	r4,-16(fp)
 2003000:	e17ffd15 	stw	r5,-12(fp)
		if (encode_1_a < 0){
 2003004:	e13ffc17 	ldw	r4,-16(fp)
 2003008:	e17ffd17 	ldw	r5,-12(fp)
 200300c:	000d883a 	mov	r6,zero
 2003010:	000f883a 	mov	r7,zero
 2003014:	20056740 	call	2005674 <__ltdf2>
 2003018:	1004803a 	cmplt	r2,r2,zero
 200301c:	1000011e 	bne	r2,zero,2003024 <DEMO_ENCODERS+0x180>
 2003020:	00000406 	br	2003034 <DEMO_ENCODERS+0x190>
			encode_1_a = counts_1_new;
 2003024:	e0bff617 	ldw	r2,-40(fp)
 2003028:	e0bffc15 	stw	r2,-16(fp)
 200302c:	e0bff717 	ldw	r2,-36(fp)
 2003030:	e0bffd15 	stw	r2,-12(fp)
		}
		counts_1_old = counts_1_new;
 2003034:	e0bff617 	ldw	r2,-40(fp)
 2003038:	e0bff415 	stw	r2,-48(fp)
 200303c:	e0bff717 	ldw	r2,-36(fp)
 2003040:	e0bff515 	stw	r2,-44(fp)

		printf("Motor 0 encoder A value is :( %f ) \n", encode_0_a);
 2003044:	010080b4 	movhi	r4,514
 2003048:	21027a04 	addi	r4,r4,2536
 200304c:	e17ffe17 	ldw	r5,-8(fp)
 2003050:	e1bfff17 	ldw	r6,-4(fp)
 2003054:	2006abc0 	call	2006abc <printf>
		printf("Motor 0 revolutions per second :( %f ) \n", encode_0_a / 64);
 2003058:	e13ffe17 	ldw	r4,-8(fp)
 200305c:	e17fff17 	ldw	r5,-4(fp)
 2003060:	000d883a 	mov	r6,zero
 2003064:	01d01434 	movhi	r7,16464
 2003068:	20053940 	call	2005394 <__divdf3>
 200306c:	1009883a 	mov	r4,r2
 2003070:	180b883a 	mov	r5,r3
 2003074:	2005883a 	mov	r2,r4
 2003078:	2807883a 	mov	r3,r5
 200307c:	010080b4 	movhi	r4,514
 2003080:	21028404 	addi	r4,r4,2576
 2003084:	100b883a 	mov	r5,r2
 2003088:	180d883a 	mov	r6,r3
 200308c:	2006abc0 	call	2006abc <printf>
		printf("Motor 1 encoder A value is :( %f ) \n", encode_1_a);
 2003090:	010080b4 	movhi	r4,514
 2003094:	21028f04 	addi	r4,r4,2620
 2003098:	e17ffc17 	ldw	r5,-16(fp)
 200309c:	e1bffd17 	ldw	r6,-12(fp)
 20030a0:	2006abc0 	call	2006abc <printf>
		printf("Motor 1 revolutions per second :( %f ) \n", encode_1_a / 64);
 20030a4:	e13ffc17 	ldw	r4,-16(fp)
 20030a8:	e17ffd17 	ldw	r5,-12(fp)
 20030ac:	000d883a 	mov	r6,zero
 20030b0:	01d01434 	movhi	r7,16464
 20030b4:	20053940 	call	2005394 <__divdf3>
 20030b8:	1009883a 	mov	r4,r2
 20030bc:	180b883a 	mov	r5,r3
 20030c0:	2005883a 	mov	r2,r4
 20030c4:	2807883a 	mov	r3,r5
 20030c8:	010080b4 	movhi	r4,514
 20030cc:	21029904 	addi	r4,r4,2660
 20030d0:	100b883a 	mov	r5,r2
 20030d4:	180d883a 	mov	r6,r3
 20030d8:	2006abc0 	call	2006abc <printf>

		//printf("Current encoder B value is :( %f ) \n", encode_b / 32);
		usleep(1000000);
 20030dc:	010003f4 	movhi	r4,15
 20030e0:	21109004 	addi	r4,r4,16960
 20030e4:	20144f00 	call	20144f0 <usleep>
	}
 20030e8:	003f8606 	br	2002f04 <DEMO_ENCODERS+0x60>

020030ec <DEMO_COMPASS>:
}

void DEMO_COMPASS(void){
 20030ec:	defffe04 	addi	sp,sp,-8
 20030f0:	dfc00115 	stw	ra,4(sp)
 20030f4:	df000015 	stw	fp,0(sp)
 20030f8:	d839883a 	mov	fp,sp
    // set clock as output
    //IOWR_ALTERA_AVALON_PIO_DIRECTION(I2C_SCL_BASE, ALTERA_AVALON_PIO_DIRECTION_OUTPUT);
    //IOWR(SELECT_I2C_CLK_BASE, 0, 0x01);

    //if (I2C_MultipleRead(I2C_SCL_BASE, I2C_SDA_BASE, DeviceAddr, ControlAddr, szBuf, sizeof(szBuf))){
	LSM303_Init();
 20030fc:	2000c240 	call	2000c24 <LSM303_Init>
	enableDefault();
 2003100:	2000cc00 	call	2000cc0 <enableDefault>
}
 2003104:	e037883a 	mov	sp,fp
 2003108:	dfc00117 	ldw	ra,4(sp)
 200310c:	df000017 	ldw	fp,0(sp)
 2003110:	dec00204 	addi	sp,sp,8
 2003114:	f800283a 	ret

02003118 <DEMO_ACCELEROMETER>:

void DEMO_ACCELEROMETER(void){
 2003118:	deffff04 	addi	sp,sp,-4
 200311c:	df000015 	stw	fp,0(sp)
 2003120:	d839883a 	mov	fp,sp
    }

    if (!bSuccess)
        printf("Failed to access accelerometer\r\n");
*/
}
 2003124:	e037883a 	mov	sp,fp
 2003128:	df000017 	ldw	fp,0(sp)
 200312c:	dec00104 	addi	sp,sp,4
 2003130:	f800283a 	ret

02003134 <DEMO_ADC>:

void DEMO_ADC(void){
 2003134:	defffa04 	addi	sp,sp,-24
 2003138:	dfc00515 	stw	ra,20(sp)
 200313c:	df000415 	stw	fp,16(sp)
 2003140:	df000404 	addi	fp,sp,16
    int ch = 0, next_ch=0;
 2003144:	e03fff15 	stw	zero,-4(fp)
 2003148:	e03ffe15 	stw	zero,-8(fp)
    alt_u16 data16;
    float volt = 0;
 200314c:	e03ffc15 	stw	zero,-16(fp)

    printf("Monitor ADC Value. Press KEY0 or KEY1 to terminal the monitor process.\r\n");
 2003150:	010080b4 	movhi	r4,514
 2003154:	2102a404 	addi	r4,r4,2704
 2003158:	2006bd40 	call	2006bd4 <puts>
    ADC_Read(next_ch);
 200315c:	e0bffe17 	ldw	r2,-8(fp)
 2003160:	11003fcc 	andi	r4,r2,255
 2003164:	200190c0 	call	200190c <ADC_Read>
    while(!bKeyPressed){
 2003168:	00003006 	br	200322c <DEMO_ADC+0xf8>
        //next_ch++;
        //if (next_ch >= 8)
        //    next_ch = 0;
        data16 = ADC_Read(next_ch); // 12-bits resolution
 200316c:	e0bffe17 	ldw	r2,-8(fp)
 2003170:	11003fcc 	andi	r4,r2,255
 2003174:	200190c0 	call	200190c <ADC_Read>
 2003178:	e0bffd0d 	sth	r2,-12(fp)
        volt = (float)data16 * 3.3 / 4095.0;
 200317c:	e13ffd0b 	ldhu	r4,-12(fp)
 2003180:	2004a0c0 	call	2004a0c <__floatunsisf>
 2003184:	1009883a 	mov	r4,r2
 2003188:	20049b80 	call	20049b8 <__extendsfdf2>
 200318c:	100b883a 	mov	r5,r2
 2003190:	180d883a 	mov	r6,r3
 2003194:	2809883a 	mov	r4,r5
 2003198:	300b883a 	mov	r5,r6
 200319c:	019999b4 	movhi	r6,26214
 20031a0:	31999984 	addi	r6,r6,26214
 20031a4:	01d002b4 	movhi	r7,16394
 20031a8:	39d99984 	addi	r7,r7,26214
 20031ac:	2004fd00 	call	2004fd0 <__muldf3>
 20031b0:	1009883a 	mov	r4,r2
 20031b4:	180b883a 	mov	r5,r3
 20031b8:	2005883a 	mov	r2,r4
 20031bc:	2807883a 	mov	r3,r5
 20031c0:	1009883a 	mov	r4,r2
 20031c4:	180b883a 	mov	r5,r3
 20031c8:	000d883a 	mov	r6,zero
 20031cc:	01d02c34 	movhi	r7,16560
 20031d0:	39ff8004 	addi	r7,r7,-512
 20031d4:	20053940 	call	2005394 <__divdf3>
 20031d8:	1009883a 	mov	r4,r2
 20031dc:	180b883a 	mov	r5,r3
 20031e0:	2005883a 	mov	r2,r4
 20031e4:	2807883a 	mov	r3,r5
 20031e8:	1009883a 	mov	r4,r2
 20031ec:	180b883a 	mov	r5,r3
 20031f0:	20059040 	call	2005904 <__truncdfsf2>
 20031f4:	e0bffc15 	stw	r2,-16(fp)
	    printf("CH%d=%.2f V\r\n", ch, volt);
 20031f8:	e13ffc17 	ldw	r4,-16(fp)
 20031fc:	20049b80 	call	20049b8 <__extendsfdf2>
 2003200:	100f883a 	mov	r7,r2
 2003204:	1811883a 	mov	r8,r3
 2003208:	010080b4 	movhi	r4,514
 200320c:	2102b604 	addi	r4,r4,2776
 2003210:	e17fff17 	ldw	r5,-4(fp)
 2003214:	380d883a 	mov	r6,r7
 2003218:	400f883a 	mov	r7,r8
 200321c:	2006abc0 	call	2006abc <printf>
	    usleep(1000000);
 2003220:	010003f4 	movhi	r4,15
 2003224:	21109004 	addi	r4,r4,16960
 2003228:	20144f00 	call	20144f0 <usleep>
    alt_u16 data16;
    float volt = 0;

    printf("Monitor ADC Value. Press KEY0 or KEY1 to terminal the monitor process.\r\n");
    ADC_Read(next_ch);
    while(!bKeyPressed){
 200322c:	d0a7ae17 	ldw	r2,-24904(gp)
 2003230:	1005003a 	cmpeq	r2,r2,zero
 2003234:	103fcd1e 	bne	r2,zero,200316c <DEMO_ADC+0x38>
        volt = (float)data16 * 3.3 / 4095.0;
	    printf("CH%d=%.2f V\r\n", ch, volt);
	    usleep(1000000);
	    //ch = next_ch;
    }
}
 2003238:	e037883a 	mov	sp,fp
 200323c:	dfc00117 	ldw	ra,4(sp)
 2003240:	df000017 	ldw	fp,0(sp)
 2003244:	dec00204 	addi	sp,sp,8
 2003248:	f800283a 	ret

0200324c <main>:

int main(void)
{
 200324c:	defffc04 	addi	sp,sp,-16
 2003250:	dfc00315 	stw	ra,12(sp)
 2003254:	df000215 	stw	fp,8(sp)
 2003258:	df000204 	addi	fp,sp,8
    int sel;
    int nNum;

    nNum = sizeof(szTestList)/sizeof(szTestList[0]);
 200325c:	008001c4 	movi	r2,7
 2003260:	e0bffe15 	stw	r2,-8(fp)
    printf("DE-Nano Demo\r\n");
 2003264:	010080b4 	movhi	r4,514
 2003268:	2102ba04 	addi	r4,r4,2792
 200326c:	2006bd40 	call	2006bd4 <puts>

    while(1){
        ShowMenu();
 2003270:	2002c880 	call	2002c88 <ShowMenu>
        printf("Select:");
 2003274:	010080b4 	movhi	r4,514
 2003278:	2102be04 	addi	r4,r4,2808
 200327c:	2006abc0 	call	2006abc <printf>
        scanf("%d", &sel);
 2003280:	e17fff04 	addi	r5,fp,-4
 2003284:	010080b4 	movhi	r4,514
 2003288:	2102c004 	addi	r4,r4,2816
 200328c:	2006c8c0 	call	2006c8c <scanf>
        if (sel >= 0 && sel < nNum){
 2003290:	e0bfff17 	ldw	r2,-4(fp)
 2003294:	1004803a 	cmplt	r2,r2,zero
 2003298:	1000161e 	bne	r2,zero,20032f4 <main+0xa8>
 200329c:	e0ffff17 	ldw	r3,-4(fp)
 20032a0:	e0bffe17 	ldw	r2,-8(fp)
 20032a4:	1880130e 	bge	r3,r2,20032f4 <main+0xa8>
            bKeyPressed = FALSE;
 20032a8:	d027ae15 	stw	zero,-24904(gp)
            printf("Demo %s\r\n",szTestList[sel].szName);
 20032ac:	e0bfff17 	ldw	r2,-4(fp)
 20032b0:	10801224 	muli	r2,r2,72
 20032b4:	10c00104 	addi	r3,r2,4
 20032b8:	008080b4 	movhi	r2,514
 20032bc:	1084d204 	addi	r2,r2,4936
 20032c0:	188b883a 	add	r5,r3,r2
 20032c4:	010080b4 	movhi	r4,514
 20032c8:	2102c104 	addi	r4,r4,2820
 20032cc:	2006abc0 	call	2006abc <printf>
            szTestList[sel].Func();
 20032d0:	e0bfff17 	ldw	r2,-4(fp)
 20032d4:	00c080b4 	movhi	r3,514
 20032d8:	18c4d204 	addi	r3,r3,4936
 20032dc:	10801224 	muli	r2,r2,72
 20032e0:	10c5883a 	add	r2,r2,r3
 20032e4:	10801104 	addi	r2,r2,68
 20032e8:	10800017 	ldw	r2,0(r2)
 20032ec:	103ee83a 	callr	r2

    while(1){
        ShowMenu();
        printf("Select:");
        scanf("%d", &sel);
        if (sel >= 0 && sel < nNum){
 20032f0:	00000306 	br	2003300 <main+0xb4>
            bKeyPressed = FALSE;
            printf("Demo %s\r\n",szTestList[sel].szName);
            szTestList[sel].Func();
        }else{
            printf("Invalid Selection\r\n");
 20032f4:	010080b4 	movhi	r4,514
 20032f8:	2102c404 	addi	r4,r4,2832
 20032fc:	2006bd40 	call	2006bd4 <puts>
        }

        sel++;
 2003300:	e0bfff17 	ldw	r2,-4(fp)
 2003304:	10800044 	addi	r2,r2,1
 2003308:	e0bfff15 	stw	r2,-4(fp)
    }
 200330c:	003fd806 	br	2003270 <main+0x24>

02003310 <DEMO_EEPROM>:

    return 0;
}


void DEMO_EEPROM(void){
 2003310:	defff504 	addi	sp,sp,-44
 2003314:	dfc00a15 	stw	ra,40(sp)
 2003318:	df000915 	stw	fp,36(sp)
 200331c:	df000904 	addi	fp,sp,36
    alt_u8 szBuf[16];
    int i,Num;
    const alt_u8 DeviceAddr = 0xA0;
 2003320:	00bfe804 	movi	r2,-96
 2003324:	e0bff945 	stb	r2,-27(fp)
    const alt_u8 ControlAddr = 00;
 2003328:	e03ff905 	stb	zero,-28(fp)

    // set clock as output
    //IOWR_ALTERA_AVALON_PIO_DIRECTION(I2C_SCL_BASE, ALTERA_AVALON_PIO_DIRECTION_OUTPUT);
    IOWR(SELECT_I2C_CLK_BASE, 0, 0x01);
 200332c:	00c14034 	movhi	r3,1280
 2003330:	18c00804 	addi	r3,r3,32
 2003334:	00800044 	movi	r2,1
 2003338:	18800035 	stwio	r2,0(r3)

    if (I2C_MultipleRead(I2C_SCL_BASE, I2C_SDA_BASE, DeviceAddr, ControlAddr, szBuf, sizeof(szBuf))){
 200333c:	e0bff943 	ldbu	r2,-27(fp)
 2003340:	11803fcc 	andi	r6,r2,255
 2003344:	3180201c 	xori	r6,r6,128
 2003348:	31bfe004 	addi	r6,r6,-128
 200334c:	e1fff903 	ldbu	r7,-28(fp)
 2003350:	e0bffc04 	addi	r2,fp,-16
 2003354:	d8800015 	stw	r2,0(sp)
 2003358:	00800404 	movi	r2,16
 200335c:	d8800115 	stw	r2,4(sp)
 2003360:	01010034 	movhi	r4,1024
 2003364:	21021804 	addi	r4,r4,2144
 2003368:	01410034 	movhi	r5,1024
 200336c:	29421c04 	addi	r5,r5,2160
 2003370:	20004f40 	call	20004f4 <I2C_MultipleRead>
 2003374:	1005003a 	cmpeq	r2,r2,zero
 2003378:	1000141e 	bne	r2,zero,20033cc <DEMO_EEPROM+0xbc>
        Num = sizeof(szBuf)/sizeof(szBuf[0]);
 200337c:	00800404 	movi	r2,16
 2003380:	e0bffa15 	stw	r2,-24(fp)
        for(i=0;i<Num;i++){
 2003384:	e03ffb15 	stw	zero,-20(fp)
 2003388:	00000c06 	br	20033bc <DEMO_EEPROM+0xac>
            printf("Addr[%02d] = %02xh\r\n", i, szBuf[i]);
 200338c:	e0fffb17 	ldw	r3,-20(fp)
 2003390:	e0bffc04 	addi	r2,fp,-16
 2003394:	10c5883a 	add	r2,r2,r3
 2003398:	10800003 	ldbu	r2,0(r2)
 200339c:	11803fcc 	andi	r6,r2,255
 20033a0:	010080b4 	movhi	r4,514
 20033a4:	2102c904 	addi	r4,r4,2852
 20033a8:	e17ffb17 	ldw	r5,-20(fp)
 20033ac:	2006abc0 	call	2006abc <printf>
    //IOWR_ALTERA_AVALON_PIO_DIRECTION(I2C_SCL_BASE, ALTERA_AVALON_PIO_DIRECTION_OUTPUT);
    IOWR(SELECT_I2C_CLK_BASE, 0, 0x01);

    if (I2C_MultipleRead(I2C_SCL_BASE, I2C_SDA_BASE, DeviceAddr, ControlAddr, szBuf, sizeof(szBuf))){
        Num = sizeof(szBuf)/sizeof(szBuf[0]);
        for(i=0;i<Num;i++){
 20033b0:	e0bffb17 	ldw	r2,-20(fp)
 20033b4:	10800044 	addi	r2,r2,1
 20033b8:	e0bffb15 	stw	r2,-20(fp)
 20033bc:	e0fffb17 	ldw	r3,-20(fp)
 20033c0:	e0bffa17 	ldw	r2,-24(fp)
 20033c4:	18bff116 	blt	r3,r2,200338c <DEMO_EEPROM+0x7c>
 20033c8:	00000306 	br	20033d8 <DEMO_EEPROM+0xc8>
            printf("Addr[%02d] = %02xh\r\n", i, szBuf[i]);
        }
    }else{
        printf("Failed to access EEPROM\r\n");
 20033cc:	010080b4 	movhi	r4,514
 20033d0:	2102cf04 	addi	r4,r4,2876
 20033d4:	2006bd40 	call	2006bd4 <puts>
    }
}
 20033d8:	e037883a 	mov	sp,fp
 20033dc:	dfc00117 	ldw	ra,4(sp)
 20033e0:	df000017 	ldw	fp,0(sp)
 20033e4:	dec00204 	addi	sp,sp,8
 20033e8:	f800283a 	ret

020033ec <DEMO_EPCS>:

void DEMO_EPCS(void){
 20033ec:	defffb04 	addi	sp,sp,-20
 20033f0:	dfc00415 	stw	ra,16(sp)
 20033f4:	df000315 	stw	fp,12(sp)
 20033f8:	df000304 	addi	fp,sp,12
    alt_u32 MemSize;
    MemSize = Flash_Size(EPCS_NAME);
 20033fc:	010080b4 	movhi	r4,514
 2003400:	2102d604 	addi	r4,r4,2904
 2003404:	20021c00 	call	20021c0 <Flash_Size>
 2003408:	e0bffd15 	stw	r2,-12(fp)
    printf("EPCS Size:%d Bytes (%d MB)\r\n", (int)MemSize, (int)MemSize/1024/1024);
 200340c:	e0bffd17 	ldw	r2,-12(fp)
 2003410:	e0bffe15 	stw	r2,-8(fp)
 2003414:	e0bffd17 	ldw	r2,-12(fp)
 2003418:	e0bfff15 	stw	r2,-4(fp)
 200341c:	e0ffff17 	ldw	r3,-4(fp)
 2003420:	1804403a 	cmpge	r2,r3,zero
 2003424:	1000051e 	bne	r2,zero,200343c <DEMO_EPCS+0x50>
 2003428:	00800434 	movhi	r2,16
 200342c:	10bfffc4 	addi	r2,r2,-1
 2003430:	e0ffff17 	ldw	r3,-4(fp)
 2003434:	1887883a 	add	r3,r3,r2
 2003438:	e0ffff15 	stw	r3,-4(fp)
 200343c:	e0ffff17 	ldw	r3,-4(fp)
 2003440:	1805d53a 	srai	r2,r3,20
 2003444:	100d883a 	mov	r6,r2
 2003448:	010080b4 	movhi	r4,514
 200344c:	2102d904 	addi	r4,r4,2916
 2003450:	e17ffe17 	ldw	r5,-8(fp)
 2003454:	2006abc0 	call	2006abc <printf>

}
 2003458:	e037883a 	mov	sp,fp
 200345c:	dfc00117 	ldw	ra,4(sp)
 2003460:	df000017 	ldw	fp,0(sp)
 2003464:	dec00204 	addi	sp,sp,8
 2003468:	f800283a 	ret

0200346c <round>:
 200346c:	289ffc2c 	andhi	r2,r5,32752
 2003470:	101bd53a 	srai	r13,r2,20
 2003474:	deffff04 	addi	sp,sp,-4
 2003478:	008004c4 	movi	r2,19
 200347c:	6abf0044 	addi	r10,r13,-1023
 2003480:	dfc00015 	stw	ra,0(sp)
 2003484:	2011883a 	mov	r8,r4
 2003488:	2813883a 	mov	r9,r5
 200348c:	2817883a 	mov	r11,r5
 2003490:	12801316 	blt	r2,r10,20034e0 <round+0x74>
 2003494:	50003016 	blt	r10,zero,2003558 <round+0xec>
 2003498:	00800434 	movhi	r2,16
 200349c:	10bfffc4 	addi	r2,r2,-1
 20034a0:	1289d83a 	sra	r4,r2,r10
 20034a4:	2146703a 	and	r3,r4,r5
 20034a8:	18002926 	beq	r3,zero,2003550 <round+0xe4>
 20034ac:	00800234 	movhi	r2,8
 20034b0:	1285d83a 	sra	r2,r2,r10
 20034b4:	0106303a 	nor	r3,zero,r4
 20034b8:	0009883a 	mov	r4,zero
 20034bc:	5885883a 	add	r2,r11,r2
 20034c0:	1896703a 	and	r11,r3,r2
 20034c4:	2011883a 	mov	r8,r4
 20034c8:	5813883a 	mov	r9,r11
 20034cc:	4005883a 	mov	r2,r8
 20034d0:	4807883a 	mov	r3,r9
 20034d4:	dfc00017 	ldw	ra,0(sp)
 20034d8:	dec00104 	addi	sp,sp,4
 20034dc:	f800283a 	ret
 20034e0:	03800cc4 	movi	r14,51
 20034e4:	72800e16 	blt	r14,r10,2003520 <round+0xb4>
 20034e8:	68befb44 	addi	r2,r13,-1043
 20034ec:	00ffffc4 	movi	r3,-1
 20034f0:	188ad83a 	srl	r5,r3,r2
 20034f4:	2148703a 	and	r4,r4,r5
 20034f8:	203ff426 	beq	r4,zero,20034cc <round+0x60>
 20034fc:	7287c83a 	sub	r3,r14,r10
 2003500:	00800044 	movi	r2,1
 2003504:	10c4983a 	sll	r2,r2,r3
 2003508:	4087883a 	add	r3,r8,r2
 200350c:	1a00012e 	bgeu	r3,r8,2003514 <round+0xa8>
 2003510:	4ac00044 	addi	r11,r9,1
 2003514:	0144303a 	nor	r2,zero,r5
 2003518:	1888703a 	and	r4,r3,r2
 200351c:	003fe906 	br	20034c4 <round+0x58>
 2003520:	00810004 	movi	r2,1024
 2003524:	50bfe91e 	bne	r10,r2,20034cc <round+0x60>
 2003528:	400d883a 	mov	r6,r8
 200352c:	280f883a 	mov	r7,r5
 2003530:	2004f5c0 	call	2004f5c <__adddf3>
 2003534:	1011883a 	mov	r8,r2
 2003538:	1813883a 	mov	r9,r3
 200353c:	4005883a 	mov	r2,r8
 2003540:	4807883a 	mov	r3,r9
 2003544:	dfc00017 	ldw	ra,0(sp)
 2003548:	dec00104 	addi	sp,sp,4
 200354c:	f800283a 	ret
 2003550:	403fd61e 	bne	r8,zero,20034ac <round+0x40>
 2003554:	003fdd06 	br	20034cc <round+0x60>
 2003558:	00bfffc4 	movi	r2,-1
 200355c:	2ae0002c 	andhi	r11,r5,32768
 2003560:	50800226 	beq	r10,r2,200356c <round+0x100>
 2003564:	0009883a 	mov	r4,zero
 2003568:	003fd606 	br	20034c4 <round+0x58>
 200356c:	5acffc34 	orhi	r11,r11,16368
 2003570:	0009883a 	mov	r4,zero
 2003574:	003fd306 	br	20034c4 <round+0x58>

02003578 <atan2>:
 2003578:	20036ac1 	jmpi	20036ac <__ieee754_atan2>

0200357c <sqrt>:
 200357c:	defff104 	addi	sp,sp,-60
 2003580:	dd000d15 	stw	r20,52(sp)
 2003584:	050080b4 	movhi	r20,514
 2003588:	a50c1604 	addi	r20,r20,12376
 200358c:	dcc00c15 	stw	r19,48(sp)
 2003590:	dc800b15 	stw	r18,44(sp)
 2003594:	dc400a15 	stw	r17,40(sp)
 2003598:	dc000915 	stw	r16,36(sp)
 200359c:	2025883a 	mov	r18,r4
 20035a0:	dfc00e15 	stw	ra,56(sp)
 20035a4:	2827883a 	mov	r19,r5
 20035a8:	20039fc0 	call	20039fc <__ieee754_sqrt>
 20035ac:	a1000017 	ldw	r4,0(r20)
 20035b0:	1021883a 	mov	r16,r2
 20035b4:	00bfffc4 	movi	r2,-1
 20035b8:	1823883a 	mov	r17,r3
 20035bc:	20800a26 	beq	r4,r2,20035e8 <sqrt+0x6c>
 20035c0:	9009883a 	mov	r4,r18
 20035c4:	980b883a 	mov	r5,r19
 20035c8:	20043740 	call	2004374 <__isnand>
 20035cc:	1000061e 	bne	r2,zero,20035e8 <sqrt+0x6c>
 20035d0:	000d883a 	mov	r6,zero
 20035d4:	000f883a 	mov	r7,zero
 20035d8:	9009883a 	mov	r4,r18
 20035dc:	980b883a 	mov	r5,r19
 20035e0:	20056740 	call	2005674 <__ltdf2>
 20035e4:	10000a16 	blt	r2,zero,2003610 <sqrt+0x94>
 20035e8:	8005883a 	mov	r2,r16
 20035ec:	8807883a 	mov	r3,r17
 20035f0:	dfc00e17 	ldw	ra,56(sp)
 20035f4:	dd000d17 	ldw	r20,52(sp)
 20035f8:	dcc00c17 	ldw	r19,48(sp)
 20035fc:	dc800b17 	ldw	r18,44(sp)
 2003600:	dc400a17 	ldw	r17,40(sp)
 2003604:	dc000917 	ldw	r16,36(sp)
 2003608:	dec00f04 	addi	sp,sp,60
 200360c:	f800283a 	ret
 2003610:	a4000017 	ldw	r16,0(r20)
 2003614:	00800044 	movi	r2,1
 2003618:	00c080b4 	movhi	r3,514
 200361c:	18c2e104 	addi	r3,r3,2948
 2003620:	d8800015 	stw	r2,0(sp)
 2003624:	d8c00115 	stw	r3,4(sp)
 2003628:	dcc00315 	stw	r19,12(sp)
 200362c:	d8000815 	stw	zero,32(sp)
 2003630:	dc800415 	stw	r18,16(sp)
 2003634:	dcc00515 	stw	r19,20(sp)
 2003638:	dc800215 	stw	r18,8(sp)
 200363c:	80000a1e 	bne	r16,zero,2003668 <sqrt+0xec>
 2003640:	d8000615 	stw	zero,24(sp)
 2003644:	d8000715 	stw	zero,28(sp)
 2003648:	d809883a 	mov	r4,sp
 200364c:	20043a40 	call	20043a4 <matherr>
 2003650:	10000e26 	beq	r2,zero,200368c <sqrt+0x110>
 2003654:	d8800817 	ldw	r2,32(sp)
 2003658:	1000101e 	bne	r2,zero,200369c <sqrt+0x120>
 200365c:	dc000617 	ldw	r16,24(sp)
 2003660:	dc400717 	ldw	r17,28(sp)
 2003664:	003fe006 	br	20035e8 <sqrt+0x6c>
 2003668:	0009883a 	mov	r4,zero
 200366c:	000d883a 	mov	r6,zero
 2003670:	000b883a 	mov	r5,zero
 2003674:	000f883a 	mov	r7,zero
 2003678:	20053940 	call	2005394 <__divdf3>
 200367c:	d8800615 	stw	r2,24(sp)
 2003680:	00800084 	movi	r2,2
 2003684:	d8c00715 	stw	r3,28(sp)
 2003688:	80bfef1e 	bne	r16,r2,2003648 <sqrt+0xcc>
 200368c:	20063440 	call	2006344 <__errno>
 2003690:	00c00844 	movi	r3,33
 2003694:	10c00015 	stw	r3,0(r2)
 2003698:	003fee06 	br	2003654 <sqrt+0xd8>
 200369c:	20063440 	call	2006344 <__errno>
 20036a0:	d8c00817 	ldw	r3,32(sp)
 20036a4:	10c00015 	stw	r3,0(r2)
 20036a8:	003fec06 	br	200365c <sqrt+0xe0>

020036ac <__ieee754_atan2>:
 20036ac:	3015883a 	mov	r10,r6
 20036b0:	3019883a 	mov	r12,r6
 20036b4:	018dc83a 	sub	r6,zero,r6
 20036b8:	518cb03a 	or	r6,r10,r6
 20036bc:	300cd7fa 	srli	r6,r6,31
 20036c0:	03a00034 	movhi	r14,32768
 20036c4:	73bfffc4 	addi	r14,r14,-1
 20036c8:	3b9e703a 	and	r15,r7,r14
 20036cc:	defffc04 	addi	sp,sp,-16
 20036d0:	33ccb03a 	or	r6,r6,r15
 20036d4:	035ffc34 	movhi	r13,32752
 20036d8:	dc000015 	stw	r16,0(sp)
 20036dc:	dfc00315 	stw	ra,12(sp)
 20036e0:	dc800215 	stw	r18,8(sp)
 20036e4:	dc400115 	stw	r17,4(sp)
 20036e8:	3817883a 	mov	r11,r7
 20036ec:	2011883a 	mov	r8,r4
 20036f0:	2813883a 	mov	r9,r5
 20036f4:	3821883a 	mov	r16,r7
 20036f8:	69800736 	bltu	r13,r6,2003718 <__ieee754_atan2+0x6c>
 20036fc:	0105c83a 	sub	r2,zero,r4
 2003700:	2084b03a 	or	r2,r4,r2
 2003704:	1004d7fa 	srli	r2,r2,31
 2003708:	2b8c703a 	and	r6,r5,r14
 200370c:	2823883a 	mov	r17,r5
 2003710:	1184b03a 	or	r2,r2,r6
 2003714:	68800d2e 	bgeu	r13,r2,200374c <__ieee754_atan2+0xa0>
 2003718:	4009883a 	mov	r4,r8
 200371c:	500d883a 	mov	r6,r10
 2003720:	2004f5c0 	call	2004f5c <__adddf3>
 2003724:	1011883a 	mov	r8,r2
 2003728:	1813883a 	mov	r9,r3
 200372c:	4005883a 	mov	r2,r8
 2003730:	4807883a 	mov	r3,r9
 2003734:	dfc00317 	ldw	ra,12(sp)
 2003738:	dc800217 	ldw	r18,8(sp)
 200373c:	dc400117 	ldw	r17,4(sp)
 2003740:	dc000017 	ldw	r16,0(sp)
 2003744:	dec00404 	addi	sp,sp,16
 2003748:	f800283a 	ret
 200374c:	00b00434 	movhi	r2,49168
 2003750:	3885883a 	add	r2,r7,r2
 2003754:	5084b03a 	or	r2,r10,r2
 2003758:	10001026 	beq	r2,zero,200379c <__ieee754_atan2+0xf0>
 200375c:	3805d7ba 	srai	r2,r7,30
 2003760:	2806d7fa 	srli	r3,r5,31
 2003764:	2188b03a 	or	r4,r4,r6
 2003768:	1080008c 	andi	r2,r2,2
 200376c:	18a4b03a 	or	r18,r3,r2
 2003770:	00800084 	movi	r2,2
 2003774:	2000101e 	bne	r4,zero,20037b8 <__ieee754_atan2+0x10c>
 2003778:	90803826 	beq	r18,r2,200385c <__ieee754_atan2+0x1b0>
 200377c:	14bfeb0e 	bge	r2,r18,200372c <__ieee754_atan2+0x80>
 2003780:	008000c4 	movi	r2,3
 2003784:	90800c1e 	bne	r18,r2,20037b8 <__ieee754_atan2+0x10c>
 2003788:	02151134 	movhi	r8,21572
 200378c:	420b4604 	addi	r8,r8,11544
 2003790:	02700274 	movhi	r9,49161
 2003794:	4a487ec4 	addi	r9,r9,8699
 2003798:	003fe406 	br	200372c <__ieee754_atan2+0x80>
 200379c:	4009883a 	mov	r4,r8
 20037a0:	dfc00317 	ldw	ra,12(sp)
 20037a4:	dc800217 	ldw	r18,8(sp)
 20037a8:	dc400117 	ldw	r17,4(sp)
 20037ac:	dc000017 	ldw	r16,0(sp)
 20037b0:	dec00404 	addi	sp,sp,16
 20037b4:	2003cc41 	jmpi	2003cc4 <atan>
 20037b8:	63c4b03a 	or	r2,r12,r15
 20037bc:	10001426 	beq	r2,zero,2003810 <__ieee754_atan2+0x164>
 20037c0:	009ffc34 	movhi	r2,32752
 20037c4:	78801d26 	beq	r15,r2,200383c <__ieee754_atan2+0x190>
 20037c8:	009ffc34 	movhi	r2,32752
 20037cc:	30801026 	beq	r6,r2,2003810 <__ieee754_atan2+0x164>
 20037d0:	33c5c83a 	sub	r2,r6,r15
 20037d4:	1009d53a 	srai	r4,r2,20
 20037d8:	00c00f04 	movi	r3,60
 20037dc:	1900240e 	bge	r3,r4,2003870 <__ieee754_atan2+0x1c4>
 20037e0:	02951134 	movhi	r10,21572
 20037e4:	528b4604 	addi	r10,r10,11544
 20037e8:	02cffe74 	movhi	r11,16377
 20037ec:	5ac87ec4 	addi	r11,r11,8699
 20037f0:	00800044 	movi	r2,1
 20037f4:	90802d26 	beq	r18,r2,20038ac <__ieee754_atan2+0x200>
 20037f8:	00800084 	movi	r2,2
 20037fc:	90804426 	beq	r18,r2,2003910 <__ieee754_atan2+0x264>
 2003800:	90002e1e 	bne	r18,zero,20038bc <__ieee754_atan2+0x210>
 2003804:	5011883a 	mov	r8,r10
 2003808:	5813883a 	mov	r9,r11
 200380c:	003fc706 	br	200372c <__ieee754_atan2+0x80>
 2003810:	88000516 	blt	r17,zero,2003828 <__ieee754_atan2+0x17c>
 2003814:	02151134 	movhi	r8,21572
 2003818:	420b4604 	addi	r8,r8,11544
 200381c:	024ffe74 	movhi	r9,16377
 2003820:	4a487ec4 	addi	r9,r9,8699
 2003824:	003fc106 	br	200372c <__ieee754_atan2+0x80>
 2003828:	02151134 	movhi	r8,21572
 200382c:	420b4604 	addi	r8,r8,11544
 2003830:	026ffe74 	movhi	r9,49145
 2003834:	4a487ec4 	addi	r9,r9,8699
 2003838:	003fbc06 	br	200372c <__ieee754_atan2+0x80>
 200383c:	33c04b26 	beq	r6,r15,200396c <__ieee754_atan2+0x2c0>
 2003840:	00800044 	movi	r2,1
 2003844:	90805726 	beq	r18,r2,20039a4 <__ieee754_atan2+0x2f8>
 2003848:	14805116 	blt	r2,r18,2003990 <__ieee754_atan2+0x2e4>
 200384c:	903fde1e 	bne	r18,zero,20037c8 <__ieee754_atan2+0x11c>
 2003850:	0011883a 	mov	r8,zero
 2003854:	0013883a 	mov	r9,zero
 2003858:	003fb406 	br	200372c <__ieee754_atan2+0x80>
 200385c:	02151134 	movhi	r8,21572
 2003860:	420b4604 	addi	r8,r8,11544
 2003864:	02500274 	movhi	r9,16393
 2003868:	4a487ec4 	addi	r9,r9,8699
 200386c:	003faf06 	br	200372c <__ieee754_atan2+0x80>
 2003870:	80003916 	blt	r16,zero,2003958 <__ieee754_atan2+0x2ac>
 2003874:	580f883a 	mov	r7,r11
 2003878:	480b883a 	mov	r5,r9
 200387c:	500d883a 	mov	r6,r10
 2003880:	4009883a 	mov	r4,r8
 2003884:	20053940 	call	2005394 <__divdf3>
 2003888:	180b883a 	mov	r5,r3
 200388c:	1009883a 	mov	r4,r2
 2003890:	200435c0 	call	200435c <fabs>
 2003894:	180b883a 	mov	r5,r3
 2003898:	1009883a 	mov	r4,r2
 200389c:	2003cc40 	call	2003cc4 <atan>
 20038a0:	1015883a 	mov	r10,r2
 20038a4:	1817883a 	mov	r11,r3
 20038a8:	003fd106 	br	20037f0 <__ieee754_atan2+0x144>
 20038ac:	59a0003c 	xorhi	r6,r11,32768
 20038b0:	5011883a 	mov	r8,r10
 20038b4:	3013883a 	mov	r9,r6
 20038b8:	003f9c06 	br	200372c <__ieee754_atan2+0x80>
 20038bc:	008cc534 	movhi	r2,13076
 20038c0:	109701c4 	addi	r2,r2,23559
 20038c4:	00cf28b4 	movhi	r3,15522
 20038c8:	18e98984 	addi	r3,r3,-23002
 20038cc:	580b883a 	mov	r5,r11
 20038d0:	180f883a 	mov	r7,r3
 20038d4:	5009883a 	mov	r4,r10
 20038d8:	100d883a 	mov	r6,r2
 20038dc:	2004edc0 	call	2004edc <__subdf3>
 20038e0:	02151134 	movhi	r8,21572
 20038e4:	420b4604 	addi	r8,r8,11544
 20038e8:	02500274 	movhi	r9,16393
 20038ec:	4a487ec4 	addi	r9,r9,8699
 20038f0:	180b883a 	mov	r5,r3
 20038f4:	480f883a 	mov	r7,r9
 20038f8:	1009883a 	mov	r4,r2
 20038fc:	400d883a 	mov	r6,r8
 2003900:	2004edc0 	call	2004edc <__subdf3>
 2003904:	1011883a 	mov	r8,r2
 2003908:	1813883a 	mov	r9,r3
 200390c:	003f8706 	br	200372c <__ieee754_atan2+0x80>
 2003910:	008cc534 	movhi	r2,13076
 2003914:	109701c4 	addi	r2,r2,23559
 2003918:	00cf28b4 	movhi	r3,15522
 200391c:	18e98984 	addi	r3,r3,-23002
 2003920:	580b883a 	mov	r5,r11
 2003924:	180f883a 	mov	r7,r3
 2003928:	5009883a 	mov	r4,r10
 200392c:	100d883a 	mov	r6,r2
 2003930:	2004edc0 	call	2004edc <__subdf3>
 2003934:	02151134 	movhi	r8,21572
 2003938:	420b4604 	addi	r8,r8,11544
 200393c:	02500274 	movhi	r9,16393
 2003940:	4a487ec4 	addi	r9,r9,8699
 2003944:	480b883a 	mov	r5,r9
 2003948:	180f883a 	mov	r7,r3
 200394c:	4009883a 	mov	r4,r8
 2003950:	100d883a 	mov	r6,r2
 2003954:	003fea06 	br	2003900 <__ieee754_atan2+0x254>
 2003958:	00bff104 	movi	r2,-60
 200395c:	20bfc50e 	bge	r4,r2,2003874 <__ieee754_atan2+0x1c8>
 2003960:	0015883a 	mov	r10,zero
 2003964:	0017883a 	mov	r11,zero
 2003968:	003fa106 	br	20037f0 <__ieee754_atan2+0x144>
 200396c:	00800044 	movi	r2,1
 2003970:	90801826 	beq	r18,r2,20039d4 <__ieee754_atan2+0x328>
 2003974:	14800e16 	blt	r2,r18,20039b0 <__ieee754_atan2+0x304>
 2003978:	903f931e 	bne	r18,zero,20037c8 <__ieee754_atan2+0x11c>
 200397c:	02151134 	movhi	r8,21572
 2003980:	420b4604 	addi	r8,r8,11544
 2003984:	024ffa74 	movhi	r9,16361
 2003988:	4a487ec4 	addi	r9,r9,8699
 200398c:	003f6706 	br	200372c <__ieee754_atan2+0x80>
 2003990:	00800084 	movi	r2,2
 2003994:	90bfb126 	beq	r18,r2,200385c <__ieee754_atan2+0x1b0>
 2003998:	008000c4 	movi	r2,3
 200399c:	90bf8a1e 	bne	r18,r2,20037c8 <__ieee754_atan2+0x11c>
 20039a0:	003f7906 	br	2003788 <__ieee754_atan2+0xdc>
 20039a4:	0011883a 	mov	r8,zero
 20039a8:	02600034 	movhi	r9,32768
 20039ac:	003f5f06 	br	200372c <__ieee754_atan2+0x80>
 20039b0:	00800084 	movi	r2,2
 20039b4:	90800c26 	beq	r18,r2,20039e8 <__ieee754_atan2+0x33c>
 20039b8:	008000c4 	movi	r2,3
 20039bc:	90bf821e 	bne	r18,r2,20037c8 <__ieee754_atan2+0x11c>
 20039c0:	021fccf4 	movhi	r8,32563
 20039c4:	42087484 	addi	r8,r8,8658
 20039c8:	027000f4 	movhi	r9,49155
 20039cc:	4a765f04 	addi	r9,r9,-9860
 20039d0:	003f5606 	br	200372c <__ieee754_atan2+0x80>
 20039d4:	02151134 	movhi	r8,21572
 20039d8:	420b4604 	addi	r8,r8,11544
 20039dc:	026ffa74 	movhi	r9,49129
 20039e0:	4a487ec4 	addi	r9,r9,8699
 20039e4:	003f5106 	br	200372c <__ieee754_atan2+0x80>
 20039e8:	021fccf4 	movhi	r8,32563
 20039ec:	42087484 	addi	r8,r8,8658
 20039f0:	025000f4 	movhi	r9,16387
 20039f4:	4a765f04 	addi	r9,r9,-9860
 20039f8:	003f4c06 	br	200372c <__ieee754_atan2+0x80>

020039fc <__ieee754_sqrt>:
 20039fc:	defffd04 	addi	sp,sp,-12
 2003a00:	dc000015 	stw	r16,0(sp)
 2003a04:	009ffc34 	movhi	r2,32752
 2003a08:	2021883a 	mov	r16,r4
 2003a0c:	291ffc2c 	andhi	r4,r5,32752
 2003a10:	dc400115 	stw	r17,4(sp)
 2003a14:	dfc00215 	stw	ra,8(sp)
 2003a18:	2823883a 	mov	r17,r5
 2003a1c:	280f883a 	mov	r7,r5
 2003a20:	2807883a 	mov	r3,r5
 2003a24:	8011883a 	mov	r8,r16
 2003a28:	20807d26 	beq	r4,r2,2003c20 <__ieee754_sqrt+0x224>
 2003a2c:	01408d0e 	bge	zero,r5,2003c64 <__ieee754_sqrt+0x268>
 2003a30:	380dd53a 	srai	r6,r7,20
 2003a34:	3000131e 	bne	r6,zero,2003a84 <__ieee754_sqrt+0x88>
 2003a38:	1800041e 	bne	r3,zero,2003a4c <__ieee754_sqrt+0x50>
 2003a3c:	400ed2fa 	srli	r7,r8,11
 2003a40:	31bffac4 	addi	r6,r6,-21
 2003a44:	4010957a 	slli	r8,r8,21
 2003a48:	383ffc26 	beq	r7,zero,2003a3c <__ieee754_sqrt+0x40>
 2003a4c:	3880042c 	andhi	r2,r7,16
 2003a50:	1000991e 	bne	r2,zero,2003cb8 <__ieee754_sqrt+0x2bc>
 2003a54:	0009883a 	mov	r4,zero
 2003a58:	39cf883a 	add	r7,r7,r7
 2003a5c:	3880042c 	andhi	r2,r7,16
 2003a60:	21000044 	addi	r4,r4,1
 2003a64:	103ffc26 	beq	r2,zero,2003a58 <__ieee754_sqrt+0x5c>
 2003a68:	00800804 	movi	r2,32
 2003a6c:	1105c83a 	sub	r2,r2,r4
 2003a70:	4086d83a 	srl	r3,r8,r2
 2003a74:	4110983a 	sll	r8,r8,r4
 2003a78:	3105c83a 	sub	r2,r6,r4
 2003a7c:	38ceb03a 	or	r7,r7,r3
 2003a80:	11800044 	addi	r6,r2,1
 2003a84:	31bf0044 	addi	r6,r6,-1023
 2003a88:	30c0004c 	andi	r3,r6,1
 2003a8c:	00800434 	movhi	r2,16
 2003a90:	10bfffc4 	addi	r2,r2,-1
 2003a94:	3884703a 	and	r2,r7,r2
 2003a98:	1807003a 	cmpeq	r3,r3,zero
 2003a9c:	11000434 	orhi	r4,r2,16
 2003aa0:	18005426 	beq	r3,zero,2003bf4 <__ieee754_sqrt+0x1f8>
 2003aa4:	4004d7fa 	srli	r2,r8,31
 2003aa8:	4207883a 	add	r3,r8,r8
 2003aac:	02800834 	movhi	r10,32
 2003ab0:	1105883a 	add	r2,r2,r4
 2003ab4:	2089883a 	add	r4,r4,r2
 2003ab8:	0011883a 	mov	r8,zero
 2003abc:	000b883a 	mov	r5,zero
 2003ac0:	0013883a 	mov	r9,zero
 2003ac4:	02c00584 	movi	r11,22
 2003ac8:	520f883a 	add	r7,r10,r8
 2003acc:	1804d7fa 	srli	r2,r3,31
 2003ad0:	4a400044 	addi	r9,r9,1
 2003ad4:	18c7883a 	add	r3,r3,r3
 2003ad8:	21c00316 	blt	r4,r7,2003ae8 <__ieee754_sqrt+0xec>
 2003adc:	21c9c83a 	sub	r4,r4,r7
 2003ae0:	2a8b883a 	add	r5,r5,r10
 2003ae4:	51d1883a 	add	r8,r10,r7
 2003ae8:	1105883a 	add	r2,r2,r4
 2003aec:	5014d07a 	srli	r10,r10,1
 2003af0:	2089883a 	add	r4,r4,r2
 2003af4:	4afff41e 	bne	r9,r11,2003ac8 <__ieee754_sqrt+0xcc>
 2003af8:	02600034 	movhi	r9,32768
 2003afc:	0017883a 	mov	r11,zero
 2003b00:	0019883a 	mov	r12,zero
 2003b04:	0015883a 	mov	r10,zero
 2003b08:	4821883a 	mov	r16,r9
 2003b0c:	03c00804 	movi	r15,32
 2003b10:	00000806 	br	2003b34 <__ieee754_sqrt+0x138>
 2003b14:	22003426 	beq	r4,r8,2003be8 <__ieee754_sqrt+0x1ec>
 2003b18:	1804d7fa 	srli	r2,r3,31
 2003b1c:	52800044 	addi	r10,r10,1
 2003b20:	18c7883a 	add	r3,r3,r3
 2003b24:	1105883a 	add	r2,r2,r4
 2003b28:	2089883a 	add	r4,r4,r2
 2003b2c:	4812d07a 	srli	r9,r9,1
 2003b30:	53c01326 	beq	r10,r15,2003b80 <__ieee754_sqrt+0x184>
 2003b34:	4acf883a 	add	r7,r9,r11
 2003b38:	413ff60e 	bge	r8,r4,2003b14 <__ieee754_sqrt+0x118>
 2003b3c:	38a0002c 	andhi	r2,r7,32768
 2003b40:	3a57883a 	add	r11,r7,r9
 2003b44:	14002426 	beq	r2,r16,2003bd8 <__ieee754_sqrt+0x1dc>
 2003b48:	4005883a 	mov	r2,r8
 2003b4c:	2209c83a 	sub	r4,r4,r8
 2003b50:	19c0012e 	bgeu	r3,r7,2003b58 <__ieee754_sqrt+0x15c>
 2003b54:	213fffc4 	addi	r4,r4,-1
 2003b58:	19c7c83a 	sub	r3,r3,r7
 2003b5c:	1011883a 	mov	r8,r2
 2003b60:	1804d7fa 	srli	r2,r3,31
 2003b64:	52800044 	addi	r10,r10,1
 2003b68:	6259883a 	add	r12,r12,r9
 2003b6c:	1105883a 	add	r2,r2,r4
 2003b70:	18c7883a 	add	r3,r3,r3
 2003b74:	2089883a 	add	r4,r4,r2
 2003b78:	4812d07a 	srli	r9,r9,1
 2003b7c:	53ffed1e 	bne	r10,r15,2003b34 <__ieee754_sqrt+0x138>
 2003b80:	20c4b03a 	or	r2,r4,r3
 2003b84:	1000201e 	bne	r2,zero,2003c08 <__ieee754_sqrt+0x20c>
 2003b88:	600ed07a 	srli	r7,r12,1
 2003b8c:	2880004c 	andi	r2,r5,1
 2003b90:	1005003a 	cmpeq	r2,r2,zero
 2003b94:	1000011e 	bne	r2,zero,2003b9c <__ieee754_sqrt+0x1a0>
 2003b98:	39e00034 	orhi	r7,r7,32768
 2003b9c:	300dd07a 	srai	r6,r6,1
 2003ba0:	280bd07a 	srai	r5,r5,1
 2003ba4:	010ff834 	movhi	r4,16352
 2003ba8:	300c953a 	slli	r6,r6,20
 2003bac:	290b883a 	add	r5,r5,r4
 2003bb0:	3821883a 	mov	r16,r7
 2003bb4:	299d883a 	add	r14,r5,r6
 2003bb8:	7023883a 	mov	r17,r14
 2003bbc:	8005883a 	mov	r2,r16
 2003bc0:	8807883a 	mov	r3,r17
 2003bc4:	dfc00217 	ldw	ra,8(sp)
 2003bc8:	dc400117 	ldw	r17,4(sp)
 2003bcc:	dc000017 	ldw	r16,0(sp)
 2003bd0:	dec00304 	addi	sp,sp,12
 2003bd4:	f800283a 	ret
 2003bd8:	5884703a 	and	r2,r11,r2
 2003bdc:	103fda1e 	bne	r2,zero,2003b48 <__ieee754_sqrt+0x14c>
 2003be0:	40800044 	addi	r2,r8,1
 2003be4:	003fd906 	br	2003b4c <__ieee754_sqrt+0x150>
 2003be8:	19ffd42e 	bgeu	r3,r7,2003b3c <__ieee754_sqrt+0x140>
 2003bec:	2011883a 	mov	r8,r4
 2003bf0:	003fc906 	br	2003b18 <__ieee754_sqrt+0x11c>
 2003bf4:	4004d7fa 	srli	r2,r8,31
 2003bf8:	4211883a 	add	r8,r8,r8
 2003bfc:	1105883a 	add	r2,r2,r4
 2003c00:	2089883a 	add	r4,r4,r2
 2003c04:	003fa706 	br	2003aa4 <__ieee754_sqrt+0xa8>
 2003c08:	00bfffc4 	movi	r2,-1
 2003c0c:	60802726 	beq	r12,r2,2003cac <__ieee754_sqrt+0x2b0>
 2003c10:	6080004c 	andi	r2,r12,1
 2003c14:	6085883a 	add	r2,r12,r2
 2003c18:	100ed07a 	srli	r7,r2,1
 2003c1c:	003fdb06 	br	2003b8c <__ieee754_sqrt+0x190>
 2003c20:	8009883a 	mov	r4,r16
 2003c24:	800d883a 	mov	r6,r16
 2003c28:	2004fd00 	call	2004fd0 <__muldf3>
 2003c2c:	180f883a 	mov	r7,r3
 2003c30:	880b883a 	mov	r5,r17
 2003c34:	8009883a 	mov	r4,r16
 2003c38:	100d883a 	mov	r6,r2
 2003c3c:	2004f5c0 	call	2004f5c <__adddf3>
 2003c40:	1021883a 	mov	r16,r2
 2003c44:	1823883a 	mov	r17,r3
 2003c48:	8005883a 	mov	r2,r16
 2003c4c:	8807883a 	mov	r3,r17
 2003c50:	dfc00217 	ldw	ra,8(sp)
 2003c54:	dc400117 	ldw	r17,4(sp)
 2003c58:	dc000017 	ldw	r16,0(sp)
 2003c5c:	dec00304 	addi	sp,sp,12
 2003c60:	f800283a 	ret
 2003c64:	00a00034 	movhi	r2,32768
 2003c68:	10bfffc4 	addi	r2,r2,-1
 2003c6c:	2884703a 	and	r2,r5,r2
 2003c70:	8084b03a 	or	r2,r16,r2
 2003c74:	103fd126 	beq	r2,zero,2003bbc <__ieee754_sqrt+0x1c0>
 2003c78:	283f6d26 	beq	r5,zero,2003a30 <__ieee754_sqrt+0x34>
 2003c7c:	280f883a 	mov	r7,r5
 2003c80:	8009883a 	mov	r4,r16
 2003c84:	800d883a 	mov	r6,r16
 2003c88:	2004edc0 	call	2004edc <__subdf3>
 2003c8c:	1009883a 	mov	r4,r2
 2003c90:	180b883a 	mov	r5,r3
 2003c94:	100d883a 	mov	r6,r2
 2003c98:	180f883a 	mov	r7,r3
 2003c9c:	20053940 	call	2005394 <__divdf3>
 2003ca0:	1021883a 	mov	r16,r2
 2003ca4:	1823883a 	mov	r17,r3
 2003ca8:	003fc406 	br	2003bbc <__ieee754_sqrt+0x1c0>
 2003cac:	29400044 	addi	r5,r5,1
 2003cb0:	000f883a 	mov	r7,zero
 2003cb4:	003fb506 	br	2003b8c <__ieee754_sqrt+0x190>
 2003cb8:	0009883a 	mov	r4,zero
 2003cbc:	00800804 	movi	r2,32
 2003cc0:	003f6b06 	br	2003a70 <__ieee754_sqrt+0x74>

02003cc4 <atan>:
 2003cc4:	defff304 	addi	sp,sp,-52
 2003cc8:	00a00034 	movhi	r2,32768
 2003ccc:	10bfffc4 	addi	r2,r2,-1
 2003cd0:	dc000315 	stw	r16,12(sp)
 2003cd4:	28a0703a 	and	r16,r5,r2
 2003cd8:	00910434 	movhi	r2,17424
 2003cdc:	10bfffc4 	addi	r2,r2,-1
 2003ce0:	df000b15 	stw	fp,44(sp)
 2003ce4:	dfc00c15 	stw	ra,48(sp)
 2003ce8:	ddc00a15 	stw	r23,40(sp)
 2003cec:	dd800915 	stw	r22,36(sp)
 2003cf0:	dd400815 	stw	r21,32(sp)
 2003cf4:	dd000715 	stw	r20,28(sp)
 2003cf8:	dcc00615 	stw	r19,24(sp)
 2003cfc:	dc800515 	stw	r18,20(sp)
 2003d00:	dc400415 	stw	r17,16(sp)
 2003d04:	d9000115 	stw	r4,4(sp)
 2003d08:	d9400215 	stw	r5,8(sp)
 2003d0c:	2839883a 	mov	fp,r5
 2003d10:	1400190e 	bge	r2,r16,2003d78 <atan+0xb4>
 2003d14:	2005883a 	mov	r2,r4
 2003d18:	011ffc34 	movhi	r4,32752
 2003d1c:	2400eb0e 	bge	r4,r16,20040cc <atan+0x408>
 2003d20:	d9000117 	ldw	r4,4(sp)
 2003d24:	d9c00217 	ldw	r7,8(sp)
 2003d28:	200d883a 	mov	r6,r4
 2003d2c:	2004f5c0 	call	2004f5c <__adddf3>
 2003d30:	d8800115 	stw	r2,4(sp)
 2003d34:	d8c00215 	stw	r3,8(sp)
 2003d38:	d9000117 	ldw	r4,4(sp)
 2003d3c:	2005883a 	mov	r2,r4
 2003d40:	d9000217 	ldw	r4,8(sp)
 2003d44:	2007883a 	mov	r3,r4
 2003d48:	dfc00c17 	ldw	ra,48(sp)
 2003d4c:	df000b17 	ldw	fp,44(sp)
 2003d50:	ddc00a17 	ldw	r23,40(sp)
 2003d54:	dd800917 	ldw	r22,36(sp)
 2003d58:	dd400817 	ldw	r21,32(sp)
 2003d5c:	dd000717 	ldw	r20,28(sp)
 2003d60:	dcc00617 	ldw	r19,24(sp)
 2003d64:	dc800517 	ldw	r18,20(sp)
 2003d68:	dc400417 	ldw	r17,16(sp)
 2003d6c:	dc000317 	ldw	r16,12(sp)
 2003d70:	dec00d04 	addi	sp,sp,52
 2003d74:	f800283a 	ret
 2003d78:	008ff734 	movhi	r2,16348
 2003d7c:	10bfffc4 	addi	r2,r2,-1
 2003d80:	1400ec16 	blt	r2,r16,2004134 <atan+0x470>
 2003d84:	008f8834 	movhi	r2,15904
 2003d88:	10bfffc4 	addi	r2,r2,-1
 2003d8c:	1400d80e 	bge	r2,r16,20040f0 <atan+0x42c>
 2003d90:	00bfffc4 	movi	r2,-1
 2003d94:	d8800015 	stw	r2,0(sp)
 2003d98:	d9000117 	ldw	r4,4(sp)
 2003d9c:	d9400217 	ldw	r5,8(sp)
 2003da0:	200d883a 	mov	r6,r4
 2003da4:	280f883a 	mov	r7,r5
 2003da8:	2004fd00 	call	2004fd0 <__muldf3>
 2003dac:	1009883a 	mov	r4,r2
 2003db0:	180b883a 	mov	r5,r3
 2003db4:	100d883a 	mov	r6,r2
 2003db8:	180f883a 	mov	r7,r3
 2003dbc:	1025883a 	mov	r18,r2
 2003dc0:	1827883a 	mov	r19,r3
 2003dc4:	2004fd00 	call	2004fd0 <__muldf3>
 2003dc8:	1021883a 	mov	r16,r2
 2003dcc:	1823883a 	mov	r17,r3
 2003dd0:	00b8c8f4 	movhi	r2,58147
 2003dd4:	10b68444 	addi	r2,r2,-9711
 2003dd8:	00cfe474 	movhi	r3,16273
 2003ddc:	18eb4e84 	addi	r3,r3,-21190
 2003de0:	180f883a 	mov	r7,r3
 2003de4:	8009883a 	mov	r4,r16
 2003de8:	880b883a 	mov	r5,r17
 2003dec:	100d883a 	mov	r6,r2
 2003df0:	2004fd00 	call	2004fd0 <__muldf3>
 2003df4:	02091db4 	movhi	r8,9334
 2003df8:	42037ac4 	addi	r8,r8,3563
 2003dfc:	024fea74 	movhi	r9,16297
 2003e00:	4a5ed2c4 	addi	r9,r9,31563
 2003e04:	480f883a 	mov	r7,r9
 2003e08:	400d883a 	mov	r6,r8
 2003e0c:	180b883a 	mov	r5,r3
 2003e10:	1009883a 	mov	r4,r2
 2003e14:	2004f5c0 	call	2004f5c <__adddf3>
 2003e18:	180f883a 	mov	r7,r3
 2003e1c:	8009883a 	mov	r4,r16
 2003e20:	880b883a 	mov	r5,r17
 2003e24:	100d883a 	mov	r6,r2
 2003e28:	2004fd00 	call	2004fd0 <__muldf3>
 2003e2c:	02283434 	movhi	r8,41168
 2003e30:	420f5444 	addi	r8,r8,15697
 2003e34:	024fec74 	movhi	r9,16305
 2003e38:	4a435984 	addi	r9,r9,3430
 2003e3c:	480f883a 	mov	r7,r9
 2003e40:	400d883a 	mov	r6,r8
 2003e44:	180b883a 	mov	r5,r3
 2003e48:	1009883a 	mov	r4,r2
 2003e4c:	2004f5c0 	call	2004f5c <__adddf3>
 2003e50:	180f883a 	mov	r7,r3
 2003e54:	8009883a 	mov	r4,r16
 2003e58:	880b883a 	mov	r5,r17
 2003e5c:	100d883a 	mov	r6,r2
 2003e60:	2004fd00 	call	2004fd0 <__muldf3>
 2003e64:	02315334 	movhi	r8,50508
 2003e68:	42081b84 	addi	r8,r8,8302
 2003e6c:	024fedf4 	movhi	r9,16311
 2003e70:	4a517344 	addi	r9,r9,17869
 2003e74:	480f883a 	mov	r7,r9
 2003e78:	400d883a 	mov	r6,r8
 2003e7c:	180b883a 	mov	r5,r3
 2003e80:	1009883a 	mov	r4,r2
 2003e84:	2004f5c0 	call	2004f5c <__adddf3>
 2003e88:	180f883a 	mov	r7,r3
 2003e8c:	8009883a 	mov	r4,r16
 2003e90:	880b883a 	mov	r5,r17
 2003e94:	100d883a 	mov	r6,r2
 2003e98:	2004fd00 	call	2004fd0 <__muldf3>
 2003e9c:	02248074 	movhi	r8,37377
 2003ea0:	4220ffc4 	addi	r8,r8,-31745
 2003ea4:	024ff0b4 	movhi	r9,16322
 2003ea8:	4a524904 	addi	r9,r9,18724
 2003eac:	480f883a 	mov	r7,r9
 2003eb0:	400d883a 	mov	r6,r8
 2003eb4:	180b883a 	mov	r5,r3
 2003eb8:	1009883a 	mov	r4,r2
 2003ebc:	2004f5c0 	call	2004f5c <__adddf3>
 2003ec0:	180f883a 	mov	r7,r3
 2003ec4:	8009883a 	mov	r4,r16
 2003ec8:	880b883a 	mov	r5,r17
 2003ecc:	100d883a 	mov	r6,r2
 2003ed0:	2004fd00 	call	2004fd0 <__muldf3>
 2003ed4:	02155574 	movhi	r8,21845
 2003ed8:	42154344 	addi	r8,r8,21773
 2003edc:	024ff574 	movhi	r9,16341
 2003ee0:	4a555544 	addi	r9,r9,21845
 2003ee4:	480f883a 	mov	r7,r9
 2003ee8:	400d883a 	mov	r6,r8
 2003eec:	180b883a 	mov	r5,r3
 2003ef0:	1009883a 	mov	r4,r2
 2003ef4:	2004f5c0 	call	2004f5c <__adddf3>
 2003ef8:	180f883a 	mov	r7,r3
 2003efc:	9009883a 	mov	r4,r18
 2003f00:	980b883a 	mov	r5,r19
 2003f04:	100d883a 	mov	r6,r2
 2003f08:	2004fd00 	call	2004fd0 <__muldf3>
 2003f0c:	020b1ab4 	movhi	r8,11370
 2003f10:	421b0bc4 	addi	r8,r8,27695
 2003f14:	026fe8f4 	movhi	r9,49059
 2003f18:	4a6d1104 	addi	r9,r9,-19388
 2003f1c:	480f883a 	mov	r7,r9
 2003f20:	400d883a 	mov	r6,r8
 2003f24:	8009883a 	mov	r4,r16
 2003f28:	880b883a 	mov	r5,r17
 2003f2c:	102d883a 	mov	r22,r2
 2003f30:	182f883a 	mov	r23,r3
 2003f34:	2004fd00 	call	2004fd0 <__muldf3>
 2003f38:	0214b7f4 	movhi	r8,21215
 2003f3c:	423f6684 	addi	r8,r8,-614
 2003f40:	024febb4 	movhi	r9,16302
 2003f44:	4a778b44 	addi	r9,r9,-8659
 2003f48:	480f883a 	mov	r7,r9
 2003f4c:	400d883a 	mov	r6,r8
 2003f50:	180b883a 	mov	r5,r3
 2003f54:	1009883a 	mov	r4,r2
 2003f58:	2004edc0 	call	2004edc <__subdf3>
 2003f5c:	180f883a 	mov	r7,r3
 2003f60:	8009883a 	mov	r4,r16
 2003f64:	880b883a 	mov	r5,r17
 2003f68:	100d883a 	mov	r6,r2
 2003f6c:	2004fd00 	call	2004fd0 <__muldf3>
 2003f70:	022bdd74 	movhi	r8,44917
 2003f74:	42269b44 	addi	r8,r8,-26003
 2003f78:	024fed34 	movhi	r9,16308
 2003f7c:	4a6c3c84 	addi	r9,r9,-20238
 2003f80:	480f883a 	mov	r7,r9
 2003f84:	400d883a 	mov	r6,r8
 2003f88:	180b883a 	mov	r5,r3
 2003f8c:	1009883a 	mov	r4,r2
 2003f90:	2004edc0 	call	2004edc <__subdf3>
 2003f94:	180f883a 	mov	r7,r3
 2003f98:	8009883a 	mov	r4,r16
 2003f9c:	880b883a 	mov	r5,r17
 2003fa0:	100d883a 	mov	r6,r2
 2003fa4:	2004fd00 	call	2004fd0 <__muldf3>
 2003fa8:	023f88f4 	movhi	r8,65059
 2003fac:	42059c44 	addi	r8,r8,5745
 2003fb0:	024fef34 	movhi	r9,16316
 2003fb4:	4a5c7184 	addi	r9,r9,29126
 2003fb8:	480f883a 	mov	r7,r9
 2003fbc:	400d883a 	mov	r6,r8
 2003fc0:	180b883a 	mov	r5,r3
 2003fc4:	1009883a 	mov	r4,r2
 2003fc8:	2004edc0 	call	2004edc <__subdf3>
 2003fcc:	180f883a 	mov	r7,r3
 2003fd0:	8009883a 	mov	r4,r16
 2003fd4:	880b883a 	mov	r5,r17
 2003fd8:	100d883a 	mov	r6,r2
 2003fdc:	2004fd00 	call	2004fd0 <__muldf3>
 2003fe0:	02266674 	movhi	r8,39321
 2003fe4:	423af104 	addi	r8,r8,-5180
 2003fe8:	024ff2b4 	movhi	r9,16330
 2003fec:	4a666644 	addi	r9,r9,-26215
 2003ff0:	480f883a 	mov	r7,r9
 2003ff4:	400d883a 	mov	r6,r8
 2003ff8:	180b883a 	mov	r5,r3
 2003ffc:	1009883a 	mov	r4,r2
 2004000:	2004edc0 	call	2004edc <__subdf3>
 2004004:	180f883a 	mov	r7,r3
 2004008:	8009883a 	mov	r4,r16
 200400c:	880b883a 	mov	r5,r17
 2004010:	100d883a 	mov	r6,r2
 2004014:	2004fd00 	call	2004fd0 <__muldf3>
 2004018:	100f883a 	mov	r7,r2
 200401c:	d8800017 	ldw	r2,0(sp)
 2004020:	b009883a 	mov	r4,r22
 2004024:	b80b883a 	mov	r5,r23
 2004028:	10006b16 	blt	r2,zero,20041d8 <atan+0x514>
 200402c:	d8800017 	ldw	r2,0(sp)
 2004030:	380d883a 	mov	r6,r7
 2004034:	b80b883a 	mov	r5,r23
 2004038:	102490fa 	slli	r18,r2,3
 200403c:	008080b4 	movhi	r2,514
 2004040:	1082e304 	addi	r2,r2,2956
 2004044:	180f883a 	mov	r7,r3
 2004048:	9085883a 	add	r2,r18,r2
 200404c:	14000017 	ldw	r16,0(r2)
 2004050:	14400117 	ldw	r17,4(r2)
 2004054:	2004f5c0 	call	2004f5c <__adddf3>
 2004058:	d9000117 	ldw	r4,4(sp)
 200405c:	d9400217 	ldw	r5,8(sp)
 2004060:	180f883a 	mov	r7,r3
 2004064:	100d883a 	mov	r6,r2
 2004068:	2004fd00 	call	2004fd0 <__muldf3>
 200406c:	010080b4 	movhi	r4,514
 2004070:	2102eb04 	addi	r4,r4,2988
 2004074:	9125883a 	add	r18,r18,r4
 2004078:	92000017 	ldw	r8,0(r18)
 200407c:	92400117 	ldw	r9,4(r18)
 2004080:	180b883a 	mov	r5,r3
 2004084:	400d883a 	mov	r6,r8
 2004088:	480f883a 	mov	r7,r9
 200408c:	1009883a 	mov	r4,r2
 2004090:	2004edc0 	call	2004edc <__subdf3>
 2004094:	d9c00217 	ldw	r7,8(sp)
 2004098:	d9800117 	ldw	r6,4(sp)
 200409c:	180b883a 	mov	r5,r3
 20040a0:	1009883a 	mov	r4,r2
 20040a4:	2004edc0 	call	2004edc <__subdf3>
 20040a8:	180f883a 	mov	r7,r3
 20040ac:	880b883a 	mov	r5,r17
 20040b0:	8009883a 	mov	r4,r16
 20040b4:	100d883a 	mov	r6,r2
 20040b8:	2004edc0 	call	2004edc <__subdf3>
 20040bc:	e0003f16 	blt	fp,zero,20041bc <atan+0x4f8>
 20040c0:	d8800115 	stw	r2,4(sp)
 20040c4:	d8c00215 	stw	r3,8(sp)
 20040c8:	003f1b06 	br	2003d38 <atan+0x74>
 20040cc:	81003f26 	beq	r16,r4,20041cc <atan+0x508>
 20040d0:	07005e0e 	bge	zero,fp,200424c <atan+0x588>
 20040d4:	01151134 	movhi	r4,21572
 20040d8:	210b4604 	addi	r4,r4,11544
 20040dc:	008ffe74 	movhi	r2,16377
 20040e0:	10887ec4 	addi	r2,r2,8699
 20040e4:	d9000115 	stw	r4,4(sp)
 20040e8:	d8800215 	stw	r2,8(sp)
 20040ec:	003f1206 	br	2003d38 <atan+0x74>
 20040f0:	d9000117 	ldw	r4,4(sp)
 20040f4:	00a20034 	movhi	r2,34816
 20040f8:	109d6704 	addi	r2,r2,30108
 20040fc:	00df8e34 	movhi	r3,32312
 2004100:	18f90f04 	addi	r3,r3,-7108
 2004104:	180f883a 	mov	r7,r3
 2004108:	100d883a 	mov	r6,r2
 200410c:	2004f5c0 	call	2004f5c <__adddf3>
 2004110:	0011883a 	mov	r8,zero
 2004114:	024ffc34 	movhi	r9,16368
 2004118:	180b883a 	mov	r5,r3
 200411c:	480f883a 	mov	r7,r9
 2004120:	1009883a 	mov	r4,r2
 2004124:	400d883a 	mov	r6,r8
 2004128:	20055ec0 	call	20055ec <__gtdf2>
 200412c:	00bf0216 	blt	zero,r2,2003d38 <atan+0x74>
 2004130:	003f1706 	br	2003d90 <atan+0xcc>
 2004134:	d9000117 	ldw	r4,4(sp)
 2004138:	200435c0 	call	200435c <fabs>
 200413c:	102d883a 	mov	r22,r2
 2004140:	008ffcf4 	movhi	r2,16371
 2004144:	10bfffc4 	addi	r2,r2,-1
 2004148:	182f883a 	mov	r23,r3
 200414c:	14003016 	blt	r2,r16,2004210 <atan+0x54c>
 2004150:	008ff9b4 	movhi	r2,16358
 2004154:	10bfffc4 	addi	r2,r2,-1
 2004158:	1400430e 	bge	r2,r16,2004268 <atan+0x5a4>
 200415c:	044ffc34 	movhi	r17,16368
 2004160:	0021883a 	mov	r16,zero
 2004164:	800d883a 	mov	r6,r16
 2004168:	880f883a 	mov	r7,r17
 200416c:	b009883a 	mov	r4,r22
 2004170:	180b883a 	mov	r5,r3
 2004174:	2004edc0 	call	2004edc <__subdf3>
 2004178:	880f883a 	mov	r7,r17
 200417c:	000d883a 	mov	r6,zero
 2004180:	b80b883a 	mov	r5,r23
 2004184:	b009883a 	mov	r4,r22
 2004188:	1021883a 	mov	r16,r2
 200418c:	1823883a 	mov	r17,r3
 2004190:	2004f5c0 	call	2004f5c <__adddf3>
 2004194:	180f883a 	mov	r7,r3
 2004198:	8009883a 	mov	r4,r16
 200419c:	880b883a 	mov	r5,r17
 20041a0:	100d883a 	mov	r6,r2
 20041a4:	20053940 	call	2005394 <__divdf3>
 20041a8:	01000044 	movi	r4,1
 20041ac:	d8800115 	stw	r2,4(sp)
 20041b0:	d8c00215 	stw	r3,8(sp)
 20041b4:	d9000015 	stw	r4,0(sp)
 20041b8:	003ef706 	br	2003d98 <atan+0xd4>
 20041bc:	18e0003c 	xorhi	r3,r3,32768
 20041c0:	d8800115 	stw	r2,4(sp)
 20041c4:	d8c00215 	stw	r3,8(sp)
 20041c8:	003edb06 	br	2003d38 <atan+0x74>
 20041cc:	103ed41e 	bne	r2,zero,2003d20 <atan+0x5c>
 20041d0:	073fc016 	blt	zero,fp,20040d4 <atan+0x410>
 20041d4:	00001d06 	br	200424c <atan+0x588>
 20041d8:	380d883a 	mov	r6,r7
 20041dc:	180f883a 	mov	r7,r3
 20041e0:	2004f5c0 	call	2004f5c <__adddf3>
 20041e4:	d9000117 	ldw	r4,4(sp)
 20041e8:	d9400217 	ldw	r5,8(sp)
 20041ec:	180f883a 	mov	r7,r3
 20041f0:	100d883a 	mov	r6,r2
 20041f4:	2004fd00 	call	2004fd0 <__muldf3>
 20041f8:	d9400217 	ldw	r5,8(sp)
 20041fc:	d9000117 	ldw	r4,4(sp)
 2004200:	180f883a 	mov	r7,r3
 2004204:	100d883a 	mov	r6,r2
 2004208:	2004edc0 	call	2004edc <__subdf3>
 200420c:	003ec806 	br	2003d30 <atan+0x6c>
 2004210:	009000f4 	movhi	r2,16387
 2004214:	109fffc4 	addi	r2,r2,32767
 2004218:	1400310e 	bge	r2,r16,20042e0 <atan+0x61c>
 200421c:	0005883a 	mov	r2,zero
 2004220:	00effc34 	movhi	r3,49136
 2004224:	1009883a 	mov	r4,r2
 2004228:	180b883a 	mov	r5,r3
 200422c:	b80f883a 	mov	r7,r23
 2004230:	b00d883a 	mov	r6,r22
 2004234:	20053940 	call	2005394 <__divdf3>
 2004238:	010000c4 	movi	r4,3
 200423c:	d8800115 	stw	r2,4(sp)
 2004240:	d8c00215 	stw	r3,8(sp)
 2004244:	d9000015 	stw	r4,0(sp)
 2004248:	003ed306 	br	2003d98 <atan+0xd4>
 200424c:	01151134 	movhi	r4,21572
 2004250:	210b4604 	addi	r4,r4,11544
 2004254:	00affe74 	movhi	r2,49145
 2004258:	10887ec4 	addi	r2,r2,8699
 200425c:	d9000115 	stw	r4,4(sp)
 2004260:	d8800215 	stw	r2,8(sp)
 2004264:	003eb406 	br	2003d38 <atan+0x74>
 2004268:	b009883a 	mov	r4,r22
 200426c:	180b883a 	mov	r5,r3
 2004270:	b00d883a 	mov	r6,r22
 2004274:	180f883a 	mov	r7,r3
 2004278:	2004f5c0 	call	2004f5c <__adddf3>
 200427c:	0011883a 	mov	r8,zero
 2004280:	024ffc34 	movhi	r9,16368
 2004284:	480f883a 	mov	r7,r9
 2004288:	400d883a 	mov	r6,r8
 200428c:	180b883a 	mov	r5,r3
 2004290:	1009883a 	mov	r4,r2
 2004294:	2004edc0 	call	2004edc <__subdf3>
 2004298:	0011883a 	mov	r8,zero
 200429c:	02500034 	movhi	r9,16384
 20042a0:	480f883a 	mov	r7,r9
 20042a4:	400d883a 	mov	r6,r8
 20042a8:	b80b883a 	mov	r5,r23
 20042ac:	b009883a 	mov	r4,r22
 20042b0:	1021883a 	mov	r16,r2
 20042b4:	1823883a 	mov	r17,r3
 20042b8:	2004f5c0 	call	2004f5c <__adddf3>
 20042bc:	180f883a 	mov	r7,r3
 20042c0:	880b883a 	mov	r5,r17
 20042c4:	8009883a 	mov	r4,r16
 20042c8:	100d883a 	mov	r6,r2
 20042cc:	20053940 	call	2005394 <__divdf3>
 20042d0:	d8800115 	stw	r2,4(sp)
 20042d4:	d8c00215 	stw	r3,8(sp)
 20042d8:	d8000015 	stw	zero,0(sp)
 20042dc:	003eae06 	br	2003d98 <atan+0xd4>
 20042e0:	044ffe34 	movhi	r17,16376
 20042e4:	0021883a 	mov	r16,zero
 20042e8:	800d883a 	mov	r6,r16
 20042ec:	880f883a 	mov	r7,r17
 20042f0:	b009883a 	mov	r4,r22
 20042f4:	180b883a 	mov	r5,r3
 20042f8:	2004edc0 	call	2004edc <__subdf3>
 20042fc:	880f883a 	mov	r7,r17
 2004300:	000d883a 	mov	r6,zero
 2004304:	b80b883a 	mov	r5,r23
 2004308:	b009883a 	mov	r4,r22
 200430c:	1021883a 	mov	r16,r2
 2004310:	1823883a 	mov	r17,r3
 2004314:	2004fd00 	call	2004fd0 <__muldf3>
 2004318:	0011883a 	mov	r8,zero
 200431c:	024ffc34 	movhi	r9,16368
 2004320:	480f883a 	mov	r7,r9
 2004324:	400d883a 	mov	r6,r8
 2004328:	180b883a 	mov	r5,r3
 200432c:	1009883a 	mov	r4,r2
 2004330:	2004f5c0 	call	2004f5c <__adddf3>
 2004334:	180f883a 	mov	r7,r3
 2004338:	8009883a 	mov	r4,r16
 200433c:	880b883a 	mov	r5,r17
 2004340:	100d883a 	mov	r6,r2
 2004344:	20053940 	call	2005394 <__divdf3>
 2004348:	01000084 	movi	r4,2
 200434c:	d8800115 	stw	r2,4(sp)
 2004350:	d8c00215 	stw	r3,8(sp)
 2004354:	d9000015 	stw	r4,0(sp)
 2004358:	003e8f06 	br	2003d98 <atan+0xd4>

0200435c <fabs>:
 200435c:	01e00034 	movhi	r7,32768
 2004360:	39ffffc4 	addi	r7,r7,-1
 2004364:	394e703a 	and	r7,r7,r5
 2004368:	2005883a 	mov	r2,r4
 200436c:	3807883a 	mov	r3,r7
 2004370:	f800283a 	ret

02004374 <__isnand>:
 2004374:	200d883a 	mov	r6,r4
 2004378:	0109c83a 	sub	r4,zero,r4
 200437c:	2188b03a 	or	r4,r4,r6
 2004380:	2008d7fa 	srli	r4,r4,31
 2004384:	00a00034 	movhi	r2,32768
 2004388:	10bfffc4 	addi	r2,r2,-1
 200438c:	1144703a 	and	r2,r2,r5
 2004390:	2088b03a 	or	r4,r4,r2
 2004394:	009ffc34 	movhi	r2,32752
 2004398:	1105c83a 	sub	r2,r2,r4
 200439c:	1004d7fa 	srli	r2,r2,31
 20043a0:	f800283a 	ret

020043a4 <matherr>:
 20043a4:	0005883a 	mov	r2,zero
 20043a8:	f800283a 	ret

020043ac <_fpadd_parts>:
 20043ac:	21c00017 	ldw	r7,0(r4)
 20043b0:	02000044 	movi	r8,1
 20043b4:	41c0332e 	bgeu	r8,r7,2004484 <_fpadd_parts+0xd8>
 20043b8:	28800017 	ldw	r2,0(r5)
 20043bc:	4080462e 	bgeu	r8,r2,20044d8 <_fpadd_parts+0x12c>
 20043c0:	00c00104 	movi	r3,4
 20043c4:	38c06b26 	beq	r7,r3,2004574 <_fpadd_parts+0x1c8>
 20043c8:	10c04326 	beq	r2,r3,20044d8 <_fpadd_parts+0x12c>
 20043cc:	00c00084 	movi	r3,2
 20043d0:	10c02e26 	beq	r2,r3,200448c <_fpadd_parts+0xe0>
 20043d4:	38c04026 	beq	r7,r3,20044d8 <_fpadd_parts+0x12c>
 20043d8:	22800217 	ldw	r10,8(r4)
 20043dc:	28c00217 	ldw	r3,8(r5)
 20043e0:	23000317 	ldw	r12,12(r4)
 20043e4:	2a400317 	ldw	r9,12(r5)
 20043e8:	50cfc83a 	sub	r7,r10,r3
 20043ec:	3817883a 	mov	r11,r7
 20043f0:	38004f16 	blt	r7,zero,2004530 <_fpadd_parts+0x184>
 20043f4:	008007c4 	movi	r2,31
 20043f8:	11c03316 	blt	r2,r7,20044c8 <_fpadd_parts+0x11c>
 20043fc:	02c0540e 	bge	zero,r11,2004550 <_fpadd_parts+0x1a4>
 2004400:	41c4983a 	sll	r2,r8,r7
 2004404:	49c6d83a 	srl	r3,r9,r7
 2004408:	10bfffc4 	addi	r2,r2,-1
 200440c:	4884703a 	and	r2,r9,r2
 2004410:	1004c03a 	cmpne	r2,r2,zero
 2004414:	1892b03a 	or	r9,r3,r2
 2004418:	20c00117 	ldw	r3,4(r4)
 200441c:	28800117 	ldw	r2,4(r5)
 2004420:	18803c26 	beq	r3,r2,2004514 <_fpadd_parts+0x168>
 2004424:	18002f26 	beq	r3,zero,20044e4 <_fpadd_parts+0x138>
 2004428:	4b05c83a 	sub	r2,r9,r12
 200442c:	10004216 	blt	r2,zero,2004538 <_fpadd_parts+0x18c>
 2004430:	32800215 	stw	r10,8(r6)
 2004434:	30800315 	stw	r2,12(r6)
 2004438:	30000115 	stw	zero,4(r6)
 200443c:	31000317 	ldw	r4,12(r6)
 2004440:	01d00034 	movhi	r7,16384
 2004444:	39ffff84 	addi	r7,r7,-2
 2004448:	20bfffc4 	addi	r2,r4,-1
 200444c:	2007883a 	mov	r3,r4
 2004450:	38800836 	bltu	r7,r2,2004474 <_fpadd_parts+0xc8>
 2004454:	31400217 	ldw	r5,8(r6)
 2004458:	18c9883a 	add	r4,r3,r3
 200445c:	20bfffc4 	addi	r2,r4,-1
 2004460:	297fffc4 	addi	r5,r5,-1
 2004464:	2007883a 	mov	r3,r4
 2004468:	38bffb2e 	bgeu	r7,r2,2004458 <_fpadd_parts+0xac>
 200446c:	31400215 	stw	r5,8(r6)
 2004470:	31000315 	stw	r4,12(r6)
 2004474:	008000c4 	movi	r2,3
 2004478:	30800015 	stw	r2,0(r6)
 200447c:	20001b16 	blt	r4,zero,20044ec <_fpadd_parts+0x140>
 2004480:	3009883a 	mov	r4,r6
 2004484:	2005883a 	mov	r2,r4
 2004488:	f800283a 	ret
 200448c:	38fffd1e 	bne	r7,r3,2004484 <_fpadd_parts+0xd8>
 2004490:	31c00015 	stw	r7,0(r6)
 2004494:	20800117 	ldw	r2,4(r4)
 2004498:	30800115 	stw	r2,4(r6)
 200449c:	20c00217 	ldw	r3,8(r4)
 20044a0:	30c00215 	stw	r3,8(r6)
 20044a4:	20800317 	ldw	r2,12(r4)
 20044a8:	30800315 	stw	r2,12(r6)
 20044ac:	20c00117 	ldw	r3,4(r4)
 20044b0:	28800117 	ldw	r2,4(r5)
 20044b4:	3009883a 	mov	r4,r6
 20044b8:	1886703a 	and	r3,r3,r2
 20044bc:	2005883a 	mov	r2,r4
 20044c0:	30c00115 	stw	r3,4(r6)
 20044c4:	f800283a 	ret
 20044c8:	1a801716 	blt	r3,r10,2004528 <_fpadd_parts+0x17c>
 20044cc:	1815883a 	mov	r10,r3
 20044d0:	0019883a 	mov	r12,zero
 20044d4:	003fd006 	br	2004418 <_fpadd_parts+0x6c>
 20044d8:	2809883a 	mov	r4,r5
 20044dc:	2005883a 	mov	r2,r4
 20044e0:	f800283a 	ret
 20044e4:	6245c83a 	sub	r2,r12,r9
 20044e8:	003fd006 	br	200442c <_fpadd_parts+0x80>
 20044ec:	30800217 	ldw	r2,8(r6)
 20044f0:	2006d07a 	srli	r3,r4,1
 20044f4:	2100004c 	andi	r4,r4,1
 20044f8:	10800044 	addi	r2,r2,1
 20044fc:	1906b03a 	or	r3,r3,r4
 2004500:	3009883a 	mov	r4,r6
 2004504:	30800215 	stw	r2,8(r6)
 2004508:	2005883a 	mov	r2,r4
 200450c:	30c00315 	stw	r3,12(r6)
 2004510:	f800283a 	ret
 2004514:	4b09883a 	add	r4,r9,r12
 2004518:	30c00115 	stw	r3,4(r6)
 200451c:	32800215 	stw	r10,8(r6)
 2004520:	31000315 	stw	r4,12(r6)
 2004524:	003fd306 	br	2004474 <_fpadd_parts+0xc8>
 2004528:	0013883a 	mov	r9,zero
 200452c:	003fba06 	br	2004418 <_fpadd_parts+0x6c>
 2004530:	01cfc83a 	sub	r7,zero,r7
 2004534:	003faf06 	br	20043f4 <_fpadd_parts+0x48>
 2004538:	0089c83a 	sub	r4,zero,r2
 200453c:	00800044 	movi	r2,1
 2004540:	30800115 	stw	r2,4(r6)
 2004544:	32800215 	stw	r10,8(r6)
 2004548:	31000315 	stw	r4,12(r6)
 200454c:	003fbb06 	br	200443c <_fpadd_parts+0x90>
 2004550:	583fb126 	beq	r11,zero,2004418 <_fpadd_parts+0x6c>
 2004554:	41c4983a 	sll	r2,r8,r7
 2004558:	61c6d83a 	srl	r3,r12,r7
 200455c:	51d5883a 	add	r10,r10,r7
 2004560:	10bfffc4 	addi	r2,r2,-1
 2004564:	6084703a 	and	r2,r12,r2
 2004568:	1004c03a 	cmpne	r2,r2,zero
 200456c:	1898b03a 	or	r12,r3,r2
 2004570:	003fa906 	br	2004418 <_fpadd_parts+0x6c>
 2004574:	11ffc31e 	bne	r2,r7,2004484 <_fpadd_parts+0xd8>
 2004578:	28c00117 	ldw	r3,4(r5)
 200457c:	20800117 	ldw	r2,4(r4)
 2004580:	10ffc026 	beq	r2,r3,2004484 <_fpadd_parts+0xd8>
 2004584:	010080b4 	movhi	r4,514
 2004588:	2102f304 	addi	r4,r4,3020
 200458c:	003fbd06 	br	2004484 <_fpadd_parts+0xd8>

02004590 <__subsf3>:
 2004590:	deffef04 	addi	sp,sp,-68
 2004594:	dcc00f15 	stw	r19,60(sp)
 2004598:	dcc00204 	addi	r19,sp,8
 200459c:	dc400e15 	stw	r17,56(sp)
 20045a0:	d9000015 	stw	r4,0(sp)
 20045a4:	d9400115 	stw	r5,4(sp)
 20045a8:	d809883a 	mov	r4,sp
 20045ac:	980b883a 	mov	r5,r19
 20045b0:	dc400604 	addi	r17,sp,24
 20045b4:	dfc01015 	stw	ra,64(sp)
 20045b8:	2005d3c0 	call	2005d3c <__unpack_f>
 20045bc:	d9000104 	addi	r4,sp,4
 20045c0:	880b883a 	mov	r5,r17
 20045c4:	2005d3c0 	call	2005d3c <__unpack_f>
 20045c8:	d8800717 	ldw	r2,28(sp)
 20045cc:	9809883a 	mov	r4,r19
 20045d0:	880b883a 	mov	r5,r17
 20045d4:	d9800a04 	addi	r6,sp,40
 20045d8:	1080005c 	xori	r2,r2,1
 20045dc:	d8800715 	stw	r2,28(sp)
 20045e0:	20043ac0 	call	20043ac <_fpadd_parts>
 20045e4:	1009883a 	mov	r4,r2
 20045e8:	2005bdc0 	call	2005bdc <__pack_f>
 20045ec:	dfc01017 	ldw	ra,64(sp)
 20045f0:	dcc00f17 	ldw	r19,60(sp)
 20045f4:	dc400e17 	ldw	r17,56(sp)
 20045f8:	dec01104 	addi	sp,sp,68
 20045fc:	f800283a 	ret

02004600 <__addsf3>:
 2004600:	deffef04 	addi	sp,sp,-68
 2004604:	dcc00f15 	stw	r19,60(sp)
 2004608:	dcc00204 	addi	r19,sp,8
 200460c:	dc400e15 	stw	r17,56(sp)
 2004610:	d9000015 	stw	r4,0(sp)
 2004614:	d9400115 	stw	r5,4(sp)
 2004618:	d809883a 	mov	r4,sp
 200461c:	980b883a 	mov	r5,r19
 2004620:	dc400604 	addi	r17,sp,24
 2004624:	dfc01015 	stw	ra,64(sp)
 2004628:	2005d3c0 	call	2005d3c <__unpack_f>
 200462c:	d9000104 	addi	r4,sp,4
 2004630:	880b883a 	mov	r5,r17
 2004634:	2005d3c0 	call	2005d3c <__unpack_f>
 2004638:	d9800a04 	addi	r6,sp,40
 200463c:	9809883a 	mov	r4,r19
 2004640:	880b883a 	mov	r5,r17
 2004644:	20043ac0 	call	20043ac <_fpadd_parts>
 2004648:	1009883a 	mov	r4,r2
 200464c:	2005bdc0 	call	2005bdc <__pack_f>
 2004650:	dfc01017 	ldw	ra,64(sp)
 2004654:	dcc00f17 	ldw	r19,60(sp)
 2004658:	dc400e17 	ldw	r17,56(sp)
 200465c:	dec01104 	addi	sp,sp,68
 2004660:	f800283a 	ret

02004664 <__mulsf3>:
 2004664:	deffef04 	addi	sp,sp,-68
 2004668:	dc400f15 	stw	r17,60(sp)
 200466c:	dc400204 	addi	r17,sp,8
 2004670:	dc000e15 	stw	r16,56(sp)
 2004674:	d9000015 	stw	r4,0(sp)
 2004678:	d9400115 	stw	r5,4(sp)
 200467c:	d809883a 	mov	r4,sp
 2004680:	880b883a 	mov	r5,r17
 2004684:	dc000604 	addi	r16,sp,24
 2004688:	dfc01015 	stw	ra,64(sp)
 200468c:	2005d3c0 	call	2005d3c <__unpack_f>
 2004690:	d9000104 	addi	r4,sp,4
 2004694:	800b883a 	mov	r5,r16
 2004698:	2005d3c0 	call	2005d3c <__unpack_f>
 200469c:	d9000217 	ldw	r4,8(sp)
 20046a0:	00800044 	movi	r2,1
 20046a4:	01400104 	movi	r5,4
 20046a8:	1100142e 	bgeu	r2,r4,20046fc <__mulsf3+0x98>
 20046ac:	d8c00617 	ldw	r3,24(sp)
 20046b0:	10c0052e 	bgeu	r2,r3,20046c8 <__mulsf3+0x64>
 20046b4:	21400f26 	beq	r4,r5,20046f4 <__mulsf3+0x90>
 20046b8:	19405d26 	beq	r3,r5,2004830 <__mulsf3+0x1cc>
 20046bc:	00800084 	movi	r2,2
 20046c0:	20800e26 	beq	r4,r2,20046fc <__mulsf3+0x98>
 20046c4:	1880181e 	bne	r3,r2,2004728 <__mulsf3+0xc4>
 20046c8:	d8c00717 	ldw	r3,28(sp)
 20046cc:	d8800317 	ldw	r2,12(sp)
 20046d0:	8009883a 	mov	r4,r16
 20046d4:	10c4c03a 	cmpne	r2,r2,r3
 20046d8:	d8800715 	stw	r2,28(sp)
 20046dc:	2005bdc0 	call	2005bdc <__pack_f>
 20046e0:	dfc01017 	ldw	ra,64(sp)
 20046e4:	dc400f17 	ldw	r17,60(sp)
 20046e8:	dc000e17 	ldw	r16,56(sp)
 20046ec:	dec01104 	addi	sp,sp,68
 20046f0:	f800283a 	ret
 20046f4:	00800084 	movi	r2,2
 20046f8:	18804f26 	beq	r3,r2,2004838 <__mulsf3+0x1d4>
 20046fc:	d8800317 	ldw	r2,12(sp)
 2004700:	d8c00717 	ldw	r3,28(sp)
 2004704:	8809883a 	mov	r4,r17
 2004708:	10c4c03a 	cmpne	r2,r2,r3
 200470c:	d8800315 	stw	r2,12(sp)
 2004710:	2005bdc0 	call	2005bdc <__pack_f>
 2004714:	dfc01017 	ldw	ra,64(sp)
 2004718:	dc400f17 	ldw	r17,60(sp)
 200471c:	dc000e17 	ldw	r16,56(sp)
 2004720:	dec01104 	addi	sp,sp,68
 2004724:	f800283a 	ret
 2004728:	d8800517 	ldw	r2,20(sp)
 200472c:	da000917 	ldw	r8,36(sp)
 2004730:	0013883a 	mov	r9,zero
 2004734:	0007883a 	mov	r3,zero
 2004738:	480f883a 	mov	r7,r9
 200473c:	180b883a 	mov	r5,r3
 2004740:	400d883a 	mov	r6,r8
 2004744:	1009883a 	mov	r4,r2
 2004748:	2005ac40 	call	2005ac4 <__muldi3>
 200474c:	da800417 	ldw	r10,16(sp)
 2004750:	d9800817 	ldw	r6,32(sp)
 2004754:	da400317 	ldw	r9,12(sp)
 2004758:	52800084 	addi	r10,r10,2
 200475c:	3295883a 	add	r10,r6,r10
 2004760:	d9800717 	ldw	r6,28(sp)
 2004764:	180b883a 	mov	r5,r3
 2004768:	180f883a 	mov	r7,r3
 200476c:	4992c03a 	cmpne	r9,r9,r6
 2004770:	da400b15 	stw	r9,44(sp)
 2004774:	1007883a 	mov	r3,r2
 2004778:	da800c15 	stw	r10,48(sp)
 200477c:	2800070e 	bge	r5,zero,200479c <__mulsf3+0x138>
 2004780:	2880004c 	andi	r2,r5,1
 2004784:	1005003a 	cmpeq	r2,r2,zero
 2004788:	500d883a 	mov	r6,r10
 200478c:	10001e26 	beq	r2,zero,2004808 <__mulsf3+0x1a4>
 2004790:	380ed07a 	srli	r7,r7,1
 2004794:	31800044 	addi	r6,r6,1
 2004798:	d9800c15 	stw	r6,48(sp)
 200479c:	01100034 	movhi	r4,16384
 20047a0:	213fffc4 	addi	r4,r4,-1
 20047a4:	21c00b36 	bltu	r4,r7,20047d4 <__mulsf3+0x170>
 20047a8:	d8800c17 	ldw	r2,48(sp)
 20047ac:	00000206 	br	20047b8 <__mulsf3+0x154>
 20047b0:	18c7883a 	add	r3,r3,r3
 20047b4:	21c00636 	bltu	r4,r7,20047d0 <__mulsf3+0x16c>
 20047b8:	10bfffc4 	addi	r2,r2,-1
 20047bc:	39cf883a 	add	r7,r7,r7
 20047c0:	183ffb0e 	bge	r3,zero,20047b0 <__mulsf3+0x14c>
 20047c4:	39c00054 	ori	r7,r7,1
 20047c8:	18c7883a 	add	r3,r3,r3
 20047cc:	21fffa2e 	bgeu	r4,r7,20047b8 <__mulsf3+0x154>
 20047d0:	d8800c15 	stw	r2,48(sp)
 20047d4:	39001fcc 	andi	r4,r7,127
 20047d8:	00801004 	movi	r2,64
 20047dc:	20800d26 	beq	r4,r2,2004814 <__mulsf3+0x1b0>
 20047e0:	008000c4 	movi	r2,3
 20047e4:	d9000a04 	addi	r4,sp,40
 20047e8:	d9c00d15 	stw	r7,52(sp)
 20047ec:	d8800a15 	stw	r2,40(sp)
 20047f0:	2005bdc0 	call	2005bdc <__pack_f>
 20047f4:	dfc01017 	ldw	ra,64(sp)
 20047f8:	dc400f17 	ldw	r17,60(sp)
 20047fc:	dc000e17 	ldw	r16,56(sp)
 2004800:	dec01104 	addi	sp,sp,68
 2004804:	f800283a 	ret
 2004808:	1804d07a 	srli	r2,r3,1
 200480c:	10e00034 	orhi	r3,r2,32768
 2004810:	003fdf06 	br	2004790 <__mulsf3+0x12c>
 2004814:	3880200c 	andi	r2,r7,128
 2004818:	103ff11e 	bne	r2,zero,20047e0 <__mulsf3+0x17c>
 200481c:	183ff026 	beq	r3,zero,20047e0 <__mulsf3+0x17c>
 2004820:	3907883a 	add	r3,r7,r4
 2004824:	00bfe004 	movi	r2,-128
 2004828:	188e703a 	and	r7,r3,r2
 200482c:	003fec06 	br	20047e0 <__mulsf3+0x17c>
 2004830:	00800084 	movi	r2,2
 2004834:	20bfa41e 	bne	r4,r2,20046c8 <__mulsf3+0x64>
 2004838:	010080b4 	movhi	r4,514
 200483c:	2102f304 	addi	r4,r4,3020
 2004840:	003fb306 	br	2004710 <__mulsf3+0xac>

02004844 <__divsf3>:
 2004844:	defff304 	addi	sp,sp,-52
 2004848:	dc400b15 	stw	r17,44(sp)
 200484c:	dc400204 	addi	r17,sp,8
 2004850:	dc000a15 	stw	r16,40(sp)
 2004854:	d9000015 	stw	r4,0(sp)
 2004858:	d9400115 	stw	r5,4(sp)
 200485c:	d809883a 	mov	r4,sp
 2004860:	880b883a 	mov	r5,r17
 2004864:	dc000604 	addi	r16,sp,24
 2004868:	dfc00c15 	stw	ra,48(sp)
 200486c:	2005d3c0 	call	2005d3c <__unpack_f>
 2004870:	d9000104 	addi	r4,sp,4
 2004874:	800b883a 	mov	r5,r16
 2004878:	2005d3c0 	call	2005d3c <__unpack_f>
 200487c:	d9000217 	ldw	r4,8(sp)
 2004880:	00800044 	movi	r2,1
 2004884:	01800104 	movi	r6,4
 2004888:	11000a2e 	bgeu	r2,r4,20048b4 <__divsf3+0x70>
 200488c:	d9400617 	ldw	r5,24(sp)
 2004890:	1140432e 	bgeu	r2,r5,20049a0 <__divsf3+0x15c>
 2004894:	d8800317 	ldw	r2,12(sp)
 2004898:	d8c00717 	ldw	r3,28(sp)
 200489c:	10c4f03a 	xor	r2,r2,r3
 20048a0:	d8800315 	stw	r2,12(sp)
 20048a4:	21800226 	beq	r4,r6,20048b0 <__divsf3+0x6c>
 20048a8:	00800084 	movi	r2,2
 20048ac:	2080101e 	bne	r4,r2,20048f0 <__divsf3+0xac>
 20048b0:	29000726 	beq	r5,r4,20048d0 <__divsf3+0x8c>
 20048b4:	8809883a 	mov	r4,r17
 20048b8:	2005bdc0 	call	2005bdc <__pack_f>
 20048bc:	dfc00c17 	ldw	ra,48(sp)
 20048c0:	dc400b17 	ldw	r17,44(sp)
 20048c4:	dc000a17 	ldw	r16,40(sp)
 20048c8:	dec00d04 	addi	sp,sp,52
 20048cc:	f800283a 	ret
 20048d0:	010080b4 	movhi	r4,514
 20048d4:	2102f304 	addi	r4,r4,3020
 20048d8:	2005bdc0 	call	2005bdc <__pack_f>
 20048dc:	dfc00c17 	ldw	ra,48(sp)
 20048e0:	dc400b17 	ldw	r17,44(sp)
 20048e4:	dc000a17 	ldw	r16,40(sp)
 20048e8:	dec00d04 	addi	sp,sp,52
 20048ec:	f800283a 	ret
 20048f0:	29802d26 	beq	r5,r6,20049a8 <__divsf3+0x164>
 20048f4:	28801a26 	beq	r5,r2,2004960 <__divsf3+0x11c>
 20048f8:	d8c00417 	ldw	r3,16(sp)
 20048fc:	d8800817 	ldw	r2,32(sp)
 2004900:	d9000517 	ldw	r4,20(sp)
 2004904:	d9800917 	ldw	r6,36(sp)
 2004908:	1885c83a 	sub	r2,r3,r2
 200490c:	d8800415 	stw	r2,16(sp)
 2004910:	2180032e 	bgeu	r4,r6,2004920 <__divsf3+0xdc>
 2004914:	10bfffc4 	addi	r2,r2,-1
 2004918:	d8800415 	stw	r2,16(sp)
 200491c:	2109883a 	add	r4,r4,r4
 2004920:	01500034 	movhi	r5,16384
 2004924:	0007883a 	mov	r3,zero
 2004928:	0005883a 	mov	r2,zero
 200492c:	01c007c4 	movi	r7,31
 2004930:	10800044 	addi	r2,r2,1
 2004934:	21800236 	bltu	r4,r6,2004940 <__divsf3+0xfc>
 2004938:	1946b03a 	or	r3,r3,r5
 200493c:	2189c83a 	sub	r4,r4,r6
 2004940:	280ad07a 	srli	r5,r5,1
 2004944:	2109883a 	add	r4,r4,r4
 2004948:	11fff91e 	bne	r2,r7,2004930 <__divsf3+0xec>
 200494c:	19401fcc 	andi	r5,r3,127
 2004950:	00801004 	movi	r2,64
 2004954:	28800a26 	beq	r5,r2,2004980 <__divsf3+0x13c>
 2004958:	d8c00515 	stw	r3,20(sp)
 200495c:	003fd506 	br	20048b4 <__divsf3+0x70>
 2004960:	8809883a 	mov	r4,r17
 2004964:	d9800215 	stw	r6,8(sp)
 2004968:	2005bdc0 	call	2005bdc <__pack_f>
 200496c:	dfc00c17 	ldw	ra,48(sp)
 2004970:	dc400b17 	ldw	r17,44(sp)
 2004974:	dc000a17 	ldw	r16,40(sp)
 2004978:	dec00d04 	addi	sp,sp,52
 200497c:	f800283a 	ret
 2004980:	1880200c 	andi	r2,r3,128
 2004984:	103ff41e 	bne	r2,zero,2004958 <__divsf3+0x114>
 2004988:	203ff326 	beq	r4,zero,2004958 <__divsf3+0x114>
 200498c:	1947883a 	add	r3,r3,r5
 2004990:	00bfe004 	movi	r2,-128
 2004994:	1886703a 	and	r3,r3,r2
 2004998:	d8c00515 	stw	r3,20(sp)
 200499c:	003fc506 	br	20048b4 <__divsf3+0x70>
 20049a0:	8009883a 	mov	r4,r16
 20049a4:	003fc406 	br	20048b8 <__divsf3+0x74>
 20049a8:	8809883a 	mov	r4,r17
 20049ac:	d8000515 	stw	zero,20(sp)
 20049b0:	d8000415 	stw	zero,16(sp)
 20049b4:	003fc006 	br	20048b8 <__divsf3+0x74>

020049b8 <__extendsfdf2>:
 20049b8:	defff904 	addi	sp,sp,-28
 20049bc:	d9000115 	stw	r4,4(sp)
 20049c0:	d9400204 	addi	r5,sp,8
 20049c4:	d9000104 	addi	r4,sp,4
 20049c8:	dfc00615 	stw	ra,24(sp)
 20049cc:	2005d3c0 	call	2005d3c <__unpack_f>
 20049d0:	d9c00517 	ldw	r7,20(sp)
 20049d4:	0011883a 	mov	r8,zero
 20049d8:	400697ba 	slli	r3,r8,30
 20049dc:	3812d0ba 	srli	r9,r7,2
 20049e0:	380497ba 	slli	r2,r7,30
 20049e4:	d9000217 	ldw	r4,8(sp)
 20049e8:	d9400317 	ldw	r5,12(sp)
 20049ec:	d9800417 	ldw	r6,16(sp)
 20049f0:	48c6b03a 	or	r3,r9,r3
 20049f4:	100f883a 	mov	r7,r2
 20049f8:	d8c00015 	stw	r3,0(sp)
 20049fc:	20058cc0 	call	20058cc <__make_dp>
 2004a00:	dfc00617 	ldw	ra,24(sp)
 2004a04:	dec00704 	addi	sp,sp,28
 2004a08:	f800283a 	ret

02004a0c <__floatunsisf>:
 2004a0c:	defff904 	addi	sp,sp,-28
 2004a10:	dc400515 	stw	r17,20(sp)
 2004a14:	dc000415 	stw	r16,16(sp)
 2004a18:	dfc00615 	stw	ra,24(sp)
 2004a1c:	04400784 	movi	r17,30
 2004a20:	2021883a 	mov	r16,r4
 2004a24:	d8000115 	stw	zero,4(sp)
 2004a28:	2000091e 	bne	r4,zero,2004a50 <__floatunsisf+0x44>
 2004a2c:	00800084 	movi	r2,2
 2004a30:	d8800015 	stw	r2,0(sp)
 2004a34:	d809883a 	mov	r4,sp
 2004a38:	2005bdc0 	call	2005bdc <__pack_f>
 2004a3c:	dfc00617 	ldw	ra,24(sp)
 2004a40:	dc400517 	ldw	r17,20(sp)
 2004a44:	dc000417 	ldw	r16,16(sp)
 2004a48:	dec00704 	addi	sp,sp,28
 2004a4c:	f800283a 	ret
 2004a50:	008000c4 	movi	r2,3
 2004a54:	d9000315 	stw	r4,12(sp)
 2004a58:	d8800015 	stw	r2,0(sp)
 2004a5c:	dc400215 	stw	r17,8(sp)
 2004a60:	2005b5c0 	call	2005b5c <__clzsi2>
 2004a64:	117fffc4 	addi	r5,r2,-1
 2004a68:	0147c83a 	sub	r3,zero,r5
 2004a6c:	00800044 	movi	r2,1
 2004a70:	10c4983a 	sll	r2,r2,r3
 2004a74:	80c6d83a 	srl	r3,r16,r3
 2004a78:	8949c83a 	sub	r4,r17,r5
 2004a7c:	10bfffc4 	addi	r2,r2,-1
 2004a80:	8084703a 	and	r2,r16,r2
 2004a84:	1004c03a 	cmpne	r2,r2,zero
 2004a88:	1886b03a 	or	r3,r3,r2
 2004a8c:	28000c16 	blt	r5,zero,2004ac0 <__floatunsisf+0xb4>
 2004a90:	8144983a 	sll	r2,r16,r5
 2004a94:	8947c83a 	sub	r3,r17,r5
 2004a98:	283fe626 	beq	r5,zero,2004a34 <__floatunsisf+0x28>
 2004a9c:	d809883a 	mov	r4,sp
 2004aa0:	d8800315 	stw	r2,12(sp)
 2004aa4:	d8c00215 	stw	r3,8(sp)
 2004aa8:	2005bdc0 	call	2005bdc <__pack_f>
 2004aac:	dfc00617 	ldw	ra,24(sp)
 2004ab0:	dc400517 	ldw	r17,20(sp)
 2004ab4:	dc000417 	ldw	r16,16(sp)
 2004ab8:	dec00704 	addi	sp,sp,28
 2004abc:	f800283a 	ret
 2004ac0:	d8c00315 	stw	r3,12(sp)
 2004ac4:	d9000215 	stw	r4,8(sp)
 2004ac8:	003fda06 	br	2004a34 <__floatunsisf+0x28>

02004acc <_fpadd_parts>:
 2004acc:	defff804 	addi	sp,sp,-32
 2004ad0:	dcc00315 	stw	r19,12(sp)
 2004ad4:	2027883a 	mov	r19,r4
 2004ad8:	21000017 	ldw	r4,0(r4)
 2004adc:	00c00044 	movi	r3,1
 2004ae0:	dd400515 	stw	r21,20(sp)
 2004ae4:	dd000415 	stw	r20,16(sp)
 2004ae8:	ddc00715 	stw	r23,28(sp)
 2004aec:	dd800615 	stw	r22,24(sp)
 2004af0:	dc800215 	stw	r18,8(sp)
 2004af4:	dc400115 	stw	r17,4(sp)
 2004af8:	dc000015 	stw	r16,0(sp)
 2004afc:	282b883a 	mov	r21,r5
 2004b00:	3029883a 	mov	r20,r6
 2004b04:	1900632e 	bgeu	r3,r4,2004c94 <_fpadd_parts+0x1c8>
 2004b08:	28800017 	ldw	r2,0(r5)
 2004b0c:	1880812e 	bgeu	r3,r2,2004d14 <_fpadd_parts+0x248>
 2004b10:	00c00104 	movi	r3,4
 2004b14:	20c0dc26 	beq	r4,r3,2004e88 <_fpadd_parts+0x3bc>
 2004b18:	10c07e26 	beq	r2,r3,2004d14 <_fpadd_parts+0x248>
 2004b1c:	00c00084 	movi	r3,2
 2004b20:	10c06726 	beq	r2,r3,2004cc0 <_fpadd_parts+0x1f4>
 2004b24:	20c07b26 	beq	r4,r3,2004d14 <_fpadd_parts+0x248>
 2004b28:	9dc00217 	ldw	r23,8(r19)
 2004b2c:	28c00217 	ldw	r3,8(r5)
 2004b30:	9c400317 	ldw	r17,12(r19)
 2004b34:	2bc00317 	ldw	r15,12(r5)
 2004b38:	b8cdc83a 	sub	r6,r23,r3
 2004b3c:	9c800417 	ldw	r18,16(r19)
 2004b40:	2c000417 	ldw	r16,16(r5)
 2004b44:	3009883a 	mov	r4,r6
 2004b48:	30009716 	blt	r6,zero,2004da8 <_fpadd_parts+0x2dc>
 2004b4c:	00800fc4 	movi	r2,63
 2004b50:	11806b16 	blt	r2,r6,2004d00 <_fpadd_parts+0x234>
 2004b54:	0100a40e 	bge	zero,r4,2004de8 <_fpadd_parts+0x31c>
 2004b58:	35bff804 	addi	r22,r6,-32
 2004b5c:	b000bc16 	blt	r22,zero,2004e50 <_fpadd_parts+0x384>
 2004b60:	8596d83a 	srl	r11,r16,r22
 2004b64:	0019883a 	mov	r12,zero
 2004b68:	0013883a 	mov	r9,zero
 2004b6c:	01000044 	movi	r4,1
 2004b70:	0015883a 	mov	r10,zero
 2004b74:	b000be16 	blt	r22,zero,2004e70 <_fpadd_parts+0x3a4>
 2004b78:	2590983a 	sll	r8,r4,r22
 2004b7c:	000f883a 	mov	r7,zero
 2004b80:	00bfffc4 	movi	r2,-1
 2004b84:	3889883a 	add	r4,r7,r2
 2004b88:	408b883a 	add	r5,r8,r2
 2004b8c:	21cd803a 	cmpltu	r6,r4,r7
 2004b90:	314b883a 	add	r5,r6,r5
 2004b94:	7904703a 	and	r2,r15,r4
 2004b98:	8146703a 	and	r3,r16,r5
 2004b9c:	10c4b03a 	or	r2,r2,r3
 2004ba0:	10000226 	beq	r2,zero,2004bac <_fpadd_parts+0xe0>
 2004ba4:	02400044 	movi	r9,1
 2004ba8:	0015883a 	mov	r10,zero
 2004bac:	5a5eb03a 	or	r15,r11,r9
 2004bb0:	62a0b03a 	or	r16,r12,r10
 2004bb4:	99400117 	ldw	r5,4(r19)
 2004bb8:	a8800117 	ldw	r2,4(r21)
 2004bbc:	28806e26 	beq	r5,r2,2004d78 <_fpadd_parts+0x2ac>
 2004bc0:	28006626 	beq	r5,zero,2004d5c <_fpadd_parts+0x290>
 2004bc4:	7c45c83a 	sub	r2,r15,r17
 2004bc8:	7889803a 	cmpltu	r4,r15,r2
 2004bcc:	8487c83a 	sub	r3,r16,r18
 2004bd0:	1909c83a 	sub	r4,r3,r4
 2004bd4:	100d883a 	mov	r6,r2
 2004bd8:	200f883a 	mov	r7,r4
 2004bdc:	38007716 	blt	r7,zero,2004dbc <_fpadd_parts+0x2f0>
 2004be0:	a5c00215 	stw	r23,8(r20)
 2004be4:	a1c00415 	stw	r7,16(r20)
 2004be8:	a0000115 	stw	zero,4(r20)
 2004bec:	a1800315 	stw	r6,12(r20)
 2004bf0:	a2000317 	ldw	r8,12(r20)
 2004bf4:	a2400417 	ldw	r9,16(r20)
 2004bf8:	00bfffc4 	movi	r2,-1
 2004bfc:	408b883a 	add	r5,r8,r2
 2004c00:	2a09803a 	cmpltu	r4,r5,r8
 2004c04:	488d883a 	add	r6,r9,r2
 2004c08:	01c40034 	movhi	r7,4096
 2004c0c:	39ffffc4 	addi	r7,r7,-1
 2004c10:	218d883a 	add	r6,r4,r6
 2004c14:	39801736 	bltu	r7,r6,2004c74 <_fpadd_parts+0x1a8>
 2004c18:	31c06526 	beq	r6,r7,2004db0 <_fpadd_parts+0x2e4>
 2004c1c:	a3000217 	ldw	r12,8(r20)
 2004c20:	4209883a 	add	r4,r8,r8
 2004c24:	00bfffc4 	movi	r2,-1
 2004c28:	220f803a 	cmpltu	r7,r4,r8
 2004c2c:	4a4b883a 	add	r5,r9,r9
 2004c30:	394f883a 	add	r7,r7,r5
 2004c34:	2095883a 	add	r10,r4,r2
 2004c38:	3897883a 	add	r11,r7,r2
 2004c3c:	510d803a 	cmpltu	r6,r10,r4
 2004c40:	6099883a 	add	r12,r12,r2
 2004c44:	32d7883a 	add	r11,r6,r11
 2004c48:	00840034 	movhi	r2,4096
 2004c4c:	10bfffc4 	addi	r2,r2,-1
 2004c50:	2011883a 	mov	r8,r4
 2004c54:	3813883a 	mov	r9,r7
 2004c58:	a1000315 	stw	r4,12(r20)
 2004c5c:	a1c00415 	stw	r7,16(r20)
 2004c60:	a3000215 	stw	r12,8(r20)
 2004c64:	12c00336 	bltu	r2,r11,2004c74 <_fpadd_parts+0x1a8>
 2004c68:	58bfed1e 	bne	r11,r2,2004c20 <_fpadd_parts+0x154>
 2004c6c:	00bfff84 	movi	r2,-2
 2004c70:	12bfeb2e 	bgeu	r2,r10,2004c20 <_fpadd_parts+0x154>
 2004c74:	a2800417 	ldw	r10,16(r20)
 2004c78:	008000c4 	movi	r2,3
 2004c7c:	00c80034 	movhi	r3,8192
 2004c80:	18ffffc4 	addi	r3,r3,-1
 2004c84:	a2400317 	ldw	r9,12(r20)
 2004c88:	a0800015 	stw	r2,0(r20)
 2004c8c:	1a802336 	bltu	r3,r10,2004d1c <_fpadd_parts+0x250>
 2004c90:	a027883a 	mov	r19,r20
 2004c94:	9805883a 	mov	r2,r19
 2004c98:	ddc00717 	ldw	r23,28(sp)
 2004c9c:	dd800617 	ldw	r22,24(sp)
 2004ca0:	dd400517 	ldw	r21,20(sp)
 2004ca4:	dd000417 	ldw	r20,16(sp)
 2004ca8:	dcc00317 	ldw	r19,12(sp)
 2004cac:	dc800217 	ldw	r18,8(sp)
 2004cb0:	dc400117 	ldw	r17,4(sp)
 2004cb4:	dc000017 	ldw	r16,0(sp)
 2004cb8:	dec00804 	addi	sp,sp,32
 2004cbc:	f800283a 	ret
 2004cc0:	20fff41e 	bne	r4,r3,2004c94 <_fpadd_parts+0x1c8>
 2004cc4:	31000015 	stw	r4,0(r6)
 2004cc8:	98800117 	ldw	r2,4(r19)
 2004ccc:	30800115 	stw	r2,4(r6)
 2004cd0:	98c00217 	ldw	r3,8(r19)
 2004cd4:	30c00215 	stw	r3,8(r6)
 2004cd8:	98800317 	ldw	r2,12(r19)
 2004cdc:	30800315 	stw	r2,12(r6)
 2004ce0:	98c00417 	ldw	r3,16(r19)
 2004ce4:	30c00415 	stw	r3,16(r6)
 2004ce8:	98800117 	ldw	r2,4(r19)
 2004cec:	28c00117 	ldw	r3,4(r5)
 2004cf0:	3027883a 	mov	r19,r6
 2004cf4:	10c4703a 	and	r2,r2,r3
 2004cf8:	30800115 	stw	r2,4(r6)
 2004cfc:	003fe506 	br	2004c94 <_fpadd_parts+0x1c8>
 2004d00:	1dc02616 	blt	r3,r23,2004d9c <_fpadd_parts+0x2d0>
 2004d04:	0023883a 	mov	r17,zero
 2004d08:	182f883a 	mov	r23,r3
 2004d0c:	0025883a 	mov	r18,zero
 2004d10:	003fa806 	br	2004bb4 <_fpadd_parts+0xe8>
 2004d14:	a827883a 	mov	r19,r21
 2004d18:	003fde06 	br	2004c94 <_fpadd_parts+0x1c8>
 2004d1c:	01800044 	movi	r6,1
 2004d20:	500497fa 	slli	r2,r10,31
 2004d24:	4808d07a 	srli	r4,r9,1
 2004d28:	518ad83a 	srl	r5,r10,r6
 2004d2c:	a2000217 	ldw	r8,8(r20)
 2004d30:	1108b03a 	or	r4,r2,r4
 2004d34:	0007883a 	mov	r3,zero
 2004d38:	4984703a 	and	r2,r9,r6
 2004d3c:	208cb03a 	or	r6,r4,r2
 2004d40:	28ceb03a 	or	r7,r5,r3
 2004d44:	42000044 	addi	r8,r8,1
 2004d48:	a027883a 	mov	r19,r20
 2004d4c:	a1c00415 	stw	r7,16(r20)
 2004d50:	a2000215 	stw	r8,8(r20)
 2004d54:	a1800315 	stw	r6,12(r20)
 2004d58:	003fce06 	br	2004c94 <_fpadd_parts+0x1c8>
 2004d5c:	8bc5c83a 	sub	r2,r17,r15
 2004d60:	8889803a 	cmpltu	r4,r17,r2
 2004d64:	9407c83a 	sub	r3,r18,r16
 2004d68:	1909c83a 	sub	r4,r3,r4
 2004d6c:	100d883a 	mov	r6,r2
 2004d70:	200f883a 	mov	r7,r4
 2004d74:	003f9906 	br	2004bdc <_fpadd_parts+0x110>
 2004d78:	7c45883a 	add	r2,r15,r17
 2004d7c:	13c9803a 	cmpltu	r4,r2,r15
 2004d80:	8487883a 	add	r3,r16,r18
 2004d84:	20c9883a 	add	r4,r4,r3
 2004d88:	a1400115 	stw	r5,4(r20)
 2004d8c:	a5c00215 	stw	r23,8(r20)
 2004d90:	a0800315 	stw	r2,12(r20)
 2004d94:	a1000415 	stw	r4,16(r20)
 2004d98:	003fb606 	br	2004c74 <_fpadd_parts+0x1a8>
 2004d9c:	001f883a 	mov	r15,zero
 2004da0:	0021883a 	mov	r16,zero
 2004da4:	003f8306 	br	2004bb4 <_fpadd_parts+0xe8>
 2004da8:	018dc83a 	sub	r6,zero,r6
 2004dac:	003f6706 	br	2004b4c <_fpadd_parts+0x80>
 2004db0:	00bfff84 	movi	r2,-2
 2004db4:	117faf36 	bltu	r2,r5,2004c74 <_fpadd_parts+0x1a8>
 2004db8:	003f9806 	br	2004c1c <_fpadd_parts+0x150>
 2004dbc:	0005883a 	mov	r2,zero
 2004dc0:	1189c83a 	sub	r4,r2,r6
 2004dc4:	1105803a 	cmpltu	r2,r2,r4
 2004dc8:	01cbc83a 	sub	r5,zero,r7
 2004dcc:	2885c83a 	sub	r2,r5,r2
 2004dd0:	01800044 	movi	r6,1
 2004dd4:	a1800115 	stw	r6,4(r20)
 2004dd8:	a5c00215 	stw	r23,8(r20)
 2004ddc:	a1000315 	stw	r4,12(r20)
 2004de0:	a0800415 	stw	r2,16(r20)
 2004de4:	003f8206 	br	2004bf0 <_fpadd_parts+0x124>
 2004de8:	203f7226 	beq	r4,zero,2004bb4 <_fpadd_parts+0xe8>
 2004dec:	35bff804 	addi	r22,r6,-32
 2004df0:	b9af883a 	add	r23,r23,r6
 2004df4:	b0003116 	blt	r22,zero,2004ebc <_fpadd_parts+0x3f0>
 2004df8:	959ad83a 	srl	r13,r18,r22
 2004dfc:	001d883a 	mov	r14,zero
 2004e00:	000f883a 	mov	r7,zero
 2004e04:	01000044 	movi	r4,1
 2004e08:	0011883a 	mov	r8,zero
 2004e0c:	b0002516 	blt	r22,zero,2004ea4 <_fpadd_parts+0x3d8>
 2004e10:	2594983a 	sll	r10,r4,r22
 2004e14:	0013883a 	mov	r9,zero
 2004e18:	00bfffc4 	movi	r2,-1
 2004e1c:	4889883a 	add	r4,r9,r2
 2004e20:	508b883a 	add	r5,r10,r2
 2004e24:	224d803a 	cmpltu	r6,r4,r9
 2004e28:	314b883a 	add	r5,r6,r5
 2004e2c:	8904703a 	and	r2,r17,r4
 2004e30:	9146703a 	and	r3,r18,r5
 2004e34:	10c4b03a 	or	r2,r2,r3
 2004e38:	10000226 	beq	r2,zero,2004e44 <_fpadd_parts+0x378>
 2004e3c:	01c00044 	movi	r7,1
 2004e40:	0011883a 	mov	r8,zero
 2004e44:	69e2b03a 	or	r17,r13,r7
 2004e48:	7224b03a 	or	r18,r14,r8
 2004e4c:	003f5906 	br	2004bb4 <_fpadd_parts+0xe8>
 2004e50:	8407883a 	add	r3,r16,r16
 2004e54:	008007c4 	movi	r2,31
 2004e58:	1185c83a 	sub	r2,r2,r6
 2004e5c:	1886983a 	sll	r3,r3,r2
 2004e60:	7996d83a 	srl	r11,r15,r6
 2004e64:	8198d83a 	srl	r12,r16,r6
 2004e68:	1ad6b03a 	or	r11,r3,r11
 2004e6c:	003f3e06 	br	2004b68 <_fpadd_parts+0x9c>
 2004e70:	2006d07a 	srli	r3,r4,1
 2004e74:	008007c4 	movi	r2,31
 2004e78:	1185c83a 	sub	r2,r2,r6
 2004e7c:	1890d83a 	srl	r8,r3,r2
 2004e80:	218e983a 	sll	r7,r4,r6
 2004e84:	003f3e06 	br	2004b80 <_fpadd_parts+0xb4>
 2004e88:	113f821e 	bne	r2,r4,2004c94 <_fpadd_parts+0x1c8>
 2004e8c:	28c00117 	ldw	r3,4(r5)
 2004e90:	98800117 	ldw	r2,4(r19)
 2004e94:	10ff7f26 	beq	r2,r3,2004c94 <_fpadd_parts+0x1c8>
 2004e98:	04c080b4 	movhi	r19,514
 2004e9c:	9cc2f704 	addi	r19,r19,3036
 2004ea0:	003f7c06 	br	2004c94 <_fpadd_parts+0x1c8>
 2004ea4:	2006d07a 	srli	r3,r4,1
 2004ea8:	008007c4 	movi	r2,31
 2004eac:	1185c83a 	sub	r2,r2,r6
 2004eb0:	1894d83a 	srl	r10,r3,r2
 2004eb4:	2192983a 	sll	r9,r4,r6
 2004eb8:	003fd706 	br	2004e18 <_fpadd_parts+0x34c>
 2004ebc:	9487883a 	add	r3,r18,r18
 2004ec0:	008007c4 	movi	r2,31
 2004ec4:	1185c83a 	sub	r2,r2,r6
 2004ec8:	1886983a 	sll	r3,r3,r2
 2004ecc:	899ad83a 	srl	r13,r17,r6
 2004ed0:	919cd83a 	srl	r14,r18,r6
 2004ed4:	1b5ab03a 	or	r13,r3,r13
 2004ed8:	003fc906 	br	2004e00 <_fpadd_parts+0x334>

02004edc <__subdf3>:
 2004edc:	deffea04 	addi	sp,sp,-88
 2004ee0:	dcc01415 	stw	r19,80(sp)
 2004ee4:	dcc00404 	addi	r19,sp,16
 2004ee8:	2011883a 	mov	r8,r4
 2004eec:	2813883a 	mov	r9,r5
 2004ef0:	dc401315 	stw	r17,76(sp)
 2004ef4:	d809883a 	mov	r4,sp
 2004ef8:	980b883a 	mov	r5,r19
 2004efc:	dc400904 	addi	r17,sp,36
 2004f00:	dfc01515 	stw	ra,84(sp)
 2004f04:	da400115 	stw	r9,4(sp)
 2004f08:	d9c00315 	stw	r7,12(sp)
 2004f0c:	da000015 	stw	r8,0(sp)
 2004f10:	d9800215 	stw	r6,8(sp)
 2004f14:	20061440 	call	2006144 <__unpack_d>
 2004f18:	d9000204 	addi	r4,sp,8
 2004f1c:	880b883a 	mov	r5,r17
 2004f20:	20061440 	call	2006144 <__unpack_d>
 2004f24:	d8800a17 	ldw	r2,40(sp)
 2004f28:	880b883a 	mov	r5,r17
 2004f2c:	9809883a 	mov	r4,r19
 2004f30:	d9800e04 	addi	r6,sp,56
 2004f34:	1080005c 	xori	r2,r2,1
 2004f38:	d8800a15 	stw	r2,40(sp)
 2004f3c:	2004acc0 	call	2004acc <_fpadd_parts>
 2004f40:	1009883a 	mov	r4,r2
 2004f44:	2005e300 	call	2005e30 <__pack_d>
 2004f48:	dfc01517 	ldw	ra,84(sp)
 2004f4c:	dcc01417 	ldw	r19,80(sp)
 2004f50:	dc401317 	ldw	r17,76(sp)
 2004f54:	dec01604 	addi	sp,sp,88
 2004f58:	f800283a 	ret

02004f5c <__adddf3>:
 2004f5c:	deffea04 	addi	sp,sp,-88
 2004f60:	dcc01415 	stw	r19,80(sp)
 2004f64:	dcc00404 	addi	r19,sp,16
 2004f68:	2011883a 	mov	r8,r4
 2004f6c:	2813883a 	mov	r9,r5
 2004f70:	dc401315 	stw	r17,76(sp)
 2004f74:	d809883a 	mov	r4,sp
 2004f78:	980b883a 	mov	r5,r19
 2004f7c:	dc400904 	addi	r17,sp,36
 2004f80:	dfc01515 	stw	ra,84(sp)
 2004f84:	da400115 	stw	r9,4(sp)
 2004f88:	d9c00315 	stw	r7,12(sp)
 2004f8c:	da000015 	stw	r8,0(sp)
 2004f90:	d9800215 	stw	r6,8(sp)
 2004f94:	20061440 	call	2006144 <__unpack_d>
 2004f98:	d9000204 	addi	r4,sp,8
 2004f9c:	880b883a 	mov	r5,r17
 2004fa0:	20061440 	call	2006144 <__unpack_d>
 2004fa4:	d9800e04 	addi	r6,sp,56
 2004fa8:	9809883a 	mov	r4,r19
 2004fac:	880b883a 	mov	r5,r17
 2004fb0:	2004acc0 	call	2004acc <_fpadd_parts>
 2004fb4:	1009883a 	mov	r4,r2
 2004fb8:	2005e300 	call	2005e30 <__pack_d>
 2004fbc:	dfc01517 	ldw	ra,84(sp)
 2004fc0:	dcc01417 	ldw	r19,80(sp)
 2004fc4:	dc401317 	ldw	r17,76(sp)
 2004fc8:	dec01604 	addi	sp,sp,88
 2004fcc:	f800283a 	ret

02004fd0 <__muldf3>:
 2004fd0:	deffe004 	addi	sp,sp,-128
 2004fd4:	dc401815 	stw	r17,96(sp)
 2004fd8:	dc400404 	addi	r17,sp,16
 2004fdc:	2011883a 	mov	r8,r4
 2004fe0:	2813883a 	mov	r9,r5
 2004fe4:	dc001715 	stw	r16,92(sp)
 2004fe8:	d809883a 	mov	r4,sp
 2004fec:	880b883a 	mov	r5,r17
 2004ff0:	dc000904 	addi	r16,sp,36
 2004ff4:	dfc01f15 	stw	ra,124(sp)
 2004ff8:	da400115 	stw	r9,4(sp)
 2004ffc:	d9c00315 	stw	r7,12(sp)
 2005000:	da000015 	stw	r8,0(sp)
 2005004:	d9800215 	stw	r6,8(sp)
 2005008:	ddc01e15 	stw	r23,120(sp)
 200500c:	dd801d15 	stw	r22,116(sp)
 2005010:	dd401c15 	stw	r21,112(sp)
 2005014:	dd001b15 	stw	r20,108(sp)
 2005018:	dcc01a15 	stw	r19,104(sp)
 200501c:	dc801915 	stw	r18,100(sp)
 2005020:	20061440 	call	2006144 <__unpack_d>
 2005024:	d9000204 	addi	r4,sp,8
 2005028:	800b883a 	mov	r5,r16
 200502c:	20061440 	call	2006144 <__unpack_d>
 2005030:	d9000417 	ldw	r4,16(sp)
 2005034:	00800044 	movi	r2,1
 2005038:	1100102e 	bgeu	r2,r4,200507c <__muldf3+0xac>
 200503c:	d8c00917 	ldw	r3,36(sp)
 2005040:	10c0062e 	bgeu	r2,r3,200505c <__muldf3+0x8c>
 2005044:	00800104 	movi	r2,4
 2005048:	20800a26 	beq	r4,r2,2005074 <__muldf3+0xa4>
 200504c:	1880cc26 	beq	r3,r2,2005380 <__muldf3+0x3b0>
 2005050:	00800084 	movi	r2,2
 2005054:	20800926 	beq	r4,r2,200507c <__muldf3+0xac>
 2005058:	1880191e 	bne	r3,r2,20050c0 <__muldf3+0xf0>
 200505c:	d8c00a17 	ldw	r3,40(sp)
 2005060:	d8800517 	ldw	r2,20(sp)
 2005064:	8009883a 	mov	r4,r16
 2005068:	10c4c03a 	cmpne	r2,r2,r3
 200506c:	d8800a15 	stw	r2,40(sp)
 2005070:	00000706 	br	2005090 <__muldf3+0xc0>
 2005074:	00800084 	movi	r2,2
 2005078:	1880c326 	beq	r3,r2,2005388 <__muldf3+0x3b8>
 200507c:	d8800517 	ldw	r2,20(sp)
 2005080:	d8c00a17 	ldw	r3,40(sp)
 2005084:	8809883a 	mov	r4,r17
 2005088:	10c4c03a 	cmpne	r2,r2,r3
 200508c:	d8800515 	stw	r2,20(sp)
 2005090:	2005e300 	call	2005e30 <__pack_d>
 2005094:	dfc01f17 	ldw	ra,124(sp)
 2005098:	ddc01e17 	ldw	r23,120(sp)
 200509c:	dd801d17 	ldw	r22,116(sp)
 20050a0:	dd401c17 	ldw	r21,112(sp)
 20050a4:	dd001b17 	ldw	r20,108(sp)
 20050a8:	dcc01a17 	ldw	r19,104(sp)
 20050ac:	dc801917 	ldw	r18,100(sp)
 20050b0:	dc401817 	ldw	r17,96(sp)
 20050b4:	dc001717 	ldw	r16,92(sp)
 20050b8:	dec02004 	addi	sp,sp,128
 20050bc:	f800283a 	ret
 20050c0:	dd800717 	ldw	r22,28(sp)
 20050c4:	dc800c17 	ldw	r18,48(sp)
 20050c8:	002b883a 	mov	r21,zero
 20050cc:	0023883a 	mov	r17,zero
 20050d0:	a80b883a 	mov	r5,r21
 20050d4:	b00d883a 	mov	r6,r22
 20050d8:	880f883a 	mov	r7,r17
 20050dc:	ddc00817 	ldw	r23,32(sp)
 20050e0:	dcc00d17 	ldw	r19,52(sp)
 20050e4:	9009883a 	mov	r4,r18
 20050e8:	2005ac40 	call	2005ac4 <__muldi3>
 20050ec:	001b883a 	mov	r13,zero
 20050f0:	680f883a 	mov	r7,r13
 20050f4:	b009883a 	mov	r4,r22
 20050f8:	000b883a 	mov	r5,zero
 20050fc:	980d883a 	mov	r6,r19
 2005100:	b82d883a 	mov	r22,r23
 2005104:	002f883a 	mov	r23,zero
 2005108:	db401615 	stw	r13,88(sp)
 200510c:	d8801315 	stw	r2,76(sp)
 2005110:	d8c01415 	stw	r3,80(sp)
 2005114:	dcc01515 	stw	r19,84(sp)
 2005118:	2005ac40 	call	2005ac4 <__muldi3>
 200511c:	b00d883a 	mov	r6,r22
 2005120:	000b883a 	mov	r5,zero
 2005124:	9009883a 	mov	r4,r18
 2005128:	b80f883a 	mov	r7,r23
 200512c:	1021883a 	mov	r16,r2
 2005130:	1823883a 	mov	r17,r3
 2005134:	2005ac40 	call	2005ac4 <__muldi3>
 2005138:	8085883a 	add	r2,r16,r2
 200513c:	140d803a 	cmpltu	r6,r2,r16
 2005140:	88c7883a 	add	r3,r17,r3
 2005144:	30cd883a 	add	r6,r6,r3
 2005148:	1029883a 	mov	r20,r2
 200514c:	302b883a 	mov	r21,r6
 2005150:	da801317 	ldw	r10,76(sp)
 2005154:	dac01417 	ldw	r11,80(sp)
 2005158:	db001517 	ldw	r12,84(sp)
 200515c:	db401617 	ldw	r13,88(sp)
 2005160:	3440612e 	bgeu	r6,r17,20052e8 <__muldf3+0x318>
 2005164:	0009883a 	mov	r4,zero
 2005168:	5105883a 	add	r2,r10,r4
 200516c:	128d803a 	cmpltu	r6,r2,r10
 2005170:	5d07883a 	add	r3,r11,r20
 2005174:	30cd883a 	add	r6,r6,r3
 2005178:	0021883a 	mov	r16,zero
 200517c:	04400044 	movi	r17,1
 2005180:	1025883a 	mov	r18,r2
 2005184:	3027883a 	mov	r19,r6
 2005188:	32c06236 	bltu	r6,r11,2005314 <__muldf3+0x344>
 200518c:	59807a26 	beq	r11,r6,2005378 <__muldf3+0x3a8>
 2005190:	680b883a 	mov	r5,r13
 2005194:	b80f883a 	mov	r7,r23
 2005198:	6009883a 	mov	r4,r12
 200519c:	b00d883a 	mov	r6,r22
 20051a0:	2005ac40 	call	2005ac4 <__muldi3>
 20051a4:	1009883a 	mov	r4,r2
 20051a8:	000f883a 	mov	r7,zero
 20051ac:	1545883a 	add	r2,r2,r21
 20051b0:	1111803a 	cmpltu	r8,r2,r4
 20051b4:	19c7883a 	add	r3,r3,r7
 20051b8:	40c7883a 	add	r3,r8,r3
 20051bc:	88cb883a 	add	r5,r17,r3
 20051c0:	d8c00617 	ldw	r3,24(sp)
 20051c4:	8089883a 	add	r4,r16,r2
 20051c8:	d8800b17 	ldw	r2,44(sp)
 20051cc:	18c00104 	addi	r3,r3,4
 20051d0:	240d803a 	cmpltu	r6,r4,r16
 20051d4:	10c7883a 	add	r3,r2,r3
 20051d8:	2013883a 	mov	r9,r4
 20051dc:	d8800a17 	ldw	r2,40(sp)
 20051e0:	d9000517 	ldw	r4,20(sp)
 20051e4:	314d883a 	add	r6,r6,r5
 20051e8:	3015883a 	mov	r10,r6
 20051ec:	2088c03a 	cmpne	r4,r4,r2
 20051f0:	00880034 	movhi	r2,8192
 20051f4:	10bfffc4 	addi	r2,r2,-1
 20051f8:	d9000f15 	stw	r4,60(sp)
 20051fc:	d8c01015 	stw	r3,64(sp)
 2005200:	1180162e 	bgeu	r2,r6,200525c <__muldf3+0x28c>
 2005204:	1811883a 	mov	r8,r3
 2005208:	101f883a 	mov	r15,r2
 200520c:	980497fa 	slli	r2,r19,31
 2005210:	9016d07a 	srli	r11,r18,1
 2005214:	500697fa 	slli	r3,r10,31
 2005218:	480cd07a 	srli	r6,r9,1
 200521c:	500ed07a 	srli	r7,r10,1
 2005220:	12d6b03a 	or	r11,r2,r11
 2005224:	00800044 	movi	r2,1
 2005228:	198cb03a 	or	r6,r3,r6
 200522c:	4888703a 	and	r4,r9,r2
 2005230:	9818d07a 	srli	r12,r19,1
 2005234:	001b883a 	mov	r13,zero
 2005238:	03a00034 	movhi	r14,32768
 200523c:	3013883a 	mov	r9,r6
 2005240:	3815883a 	mov	r10,r7
 2005244:	4091883a 	add	r8,r8,r2
 2005248:	20000226 	beq	r4,zero,2005254 <__muldf3+0x284>
 200524c:	5b64b03a 	or	r18,r11,r13
 2005250:	63a6b03a 	or	r19,r12,r14
 2005254:	7abfed36 	bltu	r15,r10,200520c <__muldf3+0x23c>
 2005258:	da001015 	stw	r8,64(sp)
 200525c:	00840034 	movhi	r2,4096
 2005260:	10bfffc4 	addi	r2,r2,-1
 2005264:	12801436 	bltu	r2,r10,20052b8 <__muldf3+0x2e8>
 2005268:	da001017 	ldw	r8,64(sp)
 200526c:	101f883a 	mov	r15,r2
 2005270:	4a45883a 	add	r2,r9,r9
 2005274:	124d803a 	cmpltu	r6,r2,r9
 2005278:	5287883a 	add	r3,r10,r10
 200527c:	9497883a 	add	r11,r18,r18
 2005280:	5c8f803a 	cmpltu	r7,r11,r18
 2005284:	9cd9883a 	add	r12,r19,r19
 2005288:	01000044 	movi	r4,1
 200528c:	30cd883a 	add	r6,r6,r3
 2005290:	3b0f883a 	add	r7,r7,r12
 2005294:	423fffc4 	addi	r8,r8,-1
 2005298:	1013883a 	mov	r9,r2
 200529c:	3015883a 	mov	r10,r6
 20052a0:	111ab03a 	or	r13,r2,r4
 20052a4:	98003016 	blt	r19,zero,2005368 <__muldf3+0x398>
 20052a8:	5825883a 	mov	r18,r11
 20052ac:	3827883a 	mov	r19,r7
 20052b0:	7abfef2e 	bgeu	r15,r10,2005270 <__muldf3+0x2a0>
 20052b4:	da001015 	stw	r8,64(sp)
 20052b8:	00803fc4 	movi	r2,255
 20052bc:	488e703a 	and	r7,r9,r2
 20052c0:	00802004 	movi	r2,128
 20052c4:	0007883a 	mov	r3,zero
 20052c8:	0011883a 	mov	r8,zero
 20052cc:	38801826 	beq	r7,r2,2005330 <__muldf3+0x360>
 20052d0:	008000c4 	movi	r2,3
 20052d4:	d9000e04 	addi	r4,sp,56
 20052d8:	da801215 	stw	r10,72(sp)
 20052dc:	d8800e15 	stw	r2,56(sp)
 20052e0:	da401115 	stw	r9,68(sp)
 20052e4:	003f6a06 	br	2005090 <__muldf3+0xc0>
 20052e8:	89802126 	beq	r17,r6,2005370 <__muldf3+0x3a0>
 20052ec:	0009883a 	mov	r4,zero
 20052f0:	5105883a 	add	r2,r10,r4
 20052f4:	128d803a 	cmpltu	r6,r2,r10
 20052f8:	5d07883a 	add	r3,r11,r20
 20052fc:	30cd883a 	add	r6,r6,r3
 2005300:	0021883a 	mov	r16,zero
 2005304:	0023883a 	mov	r17,zero
 2005308:	1025883a 	mov	r18,r2
 200530c:	3027883a 	mov	r19,r6
 2005310:	32ff9e2e 	bgeu	r6,r11,200518c <__muldf3+0x1bc>
 2005314:	00800044 	movi	r2,1
 2005318:	8089883a 	add	r4,r16,r2
 200531c:	240d803a 	cmpltu	r6,r4,r16
 2005320:	344d883a 	add	r6,r6,r17
 2005324:	2021883a 	mov	r16,r4
 2005328:	3023883a 	mov	r17,r6
 200532c:	003f9806 	br	2005190 <__muldf3+0x1c0>
 2005330:	403fe71e 	bne	r8,zero,20052d0 <__muldf3+0x300>
 2005334:	01004004 	movi	r4,256
 2005338:	4904703a 	and	r2,r9,r4
 200533c:	10c4b03a 	or	r2,r2,r3
 2005340:	103fe31e 	bne	r2,zero,20052d0 <__muldf3+0x300>
 2005344:	94c4b03a 	or	r2,r18,r19
 2005348:	103fe126 	beq	r2,zero,20052d0 <__muldf3+0x300>
 200534c:	49c5883a 	add	r2,r9,r7
 2005350:	1251803a 	cmpltu	r8,r2,r9
 2005354:	4291883a 	add	r8,r8,r10
 2005358:	013fc004 	movi	r4,-256
 200535c:	1112703a 	and	r9,r2,r4
 2005360:	4015883a 	mov	r10,r8
 2005364:	003fda06 	br	20052d0 <__muldf3+0x300>
 2005368:	6813883a 	mov	r9,r13
 200536c:	003fce06 	br	20052a8 <__muldf3+0x2d8>
 2005370:	143f7c36 	bltu	r2,r16,2005164 <__muldf3+0x194>
 2005374:	003fdd06 	br	20052ec <__muldf3+0x31c>
 2005378:	12bf852e 	bgeu	r2,r10,2005190 <__muldf3+0x1c0>
 200537c:	003fe506 	br	2005314 <__muldf3+0x344>
 2005380:	00800084 	movi	r2,2
 2005384:	20bf351e 	bne	r4,r2,200505c <__muldf3+0x8c>
 2005388:	010080b4 	movhi	r4,514
 200538c:	2102f704 	addi	r4,r4,3036
 2005390:	003f3f06 	br	2005090 <__muldf3+0xc0>

02005394 <__divdf3>:
 2005394:	deffed04 	addi	sp,sp,-76
 2005398:	dcc01115 	stw	r19,68(sp)
 200539c:	dcc00404 	addi	r19,sp,16
 20053a0:	2011883a 	mov	r8,r4
 20053a4:	2813883a 	mov	r9,r5
 20053a8:	dc000e15 	stw	r16,56(sp)
 20053ac:	d809883a 	mov	r4,sp
 20053b0:	980b883a 	mov	r5,r19
 20053b4:	dc000904 	addi	r16,sp,36
 20053b8:	dfc01215 	stw	ra,72(sp)
 20053bc:	da400115 	stw	r9,4(sp)
 20053c0:	d9c00315 	stw	r7,12(sp)
 20053c4:	da000015 	stw	r8,0(sp)
 20053c8:	d9800215 	stw	r6,8(sp)
 20053cc:	dc801015 	stw	r18,64(sp)
 20053d0:	dc400f15 	stw	r17,60(sp)
 20053d4:	20061440 	call	2006144 <__unpack_d>
 20053d8:	d9000204 	addi	r4,sp,8
 20053dc:	800b883a 	mov	r5,r16
 20053e0:	20061440 	call	2006144 <__unpack_d>
 20053e4:	d9000417 	ldw	r4,16(sp)
 20053e8:	00800044 	movi	r2,1
 20053ec:	11000b2e 	bgeu	r2,r4,200541c <__divdf3+0x88>
 20053f0:	d9400917 	ldw	r5,36(sp)
 20053f4:	1140762e 	bgeu	r2,r5,20055d0 <__divdf3+0x23c>
 20053f8:	d8800517 	ldw	r2,20(sp)
 20053fc:	d8c00a17 	ldw	r3,40(sp)
 2005400:	01800104 	movi	r6,4
 2005404:	10c4f03a 	xor	r2,r2,r3
 2005408:	d8800515 	stw	r2,20(sp)
 200540c:	21800226 	beq	r4,r6,2005418 <__divdf3+0x84>
 2005410:	00800084 	movi	r2,2
 2005414:	2080141e 	bne	r4,r2,2005468 <__divdf3+0xd4>
 2005418:	29000926 	beq	r5,r4,2005440 <__divdf3+0xac>
 200541c:	9809883a 	mov	r4,r19
 2005420:	2005e300 	call	2005e30 <__pack_d>
 2005424:	dfc01217 	ldw	ra,72(sp)
 2005428:	dcc01117 	ldw	r19,68(sp)
 200542c:	dc801017 	ldw	r18,64(sp)
 2005430:	dc400f17 	ldw	r17,60(sp)
 2005434:	dc000e17 	ldw	r16,56(sp)
 2005438:	dec01304 	addi	sp,sp,76
 200543c:	f800283a 	ret
 2005440:	010080b4 	movhi	r4,514
 2005444:	2102f704 	addi	r4,r4,3036
 2005448:	2005e300 	call	2005e30 <__pack_d>
 200544c:	dfc01217 	ldw	ra,72(sp)
 2005450:	dcc01117 	ldw	r19,68(sp)
 2005454:	dc801017 	ldw	r18,64(sp)
 2005458:	dc400f17 	ldw	r17,60(sp)
 200545c:	dc000e17 	ldw	r16,56(sp)
 2005460:	dec01304 	addi	sp,sp,76
 2005464:	f800283a 	ret
 2005468:	29805b26 	beq	r5,r6,20055d8 <__divdf3+0x244>
 200546c:	28802d26 	beq	r5,r2,2005524 <__divdf3+0x190>
 2005470:	d8c00617 	ldw	r3,24(sp)
 2005474:	d8800b17 	ldw	r2,44(sp)
 2005478:	d9c00817 	ldw	r7,32(sp)
 200547c:	dc400d17 	ldw	r17,52(sp)
 2005480:	188bc83a 	sub	r5,r3,r2
 2005484:	d9800717 	ldw	r6,28(sp)
 2005488:	dc000c17 	ldw	r16,48(sp)
 200548c:	d9400615 	stw	r5,24(sp)
 2005490:	3c403836 	bltu	r7,r17,2005574 <__divdf3+0x1e0>
 2005494:	89c03626 	beq	r17,r7,2005570 <__divdf3+0x1dc>
 2005498:	0015883a 	mov	r10,zero
 200549c:	001d883a 	mov	r14,zero
 20054a0:	02c40034 	movhi	r11,4096
 20054a4:	001f883a 	mov	r15,zero
 20054a8:	003f883a 	mov	ra,zero
 20054ac:	04800f44 	movi	r18,61
 20054b0:	00000f06 	br	20054f0 <__divdf3+0x15c>
 20054b4:	601d883a 	mov	r14,r12
 20054b8:	681f883a 	mov	r15,r13
 20054bc:	400d883a 	mov	r6,r8
 20054c0:	100f883a 	mov	r7,r2
 20054c4:	3191883a 	add	r8,r6,r6
 20054c8:	5808d07a 	srli	r4,r11,1
 20054cc:	4185803a 	cmpltu	r2,r8,r6
 20054d0:	39d3883a 	add	r9,r7,r7
 20054d4:	28c6b03a 	or	r3,r5,r3
 20054d8:	1245883a 	add	r2,r2,r9
 20054dc:	1815883a 	mov	r10,r3
 20054e0:	2017883a 	mov	r11,r4
 20054e4:	400d883a 	mov	r6,r8
 20054e8:	100f883a 	mov	r7,r2
 20054ec:	fc801726 	beq	ra,r18,200554c <__divdf3+0x1b8>
 20054f0:	580a97fa 	slli	r5,r11,31
 20054f4:	5006d07a 	srli	r3,r10,1
 20054f8:	ffc00044 	addi	ra,ra,1
 20054fc:	3c7ff136 	bltu	r7,r17,20054c4 <__divdf3+0x130>
 2005500:	3411c83a 	sub	r8,r6,r16
 2005504:	3205803a 	cmpltu	r2,r6,r8
 2005508:	3c53c83a 	sub	r9,r7,r17
 200550c:	7298b03a 	or	r12,r14,r10
 2005510:	7adab03a 	or	r13,r15,r11
 2005514:	4885c83a 	sub	r2,r9,r2
 2005518:	89ffe61e 	bne	r17,r7,20054b4 <__divdf3+0x120>
 200551c:	343fe936 	bltu	r6,r16,20054c4 <__divdf3+0x130>
 2005520:	003fe406 	br	20054b4 <__divdf3+0x120>
 2005524:	9809883a 	mov	r4,r19
 2005528:	d9800415 	stw	r6,16(sp)
 200552c:	2005e300 	call	2005e30 <__pack_d>
 2005530:	dfc01217 	ldw	ra,72(sp)
 2005534:	dcc01117 	ldw	r19,68(sp)
 2005538:	dc801017 	ldw	r18,64(sp)
 200553c:	dc400f17 	ldw	r17,60(sp)
 2005540:	dc000e17 	ldw	r16,56(sp)
 2005544:	dec01304 	addi	sp,sp,76
 2005548:	f800283a 	ret
 200554c:	00803fc4 	movi	r2,255
 2005550:	7090703a 	and	r8,r14,r2
 2005554:	00802004 	movi	r2,128
 2005558:	0007883a 	mov	r3,zero
 200555c:	0013883a 	mov	r9,zero
 2005560:	40800d26 	beq	r8,r2,2005598 <__divdf3+0x204>
 2005564:	dbc00815 	stw	r15,32(sp)
 2005568:	db800715 	stw	r14,28(sp)
 200556c:	003fab06 	br	200541c <__divdf3+0x88>
 2005570:	343fc92e 	bgeu	r6,r16,2005498 <__divdf3+0x104>
 2005574:	3185883a 	add	r2,r6,r6
 2005578:	1189803a 	cmpltu	r4,r2,r6
 200557c:	39c7883a 	add	r3,r7,r7
 2005580:	20c9883a 	add	r4,r4,r3
 2005584:	297fffc4 	addi	r5,r5,-1
 2005588:	100d883a 	mov	r6,r2
 200558c:	200f883a 	mov	r7,r4
 2005590:	d9400615 	stw	r5,24(sp)
 2005594:	003fc006 	br	2005498 <__divdf3+0x104>
 2005598:	483ff21e 	bne	r9,zero,2005564 <__divdf3+0x1d0>
 200559c:	01004004 	movi	r4,256
 20055a0:	7104703a 	and	r2,r14,r4
 20055a4:	10c4b03a 	or	r2,r2,r3
 20055a8:	103fee1e 	bne	r2,zero,2005564 <__divdf3+0x1d0>
 20055ac:	31c4b03a 	or	r2,r6,r7
 20055b0:	103fec26 	beq	r2,zero,2005564 <__divdf3+0x1d0>
 20055b4:	7205883a 	add	r2,r14,r8
 20055b8:	1391803a 	cmpltu	r8,r2,r14
 20055bc:	43d1883a 	add	r8,r8,r15
 20055c0:	013fc004 	movi	r4,-256
 20055c4:	111c703a 	and	r14,r2,r4
 20055c8:	401f883a 	mov	r15,r8
 20055cc:	003fe506 	br	2005564 <__divdf3+0x1d0>
 20055d0:	8009883a 	mov	r4,r16
 20055d4:	003f9206 	br	2005420 <__divdf3+0x8c>
 20055d8:	9809883a 	mov	r4,r19
 20055dc:	d8000715 	stw	zero,28(sp)
 20055e0:	d8000815 	stw	zero,32(sp)
 20055e4:	d8000615 	stw	zero,24(sp)
 20055e8:	003f8d06 	br	2005420 <__divdf3+0x8c>

020055ec <__gtdf2>:
 20055ec:	deffef04 	addi	sp,sp,-68
 20055f0:	dc400f15 	stw	r17,60(sp)
 20055f4:	dc400404 	addi	r17,sp,16
 20055f8:	2005883a 	mov	r2,r4
 20055fc:	2807883a 	mov	r3,r5
 2005600:	dc000e15 	stw	r16,56(sp)
 2005604:	d809883a 	mov	r4,sp
 2005608:	880b883a 	mov	r5,r17
 200560c:	dc000904 	addi	r16,sp,36
 2005610:	d8c00115 	stw	r3,4(sp)
 2005614:	d8800015 	stw	r2,0(sp)
 2005618:	d9800215 	stw	r6,8(sp)
 200561c:	dfc01015 	stw	ra,64(sp)
 2005620:	d9c00315 	stw	r7,12(sp)
 2005624:	20061440 	call	2006144 <__unpack_d>
 2005628:	d9000204 	addi	r4,sp,8
 200562c:	800b883a 	mov	r5,r16
 2005630:	20061440 	call	2006144 <__unpack_d>
 2005634:	d8800417 	ldw	r2,16(sp)
 2005638:	00c00044 	movi	r3,1
 200563c:	01bfffc4 	movi	r6,-1
 2005640:	1880062e 	bgeu	r3,r2,200565c <__gtdf2+0x70>
 2005644:	d8800917 	ldw	r2,36(sp)
 2005648:	8809883a 	mov	r4,r17
 200564c:	800b883a 	mov	r5,r16
 2005650:	1880022e 	bgeu	r3,r2,200565c <__gtdf2+0x70>
 2005654:	200627c0 	call	200627c <__fpcmp_parts_d>
 2005658:	100d883a 	mov	r6,r2
 200565c:	3005883a 	mov	r2,r6
 2005660:	dfc01017 	ldw	ra,64(sp)
 2005664:	dc400f17 	ldw	r17,60(sp)
 2005668:	dc000e17 	ldw	r16,56(sp)
 200566c:	dec01104 	addi	sp,sp,68
 2005670:	f800283a 	ret

02005674 <__ltdf2>:
 2005674:	deffef04 	addi	sp,sp,-68
 2005678:	dc400f15 	stw	r17,60(sp)
 200567c:	dc400404 	addi	r17,sp,16
 2005680:	2005883a 	mov	r2,r4
 2005684:	2807883a 	mov	r3,r5
 2005688:	dc000e15 	stw	r16,56(sp)
 200568c:	d809883a 	mov	r4,sp
 2005690:	880b883a 	mov	r5,r17
 2005694:	dc000904 	addi	r16,sp,36
 2005698:	d8c00115 	stw	r3,4(sp)
 200569c:	d8800015 	stw	r2,0(sp)
 20056a0:	d9800215 	stw	r6,8(sp)
 20056a4:	dfc01015 	stw	ra,64(sp)
 20056a8:	d9c00315 	stw	r7,12(sp)
 20056ac:	20061440 	call	2006144 <__unpack_d>
 20056b0:	d9000204 	addi	r4,sp,8
 20056b4:	800b883a 	mov	r5,r16
 20056b8:	20061440 	call	2006144 <__unpack_d>
 20056bc:	d8800417 	ldw	r2,16(sp)
 20056c0:	00c00044 	movi	r3,1
 20056c4:	180d883a 	mov	r6,r3
 20056c8:	1880062e 	bgeu	r3,r2,20056e4 <__ltdf2+0x70>
 20056cc:	d8800917 	ldw	r2,36(sp)
 20056d0:	8809883a 	mov	r4,r17
 20056d4:	800b883a 	mov	r5,r16
 20056d8:	1880022e 	bgeu	r3,r2,20056e4 <__ltdf2+0x70>
 20056dc:	200627c0 	call	200627c <__fpcmp_parts_d>
 20056e0:	100d883a 	mov	r6,r2
 20056e4:	3005883a 	mov	r2,r6
 20056e8:	dfc01017 	ldw	ra,64(sp)
 20056ec:	dc400f17 	ldw	r17,60(sp)
 20056f0:	dc000e17 	ldw	r16,56(sp)
 20056f4:	dec01104 	addi	sp,sp,68
 20056f8:	f800283a 	ret

020056fc <__floatsidf>:
 20056fc:	2006d7fa 	srli	r3,r4,31
 2005700:	defff604 	addi	sp,sp,-40
 2005704:	008000c4 	movi	r2,3
 2005708:	dfc00915 	stw	ra,36(sp)
 200570c:	dcc00815 	stw	r19,32(sp)
 2005710:	dc800715 	stw	r18,28(sp)
 2005714:	dc400615 	stw	r17,24(sp)
 2005718:	dc000515 	stw	r16,20(sp)
 200571c:	d8800015 	stw	r2,0(sp)
 2005720:	d8c00115 	stw	r3,4(sp)
 2005724:	20000f1e 	bne	r4,zero,2005764 <__floatsidf+0x68>
 2005728:	00800084 	movi	r2,2
 200572c:	d8800015 	stw	r2,0(sp)
 2005730:	d809883a 	mov	r4,sp
 2005734:	2005e300 	call	2005e30 <__pack_d>
 2005738:	1009883a 	mov	r4,r2
 200573c:	180b883a 	mov	r5,r3
 2005740:	2005883a 	mov	r2,r4
 2005744:	2807883a 	mov	r3,r5
 2005748:	dfc00917 	ldw	ra,36(sp)
 200574c:	dcc00817 	ldw	r19,32(sp)
 2005750:	dc800717 	ldw	r18,28(sp)
 2005754:	dc400617 	ldw	r17,24(sp)
 2005758:	dc000517 	ldw	r16,20(sp)
 200575c:	dec00a04 	addi	sp,sp,40
 2005760:	f800283a 	ret
 2005764:	00800f04 	movi	r2,60
 2005768:	1807003a 	cmpeq	r3,r3,zero
 200576c:	d8800215 	stw	r2,8(sp)
 2005770:	18001126 	beq	r3,zero,20057b8 <__floatsidf+0xbc>
 2005774:	0027883a 	mov	r19,zero
 2005778:	2025883a 	mov	r18,r4
 200577c:	d9000315 	stw	r4,12(sp)
 2005780:	dcc00415 	stw	r19,16(sp)
 2005784:	2005b5c0 	call	2005b5c <__clzsi2>
 2005788:	11000744 	addi	r4,r2,29
 200578c:	013fe80e 	bge	zero,r4,2005730 <__floatsidf+0x34>
 2005790:	10bfff44 	addi	r2,r2,-3
 2005794:	10000c16 	blt	r2,zero,20057c8 <__floatsidf+0xcc>
 2005798:	90a2983a 	sll	r17,r18,r2
 200579c:	0021883a 	mov	r16,zero
 20057a0:	d8800217 	ldw	r2,8(sp)
 20057a4:	dc400415 	stw	r17,16(sp)
 20057a8:	dc000315 	stw	r16,12(sp)
 20057ac:	1105c83a 	sub	r2,r2,r4
 20057b0:	d8800215 	stw	r2,8(sp)
 20057b4:	003fde06 	br	2005730 <__floatsidf+0x34>
 20057b8:	00a00034 	movhi	r2,32768
 20057bc:	20800a26 	beq	r4,r2,20057e8 <__floatsidf+0xec>
 20057c0:	0109c83a 	sub	r4,zero,r4
 20057c4:	003feb06 	br	2005774 <__floatsidf+0x78>
 20057c8:	9006d07a 	srli	r3,r18,1
 20057cc:	008007c4 	movi	r2,31
 20057d0:	1105c83a 	sub	r2,r2,r4
 20057d4:	1886d83a 	srl	r3,r3,r2
 20057d8:	9922983a 	sll	r17,r19,r4
 20057dc:	9120983a 	sll	r16,r18,r4
 20057e0:	1c62b03a 	or	r17,r3,r17
 20057e4:	003fee06 	br	20057a0 <__floatsidf+0xa4>
 20057e8:	0009883a 	mov	r4,zero
 20057ec:	01707834 	movhi	r5,49632
 20057f0:	003fd306 	br	2005740 <__floatsidf+0x44>

020057f4 <__fixdfsi>:
 20057f4:	defff804 	addi	sp,sp,-32
 20057f8:	2005883a 	mov	r2,r4
 20057fc:	2807883a 	mov	r3,r5
 2005800:	d809883a 	mov	r4,sp
 2005804:	d9400204 	addi	r5,sp,8
 2005808:	d8c00115 	stw	r3,4(sp)
 200580c:	d8800015 	stw	r2,0(sp)
 2005810:	dfc00715 	stw	ra,28(sp)
 2005814:	20061440 	call	2006144 <__unpack_d>
 2005818:	d8c00217 	ldw	r3,8(sp)
 200581c:	00800084 	movi	r2,2
 2005820:	1880051e 	bne	r3,r2,2005838 <__fixdfsi+0x44>
 2005824:	0007883a 	mov	r3,zero
 2005828:	1805883a 	mov	r2,r3
 200582c:	dfc00717 	ldw	ra,28(sp)
 2005830:	dec00804 	addi	sp,sp,32
 2005834:	f800283a 	ret
 2005838:	00800044 	movi	r2,1
 200583c:	10fff92e 	bgeu	r2,r3,2005824 <__fixdfsi+0x30>
 2005840:	00800104 	movi	r2,4
 2005844:	18800426 	beq	r3,r2,2005858 <__fixdfsi+0x64>
 2005848:	d8c00417 	ldw	r3,16(sp)
 200584c:	183ff516 	blt	r3,zero,2005824 <__fixdfsi+0x30>
 2005850:	00800784 	movi	r2,30
 2005854:	10c0080e 	bge	r2,r3,2005878 <__fixdfsi+0x84>
 2005858:	d8800317 	ldw	r2,12(sp)
 200585c:	1000121e 	bne	r2,zero,20058a8 <__fixdfsi+0xb4>
 2005860:	00e00034 	movhi	r3,32768
 2005864:	18ffffc4 	addi	r3,r3,-1
 2005868:	1805883a 	mov	r2,r3
 200586c:	dfc00717 	ldw	ra,28(sp)
 2005870:	dec00804 	addi	sp,sp,32
 2005874:	f800283a 	ret
 2005878:	00800f04 	movi	r2,60
 200587c:	10d1c83a 	sub	r8,r2,r3
 2005880:	40bff804 	addi	r2,r8,-32
 2005884:	d9800517 	ldw	r6,20(sp)
 2005888:	d9c00617 	ldw	r7,24(sp)
 200588c:	10000816 	blt	r2,zero,20058b0 <__fixdfsi+0xbc>
 2005890:	3888d83a 	srl	r4,r7,r2
 2005894:	d8800317 	ldw	r2,12(sp)
 2005898:	2007883a 	mov	r3,r4
 200589c:	103fe226 	beq	r2,zero,2005828 <__fixdfsi+0x34>
 20058a0:	0107c83a 	sub	r3,zero,r4
 20058a4:	003fe006 	br	2005828 <__fixdfsi+0x34>
 20058a8:	00e00034 	movhi	r3,32768
 20058ac:	003fde06 	br	2005828 <__fixdfsi+0x34>
 20058b0:	39c7883a 	add	r3,r7,r7
 20058b4:	008007c4 	movi	r2,31
 20058b8:	1205c83a 	sub	r2,r2,r8
 20058bc:	1886983a 	sll	r3,r3,r2
 20058c0:	3208d83a 	srl	r4,r6,r8
 20058c4:	1908b03a 	or	r4,r3,r4
 20058c8:	003ff206 	br	2005894 <__fixdfsi+0xa0>

020058cc <__make_dp>:
 20058cc:	defff904 	addi	sp,sp,-28
 20058d0:	d8c00717 	ldw	r3,28(sp)
 20058d4:	d9000015 	stw	r4,0(sp)
 20058d8:	d809883a 	mov	r4,sp
 20058dc:	dfc00515 	stw	ra,20(sp)
 20058e0:	d9c00615 	stw	r7,24(sp)
 20058e4:	d9400115 	stw	r5,4(sp)
 20058e8:	d9800215 	stw	r6,8(sp)
 20058ec:	d8c00415 	stw	r3,16(sp)
 20058f0:	d9c00315 	stw	r7,12(sp)
 20058f4:	2005e300 	call	2005e30 <__pack_d>
 20058f8:	dfc00517 	ldw	ra,20(sp)
 20058fc:	dec00704 	addi	sp,sp,28
 2005900:	f800283a 	ret

02005904 <__truncdfsf2>:
 2005904:	defff804 	addi	sp,sp,-32
 2005908:	2005883a 	mov	r2,r4
 200590c:	2807883a 	mov	r3,r5
 2005910:	d809883a 	mov	r4,sp
 2005914:	d9400204 	addi	r5,sp,8
 2005918:	d8c00115 	stw	r3,4(sp)
 200591c:	d8800015 	stw	r2,0(sp)
 2005920:	dfc00715 	stw	ra,28(sp)
 2005924:	20061440 	call	2006144 <__unpack_d>
 2005928:	d9c00517 	ldw	r7,20(sp)
 200592c:	da000617 	ldw	r8,24(sp)
 2005930:	02d00034 	movhi	r11,16384
 2005934:	5affffc4 	addi	r11,r11,-1
 2005938:	3812d7ba 	srli	r9,r7,30
 200593c:	401a90ba 	slli	r13,r8,2
 2005940:	3ac4703a 	and	r2,r7,r11
 2005944:	0007883a 	mov	r3,zero
 2005948:	6a52b03a 	or	r9,r13,r9
 200594c:	10c4b03a 	or	r2,r2,r3
 2005950:	d9000217 	ldw	r4,8(sp)
 2005954:	d9400317 	ldw	r5,12(sp)
 2005958:	d9800417 	ldw	r6,16(sp)
 200595c:	480f883a 	mov	r7,r9
 2005960:	10000126 	beq	r2,zero,2005968 <__truncdfsf2+0x64>
 2005964:	49c00054 	ori	r7,r9,1
 2005968:	2005e040 	call	2005e04 <__make_fp>
 200596c:	dfc00717 	ldw	ra,28(sp)
 2005970:	dec00804 	addi	sp,sp,32
 2005974:	f800283a 	ret

02005978 <udivmodsi4>:
 2005978:	29001b2e 	bgeu	r5,r4,20059e8 <udivmodsi4+0x70>
 200597c:	28001a16 	blt	r5,zero,20059e8 <udivmodsi4+0x70>
 2005980:	00800044 	movi	r2,1
 2005984:	0007883a 	mov	r3,zero
 2005988:	01c007c4 	movi	r7,31
 200598c:	00000306 	br	200599c <udivmodsi4+0x24>
 2005990:	19c01326 	beq	r3,r7,20059e0 <udivmodsi4+0x68>
 2005994:	18c00044 	addi	r3,r3,1
 2005998:	28000416 	blt	r5,zero,20059ac <udivmodsi4+0x34>
 200599c:	294b883a 	add	r5,r5,r5
 20059a0:	1085883a 	add	r2,r2,r2
 20059a4:	293ffa36 	bltu	r5,r4,2005990 <udivmodsi4+0x18>
 20059a8:	10000d26 	beq	r2,zero,20059e0 <udivmodsi4+0x68>
 20059ac:	0007883a 	mov	r3,zero
 20059b0:	21400236 	bltu	r4,r5,20059bc <udivmodsi4+0x44>
 20059b4:	2149c83a 	sub	r4,r4,r5
 20059b8:	1886b03a 	or	r3,r3,r2
 20059bc:	1004d07a 	srli	r2,r2,1
 20059c0:	280ad07a 	srli	r5,r5,1
 20059c4:	103ffa1e 	bne	r2,zero,20059b0 <udivmodsi4+0x38>
 20059c8:	30000226 	beq	r6,zero,20059d4 <udivmodsi4+0x5c>
 20059cc:	2005883a 	mov	r2,r4
 20059d0:	f800283a 	ret
 20059d4:	1809883a 	mov	r4,r3
 20059d8:	2005883a 	mov	r2,r4
 20059dc:	f800283a 	ret
 20059e0:	0007883a 	mov	r3,zero
 20059e4:	003ff806 	br	20059c8 <udivmodsi4+0x50>
 20059e8:	00800044 	movi	r2,1
 20059ec:	0007883a 	mov	r3,zero
 20059f0:	003fef06 	br	20059b0 <udivmodsi4+0x38>

020059f4 <__divsi3>:
 20059f4:	defffe04 	addi	sp,sp,-8
 20059f8:	dc000015 	stw	r16,0(sp)
 20059fc:	dfc00115 	stw	ra,4(sp)
 2005a00:	0021883a 	mov	r16,zero
 2005a04:	20000c16 	blt	r4,zero,2005a38 <__divsi3+0x44>
 2005a08:	000d883a 	mov	r6,zero
 2005a0c:	28000e16 	blt	r5,zero,2005a48 <__divsi3+0x54>
 2005a10:	20059780 	call	2005978 <udivmodsi4>
 2005a14:	1007883a 	mov	r3,r2
 2005a18:	8005003a 	cmpeq	r2,r16,zero
 2005a1c:	1000011e 	bne	r2,zero,2005a24 <__divsi3+0x30>
 2005a20:	00c7c83a 	sub	r3,zero,r3
 2005a24:	1805883a 	mov	r2,r3
 2005a28:	dfc00117 	ldw	ra,4(sp)
 2005a2c:	dc000017 	ldw	r16,0(sp)
 2005a30:	dec00204 	addi	sp,sp,8
 2005a34:	f800283a 	ret
 2005a38:	0109c83a 	sub	r4,zero,r4
 2005a3c:	04000044 	movi	r16,1
 2005a40:	000d883a 	mov	r6,zero
 2005a44:	283ff20e 	bge	r5,zero,2005a10 <__divsi3+0x1c>
 2005a48:	014bc83a 	sub	r5,zero,r5
 2005a4c:	8021003a 	cmpeq	r16,r16,zero
 2005a50:	003fef06 	br	2005a10 <__divsi3+0x1c>

02005a54 <__modsi3>:
 2005a54:	deffff04 	addi	sp,sp,-4
 2005a58:	dfc00015 	stw	ra,0(sp)
 2005a5c:	01800044 	movi	r6,1
 2005a60:	2807883a 	mov	r3,r5
 2005a64:	20000416 	blt	r4,zero,2005a78 <__modsi3+0x24>
 2005a68:	28000c16 	blt	r5,zero,2005a9c <__modsi3+0x48>
 2005a6c:	dfc00017 	ldw	ra,0(sp)
 2005a70:	dec00104 	addi	sp,sp,4
 2005a74:	20059781 	jmpi	2005978 <udivmodsi4>
 2005a78:	0109c83a 	sub	r4,zero,r4
 2005a7c:	28000b16 	blt	r5,zero,2005aac <__modsi3+0x58>
 2005a80:	180b883a 	mov	r5,r3
 2005a84:	01800044 	movi	r6,1
 2005a88:	20059780 	call	2005978 <udivmodsi4>
 2005a8c:	0085c83a 	sub	r2,zero,r2
 2005a90:	dfc00017 	ldw	ra,0(sp)
 2005a94:	dec00104 	addi	sp,sp,4
 2005a98:	f800283a 	ret
 2005a9c:	014bc83a 	sub	r5,zero,r5
 2005aa0:	dfc00017 	ldw	ra,0(sp)
 2005aa4:	dec00104 	addi	sp,sp,4
 2005aa8:	20059781 	jmpi	2005978 <udivmodsi4>
 2005aac:	0147c83a 	sub	r3,zero,r5
 2005ab0:	003ff306 	br	2005a80 <__modsi3+0x2c>

02005ab4 <__udivsi3>:
 2005ab4:	000d883a 	mov	r6,zero
 2005ab8:	20059781 	jmpi	2005978 <udivmodsi4>

02005abc <__umodsi3>:
 2005abc:	01800044 	movi	r6,1
 2005ac0:	20059781 	jmpi	2005978 <udivmodsi4>

02005ac4 <__muldi3>:
 2005ac4:	2011883a 	mov	r8,r4
 2005ac8:	427fffcc 	andi	r9,r8,65535
 2005acc:	4018d43a 	srli	r12,r8,16
 2005ad0:	32bfffcc 	andi	r10,r6,65535
 2005ad4:	3016d43a 	srli	r11,r6,16
 2005ad8:	4a85383a 	mul	r2,r9,r10
 2005adc:	6295383a 	mul	r10,r12,r10
 2005ae0:	4ad3383a 	mul	r9,r9,r11
 2005ae4:	113fffcc 	andi	r4,r2,65535
 2005ae8:	1004d43a 	srli	r2,r2,16
 2005aec:	4a93883a 	add	r9,r9,r10
 2005af0:	3807883a 	mov	r3,r7
 2005af4:	1245883a 	add	r2,r2,r9
 2005af8:	280f883a 	mov	r7,r5
 2005afc:	180b883a 	mov	r5,r3
 2005b00:	1006943a 	slli	r3,r2,16
 2005b04:	defffd04 	addi	sp,sp,-12
 2005b08:	dc800215 	stw	r18,8(sp)
 2005b0c:	1907883a 	add	r3,r3,r4
 2005b10:	dc400115 	stw	r17,4(sp)
 2005b14:	dc000015 	stw	r16,0(sp)
 2005b18:	4165383a 	mul	r18,r8,r5
 2005b1c:	31e3383a 	mul	r17,r6,r7
 2005b20:	1012d43a 	srli	r9,r2,16
 2005b24:	62d9383a 	mul	r12,r12,r11
 2005b28:	181f883a 	mov	r15,r3
 2005b2c:	1280022e 	bgeu	r2,r10,2005b38 <__muldi3+0x74>
 2005b30:	00800074 	movhi	r2,1
 2005b34:	6099883a 	add	r12,r12,r2
 2005b38:	624d883a 	add	r6,r12,r9
 2005b3c:	9187883a 	add	r3,r18,r6
 2005b40:	88c7883a 	add	r3,r17,r3
 2005b44:	7805883a 	mov	r2,r15
 2005b48:	dc800217 	ldw	r18,8(sp)
 2005b4c:	dc400117 	ldw	r17,4(sp)
 2005b50:	dc000017 	ldw	r16,0(sp)
 2005b54:	dec00304 	addi	sp,sp,12
 2005b58:	f800283a 	ret

02005b5c <__clzsi2>:
 2005b5c:	00bfffd4 	movui	r2,65535
 2005b60:	11000e36 	bltu	r2,r4,2005b9c <__clzsi2+0x40>
 2005b64:	00803fc4 	movi	r2,255
 2005b68:	01400204 	movi	r5,8
 2005b6c:	0007883a 	mov	r3,zero
 2005b70:	11001036 	bltu	r2,r4,2005bb4 <__clzsi2+0x58>
 2005b74:	000b883a 	mov	r5,zero
 2005b78:	20c6d83a 	srl	r3,r4,r3
 2005b7c:	008080b4 	movhi	r2,514
 2005b80:	1082fc04 	addi	r2,r2,3056
 2005b84:	1887883a 	add	r3,r3,r2
 2005b88:	18800003 	ldbu	r2,0(r3)
 2005b8c:	00c00804 	movi	r3,32
 2005b90:	2885883a 	add	r2,r5,r2
 2005b94:	1885c83a 	sub	r2,r3,r2
 2005b98:	f800283a 	ret
 2005b9c:	01400404 	movi	r5,16
 2005ba0:	00804034 	movhi	r2,256
 2005ba4:	10bfffc4 	addi	r2,r2,-1
 2005ba8:	2807883a 	mov	r3,r5
 2005bac:	113ff22e 	bgeu	r2,r4,2005b78 <__clzsi2+0x1c>
 2005bb0:	01400604 	movi	r5,24
 2005bb4:	2807883a 	mov	r3,r5
 2005bb8:	20c6d83a 	srl	r3,r4,r3
 2005bbc:	008080b4 	movhi	r2,514
 2005bc0:	1082fc04 	addi	r2,r2,3056
 2005bc4:	1887883a 	add	r3,r3,r2
 2005bc8:	18800003 	ldbu	r2,0(r3)
 2005bcc:	00c00804 	movi	r3,32
 2005bd0:	2885883a 	add	r2,r5,r2
 2005bd4:	1885c83a 	sub	r2,r3,r2
 2005bd8:	f800283a 	ret

02005bdc <__pack_f>:
 2005bdc:	20c00017 	ldw	r3,0(r4)
 2005be0:	01c00044 	movi	r7,1
 2005be4:	21800317 	ldw	r6,12(r4)
 2005be8:	21400117 	ldw	r5,4(r4)
 2005bec:	38c02d2e 	bgeu	r7,r3,2005ca4 <__pack_f+0xc8>
 2005bf0:	00800104 	movi	r2,4
 2005bf4:	18802826 	beq	r3,r2,2005c98 <__pack_f+0xbc>
 2005bf8:	00800084 	movi	r2,2
 2005bfc:	18800126 	beq	r3,r2,2005c04 <__pack_f+0x28>
 2005c00:	3000101e 	bne	r6,zero,2005c44 <__pack_f+0x68>
 2005c04:	000d883a 	mov	r6,zero
 2005c08:	0007883a 	mov	r3,zero
 2005c0c:	19003fcc 	andi	r4,r3,255
 2005c10:	200895fa 	slli	r4,r4,23
 2005c14:	00c02034 	movhi	r3,128
 2005c18:	18ffffc4 	addi	r3,r3,-1
 2005c1c:	30c6703a 	and	r3,r6,r3
 2005c20:	10a0002c 	andhi	r2,r2,32768
 2005c24:	10c4b03a 	or	r2,r2,r3
 2005c28:	280a97fa 	slli	r5,r5,31
 2005c2c:	1104b03a 	or	r2,r2,r4
 2005c30:	00e00034 	movhi	r3,32768
 2005c34:	18ffffc4 	addi	r3,r3,-1
 2005c38:	10c4703a 	and	r2,r2,r3
 2005c3c:	1144b03a 	or	r2,r2,r5
 2005c40:	f800283a 	ret
 2005c44:	21000217 	ldw	r4,8(r4)
 2005c48:	00bfe084 	movi	r2,-126
 2005c4c:	20801b16 	blt	r4,r2,2005cbc <__pack_f+0xe0>
 2005c50:	00801fc4 	movi	r2,127
 2005c54:	11001016 	blt	r2,r4,2005c98 <__pack_f+0xbc>
 2005c58:	308e703a 	and	r7,r6,r2
 2005c5c:	2087883a 	add	r3,r4,r2
 2005c60:	00801004 	movi	r2,64
 2005c64:	38800526 	beq	r7,r2,2005c7c <__pack_f+0xa0>
 2005c68:	31800fc4 	addi	r6,r6,63
 2005c6c:	30000716 	blt	r6,zero,2005c8c <__pack_f+0xb0>
 2005c70:	300490ba 	slli	r2,r6,2
 2005c74:	100cd27a 	srli	r6,r2,9
 2005c78:	003fe406 	br	2005c0c <__pack_f+0x30>
 2005c7c:	3080200c 	andi	r2,r6,128
 2005c80:	103ffa26 	beq	r2,zero,2005c6c <__pack_f+0x90>
 2005c84:	31cd883a 	add	r6,r6,r7
 2005c88:	003ff806 	br	2005c6c <__pack_f+0x90>
 2005c8c:	300cd07a 	srli	r6,r6,1
 2005c90:	18c00044 	addi	r3,r3,1
 2005c94:	003ff606 	br	2005c70 <__pack_f+0x94>
 2005c98:	000d883a 	mov	r6,zero
 2005c9c:	00ffffc4 	movi	r3,-1
 2005ca0:	003fda06 	br	2005c0c <__pack_f+0x30>
 2005ca4:	31800434 	orhi	r6,r6,16
 2005ca8:	00802034 	movhi	r2,128
 2005cac:	10bfffc4 	addi	r2,r2,-1
 2005cb0:	308c703a 	and	r6,r6,r2
 2005cb4:	00ffffc4 	movi	r3,-1
 2005cb8:	003fd406 	br	2005c0c <__pack_f+0x30>
 2005cbc:	1109c83a 	sub	r4,r2,r4
 2005cc0:	00800644 	movi	r2,25
 2005cc4:	11001216 	blt	r2,r4,2005d10 <__pack_f+0x134>
 2005cc8:	3904983a 	sll	r2,r7,r4
 2005ccc:	3106d83a 	srl	r3,r6,r4
 2005cd0:	10bfffc4 	addi	r2,r2,-1
 2005cd4:	3084703a 	and	r2,r6,r2
 2005cd8:	1004c03a 	cmpne	r2,r2,zero
 2005cdc:	1886b03a 	or	r3,r3,r2
 2005ce0:	19001fcc 	andi	r4,r3,127
 2005ce4:	00801004 	movi	r2,64
 2005ce8:	20800c26 	beq	r4,r2,2005d1c <__pack_f+0x140>
 2005cec:	18c00fc4 	addi	r3,r3,63
 2005cf0:	00900034 	movhi	r2,16384
 2005cf4:	10bfffc4 	addi	r2,r2,-1
 2005cf8:	180cd1fa 	srli	r6,r3,7
 2005cfc:	10c7803a 	cmpltu	r3,r2,r3
 2005d00:	00802034 	movhi	r2,128
 2005d04:	10bfffc4 	addi	r2,r2,-1
 2005d08:	308c703a 	and	r6,r6,r2
 2005d0c:	003fbf06 	br	2005c0c <__pack_f+0x30>
 2005d10:	0007883a 	mov	r3,zero
 2005d14:	000d883a 	mov	r6,zero
 2005d18:	003ff906 	br	2005d00 <__pack_f+0x124>
 2005d1c:	1880200c 	andi	r2,r3,128
 2005d20:	10000126 	beq	r2,zero,2005d28 <__pack_f+0x14c>
 2005d24:	1907883a 	add	r3,r3,r4
 2005d28:	180cd1fa 	srli	r6,r3,7
 2005d2c:	00900034 	movhi	r2,16384
 2005d30:	10bfffc4 	addi	r2,r2,-1
 2005d34:	10c7803a 	cmpltu	r3,r2,r3
 2005d38:	003ff106 	br	2005d00 <__pack_f+0x124>

02005d3c <__unpack_f>:
 2005d3c:	21800017 	ldw	r6,0(r4)
 2005d40:	00c02034 	movhi	r3,128
 2005d44:	18ffffc4 	addi	r3,r3,-1
 2005d48:	3004d5fa 	srli	r2,r6,23
 2005d4c:	3008d7fa 	srli	r4,r6,31
 2005d50:	30ce703a 	and	r7,r6,r3
 2005d54:	10c03fcc 	andi	r3,r2,255
 2005d58:	29000115 	stw	r4,4(r5)
 2005d5c:	1800131e 	bne	r3,zero,2005dac <__unpack_f+0x70>
 2005d60:	38000f26 	beq	r7,zero,2005da0 <__unpack_f+0x64>
 2005d64:	380691fa 	slli	r3,r7,7
 2005d68:	01bfe084 	movi	r6,-126
 2005d6c:	008000c4 	movi	r2,3
 2005d70:	01100034 	movhi	r4,16384
 2005d74:	213fffc4 	addi	r4,r4,-1
 2005d78:	28800015 	stw	r2,0(r5)
 2005d7c:	29800215 	stw	r6,8(r5)
 2005d80:	20c00536 	bltu	r4,r3,2005d98 <__unpack_f+0x5c>
 2005d84:	3005883a 	mov	r2,r6
 2005d88:	18c7883a 	add	r3,r3,r3
 2005d8c:	10bfffc4 	addi	r2,r2,-1
 2005d90:	20fffd2e 	bgeu	r4,r3,2005d88 <__unpack_f+0x4c>
 2005d94:	28800215 	stw	r2,8(r5)
 2005d98:	28c00315 	stw	r3,12(r5)
 2005d9c:	f800283a 	ret
 2005da0:	00800084 	movi	r2,2
 2005da4:	28800015 	stw	r2,0(r5)
 2005da8:	f800283a 	ret
 2005dac:	00803fc4 	movi	r2,255
 2005db0:	18800826 	beq	r3,r2,2005dd4 <__unpack_f+0x98>
 2005db4:	380491fa 	slli	r2,r7,7
 2005db8:	18ffe044 	addi	r3,r3,-127
 2005dbc:	28c00215 	stw	r3,8(r5)
 2005dc0:	10900034 	orhi	r2,r2,16384
 2005dc4:	28800315 	stw	r2,12(r5)
 2005dc8:	008000c4 	movi	r2,3
 2005dcc:	28800015 	stw	r2,0(r5)
 2005dd0:	f800283a 	ret
 2005dd4:	3800031e 	bne	r7,zero,2005de4 <__unpack_f+0xa8>
 2005dd8:	00800104 	movi	r2,4
 2005ddc:	28800015 	stw	r2,0(r5)
 2005de0:	f800283a 	ret
 2005de4:	3080042c 	andhi	r2,r6,16
 2005de8:	10000426 	beq	r2,zero,2005dfc <__unpack_f+0xc0>
 2005dec:	00800044 	movi	r2,1
 2005df0:	28800015 	stw	r2,0(r5)
 2005df4:	29c00315 	stw	r7,12(r5)
 2005df8:	f800283a 	ret
 2005dfc:	28000015 	stw	zero,0(r5)
 2005e00:	003ffc06 	br	2005df4 <__unpack_f+0xb8>

02005e04 <__make_fp>:
 2005e04:	defffb04 	addi	sp,sp,-20
 2005e08:	d9000015 	stw	r4,0(sp)
 2005e0c:	d809883a 	mov	r4,sp
 2005e10:	dfc00415 	stw	ra,16(sp)
 2005e14:	d9400115 	stw	r5,4(sp)
 2005e18:	d9800215 	stw	r6,8(sp)
 2005e1c:	d9c00315 	stw	r7,12(sp)
 2005e20:	2005bdc0 	call	2005bdc <__pack_f>
 2005e24:	dfc00417 	ldw	ra,16(sp)
 2005e28:	dec00504 	addi	sp,sp,20
 2005e2c:	f800283a 	ret

02005e30 <__pack_d>:
 2005e30:	20c00017 	ldw	r3,0(r4)
 2005e34:	defffd04 	addi	sp,sp,-12
 2005e38:	dc000015 	stw	r16,0(sp)
 2005e3c:	dc800215 	stw	r18,8(sp)
 2005e40:	dc400115 	stw	r17,4(sp)
 2005e44:	00800044 	movi	r2,1
 2005e48:	22000317 	ldw	r8,12(r4)
 2005e4c:	001f883a 	mov	r15,zero
 2005e50:	22400417 	ldw	r9,16(r4)
 2005e54:	24000117 	ldw	r16,4(r4)
 2005e58:	10c0552e 	bgeu	r2,r3,2005fb0 <__pack_d+0x180>
 2005e5c:	00800104 	movi	r2,4
 2005e60:	18804f26 	beq	r3,r2,2005fa0 <__pack_d+0x170>
 2005e64:	00800084 	movi	r2,2
 2005e68:	18800226 	beq	r3,r2,2005e74 <__pack_d+0x44>
 2005e6c:	4244b03a 	or	r2,r8,r9
 2005e70:	10001a1e 	bne	r2,zero,2005edc <__pack_d+0xac>
 2005e74:	000d883a 	mov	r6,zero
 2005e78:	000f883a 	mov	r7,zero
 2005e7c:	0011883a 	mov	r8,zero
 2005e80:	00800434 	movhi	r2,16
 2005e84:	10bfffc4 	addi	r2,r2,-1
 2005e88:	301d883a 	mov	r14,r6
 2005e8c:	3884703a 	and	r2,r7,r2
 2005e90:	400a953a 	slli	r5,r8,20
 2005e94:	79bffc2c 	andhi	r6,r15,65520
 2005e98:	308cb03a 	or	r6,r6,r2
 2005e9c:	00e00434 	movhi	r3,32784
 2005ea0:	18ffffc4 	addi	r3,r3,-1
 2005ea4:	800497fa 	slli	r2,r16,31
 2005ea8:	30c6703a 	and	r3,r6,r3
 2005eac:	1946b03a 	or	r3,r3,r5
 2005eb0:	01600034 	movhi	r5,32768
 2005eb4:	297fffc4 	addi	r5,r5,-1
 2005eb8:	194a703a 	and	r5,r3,r5
 2005ebc:	288ab03a 	or	r5,r5,r2
 2005ec0:	2807883a 	mov	r3,r5
 2005ec4:	7005883a 	mov	r2,r14
 2005ec8:	dc800217 	ldw	r18,8(sp)
 2005ecc:	dc400117 	ldw	r17,4(sp)
 2005ed0:	dc000017 	ldw	r16,0(sp)
 2005ed4:	dec00304 	addi	sp,sp,12
 2005ed8:	f800283a 	ret
 2005edc:	21000217 	ldw	r4,8(r4)
 2005ee0:	00bf0084 	movi	r2,-1022
 2005ee4:	20803f16 	blt	r4,r2,2005fe4 <__pack_d+0x1b4>
 2005ee8:	0080ffc4 	movi	r2,1023
 2005eec:	11002c16 	blt	r2,r4,2005fa0 <__pack_d+0x170>
 2005ef0:	00803fc4 	movi	r2,255
 2005ef4:	408c703a 	and	r6,r8,r2
 2005ef8:	00802004 	movi	r2,128
 2005efc:	0007883a 	mov	r3,zero
 2005f00:	000f883a 	mov	r7,zero
 2005f04:	2280ffc4 	addi	r10,r4,1023
 2005f08:	30801e26 	beq	r6,r2,2005f84 <__pack_d+0x154>
 2005f0c:	00801fc4 	movi	r2,127
 2005f10:	4089883a 	add	r4,r8,r2
 2005f14:	220d803a 	cmpltu	r6,r4,r8
 2005f18:	324d883a 	add	r6,r6,r9
 2005f1c:	2011883a 	mov	r8,r4
 2005f20:	3013883a 	mov	r9,r6
 2005f24:	00880034 	movhi	r2,8192
 2005f28:	10bfffc4 	addi	r2,r2,-1
 2005f2c:	12400d36 	bltu	r2,r9,2005f64 <__pack_d+0x134>
 2005f30:	4804963a 	slli	r2,r9,24
 2005f34:	400cd23a 	srli	r6,r8,8
 2005f38:	480ed23a 	srli	r7,r9,8
 2005f3c:	013fffc4 	movi	r4,-1
 2005f40:	118cb03a 	or	r6,r2,r6
 2005f44:	01400434 	movhi	r5,16
 2005f48:	297fffc4 	addi	r5,r5,-1
 2005f4c:	3104703a 	and	r2,r6,r4
 2005f50:	3946703a 	and	r3,r7,r5
 2005f54:	5201ffcc 	andi	r8,r10,2047
 2005f58:	100d883a 	mov	r6,r2
 2005f5c:	180f883a 	mov	r7,r3
 2005f60:	003fc706 	br	2005e80 <__pack_d+0x50>
 2005f64:	480897fa 	slli	r4,r9,31
 2005f68:	4004d07a 	srli	r2,r8,1
 2005f6c:	4806d07a 	srli	r3,r9,1
 2005f70:	52800044 	addi	r10,r10,1
 2005f74:	2084b03a 	or	r2,r4,r2
 2005f78:	1011883a 	mov	r8,r2
 2005f7c:	1813883a 	mov	r9,r3
 2005f80:	003feb06 	br	2005f30 <__pack_d+0x100>
 2005f84:	383fe11e 	bne	r7,zero,2005f0c <__pack_d+0xdc>
 2005f88:	01004004 	movi	r4,256
 2005f8c:	4104703a 	and	r2,r8,r4
 2005f90:	10c4b03a 	or	r2,r2,r3
 2005f94:	103fe326 	beq	r2,zero,2005f24 <__pack_d+0xf4>
 2005f98:	3005883a 	mov	r2,r6
 2005f9c:	003fdc06 	br	2005f10 <__pack_d+0xe0>
 2005fa0:	000d883a 	mov	r6,zero
 2005fa4:	000f883a 	mov	r7,zero
 2005fa8:	0201ffc4 	movi	r8,2047
 2005fac:	003fb406 	br	2005e80 <__pack_d+0x50>
 2005fb0:	0005883a 	mov	r2,zero
 2005fb4:	00c00234 	movhi	r3,8
 2005fb8:	408cb03a 	or	r6,r8,r2
 2005fbc:	48ceb03a 	or	r7,r9,r3
 2005fc0:	013fffc4 	movi	r4,-1
 2005fc4:	01400434 	movhi	r5,16
 2005fc8:	297fffc4 	addi	r5,r5,-1
 2005fcc:	3104703a 	and	r2,r6,r4
 2005fd0:	3946703a 	and	r3,r7,r5
 2005fd4:	100d883a 	mov	r6,r2
 2005fd8:	180f883a 	mov	r7,r3
 2005fdc:	0201ffc4 	movi	r8,2047
 2005fe0:	003fa706 	br	2005e80 <__pack_d+0x50>
 2005fe4:	1109c83a 	sub	r4,r2,r4
 2005fe8:	00800e04 	movi	r2,56
 2005fec:	11004316 	blt	r2,r4,20060fc <__pack_d+0x2cc>
 2005ff0:	21fff804 	addi	r7,r4,-32
 2005ff4:	38004516 	blt	r7,zero,200610c <__pack_d+0x2dc>
 2005ff8:	49d8d83a 	srl	r12,r9,r7
 2005ffc:	001b883a 	mov	r13,zero
 2006000:	0023883a 	mov	r17,zero
 2006004:	01400044 	movi	r5,1
 2006008:	0025883a 	mov	r18,zero
 200600c:	38004716 	blt	r7,zero,200612c <__pack_d+0x2fc>
 2006010:	29d6983a 	sll	r11,r5,r7
 2006014:	0015883a 	mov	r10,zero
 2006018:	00bfffc4 	movi	r2,-1
 200601c:	5089883a 	add	r4,r10,r2
 2006020:	588b883a 	add	r5,r11,r2
 2006024:	228d803a 	cmpltu	r6,r4,r10
 2006028:	314b883a 	add	r5,r6,r5
 200602c:	4104703a 	and	r2,r8,r4
 2006030:	4946703a 	and	r3,r9,r5
 2006034:	10c4b03a 	or	r2,r2,r3
 2006038:	10000226 	beq	r2,zero,2006044 <__pack_d+0x214>
 200603c:	04400044 	movi	r17,1
 2006040:	0025883a 	mov	r18,zero
 2006044:	00803fc4 	movi	r2,255
 2006048:	644eb03a 	or	r7,r12,r17
 200604c:	3892703a 	and	r9,r7,r2
 2006050:	00802004 	movi	r2,128
 2006054:	6c90b03a 	or	r8,r13,r18
 2006058:	0015883a 	mov	r10,zero
 200605c:	48801626 	beq	r9,r2,20060b8 <__pack_d+0x288>
 2006060:	01001fc4 	movi	r4,127
 2006064:	3905883a 	add	r2,r7,r4
 2006068:	11cd803a 	cmpltu	r6,r2,r7
 200606c:	320d883a 	add	r6,r6,r8
 2006070:	100f883a 	mov	r7,r2
 2006074:	00840034 	movhi	r2,4096
 2006078:	10bfffc4 	addi	r2,r2,-1
 200607c:	3011883a 	mov	r8,r6
 2006080:	0007883a 	mov	r3,zero
 2006084:	11801b36 	bltu	r2,r6,20060f4 <__pack_d+0x2c4>
 2006088:	4004963a 	slli	r2,r8,24
 200608c:	3808d23a 	srli	r4,r7,8
 2006090:	400ad23a 	srli	r5,r8,8
 2006094:	1813883a 	mov	r9,r3
 2006098:	1108b03a 	or	r4,r2,r4
 200609c:	00bfffc4 	movi	r2,-1
 20060a0:	00c00434 	movhi	r3,16
 20060a4:	18ffffc4 	addi	r3,r3,-1
 20060a8:	208c703a 	and	r6,r4,r2
 20060ac:	28ce703a 	and	r7,r5,r3
 20060b0:	4a01ffcc 	andi	r8,r9,2047
 20060b4:	003f7206 	br	2005e80 <__pack_d+0x50>
 20060b8:	503fe91e 	bne	r10,zero,2006060 <__pack_d+0x230>
 20060bc:	01004004 	movi	r4,256
 20060c0:	3904703a 	and	r2,r7,r4
 20060c4:	0007883a 	mov	r3,zero
 20060c8:	10c4b03a 	or	r2,r2,r3
 20060cc:	10000626 	beq	r2,zero,20060e8 <__pack_d+0x2b8>
 20060d0:	3a45883a 	add	r2,r7,r9
 20060d4:	11cd803a 	cmpltu	r6,r2,r7
 20060d8:	320d883a 	add	r6,r6,r8
 20060dc:	100f883a 	mov	r7,r2
 20060e0:	3011883a 	mov	r8,r6
 20060e4:	0007883a 	mov	r3,zero
 20060e8:	00840034 	movhi	r2,4096
 20060ec:	10bfffc4 	addi	r2,r2,-1
 20060f0:	123fe52e 	bgeu	r2,r8,2006088 <__pack_d+0x258>
 20060f4:	00c00044 	movi	r3,1
 20060f8:	003fe306 	br	2006088 <__pack_d+0x258>
 20060fc:	0009883a 	mov	r4,zero
 2006100:	0013883a 	mov	r9,zero
 2006104:	000b883a 	mov	r5,zero
 2006108:	003fe406 	br	200609c <__pack_d+0x26c>
 200610c:	4a47883a 	add	r3,r9,r9
 2006110:	008007c4 	movi	r2,31
 2006114:	1105c83a 	sub	r2,r2,r4
 2006118:	1886983a 	sll	r3,r3,r2
 200611c:	4118d83a 	srl	r12,r8,r4
 2006120:	491ad83a 	srl	r13,r9,r4
 2006124:	1b18b03a 	or	r12,r3,r12
 2006128:	003fb506 	br	2006000 <__pack_d+0x1d0>
 200612c:	2806d07a 	srli	r3,r5,1
 2006130:	008007c4 	movi	r2,31
 2006134:	1105c83a 	sub	r2,r2,r4
 2006138:	1896d83a 	srl	r11,r3,r2
 200613c:	2914983a 	sll	r10,r5,r4
 2006140:	003fb506 	br	2006018 <__pack_d+0x1e8>

02006144 <__unpack_d>:
 2006144:	20c00117 	ldw	r3,4(r4)
 2006148:	22400017 	ldw	r9,0(r4)
 200614c:	00800434 	movhi	r2,16
 2006150:	10bfffc4 	addi	r2,r2,-1
 2006154:	1808d53a 	srli	r4,r3,20
 2006158:	180cd7fa 	srli	r6,r3,31
 200615c:	1894703a 	and	r10,r3,r2
 2006160:	2201ffcc 	andi	r8,r4,2047
 2006164:	281b883a 	mov	r13,r5
 2006168:	4817883a 	mov	r11,r9
 200616c:	29800115 	stw	r6,4(r5)
 2006170:	5019883a 	mov	r12,r10
 2006174:	40001e1e 	bne	r8,zero,20061f0 <__unpack_d+0xac>
 2006178:	4a84b03a 	or	r2,r9,r10
 200617c:	10001926 	beq	r2,zero,20061e4 <__unpack_d+0xa0>
 2006180:	4804d63a 	srli	r2,r9,24
 2006184:	500c923a 	slli	r6,r10,8
 2006188:	013f0084 	movi	r4,-1022
 200618c:	00c40034 	movhi	r3,4096
 2006190:	18ffffc4 	addi	r3,r3,-1
 2006194:	118cb03a 	or	r6,r2,r6
 2006198:	008000c4 	movi	r2,3
 200619c:	480a923a 	slli	r5,r9,8
 20061a0:	68800015 	stw	r2,0(r13)
 20061a4:	69000215 	stw	r4,8(r13)
 20061a8:	19800b36 	bltu	r3,r6,20061d8 <__unpack_d+0x94>
 20061ac:	200f883a 	mov	r7,r4
 20061b0:	1811883a 	mov	r8,r3
 20061b4:	2945883a 	add	r2,r5,r5
 20061b8:	1149803a 	cmpltu	r4,r2,r5
 20061bc:	3187883a 	add	r3,r6,r6
 20061c0:	20c9883a 	add	r4,r4,r3
 20061c4:	100b883a 	mov	r5,r2
 20061c8:	200d883a 	mov	r6,r4
 20061cc:	39ffffc4 	addi	r7,r7,-1
 20061d0:	413ff82e 	bgeu	r8,r4,20061b4 <__unpack_d+0x70>
 20061d4:	69c00215 	stw	r7,8(r13)
 20061d8:	69800415 	stw	r6,16(r13)
 20061dc:	69400315 	stw	r5,12(r13)
 20061e0:	f800283a 	ret
 20061e4:	00800084 	movi	r2,2
 20061e8:	28800015 	stw	r2,0(r5)
 20061ec:	f800283a 	ret
 20061f0:	0081ffc4 	movi	r2,2047
 20061f4:	40800f26 	beq	r8,r2,2006234 <__unpack_d+0xf0>
 20061f8:	480cd63a 	srli	r6,r9,24
 20061fc:	5006923a 	slli	r3,r10,8
 2006200:	4804923a 	slli	r2,r9,8
 2006204:	0009883a 	mov	r4,zero
 2006208:	30c6b03a 	or	r3,r6,r3
 200620c:	01440034 	movhi	r5,4096
 2006210:	110cb03a 	or	r6,r2,r4
 2006214:	423f0044 	addi	r8,r8,-1023
 2006218:	194eb03a 	or	r7,r3,r5
 200621c:	008000c4 	movi	r2,3
 2006220:	69c00415 	stw	r7,16(r13)
 2006224:	6a000215 	stw	r8,8(r13)
 2006228:	68800015 	stw	r2,0(r13)
 200622c:	69800315 	stw	r6,12(r13)
 2006230:	f800283a 	ret
 2006234:	4a84b03a 	or	r2,r9,r10
 2006238:	1000031e 	bne	r2,zero,2006248 <__unpack_d+0x104>
 200623c:	00800104 	movi	r2,4
 2006240:	28800015 	stw	r2,0(r5)
 2006244:	f800283a 	ret
 2006248:	0009883a 	mov	r4,zero
 200624c:	01400234 	movhi	r5,8
 2006250:	4904703a 	and	r2,r9,r4
 2006254:	5146703a 	and	r3,r10,r5
 2006258:	10c4b03a 	or	r2,r2,r3
 200625c:	10000526 	beq	r2,zero,2006274 <__unpack_d+0x130>
 2006260:	00800044 	movi	r2,1
 2006264:	68800015 	stw	r2,0(r13)
 2006268:	6b000415 	stw	r12,16(r13)
 200626c:	6ac00315 	stw	r11,12(r13)
 2006270:	f800283a 	ret
 2006274:	68000015 	stw	zero,0(r13)
 2006278:	003ffb06 	br	2006268 <__unpack_d+0x124>

0200627c <__fpcmp_parts_d>:
 200627c:	21800017 	ldw	r6,0(r4)
 2006280:	00c00044 	movi	r3,1
 2006284:	19800a2e 	bgeu	r3,r6,20062b0 <__fpcmp_parts_d+0x34>
 2006288:	28800017 	ldw	r2,0(r5)
 200628c:	1880082e 	bgeu	r3,r2,20062b0 <__fpcmp_parts_d+0x34>
 2006290:	00c00104 	movi	r3,4
 2006294:	30c02626 	beq	r6,r3,2006330 <__fpcmp_parts_d+0xb4>
 2006298:	10c02226 	beq	r2,r3,2006324 <__fpcmp_parts_d+0xa8>
 200629c:	00c00084 	movi	r3,2
 20062a0:	30c00526 	beq	r6,r3,20062b8 <__fpcmp_parts_d+0x3c>
 20062a4:	10c0071e 	bne	r2,r3,20062c4 <__fpcmp_parts_d+0x48>
 20062a8:	20800117 	ldw	r2,4(r4)
 20062ac:	1000091e 	bne	r2,zero,20062d4 <__fpcmp_parts_d+0x58>
 20062b0:	00800044 	movi	r2,1
 20062b4:	f800283a 	ret
 20062b8:	10c01a1e 	bne	r2,r3,2006324 <__fpcmp_parts_d+0xa8>
 20062bc:	0005883a 	mov	r2,zero
 20062c0:	f800283a 	ret
 20062c4:	22000117 	ldw	r8,4(r4)
 20062c8:	28800117 	ldw	r2,4(r5)
 20062cc:	40800326 	beq	r8,r2,20062dc <__fpcmp_parts_d+0x60>
 20062d0:	403ff726 	beq	r8,zero,20062b0 <__fpcmp_parts_d+0x34>
 20062d4:	00bfffc4 	movi	r2,-1
 20062d8:	f800283a 	ret
 20062dc:	20c00217 	ldw	r3,8(r4)
 20062e0:	28800217 	ldw	r2,8(r5)
 20062e4:	10fffa16 	blt	r2,r3,20062d0 <__fpcmp_parts_d+0x54>
 20062e8:	18800916 	blt	r3,r2,2006310 <__fpcmp_parts_d+0x94>
 20062ec:	21c00417 	ldw	r7,16(r4)
 20062f0:	28c00417 	ldw	r3,16(r5)
 20062f4:	21800317 	ldw	r6,12(r4)
 20062f8:	28800317 	ldw	r2,12(r5)
 20062fc:	19fff436 	bltu	r3,r7,20062d0 <__fpcmp_parts_d+0x54>
 2006300:	38c00526 	beq	r7,r3,2006318 <__fpcmp_parts_d+0x9c>
 2006304:	38c00236 	bltu	r7,r3,2006310 <__fpcmp_parts_d+0x94>
 2006308:	19ffec1e 	bne	r3,r7,20062bc <__fpcmp_parts_d+0x40>
 200630c:	30bfeb2e 	bgeu	r6,r2,20062bc <__fpcmp_parts_d+0x40>
 2006310:	403fe71e 	bne	r8,zero,20062b0 <__fpcmp_parts_d+0x34>
 2006314:	003fef06 	br	20062d4 <__fpcmp_parts_d+0x58>
 2006318:	11bffa2e 	bgeu	r2,r6,2006304 <__fpcmp_parts_d+0x88>
 200631c:	403fe426 	beq	r8,zero,20062b0 <__fpcmp_parts_d+0x34>
 2006320:	003fec06 	br	20062d4 <__fpcmp_parts_d+0x58>
 2006324:	28800117 	ldw	r2,4(r5)
 2006328:	103fe11e 	bne	r2,zero,20062b0 <__fpcmp_parts_d+0x34>
 200632c:	003fe906 	br	20062d4 <__fpcmp_parts_d+0x58>
 2006330:	11bfdd1e 	bne	r2,r6,20062a8 <__fpcmp_parts_d+0x2c>
 2006334:	28c00117 	ldw	r3,4(r5)
 2006338:	20800117 	ldw	r2,4(r4)
 200633c:	1885c83a 	sub	r2,r3,r2
 2006340:	f800283a 	ret

02006344 <__errno>:
 2006344:	00c080b4 	movhi	r3,514
 2006348:	18cc1704 	addi	r3,r3,12380
 200634c:	18800017 	ldw	r2,0(r3)
 2006350:	f800283a 	ret

02006354 <free>:
 2006354:	008080b4 	movhi	r2,514
 2006358:	108c1704 	addi	r2,r2,12380
 200635c:	200b883a 	mov	r5,r4
 2006360:	11000017 	ldw	r4,0(r2)
 2006364:	200c5501 	jmpi	200c550 <_free_r>

02006368 <malloc>:
 2006368:	008080b4 	movhi	r2,514
 200636c:	108c1704 	addi	r2,r2,12380
 2006370:	200b883a 	mov	r5,r4
 2006374:	11000017 	ldw	r4,0(r2)
 2006378:	200637c1 	jmpi	200637c <_malloc_r>

0200637c <_malloc_r>:
 200637c:	defff604 	addi	sp,sp,-40
 2006380:	28c002c4 	addi	r3,r5,11
 2006384:	00800584 	movi	r2,22
 2006388:	dc800215 	stw	r18,8(sp)
 200638c:	dfc00915 	stw	ra,36(sp)
 2006390:	df000815 	stw	fp,32(sp)
 2006394:	ddc00715 	stw	r23,28(sp)
 2006398:	dd800615 	stw	r22,24(sp)
 200639c:	dd400515 	stw	r21,20(sp)
 20063a0:	dd000415 	stw	r20,16(sp)
 20063a4:	dcc00315 	stw	r19,12(sp)
 20063a8:	dc400115 	stw	r17,4(sp)
 20063ac:	dc000015 	stw	r16,0(sp)
 20063b0:	2025883a 	mov	r18,r4
 20063b4:	10c01236 	bltu	r2,r3,2006400 <_malloc_r+0x84>
 20063b8:	04400404 	movi	r17,16
 20063bc:	8940142e 	bgeu	r17,r5,2006410 <_malloc_r+0x94>
 20063c0:	00800304 	movi	r2,12
 20063c4:	0007883a 	mov	r3,zero
 20063c8:	90800015 	stw	r2,0(r18)
 20063cc:	1805883a 	mov	r2,r3
 20063d0:	dfc00917 	ldw	ra,36(sp)
 20063d4:	df000817 	ldw	fp,32(sp)
 20063d8:	ddc00717 	ldw	r23,28(sp)
 20063dc:	dd800617 	ldw	r22,24(sp)
 20063e0:	dd400517 	ldw	r21,20(sp)
 20063e4:	dd000417 	ldw	r20,16(sp)
 20063e8:	dcc00317 	ldw	r19,12(sp)
 20063ec:	dc800217 	ldw	r18,8(sp)
 20063f0:	dc400117 	ldw	r17,4(sp)
 20063f4:	dc000017 	ldw	r16,0(sp)
 20063f8:	dec00a04 	addi	sp,sp,40
 20063fc:	f800283a 	ret
 2006400:	00bffe04 	movi	r2,-8
 2006404:	18a2703a 	and	r17,r3,r2
 2006408:	883fed16 	blt	r17,zero,20063c0 <_malloc_r+0x44>
 200640c:	897fec36 	bltu	r17,r5,20063c0 <_malloc_r+0x44>
 2006410:	9009883a 	mov	r4,r18
 2006414:	20148900 	call	2014890 <__malloc_lock>
 2006418:	00807dc4 	movi	r2,503
 200641c:	14402b2e 	bgeu	r2,r17,20064cc <_malloc_r+0x150>
 2006420:	8806d27a 	srli	r3,r17,9
 2006424:	18003f1e 	bne	r3,zero,2006524 <_malloc_r+0x1a8>
 2006428:	880cd0fa 	srli	r6,r17,3
 200642c:	300490fa 	slli	r2,r6,3
 2006430:	02c080b4 	movhi	r11,514
 2006434:	5ac65004 	addi	r11,r11,6464
 2006438:	12cb883a 	add	r5,r2,r11
 200643c:	2c000317 	ldw	r16,12(r5)
 2006440:	580f883a 	mov	r7,r11
 2006444:	2c00041e 	bne	r5,r16,2006458 <_malloc_r+0xdc>
 2006448:	00000a06 	br	2006474 <_malloc_r+0xf8>
 200644c:	1800860e 	bge	r3,zero,2006668 <_malloc_r+0x2ec>
 2006450:	84000317 	ldw	r16,12(r16)
 2006454:	2c000726 	beq	r5,r16,2006474 <_malloc_r+0xf8>
 2006458:	80800117 	ldw	r2,4(r16)
 200645c:	00ffff04 	movi	r3,-4
 2006460:	10c8703a 	and	r4,r2,r3
 2006464:	2447c83a 	sub	r3,r4,r17
 2006468:	008003c4 	movi	r2,15
 200646c:	10fff70e 	bge	r2,r3,200644c <_malloc_r+0xd0>
 2006470:	31bfffc4 	addi	r6,r6,-1
 2006474:	32400044 	addi	r9,r6,1
 2006478:	028080b4 	movhi	r10,514
 200647c:	52865204 	addi	r10,r10,6472
 2006480:	54000217 	ldw	r16,8(r10)
 2006484:	8280a026 	beq	r16,r10,2006708 <_malloc_r+0x38c>
 2006488:	80800117 	ldw	r2,4(r16)
 200648c:	00ffff04 	movi	r3,-4
 2006490:	10ca703a 	and	r5,r2,r3
 2006494:	2c4dc83a 	sub	r6,r5,r17
 2006498:	008003c4 	movi	r2,15
 200649c:	11808316 	blt	r2,r6,20066ac <_malloc_r+0x330>
 20064a0:	52800315 	stw	r10,12(r10)
 20064a4:	52800215 	stw	r10,8(r10)
 20064a8:	30002916 	blt	r6,zero,2006550 <_malloc_r+0x1d4>
 20064ac:	8147883a 	add	r3,r16,r5
 20064b0:	18800117 	ldw	r2,4(r3)
 20064b4:	9009883a 	mov	r4,r18
 20064b8:	10800054 	ori	r2,r2,1
 20064bc:	18800115 	stw	r2,4(r3)
 20064c0:	20149980 	call	2014998 <__malloc_unlock>
 20064c4:	80c00204 	addi	r3,r16,8
 20064c8:	003fc006 	br	20063cc <_malloc_r+0x50>
 20064cc:	02c080b4 	movhi	r11,514
 20064d0:	5ac65004 	addi	r11,r11,6464
 20064d4:	8ac5883a 	add	r2,r17,r11
 20064d8:	14000317 	ldw	r16,12(r2)
 20064dc:	580f883a 	mov	r7,r11
 20064e0:	8806d0fa 	srli	r3,r17,3
 20064e4:	14006c26 	beq	r2,r16,2006698 <_malloc_r+0x31c>
 20064e8:	80c00117 	ldw	r3,4(r16)
 20064ec:	00bfff04 	movi	r2,-4
 20064f0:	81800317 	ldw	r6,12(r16)
 20064f4:	1886703a 	and	r3,r3,r2
 20064f8:	80c7883a 	add	r3,r16,r3
 20064fc:	18800117 	ldw	r2,4(r3)
 2006500:	81400217 	ldw	r5,8(r16)
 2006504:	9009883a 	mov	r4,r18
 2006508:	10800054 	ori	r2,r2,1
 200650c:	18800115 	stw	r2,4(r3)
 2006510:	31400215 	stw	r5,8(r6)
 2006514:	29800315 	stw	r6,12(r5)
 2006518:	20149980 	call	2014998 <__malloc_unlock>
 200651c:	80c00204 	addi	r3,r16,8
 2006520:	003faa06 	br	20063cc <_malloc_r+0x50>
 2006524:	00800104 	movi	r2,4
 2006528:	10c0052e 	bgeu	r2,r3,2006540 <_malloc_r+0x1c4>
 200652c:	00800504 	movi	r2,20
 2006530:	10c07836 	bltu	r2,r3,2006714 <_malloc_r+0x398>
 2006534:	198016c4 	addi	r6,r3,91
 2006538:	300490fa 	slli	r2,r6,3
 200653c:	003fbc06 	br	2006430 <_malloc_r+0xb4>
 2006540:	8804d1ba 	srli	r2,r17,6
 2006544:	11800e04 	addi	r6,r2,56
 2006548:	300490fa 	slli	r2,r6,3
 200654c:	003fb806 	br	2006430 <_malloc_r+0xb4>
 2006550:	00807fc4 	movi	r2,511
 2006554:	1140bb36 	bltu	r2,r5,2006844 <_malloc_r+0x4c8>
 2006558:	2806d0fa 	srli	r3,r5,3
 200655c:	573ffe04 	addi	fp,r10,-8
 2006560:	00800044 	movi	r2,1
 2006564:	180890fa 	slli	r4,r3,3
 2006568:	1807d0ba 	srai	r3,r3,2
 200656c:	e1c00117 	ldw	r7,4(fp)
 2006570:	5909883a 	add	r4,r11,r4
 2006574:	21400217 	ldw	r5,8(r4)
 2006578:	10c4983a 	sll	r2,r2,r3
 200657c:	81000315 	stw	r4,12(r16)
 2006580:	81400215 	stw	r5,8(r16)
 2006584:	388eb03a 	or	r7,r7,r2
 2006588:	2c000315 	stw	r16,12(r5)
 200658c:	24000215 	stw	r16,8(r4)
 2006590:	e1c00115 	stw	r7,4(fp)
 2006594:	4807883a 	mov	r3,r9
 2006598:	4800cd16 	blt	r9,zero,20068d0 <_malloc_r+0x554>
 200659c:	1807d0ba 	srai	r3,r3,2
 20065a0:	00800044 	movi	r2,1
 20065a4:	10c8983a 	sll	r4,r2,r3
 20065a8:	39004436 	bltu	r7,r4,20066bc <_malloc_r+0x340>
 20065ac:	21c4703a 	and	r2,r4,r7
 20065b0:	10000a1e 	bne	r2,zero,20065dc <_malloc_r+0x260>
 20065b4:	2109883a 	add	r4,r4,r4
 20065b8:	00bfff04 	movi	r2,-4
 20065bc:	4884703a 	and	r2,r9,r2
 20065c0:	3906703a 	and	r3,r7,r4
 20065c4:	12400104 	addi	r9,r2,4
 20065c8:	1800041e 	bne	r3,zero,20065dc <_malloc_r+0x260>
 20065cc:	2109883a 	add	r4,r4,r4
 20065d0:	3904703a 	and	r2,r7,r4
 20065d4:	4a400104 	addi	r9,r9,4
 20065d8:	103ffc26 	beq	r2,zero,20065cc <_malloc_r+0x250>
 20065dc:	480490fa 	slli	r2,r9,3
 20065e0:	4819883a 	mov	r12,r9
 20065e4:	023fff04 	movi	r8,-4
 20065e8:	589b883a 	add	r13,r11,r2
 20065ec:	6807883a 	mov	r3,r13
 20065f0:	014003c4 	movi	r5,15
 20065f4:	1c000317 	ldw	r16,12(r3)
 20065f8:	1c00041e 	bne	r3,r16,200660c <_malloc_r+0x290>
 20065fc:	0000a706 	br	200689c <_malloc_r+0x520>
 2006600:	3000ab0e 	bge	r6,zero,20068b0 <_malloc_r+0x534>
 2006604:	84000317 	ldw	r16,12(r16)
 2006608:	1c00a426 	beq	r3,r16,200689c <_malloc_r+0x520>
 200660c:	80800117 	ldw	r2,4(r16)
 2006610:	1204703a 	and	r2,r2,r8
 2006614:	144dc83a 	sub	r6,r2,r17
 2006618:	29bff90e 	bge	r5,r6,2006600 <_malloc_r+0x284>
 200661c:	81000317 	ldw	r4,12(r16)
 2006620:	80c00217 	ldw	r3,8(r16)
 2006624:	89400054 	ori	r5,r17,1
 2006628:	8445883a 	add	r2,r16,r17
 200662c:	20c00215 	stw	r3,8(r4)
 2006630:	19000315 	stw	r4,12(r3)
 2006634:	81400115 	stw	r5,4(r16)
 2006638:	1187883a 	add	r3,r2,r6
 200663c:	31000054 	ori	r4,r6,1
 2006640:	50800315 	stw	r2,12(r10)
 2006644:	50800215 	stw	r2,8(r10)
 2006648:	19800015 	stw	r6,0(r3)
 200664c:	11000115 	stw	r4,4(r2)
 2006650:	12800215 	stw	r10,8(r2)
 2006654:	12800315 	stw	r10,12(r2)
 2006658:	9009883a 	mov	r4,r18
 200665c:	20149980 	call	2014998 <__malloc_unlock>
 2006660:	80c00204 	addi	r3,r16,8
 2006664:	003f5906 	br	20063cc <_malloc_r+0x50>
 2006668:	8109883a 	add	r4,r16,r4
 200666c:	20800117 	ldw	r2,4(r4)
 2006670:	80c00217 	ldw	r3,8(r16)
 2006674:	81400317 	ldw	r5,12(r16)
 2006678:	10800054 	ori	r2,r2,1
 200667c:	20800115 	stw	r2,4(r4)
 2006680:	28c00215 	stw	r3,8(r5)
 2006684:	19400315 	stw	r5,12(r3)
 2006688:	9009883a 	mov	r4,r18
 200668c:	20149980 	call	2014998 <__malloc_unlock>
 2006690:	80c00204 	addi	r3,r16,8
 2006694:	003f4d06 	br	20063cc <_malloc_r+0x50>
 2006698:	80800204 	addi	r2,r16,8
 200669c:	14000317 	ldw	r16,12(r2)
 20066a0:	143f911e 	bne	r2,r16,20064e8 <_malloc_r+0x16c>
 20066a4:	1a400084 	addi	r9,r3,2
 20066a8:	003f7306 	br	2006478 <_malloc_r+0xfc>
 20066ac:	88c00054 	ori	r3,r17,1
 20066b0:	8445883a 	add	r2,r16,r17
 20066b4:	80c00115 	stw	r3,4(r16)
 20066b8:	003fdf06 	br	2006638 <_malloc_r+0x2bc>
 20066bc:	e4000217 	ldw	r16,8(fp)
 20066c0:	00bfff04 	movi	r2,-4
 20066c4:	80c00117 	ldw	r3,4(r16)
 20066c8:	802d883a 	mov	r22,r16
 20066cc:	18aa703a 	and	r21,r3,r2
 20066d0:	ac401636 	bltu	r21,r17,200672c <_malloc_r+0x3b0>
 20066d4:	ac49c83a 	sub	r4,r21,r17
 20066d8:	008003c4 	movi	r2,15
 20066dc:	1100130e 	bge	r2,r4,200672c <_malloc_r+0x3b0>
 20066e0:	88800054 	ori	r2,r17,1
 20066e4:	8447883a 	add	r3,r16,r17
 20066e8:	80800115 	stw	r2,4(r16)
 20066ec:	20800054 	ori	r2,r4,1
 20066f0:	18800115 	stw	r2,4(r3)
 20066f4:	e0c00215 	stw	r3,8(fp)
 20066f8:	9009883a 	mov	r4,r18
 20066fc:	20149980 	call	2014998 <__malloc_unlock>
 2006700:	80c00204 	addi	r3,r16,8
 2006704:	003f3106 	br	20063cc <_malloc_r+0x50>
 2006708:	39c00117 	ldw	r7,4(r7)
 200670c:	573ffe04 	addi	fp,r10,-8
 2006710:	003fa006 	br	2006594 <_malloc_r+0x218>
 2006714:	00801504 	movi	r2,84
 2006718:	10c06736 	bltu	r2,r3,20068b8 <_malloc_r+0x53c>
 200671c:	8804d33a 	srli	r2,r17,12
 2006720:	11801b84 	addi	r6,r2,110
 2006724:	300490fa 	slli	r2,r6,3
 2006728:	003f4106 	br	2006430 <_malloc_r+0xb4>
 200672c:	d0a7af17 	ldw	r2,-24900(gp)
 2006730:	d0e00417 	ldw	r3,-32752(gp)
 2006734:	053fffc4 	movi	r20,-1
 2006738:	10800404 	addi	r2,r2,16
 200673c:	88a7883a 	add	r19,r17,r2
 2006740:	1d000326 	beq	r3,r20,2006750 <_malloc_r+0x3d4>
 2006744:	98c3ffc4 	addi	r3,r19,4095
 2006748:	00bc0004 	movi	r2,-4096
 200674c:	18a6703a 	and	r19,r3,r2
 2006750:	9009883a 	mov	r4,r18
 2006754:	980b883a 	mov	r5,r19
 2006758:	2006be80 	call	2006be8 <_sbrk_r>
 200675c:	1009883a 	mov	r4,r2
 2006760:	15000426 	beq	r2,r20,2006774 <_malloc_r+0x3f8>
 2006764:	854b883a 	add	r5,r16,r21
 2006768:	1029883a 	mov	r20,r2
 200676c:	11405a2e 	bgeu	r2,r5,20068d8 <_malloc_r+0x55c>
 2006770:	87000c26 	beq	r16,fp,20067a4 <_malloc_r+0x428>
 2006774:	e4000217 	ldw	r16,8(fp)
 2006778:	80c00117 	ldw	r3,4(r16)
 200677c:	00bfff04 	movi	r2,-4
 2006780:	1884703a 	and	r2,r3,r2
 2006784:	14400336 	bltu	r2,r17,2006794 <_malloc_r+0x418>
 2006788:	1449c83a 	sub	r4,r2,r17
 200678c:	008003c4 	movi	r2,15
 2006790:	113fd316 	blt	r2,r4,20066e0 <_malloc_r+0x364>
 2006794:	9009883a 	mov	r4,r18
 2006798:	20149980 	call	2014998 <__malloc_unlock>
 200679c:	0007883a 	mov	r3,zero
 20067a0:	003f0a06 	br	20063cc <_malloc_r+0x50>
 20067a4:	05c080b4 	movhi	r23,514
 20067a8:	bdd3eb04 	addi	r23,r23,20396
 20067ac:	b8800017 	ldw	r2,0(r23)
 20067b0:	988d883a 	add	r6,r19,r2
 20067b4:	b9800015 	stw	r6,0(r23)
 20067b8:	d0e00417 	ldw	r3,-32752(gp)
 20067bc:	00bfffc4 	movi	r2,-1
 20067c0:	18808e26 	beq	r3,r2,20069fc <_malloc_r+0x680>
 20067c4:	2145c83a 	sub	r2,r4,r5
 20067c8:	3085883a 	add	r2,r6,r2
 20067cc:	b8800015 	stw	r2,0(r23)
 20067d0:	20c001cc 	andi	r3,r4,7
 20067d4:	18005f1e 	bne	r3,zero,2006954 <_malloc_r+0x5d8>
 20067d8:	000b883a 	mov	r5,zero
 20067dc:	a4c5883a 	add	r2,r20,r19
 20067e0:	1083ffcc 	andi	r2,r2,4095
 20067e4:	00c40004 	movi	r3,4096
 20067e8:	1887c83a 	sub	r3,r3,r2
 20067ec:	28e7883a 	add	r19,r5,r3
 20067f0:	9009883a 	mov	r4,r18
 20067f4:	980b883a 	mov	r5,r19
 20067f8:	2006be80 	call	2006be8 <_sbrk_r>
 20067fc:	1007883a 	mov	r3,r2
 2006800:	00bfffc4 	movi	r2,-1
 2006804:	18807a26 	beq	r3,r2,20069f0 <_malloc_r+0x674>
 2006808:	1d05c83a 	sub	r2,r3,r20
 200680c:	9885883a 	add	r2,r19,r2
 2006810:	10c00054 	ori	r3,r2,1
 2006814:	b8800017 	ldw	r2,0(r23)
 2006818:	a021883a 	mov	r16,r20
 200681c:	a0c00115 	stw	r3,4(r20)
 2006820:	9885883a 	add	r2,r19,r2
 2006824:	b8800015 	stw	r2,0(r23)
 2006828:	e5000215 	stw	r20,8(fp)
 200682c:	b7003626 	beq	r22,fp,2006908 <_malloc_r+0x58c>
 2006830:	018003c4 	movi	r6,15
 2006834:	35404b36 	bltu	r6,r21,2006964 <_malloc_r+0x5e8>
 2006838:	00800044 	movi	r2,1
 200683c:	a0800115 	stw	r2,4(r20)
 2006840:	003fcd06 	br	2006778 <_malloc_r+0x3fc>
 2006844:	2808d27a 	srli	r4,r5,9
 2006848:	2000371e 	bne	r4,zero,2006928 <_malloc_r+0x5ac>
 200684c:	2808d0fa 	srli	r4,r5,3
 2006850:	200690fa 	slli	r3,r4,3
 2006854:	1ad1883a 	add	r8,r3,r11
 2006858:	41800217 	ldw	r6,8(r8)
 200685c:	41805b26 	beq	r8,r6,20069cc <_malloc_r+0x650>
 2006860:	30800117 	ldw	r2,4(r6)
 2006864:	00ffff04 	movi	r3,-4
 2006868:	10c4703a 	and	r2,r2,r3
 200686c:	2880022e 	bgeu	r5,r2,2006878 <_malloc_r+0x4fc>
 2006870:	31800217 	ldw	r6,8(r6)
 2006874:	41bffa1e 	bne	r8,r6,2006860 <_malloc_r+0x4e4>
 2006878:	32000317 	ldw	r8,12(r6)
 200687c:	39c00117 	ldw	r7,4(r7)
 2006880:	82000315 	stw	r8,12(r16)
 2006884:	81800215 	stw	r6,8(r16)
 2006888:	070080b4 	movhi	fp,514
 200688c:	e7065004 	addi	fp,fp,6464
 2006890:	34000315 	stw	r16,12(r6)
 2006894:	44000215 	stw	r16,8(r8)
 2006898:	003f3e06 	br	2006594 <_malloc_r+0x218>
 200689c:	63000044 	addi	r12,r12,1
 20068a0:	608000cc 	andi	r2,r12,3
 20068a4:	10005d26 	beq	r2,zero,2006a1c <_malloc_r+0x6a0>
 20068a8:	18c00204 	addi	r3,r3,8
 20068ac:	003f5106 	br	20065f4 <_malloc_r+0x278>
 20068b0:	8089883a 	add	r4,r16,r2
 20068b4:	003f6d06 	br	200666c <_malloc_r+0x2f0>
 20068b8:	00805504 	movi	r2,340
 20068bc:	10c02036 	bltu	r2,r3,2006940 <_malloc_r+0x5c4>
 20068c0:	8804d3fa 	srli	r2,r17,15
 20068c4:	11801dc4 	addi	r6,r2,119
 20068c8:	300490fa 	slli	r2,r6,3
 20068cc:	003ed806 	br	2006430 <_malloc_r+0xb4>
 20068d0:	48c000c4 	addi	r3,r9,3
 20068d4:	003f3106 	br	200659c <_malloc_r+0x220>
 20068d8:	05c080b4 	movhi	r23,514
 20068dc:	bdd3eb04 	addi	r23,r23,20396
 20068e0:	b8800017 	ldw	r2,0(r23)
 20068e4:	988d883a 	add	r6,r19,r2
 20068e8:	b9800015 	stw	r6,0(r23)
 20068ec:	293fb21e 	bne	r5,r4,20067b8 <_malloc_r+0x43c>
 20068f0:	2083ffcc 	andi	r2,r4,4095
 20068f4:	103fb01e 	bne	r2,zero,20067b8 <_malloc_r+0x43c>
 20068f8:	e4000217 	ldw	r16,8(fp)
 20068fc:	9d45883a 	add	r2,r19,r21
 2006900:	10800054 	ori	r2,r2,1
 2006904:	80800115 	stw	r2,4(r16)
 2006908:	b8c00017 	ldw	r3,0(r23)
 200690c:	d0a7b017 	ldw	r2,-24896(gp)
 2006910:	10c0012e 	bgeu	r2,r3,2006918 <_malloc_r+0x59c>
 2006914:	d0e7b015 	stw	r3,-24896(gp)
 2006918:	d0a7b117 	ldw	r2,-24892(gp)
 200691c:	10ff962e 	bgeu	r2,r3,2006778 <_malloc_r+0x3fc>
 2006920:	d0e7b115 	stw	r3,-24892(gp)
 2006924:	003f9406 	br	2006778 <_malloc_r+0x3fc>
 2006928:	00800104 	movi	r2,4
 200692c:	11001e36 	bltu	r2,r4,20069a8 <_malloc_r+0x62c>
 2006930:	2804d1ba 	srli	r2,r5,6
 2006934:	11000e04 	addi	r4,r2,56
 2006938:	200690fa 	slli	r3,r4,3
 200693c:	003fc506 	br	2006854 <_malloc_r+0x4d8>
 2006940:	00815504 	movi	r2,1364
 2006944:	10c01d2e 	bgeu	r2,r3,20069bc <_malloc_r+0x640>
 2006948:	01801f84 	movi	r6,126
 200694c:	0080fc04 	movi	r2,1008
 2006950:	003eb706 	br	2006430 <_malloc_r+0xb4>
 2006954:	00800204 	movi	r2,8
 2006958:	10cbc83a 	sub	r5,r2,r3
 200695c:	2169883a 	add	r20,r4,r5
 2006960:	003f9e06 	br	20067dc <_malloc_r+0x460>
 2006964:	00bffe04 	movi	r2,-8
 2006968:	a93ffd04 	addi	r4,r21,-12
 200696c:	2088703a 	and	r4,r4,r2
 2006970:	b10b883a 	add	r5,r22,r4
 2006974:	00c00144 	movi	r3,5
 2006978:	28c00215 	stw	r3,8(r5)
 200697c:	28c00115 	stw	r3,4(r5)
 2006980:	b0800117 	ldw	r2,4(r22)
 2006984:	1080004c 	andi	r2,r2,1
 2006988:	2084b03a 	or	r2,r4,r2
 200698c:	b0800115 	stw	r2,4(r22)
 2006990:	313fdd2e 	bgeu	r6,r4,2006908 <_malloc_r+0x58c>
 2006994:	b1400204 	addi	r5,r22,8
 2006998:	9009883a 	mov	r4,r18
 200699c:	200c5500 	call	200c550 <_free_r>
 20069a0:	e4000217 	ldw	r16,8(fp)
 20069a4:	003fd806 	br	2006908 <_malloc_r+0x58c>
 20069a8:	00800504 	movi	r2,20
 20069ac:	11001536 	bltu	r2,r4,2006a04 <_malloc_r+0x688>
 20069b0:	210016c4 	addi	r4,r4,91
 20069b4:	200690fa 	slli	r3,r4,3
 20069b8:	003fa606 	br	2006854 <_malloc_r+0x4d8>
 20069bc:	8804d4ba 	srli	r2,r17,18
 20069c0:	11801f04 	addi	r6,r2,124
 20069c4:	300490fa 	slli	r2,r6,3
 20069c8:	003e9906 	br	2006430 <_malloc_r+0xb4>
 20069cc:	2009d0ba 	srai	r4,r4,2
 20069d0:	014080b4 	movhi	r5,514
 20069d4:	29465004 	addi	r5,r5,6464
 20069d8:	00c00044 	movi	r3,1
 20069dc:	28800117 	ldw	r2,4(r5)
 20069e0:	1906983a 	sll	r3,r3,r4
 20069e4:	10c4b03a 	or	r2,r2,r3
 20069e8:	28800115 	stw	r2,4(r5)
 20069ec:	003fa306 	br	200687c <_malloc_r+0x500>
 20069f0:	0027883a 	mov	r19,zero
 20069f4:	00c00044 	movi	r3,1
 20069f8:	003f8606 	br	2006814 <_malloc_r+0x498>
 20069fc:	d1200415 	stw	r4,-32752(gp)
 2006a00:	003f7306 	br	20067d0 <_malloc_r+0x454>
 2006a04:	00801504 	movi	r2,84
 2006a08:	11001936 	bltu	r2,r4,2006a70 <_malloc_r+0x6f4>
 2006a0c:	2804d33a 	srli	r2,r5,12
 2006a10:	11001b84 	addi	r4,r2,110
 2006a14:	200690fa 	slli	r3,r4,3
 2006a18:	003f8e06 	br	2006854 <_malloc_r+0x4d8>
 2006a1c:	480b883a 	mov	r5,r9
 2006a20:	6807883a 	mov	r3,r13
 2006a24:	288000cc 	andi	r2,r5,3
 2006a28:	18fffe04 	addi	r3,r3,-8
 2006a2c:	297fffc4 	addi	r5,r5,-1
 2006a30:	10001526 	beq	r2,zero,2006a88 <_malloc_r+0x70c>
 2006a34:	18800217 	ldw	r2,8(r3)
 2006a38:	10fffa26 	beq	r2,r3,2006a24 <_malloc_r+0x6a8>
 2006a3c:	2109883a 	add	r4,r4,r4
 2006a40:	393f1e36 	bltu	r7,r4,20066bc <_malloc_r+0x340>
 2006a44:	203f1d26 	beq	r4,zero,20066bc <_malloc_r+0x340>
 2006a48:	21c4703a 	and	r2,r4,r7
 2006a4c:	10000226 	beq	r2,zero,2006a58 <_malloc_r+0x6dc>
 2006a50:	6013883a 	mov	r9,r12
 2006a54:	003ee106 	br	20065dc <_malloc_r+0x260>
 2006a58:	2109883a 	add	r4,r4,r4
 2006a5c:	3904703a 	and	r2,r7,r4
 2006a60:	63000104 	addi	r12,r12,4
 2006a64:	103ffc26 	beq	r2,zero,2006a58 <_malloc_r+0x6dc>
 2006a68:	6013883a 	mov	r9,r12
 2006a6c:	003edb06 	br	20065dc <_malloc_r+0x260>
 2006a70:	00805504 	movi	r2,340
 2006a74:	11000836 	bltu	r2,r4,2006a98 <_malloc_r+0x71c>
 2006a78:	2804d3fa 	srli	r2,r5,15
 2006a7c:	11001dc4 	addi	r4,r2,119
 2006a80:	200690fa 	slli	r3,r4,3
 2006a84:	003f7306 	br	2006854 <_malloc_r+0x4d8>
 2006a88:	0104303a 	nor	r2,zero,r4
 2006a8c:	388e703a 	and	r7,r7,r2
 2006a90:	e1c00115 	stw	r7,4(fp)
 2006a94:	003fe906 	br	2006a3c <_malloc_r+0x6c0>
 2006a98:	00815504 	movi	r2,1364
 2006a9c:	1100032e 	bgeu	r2,r4,2006aac <_malloc_r+0x730>
 2006aa0:	01001f84 	movi	r4,126
 2006aa4:	00c0fc04 	movi	r3,1008
 2006aa8:	003f6a06 	br	2006854 <_malloc_r+0x4d8>
 2006aac:	2804d4ba 	srli	r2,r5,18
 2006ab0:	11001f04 	addi	r4,r2,124
 2006ab4:	200690fa 	slli	r3,r4,3
 2006ab8:	003f6606 	br	2006854 <_malloc_r+0x4d8>

02006abc <printf>:
 2006abc:	defffb04 	addi	sp,sp,-20
 2006ac0:	dfc00115 	stw	ra,4(sp)
 2006ac4:	d9400215 	stw	r5,8(sp)
 2006ac8:	d9800315 	stw	r6,12(sp)
 2006acc:	d9c00415 	stw	r7,16(sp)
 2006ad0:	008080b4 	movhi	r2,514
 2006ad4:	108c1704 	addi	r2,r2,12380
 2006ad8:	10c00017 	ldw	r3,0(r2)
 2006adc:	200b883a 	mov	r5,r4
 2006ae0:	d8800204 	addi	r2,sp,8
 2006ae4:	19000217 	ldw	r4,8(r3)
 2006ae8:	100d883a 	mov	r6,r2
 2006aec:	d8800015 	stw	r2,0(sp)
 2006af0:	2008c4c0 	call	2008c4c <__vfprintf_internal>
 2006af4:	dfc00117 	ldw	ra,4(sp)
 2006af8:	dec00504 	addi	sp,sp,20
 2006afc:	f800283a 	ret

02006b00 <_printf_r>:
 2006b00:	defffc04 	addi	sp,sp,-16
 2006b04:	dfc00115 	stw	ra,4(sp)
 2006b08:	d9800215 	stw	r6,8(sp)
 2006b0c:	d9c00315 	stw	r7,12(sp)
 2006b10:	280d883a 	mov	r6,r5
 2006b14:	21400217 	ldw	r5,8(r4)
 2006b18:	d8c00204 	addi	r3,sp,8
 2006b1c:	180f883a 	mov	r7,r3
 2006b20:	d8c00015 	stw	r3,0(sp)
 2006b24:	2006da00 	call	2006da0 <___vfprintf_internal_r>
 2006b28:	dfc00117 	ldw	ra,4(sp)
 2006b2c:	dec00404 	addi	sp,sp,16
 2006b30:	f800283a 	ret

02006b34 <_puts_r>:
 2006b34:	defff604 	addi	sp,sp,-40
 2006b38:	dc400715 	stw	r17,28(sp)
 2006b3c:	2023883a 	mov	r17,r4
 2006b40:	2809883a 	mov	r4,r5
 2006b44:	dfc00915 	stw	ra,36(sp)
 2006b48:	dcc00815 	stw	r19,32(sp)
 2006b4c:	2827883a 	mov	r19,r5
 2006b50:	2006cd40 	call	2006cd4 <strlen>
 2006b54:	89400217 	ldw	r5,8(r17)
 2006b58:	00c080b4 	movhi	r3,514
 2006b5c:	18c33d04 	addi	r3,r3,3316
 2006b60:	01c00044 	movi	r7,1
 2006b64:	12000044 	addi	r8,r2,1
 2006b68:	d8c00515 	stw	r3,20(sp)
 2006b6c:	d9c00615 	stw	r7,24(sp)
 2006b70:	d8c00304 	addi	r3,sp,12
 2006b74:	01c00084 	movi	r7,2
 2006b78:	8809883a 	mov	r4,r17
 2006b7c:	d80d883a 	mov	r6,sp
 2006b80:	d8c00015 	stw	r3,0(sp)
 2006b84:	dcc00315 	stw	r19,12(sp)
 2006b88:	da000215 	stw	r8,8(sp)
 2006b8c:	d9c00115 	stw	r7,4(sp)
 2006b90:	d8800415 	stw	r2,16(sp)
 2006b94:	200c8640 	call	200c864 <__sfvwrite_r>
 2006b98:	00ffffc4 	movi	r3,-1
 2006b9c:	10000626 	beq	r2,zero,2006bb8 <_puts_r+0x84>
 2006ba0:	1805883a 	mov	r2,r3
 2006ba4:	dfc00917 	ldw	ra,36(sp)
 2006ba8:	dcc00817 	ldw	r19,32(sp)
 2006bac:	dc400717 	ldw	r17,28(sp)
 2006bb0:	dec00a04 	addi	sp,sp,40
 2006bb4:	f800283a 	ret
 2006bb8:	00c00284 	movi	r3,10
 2006bbc:	1805883a 	mov	r2,r3
 2006bc0:	dfc00917 	ldw	ra,36(sp)
 2006bc4:	dcc00817 	ldw	r19,32(sp)
 2006bc8:	dc400717 	ldw	r17,28(sp)
 2006bcc:	dec00a04 	addi	sp,sp,40
 2006bd0:	f800283a 	ret

02006bd4 <puts>:
 2006bd4:	008080b4 	movhi	r2,514
 2006bd8:	108c1704 	addi	r2,r2,12380
 2006bdc:	200b883a 	mov	r5,r4
 2006be0:	11000017 	ldw	r4,0(r2)
 2006be4:	2006b341 	jmpi	2006b34 <_puts_r>

02006be8 <_sbrk_r>:
 2006be8:	defffd04 	addi	sp,sp,-12
 2006bec:	dc000015 	stw	r16,0(sp)
 2006bf0:	040080b4 	movhi	r16,514
 2006bf4:	8413c804 	addi	r16,r16,20256
 2006bf8:	dc400115 	stw	r17,4(sp)
 2006bfc:	80000015 	stw	zero,0(r16)
 2006c00:	2023883a 	mov	r17,r4
 2006c04:	2809883a 	mov	r4,r5
 2006c08:	dfc00215 	stw	ra,8(sp)
 2006c0c:	201428c0 	call	201428c <sbrk>
 2006c10:	1007883a 	mov	r3,r2
 2006c14:	00bfffc4 	movi	r2,-1
 2006c18:	18800626 	beq	r3,r2,2006c34 <_sbrk_r+0x4c>
 2006c1c:	1805883a 	mov	r2,r3
 2006c20:	dfc00217 	ldw	ra,8(sp)
 2006c24:	dc400117 	ldw	r17,4(sp)
 2006c28:	dc000017 	ldw	r16,0(sp)
 2006c2c:	dec00304 	addi	sp,sp,12
 2006c30:	f800283a 	ret
 2006c34:	80800017 	ldw	r2,0(r16)
 2006c38:	103ff826 	beq	r2,zero,2006c1c <_sbrk_r+0x34>
 2006c3c:	88800015 	stw	r2,0(r17)
 2006c40:	1805883a 	mov	r2,r3
 2006c44:	dfc00217 	ldw	ra,8(sp)
 2006c48:	dc400117 	ldw	r17,4(sp)
 2006c4c:	dc000017 	ldw	r16,0(sp)
 2006c50:	dec00304 	addi	sp,sp,12
 2006c54:	f800283a 	ret

02006c58 <_scanf_r>:
 2006c58:	defffc04 	addi	sp,sp,-16
 2006c5c:	dfc00115 	stw	ra,4(sp)
 2006c60:	d9800215 	stw	r6,8(sp)
 2006c64:	d9c00315 	stw	r7,12(sp)
 2006c68:	280d883a 	mov	r6,r5
 2006c6c:	21400117 	ldw	r5,4(r4)
 2006c70:	d8c00204 	addi	r3,sp,8
 2006c74:	180f883a 	mov	r7,r3
 2006c78:	d8c00015 	stw	r3,0(sp)
 2006c7c:	2008c700 	call	2008c70 <__svfscanf_r>
 2006c80:	dfc00117 	ldw	ra,4(sp)
 2006c84:	dec00404 	addi	sp,sp,16
 2006c88:	f800283a 	ret

02006c8c <scanf>:
 2006c8c:	defffb04 	addi	sp,sp,-20
 2006c90:	dfc00115 	stw	ra,4(sp)
 2006c94:	d9400215 	stw	r5,8(sp)
 2006c98:	d9800315 	stw	r6,12(sp)
 2006c9c:	d9c00415 	stw	r7,16(sp)
 2006ca0:	008080b4 	movhi	r2,514
 2006ca4:	108c1704 	addi	r2,r2,12380
 2006ca8:	11400017 	ldw	r5,0(r2)
 2006cac:	200d883a 	mov	r6,r4
 2006cb0:	d8800204 	addi	r2,sp,8
 2006cb4:	2809883a 	mov	r4,r5
 2006cb8:	29400117 	ldw	r5,4(r5)
 2006cbc:	100f883a 	mov	r7,r2
 2006cc0:	d8800015 	stw	r2,0(sp)
 2006cc4:	2008c700 	call	2008c70 <__svfscanf_r>
 2006cc8:	dfc00117 	ldw	ra,4(sp)
 2006ccc:	dec00504 	addi	sp,sp,20
 2006cd0:	f800283a 	ret

02006cd4 <strlen>:
 2006cd4:	208000cc 	andi	r2,r4,3
 2006cd8:	2011883a 	mov	r8,r4
 2006cdc:	1000161e 	bne	r2,zero,2006d38 <strlen+0x64>
 2006ce0:	20c00017 	ldw	r3,0(r4)
 2006ce4:	017fbff4 	movhi	r5,65279
 2006ce8:	297fbfc4 	addi	r5,r5,-257
 2006cec:	01e02074 	movhi	r7,32897
 2006cf0:	39e02004 	addi	r7,r7,-32640
 2006cf4:	1945883a 	add	r2,r3,r5
 2006cf8:	11c4703a 	and	r2,r2,r7
 2006cfc:	00c6303a 	nor	r3,zero,r3
 2006d00:	1886703a 	and	r3,r3,r2
 2006d04:	18000c1e 	bne	r3,zero,2006d38 <strlen+0x64>
 2006d08:	280d883a 	mov	r6,r5
 2006d0c:	380b883a 	mov	r5,r7
 2006d10:	21000104 	addi	r4,r4,4
 2006d14:	20800017 	ldw	r2,0(r4)
 2006d18:	1187883a 	add	r3,r2,r6
 2006d1c:	1946703a 	and	r3,r3,r5
 2006d20:	0084303a 	nor	r2,zero,r2
 2006d24:	10c4703a 	and	r2,r2,r3
 2006d28:	103ff926 	beq	r2,zero,2006d10 <strlen+0x3c>
 2006d2c:	20800007 	ldb	r2,0(r4)
 2006d30:	10000326 	beq	r2,zero,2006d40 <strlen+0x6c>
 2006d34:	21000044 	addi	r4,r4,1
 2006d38:	20800007 	ldb	r2,0(r4)
 2006d3c:	103ffd1e 	bne	r2,zero,2006d34 <strlen+0x60>
 2006d40:	2205c83a 	sub	r2,r4,r8
 2006d44:	f800283a 	ret

02006d48 <__sprint_r>:
 2006d48:	30800217 	ldw	r2,8(r6)
 2006d4c:	defffe04 	addi	sp,sp,-8
 2006d50:	dc000015 	stw	r16,0(sp)
 2006d54:	dfc00115 	stw	ra,4(sp)
 2006d58:	3021883a 	mov	r16,r6
 2006d5c:	0007883a 	mov	r3,zero
 2006d60:	1000061e 	bne	r2,zero,2006d7c <__sprint_r+0x34>
 2006d64:	1805883a 	mov	r2,r3
 2006d68:	30000115 	stw	zero,4(r6)
 2006d6c:	dfc00117 	ldw	ra,4(sp)
 2006d70:	dc000017 	ldw	r16,0(sp)
 2006d74:	dec00204 	addi	sp,sp,8
 2006d78:	f800283a 	ret
 2006d7c:	200c8640 	call	200c864 <__sfvwrite_r>
 2006d80:	1007883a 	mov	r3,r2
 2006d84:	1805883a 	mov	r2,r3
 2006d88:	80000115 	stw	zero,4(r16)
 2006d8c:	80000215 	stw	zero,8(r16)
 2006d90:	dfc00117 	ldw	ra,4(sp)
 2006d94:	dc000017 	ldw	r16,0(sp)
 2006d98:	dec00204 	addi	sp,sp,8
 2006d9c:	f800283a 	ret

02006da0 <___vfprintf_internal_r>:
 2006da0:	defea404 	addi	sp,sp,-1392
 2006da4:	dd815815 	stw	r22,1376(sp)
 2006da8:	dc015215 	stw	r16,1352(sp)
 2006dac:	d9c15115 	stw	r7,1348(sp)
 2006db0:	dfc15b15 	stw	ra,1388(sp)
 2006db4:	df015a15 	stw	fp,1384(sp)
 2006db8:	ddc15915 	stw	r23,1380(sp)
 2006dbc:	dd415715 	stw	r21,1372(sp)
 2006dc0:	dd015615 	stw	r20,1368(sp)
 2006dc4:	dcc15515 	stw	r19,1364(sp)
 2006dc8:	dc815415 	stw	r18,1360(sp)
 2006dcc:	dc415315 	stw	r17,1356(sp)
 2006dd0:	282d883a 	mov	r22,r5
 2006dd4:	3021883a 	mov	r16,r6
 2006dd8:	d9014f15 	stw	r4,1340(sp)
 2006ddc:	200ceb40 	call	200ceb4 <_localeconv_r>
 2006de0:	10800017 	ldw	r2,0(r2)
 2006de4:	d9c15117 	ldw	r7,1348(sp)
 2006de8:	d8814915 	stw	r2,1316(sp)
 2006dec:	d8814f17 	ldw	r2,1340(sp)
 2006df0:	10000226 	beq	r2,zero,2006dfc <___vfprintf_internal_r+0x5c>
 2006df4:	10800e17 	ldw	r2,56(r2)
 2006df8:	10020d26 	beq	r2,zero,2007630 <___vfprintf_internal_r+0x890>
 2006dfc:	b080030b 	ldhu	r2,12(r22)
 2006e00:	1080020c 	andi	r2,r2,8
 2006e04:	10020e26 	beq	r2,zero,2007640 <___vfprintf_internal_r+0x8a0>
 2006e08:	b0800417 	ldw	r2,16(r22)
 2006e0c:	10020c26 	beq	r2,zero,2007640 <___vfprintf_internal_r+0x8a0>
 2006e10:	b200030b 	ldhu	r8,12(r22)
 2006e14:	00800284 	movi	r2,10
 2006e18:	40c0068c 	andi	r3,r8,26
 2006e1c:	18802f1e 	bne	r3,r2,2006edc <___vfprintf_internal_r+0x13c>
 2006e20:	b080038f 	ldh	r2,14(r22)
 2006e24:	10002d16 	blt	r2,zero,2006edc <___vfprintf_internal_r+0x13c>
 2006e28:	b240038b 	ldhu	r9,14(r22)
 2006e2c:	b2800717 	ldw	r10,28(r22)
 2006e30:	b2c00917 	ldw	r11,36(r22)
 2006e34:	d9014f17 	ldw	r4,1340(sp)
 2006e38:	dc402904 	addi	r17,sp,164
 2006e3c:	d8804004 	addi	r2,sp,256
 2006e40:	00c10004 	movi	r3,1024
 2006e44:	423fff4c 	andi	r8,r8,65533
 2006e48:	800d883a 	mov	r6,r16
 2006e4c:	880b883a 	mov	r5,r17
 2006e50:	da002c0d 	sth	r8,176(sp)
 2006e54:	da402c8d 	sth	r9,178(sp)
 2006e58:	da803015 	stw	r10,192(sp)
 2006e5c:	dac03215 	stw	r11,200(sp)
 2006e60:	d8802d15 	stw	r2,180(sp)
 2006e64:	d8c02e15 	stw	r3,184(sp)
 2006e68:	d8802915 	stw	r2,164(sp)
 2006e6c:	d8c02b15 	stw	r3,172(sp)
 2006e70:	d8002f15 	stw	zero,188(sp)
 2006e74:	2006da00 	call	2006da0 <___vfprintf_internal_r>
 2006e78:	d8814b15 	stw	r2,1324(sp)
 2006e7c:	10000416 	blt	r2,zero,2006e90 <___vfprintf_internal_r+0xf0>
 2006e80:	d9014f17 	ldw	r4,1340(sp)
 2006e84:	880b883a 	mov	r5,r17
 2006e88:	200bcf80 	call	200bcf8 <_fflush_r>
 2006e8c:	1002321e 	bne	r2,zero,2007758 <___vfprintf_internal_r+0x9b8>
 2006e90:	d8802c0b 	ldhu	r2,176(sp)
 2006e94:	1080100c 	andi	r2,r2,64
 2006e98:	10000326 	beq	r2,zero,2006ea8 <___vfprintf_internal_r+0x108>
 2006e9c:	b080030b 	ldhu	r2,12(r22)
 2006ea0:	10801014 	ori	r2,r2,64
 2006ea4:	b080030d 	sth	r2,12(r22)
 2006ea8:	d8814b17 	ldw	r2,1324(sp)
 2006eac:	dfc15b17 	ldw	ra,1388(sp)
 2006eb0:	df015a17 	ldw	fp,1384(sp)
 2006eb4:	ddc15917 	ldw	r23,1380(sp)
 2006eb8:	dd815817 	ldw	r22,1376(sp)
 2006ebc:	dd415717 	ldw	r21,1372(sp)
 2006ec0:	dd015617 	ldw	r20,1368(sp)
 2006ec4:	dcc15517 	ldw	r19,1364(sp)
 2006ec8:	dc815417 	ldw	r18,1360(sp)
 2006ecc:	dc415317 	ldw	r17,1356(sp)
 2006ed0:	dc015217 	ldw	r16,1352(sp)
 2006ed4:	dec15c04 	addi	sp,sp,1392
 2006ed8:	f800283a 	ret
 2006edc:	0005883a 	mov	r2,zero
 2006ee0:	0007883a 	mov	r3,zero
 2006ee4:	dd401904 	addi	r21,sp,100
 2006ee8:	d8814215 	stw	r2,1288(sp)
 2006eec:	802f883a 	mov	r23,r16
 2006ef0:	d8c14315 	stw	r3,1292(sp)
 2006ef4:	d8014b15 	stw	zero,1324(sp)
 2006ef8:	d8014815 	stw	zero,1312(sp)
 2006efc:	d8014415 	stw	zero,1296(sp)
 2006f00:	d8014715 	stw	zero,1308(sp)
 2006f04:	dd400c15 	stw	r21,48(sp)
 2006f08:	d8000e15 	stw	zero,56(sp)
 2006f0c:	d8000d15 	stw	zero,52(sp)
 2006f10:	b8800007 	ldb	r2,0(r23)
 2006f14:	10001926 	beq	r2,zero,2006f7c <___vfprintf_internal_r+0x1dc>
 2006f18:	00c00944 	movi	r3,37
 2006f1c:	10c01726 	beq	r2,r3,2006f7c <___vfprintf_internal_r+0x1dc>
 2006f20:	b821883a 	mov	r16,r23
 2006f24:	00000106 	br	2006f2c <___vfprintf_internal_r+0x18c>
 2006f28:	10c00326 	beq	r2,r3,2006f38 <___vfprintf_internal_r+0x198>
 2006f2c:	84000044 	addi	r16,r16,1
 2006f30:	80800007 	ldb	r2,0(r16)
 2006f34:	103ffc1e 	bne	r2,zero,2006f28 <___vfprintf_internal_r+0x188>
 2006f38:	85e7c83a 	sub	r19,r16,r23
 2006f3c:	98000e26 	beq	r19,zero,2006f78 <___vfprintf_internal_r+0x1d8>
 2006f40:	dc800e17 	ldw	r18,56(sp)
 2006f44:	dc400d17 	ldw	r17,52(sp)
 2006f48:	008001c4 	movi	r2,7
 2006f4c:	94e5883a 	add	r18,r18,r19
 2006f50:	8c400044 	addi	r17,r17,1
 2006f54:	adc00015 	stw	r23,0(r21)
 2006f58:	dc800e15 	stw	r18,56(sp)
 2006f5c:	acc00115 	stw	r19,4(r21)
 2006f60:	dc400d15 	stw	r17,52(sp)
 2006f64:	14428b16 	blt	r2,r17,2007994 <___vfprintf_internal_r+0xbf4>
 2006f68:	ad400204 	addi	r21,r21,8
 2006f6c:	d9014b17 	ldw	r4,1324(sp)
 2006f70:	24c9883a 	add	r4,r4,r19
 2006f74:	d9014b15 	stw	r4,1324(sp)
 2006f78:	802f883a 	mov	r23,r16
 2006f7c:	b8800007 	ldb	r2,0(r23)
 2006f80:	10013c26 	beq	r2,zero,2007474 <___vfprintf_internal_r+0x6d4>
 2006f84:	bdc00044 	addi	r23,r23,1
 2006f88:	d8000405 	stb	zero,16(sp)
 2006f8c:	b8c00007 	ldb	r3,0(r23)
 2006f90:	04ffffc4 	movi	r19,-1
 2006f94:	d8014c15 	stw	zero,1328(sp)
 2006f98:	d8014a15 	stw	zero,1320(sp)
 2006f9c:	d8c14d15 	stw	r3,1332(sp)
 2006fa0:	bdc00044 	addi	r23,r23,1
 2006fa4:	d9414d17 	ldw	r5,1332(sp)
 2006fa8:	00801604 	movi	r2,88
 2006fac:	28fff804 	addi	r3,r5,-32
 2006fb0:	10c06036 	bltu	r2,r3,2007134 <___vfprintf_internal_r+0x394>
 2006fb4:	18c5883a 	add	r2,r3,r3
 2006fb8:	1085883a 	add	r2,r2,r2
 2006fbc:	00c08034 	movhi	r3,512
 2006fc0:	18dbf404 	addi	r3,r3,28624
 2006fc4:	10c5883a 	add	r2,r2,r3
 2006fc8:	11000017 	ldw	r4,0(r2)
 2006fcc:	2000683a 	jmp	r4
 2006fd0:	02007f44 	movi	r8,509
 2006fd4:	02007134 	movhi	r8,452
 2006fd8:	02007134 	movhi	r8,452
 2006fdc:	02007f30 	cmpltui	r8,zero,508
 2006fe0:	02007134 	movhi	r8,452
 2006fe4:	02007134 	movhi	r8,452
 2006fe8:	02007134 	movhi	r8,452
 2006fec:	02007134 	movhi	r8,452
 2006ff0:	02007134 	movhi	r8,452
 2006ff4:	02007134 	movhi	r8,452
 2006ff8:	02007d10 	cmplti	r8,zero,500
 2006ffc:	02007f20 	cmpeqi	r8,zero,508
 2007000:	02007134 	movhi	r8,452
 2007004:	02007d28 	cmpgeui	r8,zero,500
 2007008:	02007fbc 	xorhi	r8,zero,510
 200700c:	02007134 	movhi	r8,452
 2007010:	02007fa8 	cmpgeui	r8,zero,510
 2007014:	02007f70 	cmpltui	r8,zero,509
 2007018:	02007f70 	cmpltui	r8,zero,509
 200701c:	02007f70 	cmpltui	r8,zero,509
 2007020:	02007f70 	cmpltui	r8,zero,509
 2007024:	02007f70 	cmpltui	r8,zero,509
 2007028:	02007f70 	cmpltui	r8,zero,509
 200702c:	02007f70 	cmpltui	r8,zero,509
 2007030:	02007f70 	cmpltui	r8,zero,509
 2007034:	02007f70 	cmpltui	r8,zero,509
 2007038:	02007134 	movhi	r8,452
 200703c:	02007134 	movhi	r8,452
 2007040:	02007134 	movhi	r8,452
 2007044:	02007134 	movhi	r8,452
 2007048:	02007134 	movhi	r8,452
 200704c:	02007134 	movhi	r8,452
 2007050:	02007134 	movhi	r8,452
 2007054:	02007134 	movhi	r8,452
 2007058:	02007134 	movhi	r8,452
 200705c:	02007134 	movhi	r8,452
 2007060:	0200778c 	andi	r8,zero,478
 2007064:	02007df8 	rdprs	r8,zero,503
 2007068:	02007134 	movhi	r8,452
 200706c:	02007df8 	rdprs	r8,zero,503
 2007070:	02007134 	movhi	r8,452
 2007074:	02007134 	movhi	r8,452
 2007078:	02007134 	movhi	r8,452
 200707c:	02007134 	movhi	r8,452
 2007080:	02007f5c 	xori	r8,zero,509
 2007084:	02007134 	movhi	r8,452
 2007088:	02007134 	movhi	r8,452
 200708c:	02007840 	call	200784 <OSCtxSw_SWITCH_PC+0x200744>
 2007090:	02007134 	movhi	r8,452
 2007094:	02007134 	movhi	r8,452
 2007098:	02007134 	movhi	r8,452
 200709c:	02007134 	movhi	r8,452
 20070a0:	02007134 	movhi	r8,452
 20070a4:	0200788c 	andi	r8,zero,482
 20070a8:	02007134 	movhi	r8,452
 20070ac:	02007134 	movhi	r8,452
 20070b0:	02007eac 	andhi	r8,zero,506
 20070b4:	02007134 	movhi	r8,452
 20070b8:	02007134 	movhi	r8,452
 20070bc:	02007134 	movhi	r8,452
 20070c0:	02007134 	movhi	r8,452
 20070c4:	02007134 	movhi	r8,452
 20070c8:	02007134 	movhi	r8,452
 20070cc:	02007134 	movhi	r8,452
 20070d0:	02007134 	movhi	r8,452
 20070d4:	02007134 	movhi	r8,452
 20070d8:	02007134 	movhi	r8,452
 20070dc:	02007e80 	call	2007e8 <OSCtxSw_SWITCH_PC+0x2007a8>
 20070e0:	02007798 	cmpnei	r8,zero,478
 20070e4:	02007df8 	rdprs	r8,zero,503
 20070e8:	02007df8 	rdprs	r8,zero,503
 20070ec:	02007df8 	rdprs	r8,zero,503
 20070f0:	02007de4 	muli	r8,zero,503
 20070f4:	02007798 	cmpnei	r8,zero,478
 20070f8:	02007134 	movhi	r8,452
 20070fc:	02007134 	movhi	r8,452
 2007100:	02007d6c 	andhi	r8,zero,501
 2007104:	02007134 	movhi	r8,452
 2007108:	02007d3c 	xorhi	r8,zero,500
 200710c:	0200784c 	andi	r8,zero,481
 2007110:	02007d9c 	xori	r8,zero,502
 2007114:	02007d88 	cmpgei	r8,zero,502
 2007118:	02007134 	movhi	r8,452
 200711c:	02008018 	cmpnei	r8,zero,512
 2007120:	02007134 	movhi	r8,452
 2007124:	02007898 	cmpnei	r8,zero,482
 2007128:	02007134 	movhi	r8,452
 200712c:	02007134 	movhi	r8,452
 2007130:	02007f10 	cmplti	r8,zero,508
 2007134:	d9014d17 	ldw	r4,1332(sp)
 2007138:	2000ce26 	beq	r4,zero,2007474 <___vfprintf_internal_r+0x6d4>
 200713c:	01400044 	movi	r5,1
 2007140:	d9800f04 	addi	r6,sp,60
 2007144:	d9c14015 	stw	r7,1280(sp)
 2007148:	d9414515 	stw	r5,1300(sp)
 200714c:	d9814115 	stw	r6,1284(sp)
 2007150:	280f883a 	mov	r7,r5
 2007154:	d9000f05 	stb	r4,60(sp)
 2007158:	d8000405 	stb	zero,16(sp)
 200715c:	d8014615 	stw	zero,1304(sp)
 2007160:	d8c14c17 	ldw	r3,1328(sp)
 2007164:	1880008c 	andi	r2,r3,2
 2007168:	1005003a 	cmpeq	r2,r2,zero
 200716c:	d8815015 	stw	r2,1344(sp)
 2007170:	1000031e 	bne	r2,zero,2007180 <___vfprintf_internal_r+0x3e0>
 2007174:	d9014517 	ldw	r4,1300(sp)
 2007178:	21000084 	addi	r4,r4,2
 200717c:	d9014515 	stw	r4,1300(sp)
 2007180:	d9414c17 	ldw	r5,1328(sp)
 2007184:	2940210c 	andi	r5,r5,132
 2007188:	d9414e15 	stw	r5,1336(sp)
 200718c:	28002d1e 	bne	r5,zero,2007244 <___vfprintf_internal_r+0x4a4>
 2007190:	d9814a17 	ldw	r6,1320(sp)
 2007194:	d8814517 	ldw	r2,1300(sp)
 2007198:	30a1c83a 	sub	r16,r6,r2
 200719c:	0400290e 	bge	zero,r16,2007244 <___vfprintf_internal_r+0x4a4>
 20071a0:	00800404 	movi	r2,16
 20071a4:	1404580e 	bge	r2,r16,2008308 <___vfprintf_internal_r+0x1568>
 20071a8:	dc800e17 	ldw	r18,56(sp)
 20071ac:	dc400d17 	ldw	r17,52(sp)
 20071b0:	1027883a 	mov	r19,r2
 20071b4:	070080b4 	movhi	fp,514
 20071b8:	e7035984 	addi	fp,fp,3430
 20071bc:	050001c4 	movi	r20,7
 20071c0:	00000306 	br	20071d0 <___vfprintf_internal_r+0x430>
 20071c4:	843ffc04 	addi	r16,r16,-16
 20071c8:	ad400204 	addi	r21,r21,8
 20071cc:	9c00130e 	bge	r19,r16,200721c <___vfprintf_internal_r+0x47c>
 20071d0:	94800404 	addi	r18,r18,16
 20071d4:	8c400044 	addi	r17,r17,1
 20071d8:	af000015 	stw	fp,0(r21)
 20071dc:	acc00115 	stw	r19,4(r21)
 20071e0:	dc800e15 	stw	r18,56(sp)
 20071e4:	dc400d15 	stw	r17,52(sp)
 20071e8:	a47ff60e 	bge	r20,r17,20071c4 <___vfprintf_internal_r+0x424>
 20071ec:	d9014f17 	ldw	r4,1340(sp)
 20071f0:	b00b883a 	mov	r5,r22
 20071f4:	d9800c04 	addi	r6,sp,48
 20071f8:	d9c15115 	stw	r7,1348(sp)
 20071fc:	2006d480 	call	2006d48 <__sprint_r>
 2007200:	d9c15117 	ldw	r7,1348(sp)
 2007204:	10009e1e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007208:	843ffc04 	addi	r16,r16,-16
 200720c:	dc800e17 	ldw	r18,56(sp)
 2007210:	dc400d17 	ldw	r17,52(sp)
 2007214:	dd401904 	addi	r21,sp,100
 2007218:	9c3fed16 	blt	r19,r16,20071d0 <___vfprintf_internal_r+0x430>
 200721c:	9425883a 	add	r18,r18,r16
 2007220:	8c400044 	addi	r17,r17,1
 2007224:	008001c4 	movi	r2,7
 2007228:	af000015 	stw	fp,0(r21)
 200722c:	ac000115 	stw	r16,4(r21)
 2007230:	dc800e15 	stw	r18,56(sp)
 2007234:	dc400d15 	stw	r17,52(sp)
 2007238:	1441f516 	blt	r2,r17,2007a10 <___vfprintf_internal_r+0xc70>
 200723c:	ad400204 	addi	r21,r21,8
 2007240:	00000206 	br	200724c <___vfprintf_internal_r+0x4ac>
 2007244:	dc800e17 	ldw	r18,56(sp)
 2007248:	dc400d17 	ldw	r17,52(sp)
 200724c:	d8800407 	ldb	r2,16(sp)
 2007250:	10000b26 	beq	r2,zero,2007280 <___vfprintf_internal_r+0x4e0>
 2007254:	00800044 	movi	r2,1
 2007258:	94800044 	addi	r18,r18,1
 200725c:	8c400044 	addi	r17,r17,1
 2007260:	a8800115 	stw	r2,4(r21)
 2007264:	d8c00404 	addi	r3,sp,16
 2007268:	008001c4 	movi	r2,7
 200726c:	a8c00015 	stw	r3,0(r21)
 2007270:	dc800e15 	stw	r18,56(sp)
 2007274:	dc400d15 	stw	r17,52(sp)
 2007278:	1441da16 	blt	r2,r17,20079e4 <___vfprintf_internal_r+0xc44>
 200727c:	ad400204 	addi	r21,r21,8
 2007280:	d9015017 	ldw	r4,1344(sp)
 2007284:	20000b1e 	bne	r4,zero,20072b4 <___vfprintf_internal_r+0x514>
 2007288:	d8800444 	addi	r2,sp,17
 200728c:	94800084 	addi	r18,r18,2
 2007290:	8c400044 	addi	r17,r17,1
 2007294:	a8800015 	stw	r2,0(r21)
 2007298:	00c00084 	movi	r3,2
 200729c:	008001c4 	movi	r2,7
 20072a0:	a8c00115 	stw	r3,4(r21)
 20072a4:	dc800e15 	stw	r18,56(sp)
 20072a8:	dc400d15 	stw	r17,52(sp)
 20072ac:	1441c216 	blt	r2,r17,20079b8 <___vfprintf_internal_r+0xc18>
 20072b0:	ad400204 	addi	r21,r21,8
 20072b4:	d9414e17 	ldw	r5,1336(sp)
 20072b8:	00802004 	movi	r2,128
 20072bc:	2880b126 	beq	r5,r2,2007584 <___vfprintf_internal_r+0x7e4>
 20072c0:	d8c14617 	ldw	r3,1304(sp)
 20072c4:	19e1c83a 	sub	r16,r3,r7
 20072c8:	0400260e 	bge	zero,r16,2007364 <___vfprintf_internal_r+0x5c4>
 20072cc:	00800404 	movi	r2,16
 20072d0:	1403c90e 	bge	r2,r16,20081f8 <___vfprintf_internal_r+0x1458>
 20072d4:	1027883a 	mov	r19,r2
 20072d8:	070080b4 	movhi	fp,514
 20072dc:	e7035584 	addi	fp,fp,3414
 20072e0:	050001c4 	movi	r20,7
 20072e4:	00000306 	br	20072f4 <___vfprintf_internal_r+0x554>
 20072e8:	843ffc04 	addi	r16,r16,-16
 20072ec:	ad400204 	addi	r21,r21,8
 20072f0:	9c00130e 	bge	r19,r16,2007340 <___vfprintf_internal_r+0x5a0>
 20072f4:	94800404 	addi	r18,r18,16
 20072f8:	8c400044 	addi	r17,r17,1
 20072fc:	af000015 	stw	fp,0(r21)
 2007300:	acc00115 	stw	r19,4(r21)
 2007304:	dc800e15 	stw	r18,56(sp)
 2007308:	dc400d15 	stw	r17,52(sp)
 200730c:	a47ff60e 	bge	r20,r17,20072e8 <___vfprintf_internal_r+0x548>
 2007310:	d9014f17 	ldw	r4,1340(sp)
 2007314:	b00b883a 	mov	r5,r22
 2007318:	d9800c04 	addi	r6,sp,48
 200731c:	d9c15115 	stw	r7,1348(sp)
 2007320:	2006d480 	call	2006d48 <__sprint_r>
 2007324:	d9c15117 	ldw	r7,1348(sp)
 2007328:	1000551e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 200732c:	843ffc04 	addi	r16,r16,-16
 2007330:	dc800e17 	ldw	r18,56(sp)
 2007334:	dc400d17 	ldw	r17,52(sp)
 2007338:	dd401904 	addi	r21,sp,100
 200733c:	9c3fed16 	blt	r19,r16,20072f4 <___vfprintf_internal_r+0x554>
 2007340:	9425883a 	add	r18,r18,r16
 2007344:	8c400044 	addi	r17,r17,1
 2007348:	008001c4 	movi	r2,7
 200734c:	af000015 	stw	fp,0(r21)
 2007350:	ac000115 	stw	r16,4(r21)
 2007354:	dc800e15 	stw	r18,56(sp)
 2007358:	dc400d15 	stw	r17,52(sp)
 200735c:	14418216 	blt	r2,r17,2007968 <___vfprintf_internal_r+0xbc8>
 2007360:	ad400204 	addi	r21,r21,8
 2007364:	d9014c17 	ldw	r4,1328(sp)
 2007368:	2080400c 	andi	r2,r4,256
 200736c:	10004a1e 	bne	r2,zero,2007498 <___vfprintf_internal_r+0x6f8>
 2007370:	d9414117 	ldw	r5,1284(sp)
 2007374:	91e5883a 	add	r18,r18,r7
 2007378:	8c400044 	addi	r17,r17,1
 200737c:	008001c4 	movi	r2,7
 2007380:	a9400015 	stw	r5,0(r21)
 2007384:	a9c00115 	stw	r7,4(r21)
 2007388:	dc800e15 	stw	r18,56(sp)
 200738c:	dc400d15 	stw	r17,52(sp)
 2007390:	14416716 	blt	r2,r17,2007930 <___vfprintf_internal_r+0xb90>
 2007394:	a8c00204 	addi	r3,r21,8
 2007398:	d9814c17 	ldw	r6,1328(sp)
 200739c:	3080010c 	andi	r2,r6,4
 20073a0:	10002826 	beq	r2,zero,2007444 <___vfprintf_internal_r+0x6a4>
 20073a4:	d8814a17 	ldw	r2,1320(sp)
 20073a8:	d9014517 	ldw	r4,1300(sp)
 20073ac:	1121c83a 	sub	r16,r2,r4
 20073b0:	0400240e 	bge	zero,r16,2007444 <___vfprintf_internal_r+0x6a4>
 20073b4:	00800404 	movi	r2,16
 20073b8:	14044f0e 	bge	r2,r16,20084f8 <___vfprintf_internal_r+0x1758>
 20073bc:	dc400d17 	ldw	r17,52(sp)
 20073c0:	1027883a 	mov	r19,r2
 20073c4:	070080b4 	movhi	fp,514
 20073c8:	e7035984 	addi	fp,fp,3430
 20073cc:	050001c4 	movi	r20,7
 20073d0:	00000306 	br	20073e0 <___vfprintf_internal_r+0x640>
 20073d4:	843ffc04 	addi	r16,r16,-16
 20073d8:	18c00204 	addi	r3,r3,8
 20073dc:	9c00110e 	bge	r19,r16,2007424 <___vfprintf_internal_r+0x684>
 20073e0:	94800404 	addi	r18,r18,16
 20073e4:	8c400044 	addi	r17,r17,1
 20073e8:	1f000015 	stw	fp,0(r3)
 20073ec:	1cc00115 	stw	r19,4(r3)
 20073f0:	dc800e15 	stw	r18,56(sp)
 20073f4:	dc400d15 	stw	r17,52(sp)
 20073f8:	a47ff60e 	bge	r20,r17,20073d4 <___vfprintf_internal_r+0x634>
 20073fc:	d9014f17 	ldw	r4,1340(sp)
 2007400:	b00b883a 	mov	r5,r22
 2007404:	d9800c04 	addi	r6,sp,48
 2007408:	2006d480 	call	2006d48 <__sprint_r>
 200740c:	10001c1e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007410:	843ffc04 	addi	r16,r16,-16
 2007414:	dc800e17 	ldw	r18,56(sp)
 2007418:	dc400d17 	ldw	r17,52(sp)
 200741c:	d8c01904 	addi	r3,sp,100
 2007420:	9c3fef16 	blt	r19,r16,20073e0 <___vfprintf_internal_r+0x640>
 2007424:	9425883a 	add	r18,r18,r16
 2007428:	8c400044 	addi	r17,r17,1
 200742c:	008001c4 	movi	r2,7
 2007430:	1f000015 	stw	fp,0(r3)
 2007434:	1c000115 	stw	r16,4(r3)
 2007438:	dc800e15 	stw	r18,56(sp)
 200743c:	dc400d15 	stw	r17,52(sp)
 2007440:	1440cb16 	blt	r2,r17,2007770 <___vfprintf_internal_r+0x9d0>
 2007444:	d8814a17 	ldw	r2,1320(sp)
 2007448:	d9414517 	ldw	r5,1300(sp)
 200744c:	1140010e 	bge	r2,r5,2007454 <___vfprintf_internal_r+0x6b4>
 2007450:	2805883a 	mov	r2,r5
 2007454:	d9814b17 	ldw	r6,1324(sp)
 2007458:	308d883a 	add	r6,r6,r2
 200745c:	d9814b15 	stw	r6,1324(sp)
 2007460:	90013b1e 	bne	r18,zero,2007950 <___vfprintf_internal_r+0xbb0>
 2007464:	d9c14017 	ldw	r7,1280(sp)
 2007468:	dd401904 	addi	r21,sp,100
 200746c:	d8000d15 	stw	zero,52(sp)
 2007470:	003ea706 	br	2006f10 <___vfprintf_internal_r+0x170>
 2007474:	d8800e17 	ldw	r2,56(sp)
 2007478:	10053f1e 	bne	r2,zero,2008978 <___vfprintf_internal_r+0x1bd8>
 200747c:	d8000d15 	stw	zero,52(sp)
 2007480:	b080030b 	ldhu	r2,12(r22)
 2007484:	1080100c 	andi	r2,r2,64
 2007488:	103e8726 	beq	r2,zero,2006ea8 <___vfprintf_internal_r+0x108>
 200748c:	00bfffc4 	movi	r2,-1
 2007490:	d8814b15 	stw	r2,1324(sp)
 2007494:	003e8406 	br	2006ea8 <___vfprintf_internal_r+0x108>
 2007498:	d9814d17 	ldw	r6,1332(sp)
 200749c:	00801944 	movi	r2,101
 20074a0:	11806e16 	blt	r2,r6,200765c <___vfprintf_internal_r+0x8bc>
 20074a4:	d9414717 	ldw	r5,1308(sp)
 20074a8:	00c00044 	movi	r3,1
 20074ac:	1943430e 	bge	r3,r5,20081bc <___vfprintf_internal_r+0x141c>
 20074b0:	d8814117 	ldw	r2,1284(sp)
 20074b4:	94800044 	addi	r18,r18,1
 20074b8:	8c400044 	addi	r17,r17,1
 20074bc:	a8800015 	stw	r2,0(r21)
 20074c0:	008001c4 	movi	r2,7
 20074c4:	a8c00115 	stw	r3,4(r21)
 20074c8:	dc800e15 	stw	r18,56(sp)
 20074cc:	dc400d15 	stw	r17,52(sp)
 20074d0:	1441ca16 	blt	r2,r17,2007bfc <___vfprintf_internal_r+0xe5c>
 20074d4:	a8c00204 	addi	r3,r21,8
 20074d8:	d9014917 	ldw	r4,1316(sp)
 20074dc:	00800044 	movi	r2,1
 20074e0:	94800044 	addi	r18,r18,1
 20074e4:	8c400044 	addi	r17,r17,1
 20074e8:	18800115 	stw	r2,4(r3)
 20074ec:	008001c4 	movi	r2,7
 20074f0:	19000015 	stw	r4,0(r3)
 20074f4:	dc800e15 	stw	r18,56(sp)
 20074f8:	dc400d15 	stw	r17,52(sp)
 20074fc:	1441b616 	blt	r2,r17,2007bd8 <___vfprintf_internal_r+0xe38>
 2007500:	1cc00204 	addi	r19,r3,8
 2007504:	d9014217 	ldw	r4,1288(sp)
 2007508:	d9414317 	ldw	r5,1292(sp)
 200750c:	000d883a 	mov	r6,zero
 2007510:	000f883a 	mov	r7,zero
 2007514:	20132ac0 	call	20132ac <__nedf2>
 2007518:	10017426 	beq	r2,zero,2007aec <___vfprintf_internal_r+0xd4c>
 200751c:	d9414717 	ldw	r5,1308(sp)
 2007520:	d9814117 	ldw	r6,1284(sp)
 2007524:	8c400044 	addi	r17,r17,1
 2007528:	2c85883a 	add	r2,r5,r18
 200752c:	14bfffc4 	addi	r18,r2,-1
 2007530:	28bfffc4 	addi	r2,r5,-1
 2007534:	30c00044 	addi	r3,r6,1
 2007538:	98800115 	stw	r2,4(r19)
 200753c:	008001c4 	movi	r2,7
 2007540:	98c00015 	stw	r3,0(r19)
 2007544:	dc800e15 	stw	r18,56(sp)
 2007548:	dc400d15 	stw	r17,52(sp)
 200754c:	14418e16 	blt	r2,r17,2007b88 <___vfprintf_internal_r+0xde8>
 2007550:	9cc00204 	addi	r19,r19,8
 2007554:	d9414817 	ldw	r5,1312(sp)
 2007558:	d8800804 	addi	r2,sp,32
 200755c:	8c400044 	addi	r17,r17,1
 2007560:	9165883a 	add	r18,r18,r5
 2007564:	98800015 	stw	r2,0(r19)
 2007568:	008001c4 	movi	r2,7
 200756c:	99400115 	stw	r5,4(r19)
 2007570:	dc800e15 	stw	r18,56(sp)
 2007574:	dc400d15 	stw	r17,52(sp)
 2007578:	1440ed16 	blt	r2,r17,2007930 <___vfprintf_internal_r+0xb90>
 200757c:	98c00204 	addi	r3,r19,8
 2007580:	003f8506 	br	2007398 <___vfprintf_internal_r+0x5f8>
 2007584:	d9814a17 	ldw	r6,1320(sp)
 2007588:	d8814517 	ldw	r2,1300(sp)
 200758c:	30a1c83a 	sub	r16,r6,r2
 2007590:	043f4b0e 	bge	zero,r16,20072c0 <___vfprintf_internal_r+0x520>
 2007594:	00800404 	movi	r2,16
 2007598:	1404340e 	bge	r2,r16,200866c <___vfprintf_internal_r+0x18cc>
 200759c:	1027883a 	mov	r19,r2
 20075a0:	070080b4 	movhi	fp,514
 20075a4:	e7035584 	addi	fp,fp,3414
 20075a8:	050001c4 	movi	r20,7
 20075ac:	00000306 	br	20075bc <___vfprintf_internal_r+0x81c>
 20075b0:	843ffc04 	addi	r16,r16,-16
 20075b4:	ad400204 	addi	r21,r21,8
 20075b8:	9c00130e 	bge	r19,r16,2007608 <___vfprintf_internal_r+0x868>
 20075bc:	94800404 	addi	r18,r18,16
 20075c0:	8c400044 	addi	r17,r17,1
 20075c4:	af000015 	stw	fp,0(r21)
 20075c8:	acc00115 	stw	r19,4(r21)
 20075cc:	dc800e15 	stw	r18,56(sp)
 20075d0:	dc400d15 	stw	r17,52(sp)
 20075d4:	a47ff60e 	bge	r20,r17,20075b0 <___vfprintf_internal_r+0x810>
 20075d8:	d9014f17 	ldw	r4,1340(sp)
 20075dc:	b00b883a 	mov	r5,r22
 20075e0:	d9800c04 	addi	r6,sp,48
 20075e4:	d9c15115 	stw	r7,1348(sp)
 20075e8:	2006d480 	call	2006d48 <__sprint_r>
 20075ec:	d9c15117 	ldw	r7,1348(sp)
 20075f0:	103fa31e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 20075f4:	843ffc04 	addi	r16,r16,-16
 20075f8:	dc800e17 	ldw	r18,56(sp)
 20075fc:	dc400d17 	ldw	r17,52(sp)
 2007600:	dd401904 	addi	r21,sp,100
 2007604:	9c3fed16 	blt	r19,r16,20075bc <___vfprintf_internal_r+0x81c>
 2007608:	9425883a 	add	r18,r18,r16
 200760c:	8c400044 	addi	r17,r17,1
 2007610:	008001c4 	movi	r2,7
 2007614:	af000015 	stw	fp,0(r21)
 2007618:	ac000115 	stw	r16,4(r21)
 200761c:	dc800e15 	stw	r18,56(sp)
 2007620:	dc400d15 	stw	r17,52(sp)
 2007624:	14416116 	blt	r2,r17,2007bac <___vfprintf_internal_r+0xe0c>
 2007628:	ad400204 	addi	r21,r21,8
 200762c:	003f2406 	br	20072c0 <___vfprintf_internal_r+0x520>
 2007630:	d9014f17 	ldw	r4,1340(sp)
 2007634:	200bf900 	call	200bf90 <__sinit>
 2007638:	d9c15117 	ldw	r7,1348(sp)
 200763c:	003def06 	br	2006dfc <___vfprintf_internal_r+0x5c>
 2007640:	d9014f17 	ldw	r4,1340(sp)
 2007644:	b00b883a 	mov	r5,r22
 2007648:	d9c15115 	stw	r7,1348(sp)
 200764c:	200a3f00 	call	200a3f0 <__swsetup_r>
 2007650:	d9c15117 	ldw	r7,1348(sp)
 2007654:	103dee26 	beq	r2,zero,2006e10 <___vfprintf_internal_r+0x70>
 2007658:	003f8c06 	br	200748c <___vfprintf_internal_r+0x6ec>
 200765c:	d9014217 	ldw	r4,1288(sp)
 2007660:	d9414317 	ldw	r5,1292(sp)
 2007664:	000d883a 	mov	r6,zero
 2007668:	000f883a 	mov	r7,zero
 200766c:	20132240 	call	2013224 <__eqdf2>
 2007670:	1000f21e 	bne	r2,zero,2007a3c <___vfprintf_internal_r+0xc9c>
 2007674:	008080b4 	movhi	r2,514
 2007678:	10835504 	addi	r2,r2,3412
 200767c:	94800044 	addi	r18,r18,1
 2007680:	8c400044 	addi	r17,r17,1
 2007684:	a8800015 	stw	r2,0(r21)
 2007688:	00c00044 	movi	r3,1
 200768c:	008001c4 	movi	r2,7
 2007690:	a8c00115 	stw	r3,4(r21)
 2007694:	dc800e15 	stw	r18,56(sp)
 2007698:	dc400d15 	stw	r17,52(sp)
 200769c:	1442fa16 	blt	r2,r17,2008288 <___vfprintf_internal_r+0x14e8>
 20076a0:	a8c00204 	addi	r3,r21,8
 20076a4:	d8800517 	ldw	r2,20(sp)
 20076a8:	d9014717 	ldw	r4,1308(sp)
 20076ac:	11015c0e 	bge	r2,r4,2007c20 <___vfprintf_internal_r+0xe80>
 20076b0:	dc400d17 	ldw	r17,52(sp)
 20076b4:	d9814917 	ldw	r6,1316(sp)
 20076b8:	00800044 	movi	r2,1
 20076bc:	94800044 	addi	r18,r18,1
 20076c0:	8c400044 	addi	r17,r17,1
 20076c4:	18800115 	stw	r2,4(r3)
 20076c8:	008001c4 	movi	r2,7
 20076cc:	19800015 	stw	r6,0(r3)
 20076d0:	dc800e15 	stw	r18,56(sp)
 20076d4:	dc400d15 	stw	r17,52(sp)
 20076d8:	14431016 	blt	r2,r17,200831c <___vfprintf_internal_r+0x157c>
 20076dc:	18c00204 	addi	r3,r3,8
 20076e0:	d8814717 	ldw	r2,1308(sp)
 20076e4:	143fffc4 	addi	r16,r2,-1
 20076e8:	043f2b0e 	bge	zero,r16,2007398 <___vfprintf_internal_r+0x5f8>
 20076ec:	00800404 	movi	r2,16
 20076f0:	1402a20e 	bge	r2,r16,200817c <___vfprintf_internal_r+0x13dc>
 20076f4:	dc400d17 	ldw	r17,52(sp)
 20076f8:	1027883a 	mov	r19,r2
 20076fc:	070080b4 	movhi	fp,514
 2007700:	e7035584 	addi	fp,fp,3414
 2007704:	050001c4 	movi	r20,7
 2007708:	00000306 	br	2007718 <___vfprintf_internal_r+0x978>
 200770c:	18c00204 	addi	r3,r3,8
 2007710:	843ffc04 	addi	r16,r16,-16
 2007714:	9c029c0e 	bge	r19,r16,2008188 <___vfprintf_internal_r+0x13e8>
 2007718:	94800404 	addi	r18,r18,16
 200771c:	8c400044 	addi	r17,r17,1
 2007720:	1f000015 	stw	fp,0(r3)
 2007724:	1cc00115 	stw	r19,4(r3)
 2007728:	dc800e15 	stw	r18,56(sp)
 200772c:	dc400d15 	stw	r17,52(sp)
 2007730:	a47ff60e 	bge	r20,r17,200770c <___vfprintf_internal_r+0x96c>
 2007734:	d9014f17 	ldw	r4,1340(sp)
 2007738:	b00b883a 	mov	r5,r22
 200773c:	d9800c04 	addi	r6,sp,48
 2007740:	2006d480 	call	2006d48 <__sprint_r>
 2007744:	103f4e1e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007748:	dc800e17 	ldw	r18,56(sp)
 200774c:	dc400d17 	ldw	r17,52(sp)
 2007750:	d8c01904 	addi	r3,sp,100
 2007754:	003fee06 	br	2007710 <___vfprintf_internal_r+0x970>
 2007758:	d8802c0b 	ldhu	r2,176(sp)
 200775c:	00ffffc4 	movi	r3,-1
 2007760:	d8c14b15 	stw	r3,1324(sp)
 2007764:	1080100c 	andi	r2,r2,64
 2007768:	103dcc1e 	bne	r2,zero,2006e9c <___vfprintf_internal_r+0xfc>
 200776c:	003dce06 	br	2006ea8 <___vfprintf_internal_r+0x108>
 2007770:	d9014f17 	ldw	r4,1340(sp)
 2007774:	b00b883a 	mov	r5,r22
 2007778:	d9800c04 	addi	r6,sp,48
 200777c:	2006d480 	call	2006d48 <__sprint_r>
 2007780:	103f3f1e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007784:	dc800e17 	ldw	r18,56(sp)
 2007788:	003f2e06 	br	2007444 <___vfprintf_internal_r+0x6a4>
 200778c:	d9414c17 	ldw	r5,1328(sp)
 2007790:	29400414 	ori	r5,r5,16
 2007794:	d9414c15 	stw	r5,1328(sp)
 2007798:	d9814c17 	ldw	r6,1328(sp)
 200779c:	3080080c 	andi	r2,r6,32
 20077a0:	10014f1e 	bne	r2,zero,2007ce0 <___vfprintf_internal_r+0xf40>
 20077a4:	d8c14c17 	ldw	r3,1328(sp)
 20077a8:	1880040c 	andi	r2,r3,16
 20077ac:	1002ea1e 	bne	r2,zero,2008358 <___vfprintf_internal_r+0x15b8>
 20077b0:	d9014c17 	ldw	r4,1328(sp)
 20077b4:	2080100c 	andi	r2,r4,64
 20077b8:	1002e726 	beq	r2,zero,2008358 <___vfprintf_internal_r+0x15b8>
 20077bc:	3880000f 	ldh	r2,0(r7)
 20077c0:	39c00104 	addi	r7,r7,4
 20077c4:	d9c14015 	stw	r7,1280(sp)
 20077c8:	1023d7fa 	srai	r17,r2,31
 20077cc:	1021883a 	mov	r16,r2
 20077d0:	88037216 	blt	r17,zero,200859c <___vfprintf_internal_r+0x17fc>
 20077d4:	01000044 	movi	r4,1
 20077d8:	98000416 	blt	r19,zero,20077ec <___vfprintf_internal_r+0xa4c>
 20077dc:	d8c14c17 	ldw	r3,1328(sp)
 20077e0:	00bfdfc4 	movi	r2,-129
 20077e4:	1886703a 	and	r3,r3,r2
 20077e8:	d8c14c15 	stw	r3,1328(sp)
 20077ec:	8444b03a 	or	r2,r16,r17
 20077f0:	1002261e 	bne	r2,zero,200808c <___vfprintf_internal_r+0x12ec>
 20077f4:	9802251e 	bne	r19,zero,200808c <___vfprintf_internal_r+0x12ec>
 20077f8:	20803fcc 	andi	r2,r4,255
 20077fc:	10029b26 	beq	r2,zero,200826c <___vfprintf_internal_r+0x14cc>
 2007800:	d8c01904 	addi	r3,sp,100
 2007804:	dd000f04 	addi	r20,sp,60
 2007808:	d8c14115 	stw	r3,1284(sp)
 200780c:	d8c14117 	ldw	r3,1284(sp)
 2007810:	dcc14515 	stw	r19,1300(sp)
 2007814:	a0c5c83a 	sub	r2,r20,r3
 2007818:	11c00a04 	addi	r7,r2,40
 200781c:	99c0010e 	bge	r19,r7,2007824 <___vfprintf_internal_r+0xa84>
 2007820:	d9c14515 	stw	r7,1300(sp)
 2007824:	dcc14615 	stw	r19,1304(sp)
 2007828:	d8800407 	ldb	r2,16(sp)
 200782c:	103e4c26 	beq	r2,zero,2007160 <___vfprintf_internal_r+0x3c0>
 2007830:	d8814517 	ldw	r2,1300(sp)
 2007834:	10800044 	addi	r2,r2,1
 2007838:	d8814515 	stw	r2,1300(sp)
 200783c:	003e4806 	br	2007160 <___vfprintf_internal_r+0x3c0>
 2007840:	d9814c17 	ldw	r6,1328(sp)
 2007844:	31800414 	ori	r6,r6,16
 2007848:	d9814c15 	stw	r6,1328(sp)
 200784c:	d8c14c17 	ldw	r3,1328(sp)
 2007850:	1880080c 	andi	r2,r3,32
 2007854:	1001271e 	bne	r2,zero,2007cf4 <___vfprintf_internal_r+0xf54>
 2007858:	d9414c17 	ldw	r5,1328(sp)
 200785c:	2880040c 	andi	r2,r5,16
 2007860:	1002b61e 	bne	r2,zero,200833c <___vfprintf_internal_r+0x159c>
 2007864:	d9814c17 	ldw	r6,1328(sp)
 2007868:	3080100c 	andi	r2,r6,64
 200786c:	1002b326 	beq	r2,zero,200833c <___vfprintf_internal_r+0x159c>
 2007870:	3c00000b 	ldhu	r16,0(r7)
 2007874:	0009883a 	mov	r4,zero
 2007878:	39c00104 	addi	r7,r7,4
 200787c:	0023883a 	mov	r17,zero
 2007880:	d9c14015 	stw	r7,1280(sp)
 2007884:	d8000405 	stb	zero,16(sp)
 2007888:	003fd306 	br	20077d8 <___vfprintf_internal_r+0xa38>
 200788c:	d9014c17 	ldw	r4,1328(sp)
 2007890:	21000414 	ori	r4,r4,16
 2007894:	d9014c15 	stw	r4,1328(sp)
 2007898:	d9414c17 	ldw	r5,1328(sp)
 200789c:	2880080c 	andi	r2,r5,32
 20078a0:	1001081e 	bne	r2,zero,2007cc4 <___vfprintf_internal_r+0xf24>
 20078a4:	d8c14c17 	ldw	r3,1328(sp)
 20078a8:	1880040c 	andi	r2,r3,16
 20078ac:	1002b01e 	bne	r2,zero,2008370 <___vfprintf_internal_r+0x15d0>
 20078b0:	d9014c17 	ldw	r4,1328(sp)
 20078b4:	2080100c 	andi	r2,r4,64
 20078b8:	1002ad26 	beq	r2,zero,2008370 <___vfprintf_internal_r+0x15d0>
 20078bc:	3c00000b 	ldhu	r16,0(r7)
 20078c0:	01000044 	movi	r4,1
 20078c4:	39c00104 	addi	r7,r7,4
 20078c8:	0023883a 	mov	r17,zero
 20078cc:	d9c14015 	stw	r7,1280(sp)
 20078d0:	d8000405 	stb	zero,16(sp)
 20078d4:	003fc006 	br	20077d8 <___vfprintf_internal_r+0xa38>
 20078d8:	d9014f17 	ldw	r4,1340(sp)
 20078dc:	b00b883a 	mov	r5,r22
 20078e0:	d9800c04 	addi	r6,sp,48
 20078e4:	2006d480 	call	2006d48 <__sprint_r>
 20078e8:	103ee51e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 20078ec:	dc800e17 	ldw	r18,56(sp)
 20078f0:	d8c01904 	addi	r3,sp,100
 20078f4:	d9814c17 	ldw	r6,1328(sp)
 20078f8:	3080004c 	andi	r2,r6,1
 20078fc:	1005003a 	cmpeq	r2,r2,zero
 2007900:	103ea51e 	bne	r2,zero,2007398 <___vfprintf_internal_r+0x5f8>
 2007904:	00800044 	movi	r2,1
 2007908:	dc400d17 	ldw	r17,52(sp)
 200790c:	18800115 	stw	r2,4(r3)
 2007910:	d8814917 	ldw	r2,1316(sp)
 2007914:	94800044 	addi	r18,r18,1
 2007918:	8c400044 	addi	r17,r17,1
 200791c:	18800015 	stw	r2,0(r3)
 2007920:	008001c4 	movi	r2,7
 2007924:	dc800e15 	stw	r18,56(sp)
 2007928:	dc400d15 	stw	r17,52(sp)
 200792c:	14421e0e 	bge	r2,r17,20081a8 <___vfprintf_internal_r+0x1408>
 2007930:	d9014f17 	ldw	r4,1340(sp)
 2007934:	b00b883a 	mov	r5,r22
 2007938:	d9800c04 	addi	r6,sp,48
 200793c:	2006d480 	call	2006d48 <__sprint_r>
 2007940:	103ecf1e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007944:	dc800e17 	ldw	r18,56(sp)
 2007948:	d8c01904 	addi	r3,sp,100
 200794c:	003e9206 	br	2007398 <___vfprintf_internal_r+0x5f8>
 2007950:	d9014f17 	ldw	r4,1340(sp)
 2007954:	b00b883a 	mov	r5,r22
 2007958:	d9800c04 	addi	r6,sp,48
 200795c:	2006d480 	call	2006d48 <__sprint_r>
 2007960:	103ec026 	beq	r2,zero,2007464 <___vfprintf_internal_r+0x6c4>
 2007964:	003ec606 	br	2007480 <___vfprintf_internal_r+0x6e0>
 2007968:	d9014f17 	ldw	r4,1340(sp)
 200796c:	b00b883a 	mov	r5,r22
 2007970:	d9800c04 	addi	r6,sp,48
 2007974:	d9c15115 	stw	r7,1348(sp)
 2007978:	2006d480 	call	2006d48 <__sprint_r>
 200797c:	d9c15117 	ldw	r7,1348(sp)
 2007980:	103ebf1e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007984:	dc800e17 	ldw	r18,56(sp)
 2007988:	dc400d17 	ldw	r17,52(sp)
 200798c:	dd401904 	addi	r21,sp,100
 2007990:	003e7406 	br	2007364 <___vfprintf_internal_r+0x5c4>
 2007994:	d9014f17 	ldw	r4,1340(sp)
 2007998:	b00b883a 	mov	r5,r22
 200799c:	d9800c04 	addi	r6,sp,48
 20079a0:	d9c15115 	stw	r7,1348(sp)
 20079a4:	2006d480 	call	2006d48 <__sprint_r>
 20079a8:	d9c15117 	ldw	r7,1348(sp)
 20079ac:	103eb41e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 20079b0:	dd401904 	addi	r21,sp,100
 20079b4:	003d6d06 	br	2006f6c <___vfprintf_internal_r+0x1cc>
 20079b8:	d9014f17 	ldw	r4,1340(sp)
 20079bc:	b00b883a 	mov	r5,r22
 20079c0:	d9800c04 	addi	r6,sp,48
 20079c4:	d9c15115 	stw	r7,1348(sp)
 20079c8:	2006d480 	call	2006d48 <__sprint_r>
 20079cc:	d9c15117 	ldw	r7,1348(sp)
 20079d0:	103eab1e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 20079d4:	dc800e17 	ldw	r18,56(sp)
 20079d8:	dc400d17 	ldw	r17,52(sp)
 20079dc:	dd401904 	addi	r21,sp,100
 20079e0:	003e3406 	br	20072b4 <___vfprintf_internal_r+0x514>
 20079e4:	d9014f17 	ldw	r4,1340(sp)
 20079e8:	b00b883a 	mov	r5,r22
 20079ec:	d9800c04 	addi	r6,sp,48
 20079f0:	d9c15115 	stw	r7,1348(sp)
 20079f4:	2006d480 	call	2006d48 <__sprint_r>
 20079f8:	d9c15117 	ldw	r7,1348(sp)
 20079fc:	103ea01e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007a00:	dc800e17 	ldw	r18,56(sp)
 2007a04:	dc400d17 	ldw	r17,52(sp)
 2007a08:	dd401904 	addi	r21,sp,100
 2007a0c:	003e1c06 	br	2007280 <___vfprintf_internal_r+0x4e0>
 2007a10:	d9014f17 	ldw	r4,1340(sp)
 2007a14:	b00b883a 	mov	r5,r22
 2007a18:	d9800c04 	addi	r6,sp,48
 2007a1c:	d9c15115 	stw	r7,1348(sp)
 2007a20:	2006d480 	call	2006d48 <__sprint_r>
 2007a24:	d9c15117 	ldw	r7,1348(sp)
 2007a28:	103e951e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007a2c:	dc800e17 	ldw	r18,56(sp)
 2007a30:	dc400d17 	ldw	r17,52(sp)
 2007a34:	dd401904 	addi	r21,sp,100
 2007a38:	003e0406 	br	200724c <___vfprintf_internal_r+0x4ac>
 2007a3c:	d9000517 	ldw	r4,20(sp)
 2007a40:	0102520e 	bge	zero,r4,200838c <___vfprintf_internal_r+0x15ec>
 2007a44:	d9814717 	ldw	r6,1308(sp)
 2007a48:	21807a16 	blt	r4,r6,2007c34 <___vfprintf_internal_r+0xe94>
 2007a4c:	d8814117 	ldw	r2,1284(sp)
 2007a50:	91a5883a 	add	r18,r18,r6
 2007a54:	8c400044 	addi	r17,r17,1
 2007a58:	a8800015 	stw	r2,0(r21)
 2007a5c:	008001c4 	movi	r2,7
 2007a60:	a9800115 	stw	r6,4(r21)
 2007a64:	dc800e15 	stw	r18,56(sp)
 2007a68:	dc400d15 	stw	r17,52(sp)
 2007a6c:	1442f616 	blt	r2,r17,2008648 <___vfprintf_internal_r+0x18a8>
 2007a70:	a8c00204 	addi	r3,r21,8
 2007a74:	d9414717 	ldw	r5,1308(sp)
 2007a78:	2161c83a 	sub	r16,r4,r5
 2007a7c:	043f9d0e 	bge	zero,r16,20078f4 <___vfprintf_internal_r+0xb54>
 2007a80:	00800404 	movi	r2,16
 2007a84:	1402130e 	bge	r2,r16,20082d4 <___vfprintf_internal_r+0x1534>
 2007a88:	dc400d17 	ldw	r17,52(sp)
 2007a8c:	1027883a 	mov	r19,r2
 2007a90:	070080b4 	movhi	fp,514
 2007a94:	e7035584 	addi	fp,fp,3414
 2007a98:	050001c4 	movi	r20,7
 2007a9c:	00000306 	br	2007aac <___vfprintf_internal_r+0xd0c>
 2007aa0:	18c00204 	addi	r3,r3,8
 2007aa4:	843ffc04 	addi	r16,r16,-16
 2007aa8:	9c020d0e 	bge	r19,r16,20082e0 <___vfprintf_internal_r+0x1540>
 2007aac:	94800404 	addi	r18,r18,16
 2007ab0:	8c400044 	addi	r17,r17,1
 2007ab4:	1f000015 	stw	fp,0(r3)
 2007ab8:	1cc00115 	stw	r19,4(r3)
 2007abc:	dc800e15 	stw	r18,56(sp)
 2007ac0:	dc400d15 	stw	r17,52(sp)
 2007ac4:	a47ff60e 	bge	r20,r17,2007aa0 <___vfprintf_internal_r+0xd00>
 2007ac8:	d9014f17 	ldw	r4,1340(sp)
 2007acc:	b00b883a 	mov	r5,r22
 2007ad0:	d9800c04 	addi	r6,sp,48
 2007ad4:	2006d480 	call	2006d48 <__sprint_r>
 2007ad8:	103e691e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007adc:	dc800e17 	ldw	r18,56(sp)
 2007ae0:	dc400d17 	ldw	r17,52(sp)
 2007ae4:	d8c01904 	addi	r3,sp,100
 2007ae8:	003fee06 	br	2007aa4 <___vfprintf_internal_r+0xd04>
 2007aec:	d8814717 	ldw	r2,1308(sp)
 2007af0:	143fffc4 	addi	r16,r2,-1
 2007af4:	043e970e 	bge	zero,r16,2007554 <___vfprintf_internal_r+0x7b4>
 2007af8:	00800404 	movi	r2,16
 2007afc:	1400180e 	bge	r2,r16,2007b60 <___vfprintf_internal_r+0xdc0>
 2007b00:	1029883a 	mov	r20,r2
 2007b04:	070080b4 	movhi	fp,514
 2007b08:	e7035584 	addi	fp,fp,3414
 2007b0c:	054001c4 	movi	r21,7
 2007b10:	00000306 	br	2007b20 <___vfprintf_internal_r+0xd80>
 2007b14:	9cc00204 	addi	r19,r19,8
 2007b18:	843ffc04 	addi	r16,r16,-16
 2007b1c:	a400120e 	bge	r20,r16,2007b68 <___vfprintf_internal_r+0xdc8>
 2007b20:	94800404 	addi	r18,r18,16
 2007b24:	8c400044 	addi	r17,r17,1
 2007b28:	9f000015 	stw	fp,0(r19)
 2007b2c:	9d000115 	stw	r20,4(r19)
 2007b30:	dc800e15 	stw	r18,56(sp)
 2007b34:	dc400d15 	stw	r17,52(sp)
 2007b38:	ac7ff60e 	bge	r21,r17,2007b14 <___vfprintf_internal_r+0xd74>
 2007b3c:	d9014f17 	ldw	r4,1340(sp)
 2007b40:	b00b883a 	mov	r5,r22
 2007b44:	d9800c04 	addi	r6,sp,48
 2007b48:	2006d480 	call	2006d48 <__sprint_r>
 2007b4c:	103e4c1e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007b50:	dc800e17 	ldw	r18,56(sp)
 2007b54:	dc400d17 	ldw	r17,52(sp)
 2007b58:	dcc01904 	addi	r19,sp,100
 2007b5c:	003fee06 	br	2007b18 <___vfprintf_internal_r+0xd78>
 2007b60:	070080b4 	movhi	fp,514
 2007b64:	e7035584 	addi	fp,fp,3414
 2007b68:	9425883a 	add	r18,r18,r16
 2007b6c:	8c400044 	addi	r17,r17,1
 2007b70:	008001c4 	movi	r2,7
 2007b74:	9f000015 	stw	fp,0(r19)
 2007b78:	9c000115 	stw	r16,4(r19)
 2007b7c:	dc800e15 	stw	r18,56(sp)
 2007b80:	dc400d15 	stw	r17,52(sp)
 2007b84:	147e720e 	bge	r2,r17,2007550 <___vfprintf_internal_r+0x7b0>
 2007b88:	d9014f17 	ldw	r4,1340(sp)
 2007b8c:	b00b883a 	mov	r5,r22
 2007b90:	d9800c04 	addi	r6,sp,48
 2007b94:	2006d480 	call	2006d48 <__sprint_r>
 2007b98:	103e391e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007b9c:	dc800e17 	ldw	r18,56(sp)
 2007ba0:	dc400d17 	ldw	r17,52(sp)
 2007ba4:	dcc01904 	addi	r19,sp,100
 2007ba8:	003e6a06 	br	2007554 <___vfprintf_internal_r+0x7b4>
 2007bac:	d9014f17 	ldw	r4,1340(sp)
 2007bb0:	b00b883a 	mov	r5,r22
 2007bb4:	d9800c04 	addi	r6,sp,48
 2007bb8:	d9c15115 	stw	r7,1348(sp)
 2007bbc:	2006d480 	call	2006d48 <__sprint_r>
 2007bc0:	d9c15117 	ldw	r7,1348(sp)
 2007bc4:	103e2e1e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007bc8:	dc800e17 	ldw	r18,56(sp)
 2007bcc:	dc400d17 	ldw	r17,52(sp)
 2007bd0:	dd401904 	addi	r21,sp,100
 2007bd4:	003dba06 	br	20072c0 <___vfprintf_internal_r+0x520>
 2007bd8:	d9014f17 	ldw	r4,1340(sp)
 2007bdc:	b00b883a 	mov	r5,r22
 2007be0:	d9800c04 	addi	r6,sp,48
 2007be4:	2006d480 	call	2006d48 <__sprint_r>
 2007be8:	103e251e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007bec:	dc800e17 	ldw	r18,56(sp)
 2007bf0:	dc400d17 	ldw	r17,52(sp)
 2007bf4:	dcc01904 	addi	r19,sp,100
 2007bf8:	003e4206 	br	2007504 <___vfprintf_internal_r+0x764>
 2007bfc:	d9014f17 	ldw	r4,1340(sp)
 2007c00:	b00b883a 	mov	r5,r22
 2007c04:	d9800c04 	addi	r6,sp,48
 2007c08:	2006d480 	call	2006d48 <__sprint_r>
 2007c0c:	103e1c1e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2007c10:	dc800e17 	ldw	r18,56(sp)
 2007c14:	dc400d17 	ldw	r17,52(sp)
 2007c18:	d8c01904 	addi	r3,sp,100
 2007c1c:	003e2e06 	br	20074d8 <___vfprintf_internal_r+0x738>
 2007c20:	d9414c17 	ldw	r5,1328(sp)
 2007c24:	2880004c 	andi	r2,r5,1
 2007c28:	1005003a 	cmpeq	r2,r2,zero
 2007c2c:	103dda1e 	bne	r2,zero,2007398 <___vfprintf_internal_r+0x5f8>
 2007c30:	003e9f06 	br	20076b0 <___vfprintf_internal_r+0x910>
 2007c34:	d8c14117 	ldw	r3,1284(sp)
 2007c38:	9125883a 	add	r18,r18,r4
 2007c3c:	8c400044 	addi	r17,r17,1
 2007c40:	008001c4 	movi	r2,7
 2007c44:	a8c00015 	stw	r3,0(r21)
 2007c48:	a9000115 	stw	r4,4(r21)
 2007c4c:	dc800e15 	stw	r18,56(sp)
 2007c50:	dc400d15 	stw	r17,52(sp)
 2007c54:	14426616 	blt	r2,r17,20085f0 <___vfprintf_internal_r+0x1850>
 2007c58:	a8c00204 	addi	r3,r21,8
 2007c5c:	d9414917 	ldw	r5,1316(sp)
 2007c60:	00800044 	movi	r2,1
 2007c64:	94800044 	addi	r18,r18,1
 2007c68:	8c400044 	addi	r17,r17,1
 2007c6c:	18800115 	stw	r2,4(r3)
 2007c70:	008001c4 	movi	r2,7
 2007c74:	19400015 	stw	r5,0(r3)
 2007c78:	dc800e15 	stw	r18,56(sp)
 2007c7c:	dc400d15 	stw	r17,52(sp)
 2007c80:	2021883a 	mov	r16,r4
 2007c84:	14425016 	blt	r2,r17,20085c8 <___vfprintf_internal_r+0x1828>
 2007c88:	19400204 	addi	r5,r3,8
 2007c8c:	d9814717 	ldw	r6,1308(sp)
 2007c90:	8c400044 	addi	r17,r17,1
 2007c94:	dc400d15 	stw	r17,52(sp)
 2007c98:	3107c83a 	sub	r3,r6,r4
 2007c9c:	d9014117 	ldw	r4,1284(sp)
 2007ca0:	90e5883a 	add	r18,r18,r3
 2007ca4:	28c00115 	stw	r3,4(r5)
 2007ca8:	8105883a 	add	r2,r16,r4
 2007cac:	28800015 	stw	r2,0(r5)
 2007cb0:	008001c4 	movi	r2,7
 2007cb4:	dc800e15 	stw	r18,56(sp)
 2007cb8:	147f1d16 	blt	r2,r17,2007930 <___vfprintf_internal_r+0xb90>
 2007cbc:	28c00204 	addi	r3,r5,8
 2007cc0:	003db506 	br	2007398 <___vfprintf_internal_r+0x5f8>
 2007cc4:	3c000017 	ldw	r16,0(r7)
 2007cc8:	3c400117 	ldw	r17,4(r7)
 2007ccc:	39800204 	addi	r6,r7,8
 2007cd0:	01000044 	movi	r4,1
 2007cd4:	d9814015 	stw	r6,1280(sp)
 2007cd8:	d8000405 	stb	zero,16(sp)
 2007cdc:	003ebe06 	br	20077d8 <___vfprintf_internal_r+0xa38>
 2007ce0:	3c000017 	ldw	r16,0(r7)
 2007ce4:	3c400117 	ldw	r17,4(r7)
 2007ce8:	38800204 	addi	r2,r7,8
 2007cec:	d8814015 	stw	r2,1280(sp)
 2007cf0:	003eb706 	br	20077d0 <___vfprintf_internal_r+0xa30>
 2007cf4:	3c000017 	ldw	r16,0(r7)
 2007cf8:	3c400117 	ldw	r17,4(r7)
 2007cfc:	39000204 	addi	r4,r7,8
 2007d00:	d9014015 	stw	r4,1280(sp)
 2007d04:	0009883a 	mov	r4,zero
 2007d08:	d8000405 	stb	zero,16(sp)
 2007d0c:	003eb206 	br	20077d8 <___vfprintf_internal_r+0xa38>
 2007d10:	38c00017 	ldw	r3,0(r7)
 2007d14:	39c00104 	addi	r7,r7,4
 2007d18:	d8c14a15 	stw	r3,1320(sp)
 2007d1c:	1800d10e 	bge	r3,zero,2008064 <___vfprintf_internal_r+0x12c4>
 2007d20:	00c7c83a 	sub	r3,zero,r3
 2007d24:	d8c14a15 	stw	r3,1320(sp)
 2007d28:	d9014c17 	ldw	r4,1328(sp)
 2007d2c:	b8c00007 	ldb	r3,0(r23)
 2007d30:	21000114 	ori	r4,r4,4
 2007d34:	d9014c15 	stw	r4,1328(sp)
 2007d38:	003c9806 	br	2006f9c <___vfprintf_internal_r+0x1fc>
 2007d3c:	d9814c17 	ldw	r6,1328(sp)
 2007d40:	3080080c 	andi	r2,r6,32
 2007d44:	1001f026 	beq	r2,zero,2008508 <___vfprintf_internal_r+0x1768>
 2007d48:	d9014b17 	ldw	r4,1324(sp)
 2007d4c:	38800017 	ldw	r2,0(r7)
 2007d50:	39c00104 	addi	r7,r7,4
 2007d54:	d9c14015 	stw	r7,1280(sp)
 2007d58:	2007d7fa 	srai	r3,r4,31
 2007d5c:	d9c14017 	ldw	r7,1280(sp)
 2007d60:	11000015 	stw	r4,0(r2)
 2007d64:	10c00115 	stw	r3,4(r2)
 2007d68:	003c6906 	br	2006f10 <___vfprintf_internal_r+0x170>
 2007d6c:	b8c00007 	ldb	r3,0(r23)
 2007d70:	00801b04 	movi	r2,108
 2007d74:	18824f26 	beq	r3,r2,20086b4 <___vfprintf_internal_r+0x1914>
 2007d78:	d9414c17 	ldw	r5,1328(sp)
 2007d7c:	29400414 	ori	r5,r5,16
 2007d80:	d9414c15 	stw	r5,1328(sp)
 2007d84:	003c8506 	br	2006f9c <___vfprintf_internal_r+0x1fc>
 2007d88:	d9814c17 	ldw	r6,1328(sp)
 2007d8c:	b8c00007 	ldb	r3,0(r23)
 2007d90:	31800814 	ori	r6,r6,32
 2007d94:	d9814c15 	stw	r6,1328(sp)
 2007d98:	003c8006 	br	2006f9c <___vfprintf_internal_r+0x1fc>
 2007d9c:	d8814c17 	ldw	r2,1328(sp)
 2007da0:	3c000017 	ldw	r16,0(r7)
 2007da4:	00c01e04 	movi	r3,120
 2007da8:	10800094 	ori	r2,r2,2
 2007dac:	d8814c15 	stw	r2,1328(sp)
 2007db0:	39c00104 	addi	r7,r7,4
 2007db4:	014080b4 	movhi	r5,514
 2007db8:	29433e04 	addi	r5,r5,3320
 2007dbc:	00800c04 	movi	r2,48
 2007dc0:	0023883a 	mov	r17,zero
 2007dc4:	01000084 	movi	r4,2
 2007dc8:	d9c14015 	stw	r7,1280(sp)
 2007dcc:	d8c14d15 	stw	r3,1332(sp)
 2007dd0:	d9414415 	stw	r5,1296(sp)
 2007dd4:	d8800445 	stb	r2,17(sp)
 2007dd8:	d8c00485 	stb	r3,18(sp)
 2007ddc:	d8000405 	stb	zero,16(sp)
 2007de0:	003e7d06 	br	20077d8 <___vfprintf_internal_r+0xa38>
 2007de4:	d8814c17 	ldw	r2,1328(sp)
 2007de8:	b8c00007 	ldb	r3,0(r23)
 2007dec:	10801014 	ori	r2,r2,64
 2007df0:	d8814c15 	stw	r2,1328(sp)
 2007df4:	003c6906 	br	2006f9c <___vfprintf_internal_r+0x1fc>
 2007df8:	d9414c17 	ldw	r5,1328(sp)
 2007dfc:	2880020c 	andi	r2,r5,8
 2007e00:	1001df26 	beq	r2,zero,2008580 <___vfprintf_internal_r+0x17e0>
 2007e04:	39800017 	ldw	r6,0(r7)
 2007e08:	38800204 	addi	r2,r7,8
 2007e0c:	d8814015 	stw	r2,1280(sp)
 2007e10:	d9814215 	stw	r6,1288(sp)
 2007e14:	39c00117 	ldw	r7,4(r7)
 2007e18:	d9c14315 	stw	r7,1292(sp)
 2007e1c:	d9014217 	ldw	r4,1288(sp)
 2007e20:	d9414317 	ldw	r5,1292(sp)
 2007e24:	200ecc80 	call	200ecc8 <__isinfd>
 2007e28:	10021726 	beq	r2,zero,2008688 <___vfprintf_internal_r+0x18e8>
 2007e2c:	d9014217 	ldw	r4,1288(sp)
 2007e30:	d9414317 	ldw	r5,1292(sp)
 2007e34:	000d883a 	mov	r6,zero
 2007e38:	000f883a 	mov	r7,zero
 2007e3c:	20056740 	call	2005674 <__ltdf2>
 2007e40:	1002ca16 	blt	r2,zero,200896c <___vfprintf_internal_r+0x1bcc>
 2007e44:	d9414d17 	ldw	r5,1332(sp)
 2007e48:	008011c4 	movi	r2,71
 2007e4c:	11420a16 	blt	r2,r5,2008678 <___vfprintf_internal_r+0x18d8>
 2007e50:	018080b4 	movhi	r6,514
 2007e54:	31834304 	addi	r6,r6,3340
 2007e58:	d9814115 	stw	r6,1284(sp)
 2007e5c:	d9014c17 	ldw	r4,1328(sp)
 2007e60:	00c000c4 	movi	r3,3
 2007e64:	00bfdfc4 	movi	r2,-129
 2007e68:	2088703a 	and	r4,r4,r2
 2007e6c:	180f883a 	mov	r7,r3
 2007e70:	d8c14515 	stw	r3,1300(sp)
 2007e74:	d9014c15 	stw	r4,1328(sp)
 2007e78:	d8014615 	stw	zero,1304(sp)
 2007e7c:	003e6a06 	br	2007828 <___vfprintf_internal_r+0xa88>
 2007e80:	38800017 	ldw	r2,0(r7)
 2007e84:	00c00044 	movi	r3,1
 2007e88:	39c00104 	addi	r7,r7,4
 2007e8c:	d9c14015 	stw	r7,1280(sp)
 2007e90:	d9000f04 	addi	r4,sp,60
 2007e94:	180f883a 	mov	r7,r3
 2007e98:	d8c14515 	stw	r3,1300(sp)
 2007e9c:	d9014115 	stw	r4,1284(sp)
 2007ea0:	d8800f05 	stb	r2,60(sp)
 2007ea4:	d8000405 	stb	zero,16(sp)
 2007ea8:	003cac06 	br	200715c <___vfprintf_internal_r+0x3bc>
 2007eac:	014080b4 	movhi	r5,514
 2007eb0:	29434904 	addi	r5,r5,3364
 2007eb4:	d9414415 	stw	r5,1296(sp)
 2007eb8:	d9814c17 	ldw	r6,1328(sp)
 2007ebc:	3080080c 	andi	r2,r6,32
 2007ec0:	1000f926 	beq	r2,zero,20082a8 <___vfprintf_internal_r+0x1508>
 2007ec4:	3c000017 	ldw	r16,0(r7)
 2007ec8:	3c400117 	ldw	r17,4(r7)
 2007ecc:	38800204 	addi	r2,r7,8
 2007ed0:	d8814015 	stw	r2,1280(sp)
 2007ed4:	d9414c17 	ldw	r5,1328(sp)
 2007ed8:	2880004c 	andi	r2,r5,1
 2007edc:	1005003a 	cmpeq	r2,r2,zero
 2007ee0:	1000b31e 	bne	r2,zero,20081b0 <___vfprintf_internal_r+0x1410>
 2007ee4:	8444b03a 	or	r2,r16,r17
 2007ee8:	1000b126 	beq	r2,zero,20081b0 <___vfprintf_internal_r+0x1410>
 2007eec:	d9814d17 	ldw	r6,1332(sp)
 2007ef0:	29400094 	ori	r5,r5,2
 2007ef4:	00800c04 	movi	r2,48
 2007ef8:	01000084 	movi	r4,2
 2007efc:	d9414c15 	stw	r5,1328(sp)
 2007f00:	d8800445 	stb	r2,17(sp)
 2007f04:	d9800485 	stb	r6,18(sp)
 2007f08:	d8000405 	stb	zero,16(sp)
 2007f0c:	003e3206 	br	20077d8 <___vfprintf_internal_r+0xa38>
 2007f10:	018080b4 	movhi	r6,514
 2007f14:	31833e04 	addi	r6,r6,3320
 2007f18:	d9814415 	stw	r6,1296(sp)
 2007f1c:	003fe606 	br	2007eb8 <___vfprintf_internal_r+0x1118>
 2007f20:	00800ac4 	movi	r2,43
 2007f24:	d8800405 	stb	r2,16(sp)
 2007f28:	b8c00007 	ldb	r3,0(r23)
 2007f2c:	003c1b06 	br	2006f9c <___vfprintf_internal_r+0x1fc>
 2007f30:	d8814c17 	ldw	r2,1328(sp)
 2007f34:	b8c00007 	ldb	r3,0(r23)
 2007f38:	10800054 	ori	r2,r2,1
 2007f3c:	d8814c15 	stw	r2,1328(sp)
 2007f40:	003c1606 	br	2006f9c <___vfprintf_internal_r+0x1fc>
 2007f44:	d8800407 	ldb	r2,16(sp)
 2007f48:	1000461e 	bne	r2,zero,2008064 <___vfprintf_internal_r+0x12c4>
 2007f4c:	00800804 	movi	r2,32
 2007f50:	d8800405 	stb	r2,16(sp)
 2007f54:	b8c00007 	ldb	r3,0(r23)
 2007f58:	003c1006 	br	2006f9c <___vfprintf_internal_r+0x1fc>
 2007f5c:	d9814c17 	ldw	r6,1328(sp)
 2007f60:	b8c00007 	ldb	r3,0(r23)
 2007f64:	31800214 	ori	r6,r6,8
 2007f68:	d9814c15 	stw	r6,1328(sp)
 2007f6c:	003c0b06 	br	2006f9c <___vfprintf_internal_r+0x1fc>
 2007f70:	0007883a 	mov	r3,zero
 2007f74:	01000244 	movi	r4,9
 2007f78:	188002a4 	muli	r2,r3,10
 2007f7c:	b8c00007 	ldb	r3,0(r23)
 2007f80:	d9814d17 	ldw	r6,1332(sp)
 2007f84:	bdc00044 	addi	r23,r23,1
 2007f88:	d8c14d15 	stw	r3,1332(sp)
 2007f8c:	d9414d17 	ldw	r5,1332(sp)
 2007f90:	3085883a 	add	r2,r6,r2
 2007f94:	10fff404 	addi	r3,r2,-48
 2007f98:	28bff404 	addi	r2,r5,-48
 2007f9c:	20bff62e 	bgeu	r4,r2,2007f78 <___vfprintf_internal_r+0x11d8>
 2007fa0:	d8c14a15 	stw	r3,1320(sp)
 2007fa4:	003bff06 	br	2006fa4 <___vfprintf_internal_r+0x204>
 2007fa8:	d9414c17 	ldw	r5,1328(sp)
 2007fac:	b8c00007 	ldb	r3,0(r23)
 2007fb0:	29402014 	ori	r5,r5,128
 2007fb4:	d9414c15 	stw	r5,1328(sp)
 2007fb8:	003bf806 	br	2006f9c <___vfprintf_internal_r+0x1fc>
 2007fbc:	b8c00007 	ldb	r3,0(r23)
 2007fc0:	00800a84 	movi	r2,42
 2007fc4:	bdc00044 	addi	r23,r23,1
 2007fc8:	18831526 	beq	r3,r2,2008c20 <___vfprintf_internal_r+0x1e80>
 2007fcc:	d8c14d15 	stw	r3,1332(sp)
 2007fd0:	18bff404 	addi	r2,r3,-48
 2007fd4:	00c00244 	movi	r3,9
 2007fd8:	18827836 	bltu	r3,r2,20089bc <___vfprintf_internal_r+0x1c1c>
 2007fdc:	000d883a 	mov	r6,zero
 2007fe0:	308002a4 	muli	r2,r6,10
 2007fe4:	b9800007 	ldb	r6,0(r23)
 2007fe8:	d9414d17 	ldw	r5,1332(sp)
 2007fec:	bdc00044 	addi	r23,r23,1
 2007ff0:	d9814d15 	stw	r6,1332(sp)
 2007ff4:	d9014d17 	ldw	r4,1332(sp)
 2007ff8:	1145883a 	add	r2,r2,r5
 2007ffc:	11bff404 	addi	r6,r2,-48
 2008000:	20bff404 	addi	r2,r4,-48
 2008004:	18bff62e 	bgeu	r3,r2,2007fe0 <___vfprintf_internal_r+0x1240>
 2008008:	3027883a 	mov	r19,r6
 200800c:	303be50e 	bge	r6,zero,2006fa4 <___vfprintf_internal_r+0x204>
 2008010:	04ffffc4 	movi	r19,-1
 2008014:	003be306 	br	2006fa4 <___vfprintf_internal_r+0x204>
 2008018:	d8000405 	stb	zero,16(sp)
 200801c:	39800017 	ldw	r6,0(r7)
 2008020:	39c00104 	addi	r7,r7,4
 2008024:	d9c14015 	stw	r7,1280(sp)
 2008028:	d9814115 	stw	r6,1284(sp)
 200802c:	3001c926 	beq	r6,zero,2008754 <___vfprintf_internal_r+0x19b4>
 2008030:	98000e16 	blt	r19,zero,200806c <___vfprintf_internal_r+0x12cc>
 2008034:	d9014117 	ldw	r4,1284(sp)
 2008038:	000b883a 	mov	r5,zero
 200803c:	980d883a 	mov	r6,r19
 2008040:	200d2040 	call	200d204 <memchr>
 2008044:	10025926 	beq	r2,zero,20089ac <___vfprintf_internal_r+0x1c0c>
 2008048:	d8c14117 	ldw	r3,1284(sp)
 200804c:	10cfc83a 	sub	r7,r2,r3
 2008050:	99c19e16 	blt	r19,r7,20086cc <___vfprintf_internal_r+0x192c>
 2008054:	d9c14515 	stw	r7,1300(sp)
 2008058:	38000916 	blt	r7,zero,2008080 <___vfprintf_internal_r+0x12e0>
 200805c:	d8014615 	stw	zero,1304(sp)
 2008060:	003df106 	br	2007828 <___vfprintf_internal_r+0xa88>
 2008064:	b8c00007 	ldb	r3,0(r23)
 2008068:	003bcc06 	br	2006f9c <___vfprintf_internal_r+0x1fc>
 200806c:	d9014117 	ldw	r4,1284(sp)
 2008070:	2006cd40 	call	2006cd4 <strlen>
 2008074:	d8814515 	stw	r2,1300(sp)
 2008078:	100f883a 	mov	r7,r2
 200807c:	103ff70e 	bge	r2,zero,200805c <___vfprintf_internal_r+0x12bc>
 2008080:	d8014515 	stw	zero,1300(sp)
 2008084:	d8014615 	stw	zero,1304(sp)
 2008088:	003de706 	br	2007828 <___vfprintf_internal_r+0xa88>
 200808c:	20c03fcc 	andi	r3,r4,255
 2008090:	00800044 	movi	r2,1
 2008094:	18802d26 	beq	r3,r2,200814c <___vfprintf_internal_r+0x13ac>
 2008098:	18800e36 	bltu	r3,r2,20080d4 <___vfprintf_internal_r+0x1334>
 200809c:	00800084 	movi	r2,2
 20080a0:	1880fa26 	beq	r3,r2,200848c <___vfprintf_internal_r+0x16ec>
 20080a4:	010080b4 	movhi	r4,514
 20080a8:	21034e04 	addi	r4,r4,3384
 20080ac:	2006cd40 	call	2006cd4 <strlen>
 20080b0:	100f883a 	mov	r7,r2
 20080b4:	dcc14515 	stw	r19,1300(sp)
 20080b8:	9880010e 	bge	r19,r2,20080c0 <___vfprintf_internal_r+0x1320>
 20080bc:	d8814515 	stw	r2,1300(sp)
 20080c0:	008080b4 	movhi	r2,514
 20080c4:	10834e04 	addi	r2,r2,3384
 20080c8:	dcc14615 	stw	r19,1304(sp)
 20080cc:	d8814115 	stw	r2,1284(sp)
 20080d0:	003dd506 	br	2007828 <___vfprintf_internal_r+0xa88>
 20080d4:	d9401904 	addi	r5,sp,100
 20080d8:	dd000f04 	addi	r20,sp,60
 20080dc:	d9414115 	stw	r5,1284(sp)
 20080e0:	880a977a 	slli	r5,r17,29
 20080e4:	d9814117 	ldw	r6,1284(sp)
 20080e8:	8004d0fa 	srli	r2,r16,3
 20080ec:	8806d0fa 	srli	r3,r17,3
 20080f0:	810001cc 	andi	r4,r16,7
 20080f4:	2884b03a 	or	r2,r5,r2
 20080f8:	31bfffc4 	addi	r6,r6,-1
 20080fc:	21000c04 	addi	r4,r4,48
 2008100:	d9814115 	stw	r6,1284(sp)
 2008104:	10cab03a 	or	r5,r2,r3
 2008108:	31000005 	stb	r4,0(r6)
 200810c:	1021883a 	mov	r16,r2
 2008110:	1823883a 	mov	r17,r3
 2008114:	283ff21e 	bne	r5,zero,20080e0 <___vfprintf_internal_r+0x1340>
 2008118:	d8c14c17 	ldw	r3,1328(sp)
 200811c:	1880004c 	andi	r2,r3,1
 2008120:	1005003a 	cmpeq	r2,r2,zero
 2008124:	103db91e 	bne	r2,zero,200780c <___vfprintf_internal_r+0xa6c>
 2008128:	20803fcc 	andi	r2,r4,255
 200812c:	1080201c 	xori	r2,r2,128
 2008130:	10bfe004 	addi	r2,r2,-128
 2008134:	00c00c04 	movi	r3,48
 2008138:	10fdb426 	beq	r2,r3,200780c <___vfprintf_internal_r+0xa6c>
 200813c:	31bfffc4 	addi	r6,r6,-1
 2008140:	d9814115 	stw	r6,1284(sp)
 2008144:	30c00005 	stb	r3,0(r6)
 2008148:	003db006 	br	200780c <___vfprintf_internal_r+0xa6c>
 200814c:	88800068 	cmpgeui	r2,r17,1
 2008150:	10002c1e 	bne	r2,zero,2008204 <___vfprintf_internal_r+0x1464>
 2008154:	8800021e 	bne	r17,zero,2008160 <___vfprintf_internal_r+0x13c0>
 2008158:	00800244 	movi	r2,9
 200815c:	14002936 	bltu	r2,r16,2008204 <___vfprintf_internal_r+0x1464>
 2008160:	d90018c4 	addi	r4,sp,99
 2008164:	dd000f04 	addi	r20,sp,60
 2008168:	d9014115 	stw	r4,1284(sp)
 200816c:	d9014117 	ldw	r4,1284(sp)
 2008170:	80800c04 	addi	r2,r16,48
 2008174:	20800005 	stb	r2,0(r4)
 2008178:	003da406 	br	200780c <___vfprintf_internal_r+0xa6c>
 200817c:	dc400d17 	ldw	r17,52(sp)
 2008180:	070080b4 	movhi	fp,514
 2008184:	e7035584 	addi	fp,fp,3414
 2008188:	9425883a 	add	r18,r18,r16
 200818c:	8c400044 	addi	r17,r17,1
 2008190:	008001c4 	movi	r2,7
 2008194:	1f000015 	stw	fp,0(r3)
 2008198:	1c000115 	stw	r16,4(r3)
 200819c:	dc800e15 	stw	r18,56(sp)
 20081a0:	dc400d15 	stw	r17,52(sp)
 20081a4:	147de216 	blt	r2,r17,2007930 <___vfprintf_internal_r+0xb90>
 20081a8:	18c00204 	addi	r3,r3,8
 20081ac:	003c7a06 	br	2007398 <___vfprintf_internal_r+0x5f8>
 20081b0:	01000084 	movi	r4,2
 20081b4:	d8000405 	stb	zero,16(sp)
 20081b8:	003d8706 	br	20077d8 <___vfprintf_internal_r+0xa38>
 20081bc:	d9814c17 	ldw	r6,1328(sp)
 20081c0:	30c4703a 	and	r2,r6,r3
 20081c4:	1005003a 	cmpeq	r2,r2,zero
 20081c8:	103cb926 	beq	r2,zero,20074b0 <___vfprintf_internal_r+0x710>
 20081cc:	d9014117 	ldw	r4,1284(sp)
 20081d0:	94800044 	addi	r18,r18,1
 20081d4:	8c400044 	addi	r17,r17,1
 20081d8:	008001c4 	movi	r2,7
 20081dc:	a9000015 	stw	r4,0(r21)
 20081e0:	a8c00115 	stw	r3,4(r21)
 20081e4:	dc800e15 	stw	r18,56(sp)
 20081e8:	dc400d15 	stw	r17,52(sp)
 20081ec:	147e6616 	blt	r2,r17,2007b88 <___vfprintf_internal_r+0xde8>
 20081f0:	acc00204 	addi	r19,r21,8
 20081f4:	003cd706 	br	2007554 <___vfprintf_internal_r+0x7b4>
 20081f8:	070080b4 	movhi	fp,514
 20081fc:	e7035584 	addi	fp,fp,3414
 2008200:	003c4f06 	br	2007340 <___vfprintf_internal_r+0x5a0>
 2008204:	dd000f04 	addi	r20,sp,60
 2008208:	dc801904 	addi	r18,sp,100
 200820c:	8009883a 	mov	r4,r16
 2008210:	880b883a 	mov	r5,r17
 2008214:	01800284 	movi	r6,10
 2008218:	000f883a 	mov	r7,zero
 200821c:	2012b0c0 	call	2012b0c <__umoddi3>
 2008220:	12000c04 	addi	r8,r2,48
 2008224:	94bfffc4 	addi	r18,r18,-1
 2008228:	8009883a 	mov	r4,r16
 200822c:	880b883a 	mov	r5,r17
 2008230:	01800284 	movi	r6,10
 2008234:	000f883a 	mov	r7,zero
 2008238:	92000005 	stb	r8,0(r18)
 200823c:	20125300 	call	2012530 <__udivdi3>
 2008240:	1009883a 	mov	r4,r2
 2008244:	1021883a 	mov	r16,r2
 2008248:	18800068 	cmpgeui	r2,r3,1
 200824c:	1823883a 	mov	r17,r3
 2008250:	103fee1e 	bne	r2,zero,200820c <___vfprintf_internal_r+0x146c>
 2008254:	1800021e 	bne	r3,zero,2008260 <___vfprintf_internal_r+0x14c0>
 2008258:	00800244 	movi	r2,9
 200825c:	113feb36 	bltu	r2,r4,200820c <___vfprintf_internal_r+0x146c>
 2008260:	94bfffc4 	addi	r18,r18,-1
 2008264:	dc814115 	stw	r18,1284(sp)
 2008268:	003fc006 	br	200816c <___vfprintf_internal_r+0x13cc>
 200826c:	d9014c17 	ldw	r4,1328(sp)
 2008270:	2080004c 	andi	r2,r4,1
 2008274:	10009a1e 	bne	r2,zero,20084e0 <___vfprintf_internal_r+0x1740>
 2008278:	d9401904 	addi	r5,sp,100
 200827c:	dd000f04 	addi	r20,sp,60
 2008280:	d9414115 	stw	r5,1284(sp)
 2008284:	003d6106 	br	200780c <___vfprintf_internal_r+0xa6c>
 2008288:	d9014f17 	ldw	r4,1340(sp)
 200828c:	b00b883a 	mov	r5,r22
 2008290:	d9800c04 	addi	r6,sp,48
 2008294:	2006d480 	call	2006d48 <__sprint_r>
 2008298:	103c791e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 200829c:	dc800e17 	ldw	r18,56(sp)
 20082a0:	d8c01904 	addi	r3,sp,100
 20082a4:	003cff06 	br	20076a4 <___vfprintf_internal_r+0x904>
 20082a8:	d8c14c17 	ldw	r3,1328(sp)
 20082ac:	1880040c 	andi	r2,r3,16
 20082b0:	1000711e 	bne	r2,zero,2008478 <___vfprintf_internal_r+0x16d8>
 20082b4:	d9014c17 	ldw	r4,1328(sp)
 20082b8:	2080100c 	andi	r2,r4,64
 20082bc:	10006e26 	beq	r2,zero,2008478 <___vfprintf_internal_r+0x16d8>
 20082c0:	3c00000b 	ldhu	r16,0(r7)
 20082c4:	0023883a 	mov	r17,zero
 20082c8:	39c00104 	addi	r7,r7,4
 20082cc:	d9c14015 	stw	r7,1280(sp)
 20082d0:	003f0006 	br	2007ed4 <___vfprintf_internal_r+0x1134>
 20082d4:	dc400d17 	ldw	r17,52(sp)
 20082d8:	070080b4 	movhi	fp,514
 20082dc:	e7035584 	addi	fp,fp,3414
 20082e0:	9425883a 	add	r18,r18,r16
 20082e4:	8c400044 	addi	r17,r17,1
 20082e8:	008001c4 	movi	r2,7
 20082ec:	1f000015 	stw	fp,0(r3)
 20082f0:	1c000115 	stw	r16,4(r3)
 20082f4:	dc800e15 	stw	r18,56(sp)
 20082f8:	dc400d15 	stw	r17,52(sp)
 20082fc:	147d7616 	blt	r2,r17,20078d8 <___vfprintf_internal_r+0xb38>
 2008300:	18c00204 	addi	r3,r3,8
 2008304:	003d7b06 	br	20078f4 <___vfprintf_internal_r+0xb54>
 2008308:	dc800e17 	ldw	r18,56(sp)
 200830c:	dc400d17 	ldw	r17,52(sp)
 2008310:	070080b4 	movhi	fp,514
 2008314:	e7035984 	addi	fp,fp,3430
 2008318:	003bc006 	br	200721c <___vfprintf_internal_r+0x47c>
 200831c:	d9014f17 	ldw	r4,1340(sp)
 2008320:	b00b883a 	mov	r5,r22
 2008324:	d9800c04 	addi	r6,sp,48
 2008328:	2006d480 	call	2006d48 <__sprint_r>
 200832c:	103c541e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2008330:	dc800e17 	ldw	r18,56(sp)
 2008334:	d8c01904 	addi	r3,sp,100
 2008338:	003ce906 	br	20076e0 <___vfprintf_internal_r+0x940>
 200833c:	3c000017 	ldw	r16,0(r7)
 2008340:	0009883a 	mov	r4,zero
 2008344:	39c00104 	addi	r7,r7,4
 2008348:	0023883a 	mov	r17,zero
 200834c:	d9c14015 	stw	r7,1280(sp)
 2008350:	d8000405 	stb	zero,16(sp)
 2008354:	003d2006 	br	20077d8 <___vfprintf_internal_r+0xa38>
 2008358:	38800017 	ldw	r2,0(r7)
 200835c:	39c00104 	addi	r7,r7,4
 2008360:	d9c14015 	stw	r7,1280(sp)
 2008364:	1023d7fa 	srai	r17,r2,31
 2008368:	1021883a 	mov	r16,r2
 200836c:	003d1806 	br	20077d0 <___vfprintf_internal_r+0xa30>
 2008370:	3c000017 	ldw	r16,0(r7)
 2008374:	01000044 	movi	r4,1
 2008378:	39c00104 	addi	r7,r7,4
 200837c:	0023883a 	mov	r17,zero
 2008380:	d9c14015 	stw	r7,1280(sp)
 2008384:	d8000405 	stb	zero,16(sp)
 2008388:	003d1306 	br	20077d8 <___vfprintf_internal_r+0xa38>
 200838c:	008080b4 	movhi	r2,514
 2008390:	10835504 	addi	r2,r2,3412
 2008394:	94800044 	addi	r18,r18,1
 2008398:	8c400044 	addi	r17,r17,1
 200839c:	a8800015 	stw	r2,0(r21)
 20083a0:	00c00044 	movi	r3,1
 20083a4:	008001c4 	movi	r2,7
 20083a8:	a8c00115 	stw	r3,4(r21)
 20083ac:	dc800e15 	stw	r18,56(sp)
 20083b0:	dc400d15 	stw	r17,52(sp)
 20083b4:	1440ca16 	blt	r2,r17,20086e0 <___vfprintf_internal_r+0x1940>
 20083b8:	a8c00204 	addi	r3,r21,8
 20083bc:	2000061e 	bne	r4,zero,20083d8 <___vfprintf_internal_r+0x1638>
 20083c0:	d9414717 	ldw	r5,1308(sp)
 20083c4:	2800041e 	bne	r5,zero,20083d8 <___vfprintf_internal_r+0x1638>
 20083c8:	d9814c17 	ldw	r6,1328(sp)
 20083cc:	3080004c 	andi	r2,r6,1
 20083d0:	1005003a 	cmpeq	r2,r2,zero
 20083d4:	103bf01e 	bne	r2,zero,2007398 <___vfprintf_internal_r+0x5f8>
 20083d8:	00800044 	movi	r2,1
 20083dc:	dc400d17 	ldw	r17,52(sp)
 20083e0:	18800115 	stw	r2,4(r3)
 20083e4:	d8814917 	ldw	r2,1316(sp)
 20083e8:	94800044 	addi	r18,r18,1
 20083ec:	8c400044 	addi	r17,r17,1
 20083f0:	18800015 	stw	r2,0(r3)
 20083f4:	008001c4 	movi	r2,7
 20083f8:	dc800e15 	stw	r18,56(sp)
 20083fc:	dc400d15 	stw	r17,52(sp)
 2008400:	1440ca16 	blt	r2,r17,200872c <___vfprintf_internal_r+0x198c>
 2008404:	18c00204 	addi	r3,r3,8
 2008408:	0121c83a 	sub	r16,zero,r4
 200840c:	0400500e 	bge	zero,r16,2008550 <___vfprintf_internal_r+0x17b0>
 2008410:	00800404 	movi	r2,16
 2008414:	1400800e 	bge	r2,r16,2008618 <___vfprintf_internal_r+0x1878>
 2008418:	1027883a 	mov	r19,r2
 200841c:	070080b4 	movhi	fp,514
 2008420:	e7035584 	addi	fp,fp,3414
 2008424:	050001c4 	movi	r20,7
 2008428:	00000306 	br	2008438 <___vfprintf_internal_r+0x1698>
 200842c:	18c00204 	addi	r3,r3,8
 2008430:	843ffc04 	addi	r16,r16,-16
 2008434:	9c007a0e 	bge	r19,r16,2008620 <___vfprintf_internal_r+0x1880>
 2008438:	94800404 	addi	r18,r18,16
 200843c:	8c400044 	addi	r17,r17,1
 2008440:	1f000015 	stw	fp,0(r3)
 2008444:	1cc00115 	stw	r19,4(r3)
 2008448:	dc800e15 	stw	r18,56(sp)
 200844c:	dc400d15 	stw	r17,52(sp)
 2008450:	a47ff60e 	bge	r20,r17,200842c <___vfprintf_internal_r+0x168c>
 2008454:	d9014f17 	ldw	r4,1340(sp)
 2008458:	b00b883a 	mov	r5,r22
 200845c:	d9800c04 	addi	r6,sp,48
 2008460:	2006d480 	call	2006d48 <__sprint_r>
 2008464:	103c061e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2008468:	dc800e17 	ldw	r18,56(sp)
 200846c:	dc400d17 	ldw	r17,52(sp)
 2008470:	d8c01904 	addi	r3,sp,100
 2008474:	003fee06 	br	2008430 <___vfprintf_internal_r+0x1690>
 2008478:	3c000017 	ldw	r16,0(r7)
 200847c:	0023883a 	mov	r17,zero
 2008480:	39c00104 	addi	r7,r7,4
 2008484:	d9c14015 	stw	r7,1280(sp)
 2008488:	003e9206 	br	2007ed4 <___vfprintf_internal_r+0x1134>
 200848c:	d9401904 	addi	r5,sp,100
 2008490:	dd000f04 	addi	r20,sp,60
 2008494:	d9414115 	stw	r5,1284(sp)
 2008498:	d9814417 	ldw	r6,1296(sp)
 200849c:	880a973a 	slli	r5,r17,28
 20084a0:	8004d13a 	srli	r2,r16,4
 20084a4:	810003cc 	andi	r4,r16,15
 20084a8:	3109883a 	add	r4,r6,r4
 20084ac:	2884b03a 	or	r2,r5,r2
 20084b0:	21400003 	ldbu	r5,0(r4)
 20084b4:	d9014117 	ldw	r4,1284(sp)
 20084b8:	8806d13a 	srli	r3,r17,4
 20084bc:	1021883a 	mov	r16,r2
 20084c0:	213fffc4 	addi	r4,r4,-1
 20084c4:	d9014115 	stw	r4,1284(sp)
 20084c8:	d9814117 	ldw	r6,1284(sp)
 20084cc:	10c8b03a 	or	r4,r2,r3
 20084d0:	1823883a 	mov	r17,r3
 20084d4:	31400005 	stb	r5,0(r6)
 20084d8:	203fef1e 	bne	r4,zero,2008498 <___vfprintf_internal_r+0x16f8>
 20084dc:	003ccb06 	br	200780c <___vfprintf_internal_r+0xa6c>
 20084e0:	00800c04 	movi	r2,48
 20084e4:	d98018c4 	addi	r6,sp,99
 20084e8:	dd000f04 	addi	r20,sp,60
 20084ec:	d88018c5 	stb	r2,99(sp)
 20084f0:	d9814115 	stw	r6,1284(sp)
 20084f4:	003cc506 	br	200780c <___vfprintf_internal_r+0xa6c>
 20084f8:	dc400d17 	ldw	r17,52(sp)
 20084fc:	070080b4 	movhi	fp,514
 2008500:	e7035984 	addi	fp,fp,3430
 2008504:	003bc706 	br	2007424 <___vfprintf_internal_r+0x684>
 2008508:	d9414c17 	ldw	r5,1328(sp)
 200850c:	2880040c 	andi	r2,r5,16
 2008510:	10007c26 	beq	r2,zero,2008704 <___vfprintf_internal_r+0x1964>
 2008514:	38800017 	ldw	r2,0(r7)
 2008518:	39c00104 	addi	r7,r7,4
 200851c:	d9c14015 	stw	r7,1280(sp)
 2008520:	d9814b17 	ldw	r6,1324(sp)
 2008524:	d9c14017 	ldw	r7,1280(sp)
 2008528:	11800015 	stw	r6,0(r2)
 200852c:	003a7806 	br	2006f10 <___vfprintf_internal_r+0x170>
 2008530:	d9014f17 	ldw	r4,1340(sp)
 2008534:	b00b883a 	mov	r5,r22
 2008538:	d9800c04 	addi	r6,sp,48
 200853c:	2006d480 	call	2006d48 <__sprint_r>
 2008540:	103bcf1e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2008544:	dc800e17 	ldw	r18,56(sp)
 2008548:	dc400d17 	ldw	r17,52(sp)
 200854c:	d8c01904 	addi	r3,sp,100
 2008550:	d9014717 	ldw	r4,1308(sp)
 2008554:	d9414117 	ldw	r5,1284(sp)
 2008558:	8c400044 	addi	r17,r17,1
 200855c:	9125883a 	add	r18,r18,r4
 2008560:	008001c4 	movi	r2,7
 2008564:	19400015 	stw	r5,0(r3)
 2008568:	19000115 	stw	r4,4(r3)
 200856c:	dc800e15 	stw	r18,56(sp)
 2008570:	dc400d15 	stw	r17,52(sp)
 2008574:	147cee16 	blt	r2,r17,2007930 <___vfprintf_internal_r+0xb90>
 2008578:	18c00204 	addi	r3,r3,8
 200857c:	003b8606 	br	2007398 <___vfprintf_internal_r+0x5f8>
 2008580:	38c00017 	ldw	r3,0(r7)
 2008584:	39000204 	addi	r4,r7,8
 2008588:	d9014015 	stw	r4,1280(sp)
 200858c:	d8c14215 	stw	r3,1288(sp)
 2008590:	39c00117 	ldw	r7,4(r7)
 2008594:	d9c14315 	stw	r7,1292(sp)
 2008598:	003e2006 	br	2007e1c <___vfprintf_internal_r+0x107c>
 200859c:	0005883a 	mov	r2,zero
 20085a0:	1409c83a 	sub	r4,r2,r16
 20085a4:	1105803a 	cmpltu	r2,r2,r4
 20085a8:	044bc83a 	sub	r5,zero,r17
 20085ac:	2885c83a 	sub	r2,r5,r2
 20085b0:	2021883a 	mov	r16,r4
 20085b4:	1023883a 	mov	r17,r2
 20085b8:	01000044 	movi	r4,1
 20085bc:	00800b44 	movi	r2,45
 20085c0:	d8800405 	stb	r2,16(sp)
 20085c4:	003c8406 	br	20077d8 <___vfprintf_internal_r+0xa38>
 20085c8:	d9014f17 	ldw	r4,1340(sp)
 20085cc:	b00b883a 	mov	r5,r22
 20085d0:	d9800c04 	addi	r6,sp,48
 20085d4:	2006d480 	call	2006d48 <__sprint_r>
 20085d8:	103ba91e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 20085dc:	dc800e17 	ldw	r18,56(sp)
 20085e0:	dc400d17 	ldw	r17,52(sp)
 20085e4:	d9000517 	ldw	r4,20(sp)
 20085e8:	d9401904 	addi	r5,sp,100
 20085ec:	003da706 	br	2007c8c <___vfprintf_internal_r+0xeec>
 20085f0:	d9014f17 	ldw	r4,1340(sp)
 20085f4:	b00b883a 	mov	r5,r22
 20085f8:	d9800c04 	addi	r6,sp,48
 20085fc:	2006d480 	call	2006d48 <__sprint_r>
 2008600:	103b9f1e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2008604:	dc800e17 	ldw	r18,56(sp)
 2008608:	dc400d17 	ldw	r17,52(sp)
 200860c:	d9000517 	ldw	r4,20(sp)
 2008610:	d8c01904 	addi	r3,sp,100
 2008614:	003d9106 	br	2007c5c <___vfprintf_internal_r+0xebc>
 2008618:	070080b4 	movhi	fp,514
 200861c:	e7035584 	addi	fp,fp,3414
 2008620:	9425883a 	add	r18,r18,r16
 2008624:	8c400044 	addi	r17,r17,1
 2008628:	008001c4 	movi	r2,7
 200862c:	1f000015 	stw	fp,0(r3)
 2008630:	1c000115 	stw	r16,4(r3)
 2008634:	dc800e15 	stw	r18,56(sp)
 2008638:	dc400d15 	stw	r17,52(sp)
 200863c:	147fbc16 	blt	r2,r17,2008530 <___vfprintf_internal_r+0x1790>
 2008640:	18c00204 	addi	r3,r3,8
 2008644:	003fc206 	br	2008550 <___vfprintf_internal_r+0x17b0>
 2008648:	d9014f17 	ldw	r4,1340(sp)
 200864c:	b00b883a 	mov	r5,r22
 2008650:	d9800c04 	addi	r6,sp,48
 2008654:	2006d480 	call	2006d48 <__sprint_r>
 2008658:	103b891e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 200865c:	dc800e17 	ldw	r18,56(sp)
 2008660:	d9000517 	ldw	r4,20(sp)
 2008664:	d8c01904 	addi	r3,sp,100
 2008668:	003d0206 	br	2007a74 <___vfprintf_internal_r+0xcd4>
 200866c:	070080b4 	movhi	fp,514
 2008670:	e7035584 	addi	fp,fp,3414
 2008674:	003be406 	br	2007608 <___vfprintf_internal_r+0x868>
 2008678:	008080b4 	movhi	r2,514
 200867c:	10834404 	addi	r2,r2,3344
 2008680:	d8814115 	stw	r2,1284(sp)
 2008684:	003df506 	br	2007e5c <___vfprintf_internal_r+0x10bc>
 2008688:	d9014217 	ldw	r4,1288(sp)
 200868c:	d9414317 	ldw	r5,1292(sp)
 2008690:	20043740 	call	2004374 <__isnand>
 2008694:	10003926 	beq	r2,zero,200877c <___vfprintf_internal_r+0x19dc>
 2008698:	d9414d17 	ldw	r5,1332(sp)
 200869c:	008011c4 	movi	r2,71
 20086a0:	1140ce16 	blt	r2,r5,20089dc <___vfprintf_internal_r+0x1c3c>
 20086a4:	018080b4 	movhi	r6,514
 20086a8:	31834504 	addi	r6,r6,3348
 20086ac:	d9814115 	stw	r6,1284(sp)
 20086b0:	003dea06 	br	2007e5c <___vfprintf_internal_r+0x10bc>
 20086b4:	d9014c17 	ldw	r4,1328(sp)
 20086b8:	bdc00044 	addi	r23,r23,1
 20086bc:	b8c00007 	ldb	r3,0(r23)
 20086c0:	21000814 	ori	r4,r4,32
 20086c4:	d9014c15 	stw	r4,1328(sp)
 20086c8:	003a3406 	br	2006f9c <___vfprintf_internal_r+0x1fc>
 20086cc:	dcc14515 	stw	r19,1300(sp)
 20086d0:	98011016 	blt	r19,zero,2008b14 <___vfprintf_internal_r+0x1d74>
 20086d4:	980f883a 	mov	r7,r19
 20086d8:	d8014615 	stw	zero,1304(sp)
 20086dc:	003c5206 	br	2007828 <___vfprintf_internal_r+0xa88>
 20086e0:	d9014f17 	ldw	r4,1340(sp)
 20086e4:	b00b883a 	mov	r5,r22
 20086e8:	d9800c04 	addi	r6,sp,48
 20086ec:	2006d480 	call	2006d48 <__sprint_r>
 20086f0:	103b631e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 20086f4:	dc800e17 	ldw	r18,56(sp)
 20086f8:	d9000517 	ldw	r4,20(sp)
 20086fc:	d8c01904 	addi	r3,sp,100
 2008700:	003f2e06 	br	20083bc <___vfprintf_internal_r+0x161c>
 2008704:	d8c14c17 	ldw	r3,1328(sp)
 2008708:	1880100c 	andi	r2,r3,64
 200870c:	1000a026 	beq	r2,zero,2008990 <___vfprintf_internal_r+0x1bf0>
 2008710:	38800017 	ldw	r2,0(r7)
 2008714:	39c00104 	addi	r7,r7,4
 2008718:	d9c14015 	stw	r7,1280(sp)
 200871c:	d9014b17 	ldw	r4,1324(sp)
 2008720:	d9c14017 	ldw	r7,1280(sp)
 2008724:	1100000d 	sth	r4,0(r2)
 2008728:	0039f906 	br	2006f10 <___vfprintf_internal_r+0x170>
 200872c:	d9014f17 	ldw	r4,1340(sp)
 2008730:	b00b883a 	mov	r5,r22
 2008734:	d9800c04 	addi	r6,sp,48
 2008738:	2006d480 	call	2006d48 <__sprint_r>
 200873c:	103b501e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 2008740:	dc800e17 	ldw	r18,56(sp)
 2008744:	dc400d17 	ldw	r17,52(sp)
 2008748:	d9000517 	ldw	r4,20(sp)
 200874c:	d8c01904 	addi	r3,sp,100
 2008750:	003f2d06 	br	2008408 <___vfprintf_internal_r+0x1668>
 2008754:	00800184 	movi	r2,6
 2008758:	14c09a36 	bltu	r2,r19,20089c4 <___vfprintf_internal_r+0x1c24>
 200875c:	dcc14515 	stw	r19,1300(sp)
 2008760:	9800010e 	bge	r19,zero,2008768 <___vfprintf_internal_r+0x19c8>
 2008764:	d8014515 	stw	zero,1300(sp)
 2008768:	008080b4 	movhi	r2,514
 200876c:	10834704 	addi	r2,r2,3356
 2008770:	980f883a 	mov	r7,r19
 2008774:	d8814115 	stw	r2,1284(sp)
 2008778:	003a7806 	br	200715c <___vfprintf_internal_r+0x3bc>
 200877c:	00bfffc4 	movi	r2,-1
 2008780:	9880e226 	beq	r19,r2,2008b0c <___vfprintf_internal_r+0x1d6c>
 2008784:	d9414d17 	ldw	r5,1332(sp)
 2008788:	008019c4 	movi	r2,103
 200878c:	2880dc26 	beq	r5,r2,2008b00 <___vfprintf_internal_r+0x1d60>
 2008790:	008011c4 	movi	r2,71
 2008794:	2880da26 	beq	r5,r2,2008b00 <___vfprintf_internal_r+0x1d60>
 2008798:	d9414c17 	ldw	r5,1328(sp)
 200879c:	d9014317 	ldw	r4,1292(sp)
 20087a0:	d9814217 	ldw	r6,1288(sp)
 20087a4:	29404014 	ori	r5,r5,256
 20087a8:	d9414c15 	stw	r5,1328(sp)
 20087ac:	2000cc16 	blt	r4,zero,2008ae0 <___vfprintf_internal_r+0x1d40>
 20087b0:	3021883a 	mov	r16,r6
 20087b4:	2023883a 	mov	r17,r4
 20087b8:	0039883a 	mov	fp,zero
 20087bc:	d9414d17 	ldw	r5,1332(sp)
 20087c0:	00801984 	movi	r2,102
 20087c4:	2880b726 	beq	r5,r2,2008aa4 <___vfprintf_internal_r+0x1d04>
 20087c8:	00801184 	movi	r2,70
 20087cc:	2880b526 	beq	r5,r2,2008aa4 <___vfprintf_internal_r+0x1d04>
 20087d0:	00801944 	movi	r2,101
 20087d4:	2880c826 	beq	r5,r2,2008af8 <___vfprintf_internal_r+0x1d58>
 20087d8:	00801144 	movi	r2,69
 20087dc:	2880c626 	beq	r5,r2,2008af8 <___vfprintf_internal_r+0x1d58>
 20087e0:	9829883a 	mov	r20,r19
 20087e4:	d9014f17 	ldw	r4,1340(sp)
 20087e8:	d8800504 	addi	r2,sp,20
 20087ec:	880d883a 	mov	r6,r17
 20087f0:	d8800115 	stw	r2,4(sp)
 20087f4:	d8c00604 	addi	r3,sp,24
 20087f8:	d8800704 	addi	r2,sp,28
 20087fc:	800b883a 	mov	r5,r16
 2008800:	01c00084 	movi	r7,2
 2008804:	d8c00215 	stw	r3,8(sp)
 2008808:	d8800315 	stw	r2,12(sp)
 200880c:	dd000015 	stw	r20,0(sp)
 2008810:	200a7440 	call	200a744 <_dtoa_r>
 2008814:	d9814d17 	ldw	r6,1332(sp)
 2008818:	d8814115 	stw	r2,1284(sp)
 200881c:	008019c4 	movi	r2,103
 2008820:	30809526 	beq	r6,r2,2008a78 <___vfprintf_internal_r+0x1cd8>
 2008824:	d8c14d17 	ldw	r3,1332(sp)
 2008828:	008011c4 	movi	r2,71
 200882c:	18809226 	beq	r3,r2,2008a78 <___vfprintf_internal_r+0x1cd8>
 2008830:	d9414117 	ldw	r5,1284(sp)
 2008834:	d9814d17 	ldw	r6,1332(sp)
 2008838:	00801984 	movi	r2,102
 200883c:	2d25883a 	add	r18,r5,r20
 2008840:	30808626 	beq	r6,r2,2008a5c <___vfprintf_internal_r+0x1cbc>
 2008844:	00801184 	movi	r2,70
 2008848:	30808426 	beq	r6,r2,2008a5c <___vfprintf_internal_r+0x1cbc>
 200884c:	000d883a 	mov	r6,zero
 2008850:	000f883a 	mov	r7,zero
 2008854:	880b883a 	mov	r5,r17
 2008858:	8009883a 	mov	r4,r16
 200885c:	20132240 	call	2013224 <__eqdf2>
 2008860:	1000751e 	bne	r2,zero,2008a38 <___vfprintf_internal_r+0x1c98>
 2008864:	9005883a 	mov	r2,r18
 2008868:	dc800715 	stw	r18,28(sp)
 200886c:	d9014117 	ldw	r4,1284(sp)
 2008870:	d9414d17 	ldw	r5,1332(sp)
 2008874:	00c019c4 	movi	r3,103
 2008878:	1125c83a 	sub	r18,r2,r4
 200887c:	28c06826 	beq	r5,r3,2008a20 <___vfprintf_internal_r+0x1c80>
 2008880:	008011c4 	movi	r2,71
 2008884:	28806626 	beq	r5,r2,2008a20 <___vfprintf_internal_r+0x1c80>
 2008888:	d9000517 	ldw	r4,20(sp)
 200888c:	d8c14d17 	ldw	r3,1332(sp)
 2008890:	00801944 	movi	r2,101
 2008894:	10c05516 	blt	r2,r3,20089ec <___vfprintf_internal_r+0x1c4c>
 2008898:	213fffc4 	addi	r4,r4,-1
 200889c:	d9000515 	stw	r4,20(sp)
 20088a0:	d8c00805 	stb	r3,32(sp)
 20088a4:	2021883a 	mov	r16,r4
 20088a8:	2000c116 	blt	r4,zero,2008bb0 <___vfprintf_internal_r+0x1e10>
 20088ac:	00800ac4 	movi	r2,43
 20088b0:	d8800845 	stb	r2,33(sp)
 20088b4:	00800244 	movi	r2,9
 20088b8:	1400af0e 	bge	r2,r16,2008b78 <___vfprintf_internal_r+0x1dd8>
 20088bc:	1027883a 	mov	r19,r2
 20088c0:	dc400b84 	addi	r17,sp,46
 20088c4:	8009883a 	mov	r4,r16
 20088c8:	01400284 	movi	r5,10
 20088cc:	2005a540 	call	2005a54 <__modsi3>
 20088d0:	10800c04 	addi	r2,r2,48
 20088d4:	8c7fffc4 	addi	r17,r17,-1
 20088d8:	8009883a 	mov	r4,r16
 20088dc:	01400284 	movi	r5,10
 20088e0:	88800005 	stb	r2,0(r17)
 20088e4:	20059f40 	call	20059f4 <__divsi3>
 20088e8:	1021883a 	mov	r16,r2
 20088ec:	98bff516 	blt	r19,r2,20088c4 <___vfprintf_internal_r+0x1b24>
 20088f0:	10c00c04 	addi	r3,r2,48
 20088f4:	d88009c4 	addi	r2,sp,39
 20088f8:	108001c4 	addi	r2,r2,7
 20088fc:	897fffc4 	addi	r5,r17,-1
 2008900:	88ffffc5 	stb	r3,-1(r17)
 2008904:	2880a72e 	bgeu	r5,r2,2008ba4 <___vfprintf_internal_r+0x1e04>
 2008908:	1009883a 	mov	r4,r2
 200890c:	d9800804 	addi	r6,sp,32
 2008910:	d8c00884 	addi	r3,sp,34
 2008914:	28800003 	ldbu	r2,0(r5)
 2008918:	29400044 	addi	r5,r5,1
 200891c:	18800005 	stb	r2,0(r3)
 2008920:	18c00044 	addi	r3,r3,1
 2008924:	293ffb36 	bltu	r5,r4,2008914 <___vfprintf_internal_r+0x1b74>
 2008928:	1987c83a 	sub	r3,r3,r6
 200892c:	00800044 	movi	r2,1
 2008930:	d8c14815 	stw	r3,1312(sp)
 2008934:	90cf883a 	add	r7,r18,r3
 2008938:	1480960e 	bge	r2,r18,2008b94 <___vfprintf_internal_r+0x1df4>
 200893c:	39c00044 	addi	r7,r7,1
 2008940:	d9c14515 	stw	r7,1300(sp)
 2008944:	38003416 	blt	r7,zero,2008a18 <___vfprintf_internal_r+0x1c78>
 2008948:	e0803fcc 	andi	r2,fp,255
 200894c:	1080201c 	xori	r2,r2,128
 2008950:	10bfe004 	addi	r2,r2,-128
 2008954:	10004e26 	beq	r2,zero,2008a90 <___vfprintf_internal_r+0x1cf0>
 2008958:	00800b44 	movi	r2,45
 200895c:	dc814715 	stw	r18,1308(sp)
 2008960:	d8014615 	stw	zero,1304(sp)
 2008964:	d8800405 	stb	r2,16(sp)
 2008968:	003bb106 	br	2007830 <___vfprintf_internal_r+0xa90>
 200896c:	00800b44 	movi	r2,45
 2008970:	d8800405 	stb	r2,16(sp)
 2008974:	003d3306 	br	2007e44 <___vfprintf_internal_r+0x10a4>
 2008978:	d9014f17 	ldw	r4,1340(sp)
 200897c:	b00b883a 	mov	r5,r22
 2008980:	d9800c04 	addi	r6,sp,48
 2008984:	2006d480 	call	2006d48 <__sprint_r>
 2008988:	103abd1e 	bne	r2,zero,2007480 <___vfprintf_internal_r+0x6e0>
 200898c:	003abb06 	br	200747c <___vfprintf_internal_r+0x6dc>
 2008990:	38800017 	ldw	r2,0(r7)
 2008994:	39c00104 	addi	r7,r7,4
 2008998:	d9c14015 	stw	r7,1280(sp)
 200899c:	d9414b17 	ldw	r5,1324(sp)
 20089a0:	d9c14017 	ldw	r7,1280(sp)
 20089a4:	11400015 	stw	r5,0(r2)
 20089a8:	00395906 	br	2006f10 <___vfprintf_internal_r+0x170>
 20089ac:	980f883a 	mov	r7,r19
 20089b0:	dcc14515 	stw	r19,1300(sp)
 20089b4:	d8014615 	stw	zero,1304(sp)
 20089b8:	003b9b06 	br	2007828 <___vfprintf_internal_r+0xa88>
 20089bc:	0027883a 	mov	r19,zero
 20089c0:	00397806 	br	2006fa4 <___vfprintf_internal_r+0x204>
 20089c4:	00c080b4 	movhi	r3,514
 20089c8:	18c34704 	addi	r3,r3,3356
 20089cc:	100f883a 	mov	r7,r2
 20089d0:	d8814515 	stw	r2,1300(sp)
 20089d4:	d8c14115 	stw	r3,1284(sp)
 20089d8:	0039e006 	br	200715c <___vfprintf_internal_r+0x3bc>
 20089dc:	008080b4 	movhi	r2,514
 20089e0:	10834604 	addi	r2,r2,3352
 20089e4:	d8814115 	stw	r2,1284(sp)
 20089e8:	003d1c06 	br	2007e5c <___vfprintf_internal_r+0x10bc>
 20089ec:	d9414d17 	ldw	r5,1332(sp)
 20089f0:	00801984 	movi	r2,102
 20089f4:	28804926 	beq	r5,r2,2008b1c <___vfprintf_internal_r+0x1d7c>
 20089f8:	200f883a 	mov	r7,r4
 20089fc:	24805716 	blt	r4,r18,2008b5c <___vfprintf_internal_r+0x1dbc>
 2008a00:	d9414c17 	ldw	r5,1328(sp)
 2008a04:	2880004c 	andi	r2,r5,1
 2008a08:	10000126 	beq	r2,zero,2008a10 <___vfprintf_internal_r+0x1c70>
 2008a0c:	21c00044 	addi	r7,r4,1
 2008a10:	d9c14515 	stw	r7,1300(sp)
 2008a14:	383fcc0e 	bge	r7,zero,2008948 <___vfprintf_internal_r+0x1ba8>
 2008a18:	d8014515 	stw	zero,1300(sp)
 2008a1c:	003fca06 	br	2008948 <___vfprintf_internal_r+0x1ba8>
 2008a20:	d9000517 	ldw	r4,20(sp)
 2008a24:	00bfff04 	movi	r2,-4
 2008a28:	1100480e 	bge	r2,r4,2008b4c <___vfprintf_internal_r+0x1dac>
 2008a2c:	99004716 	blt	r19,r4,2008b4c <___vfprintf_internal_r+0x1dac>
 2008a30:	d8c14d15 	stw	r3,1332(sp)
 2008a34:	003ff006 	br	20089f8 <___vfprintf_internal_r+0x1c58>
 2008a38:	d8800717 	ldw	r2,28(sp)
 2008a3c:	14bf8b2e 	bgeu	r2,r18,200886c <___vfprintf_internal_r+0x1acc>
 2008a40:	9007883a 	mov	r3,r18
 2008a44:	01000c04 	movi	r4,48
 2008a48:	11000005 	stb	r4,0(r2)
 2008a4c:	10800044 	addi	r2,r2,1
 2008a50:	d8800715 	stw	r2,28(sp)
 2008a54:	18bffc1e 	bne	r3,r2,2008a48 <___vfprintf_internal_r+0x1ca8>
 2008a58:	003f8406 	br	200886c <___vfprintf_internal_r+0x1acc>
 2008a5c:	d8814117 	ldw	r2,1284(sp)
 2008a60:	10c00007 	ldb	r3,0(r2)
 2008a64:	00800c04 	movi	r2,48
 2008a68:	18805b26 	beq	r3,r2,2008bd8 <___vfprintf_internal_r+0x1e38>
 2008a6c:	d9000517 	ldw	r4,20(sp)
 2008a70:	9125883a 	add	r18,r18,r4
 2008a74:	003f7506 	br	200884c <___vfprintf_internal_r+0x1aac>
 2008a78:	d9014c17 	ldw	r4,1328(sp)
 2008a7c:	2080004c 	andi	r2,r4,1
 2008a80:	1005003a 	cmpeq	r2,r2,zero
 2008a84:	103f6a26 	beq	r2,zero,2008830 <___vfprintf_internal_r+0x1a90>
 2008a88:	d8800717 	ldw	r2,28(sp)
 2008a8c:	003f7706 	br	200886c <___vfprintf_internal_r+0x1acc>
 2008a90:	d9c14515 	stw	r7,1300(sp)
 2008a94:	38004d16 	blt	r7,zero,2008bcc <___vfprintf_internal_r+0x1e2c>
 2008a98:	dc814715 	stw	r18,1308(sp)
 2008a9c:	d8014615 	stw	zero,1304(sp)
 2008aa0:	003b6106 	br	2007828 <___vfprintf_internal_r+0xa88>
 2008aa4:	d9014f17 	ldw	r4,1340(sp)
 2008aa8:	d8800504 	addi	r2,sp,20
 2008aac:	d8800115 	stw	r2,4(sp)
 2008ab0:	d8c00604 	addi	r3,sp,24
 2008ab4:	d8800704 	addi	r2,sp,28
 2008ab8:	800b883a 	mov	r5,r16
 2008abc:	880d883a 	mov	r6,r17
 2008ac0:	01c000c4 	movi	r7,3
 2008ac4:	d8c00215 	stw	r3,8(sp)
 2008ac8:	d8800315 	stw	r2,12(sp)
 2008acc:	dcc00015 	stw	r19,0(sp)
 2008ad0:	9829883a 	mov	r20,r19
 2008ad4:	200a7440 	call	200a744 <_dtoa_r>
 2008ad8:	d8814115 	stw	r2,1284(sp)
 2008adc:	003f5106 	br	2008824 <___vfprintf_internal_r+0x1a84>
 2008ae0:	d8c14217 	ldw	r3,1288(sp)
 2008ae4:	d9014317 	ldw	r4,1292(sp)
 2008ae8:	07000b44 	movi	fp,45
 2008aec:	1821883a 	mov	r16,r3
 2008af0:	2460003c 	xorhi	r17,r4,32768
 2008af4:	003f3106 	br	20087bc <___vfprintf_internal_r+0x1a1c>
 2008af8:	9d000044 	addi	r20,r19,1
 2008afc:	003f3906 	br	20087e4 <___vfprintf_internal_r+0x1a44>
 2008b00:	983f251e 	bne	r19,zero,2008798 <___vfprintf_internal_r+0x19f8>
 2008b04:	04c00044 	movi	r19,1
 2008b08:	003f2306 	br	2008798 <___vfprintf_internal_r+0x19f8>
 2008b0c:	04c00184 	movi	r19,6
 2008b10:	003f2106 	br	2008798 <___vfprintf_internal_r+0x19f8>
 2008b14:	d8014515 	stw	zero,1300(sp)
 2008b18:	003eee06 	br	20086d4 <___vfprintf_internal_r+0x1934>
 2008b1c:	200f883a 	mov	r7,r4
 2008b20:	0100370e 	bge	zero,r4,2008c00 <___vfprintf_internal_r+0x1e60>
 2008b24:	9800031e 	bne	r19,zero,2008b34 <___vfprintf_internal_r+0x1d94>
 2008b28:	d9814c17 	ldw	r6,1328(sp)
 2008b2c:	3080004c 	andi	r2,r6,1
 2008b30:	103fb726 	beq	r2,zero,2008a10 <___vfprintf_internal_r+0x1c70>
 2008b34:	20800044 	addi	r2,r4,1
 2008b38:	98a7883a 	add	r19,r19,r2
 2008b3c:	dcc14515 	stw	r19,1300(sp)
 2008b40:	980f883a 	mov	r7,r19
 2008b44:	983f800e 	bge	r19,zero,2008948 <___vfprintf_internal_r+0x1ba8>
 2008b48:	003fb306 	br	2008a18 <___vfprintf_internal_r+0x1c78>
 2008b4c:	d9814d17 	ldw	r6,1332(sp)
 2008b50:	31bfff84 	addi	r6,r6,-2
 2008b54:	d9814d15 	stw	r6,1332(sp)
 2008b58:	003f4c06 	br	200888c <___vfprintf_internal_r+0x1aec>
 2008b5c:	0100180e 	bge	zero,r4,2008bc0 <___vfprintf_internal_r+0x1e20>
 2008b60:	00800044 	movi	r2,1
 2008b64:	1485883a 	add	r2,r2,r18
 2008b68:	d8814515 	stw	r2,1300(sp)
 2008b6c:	100f883a 	mov	r7,r2
 2008b70:	103f750e 	bge	r2,zero,2008948 <___vfprintf_internal_r+0x1ba8>
 2008b74:	003fa806 	br	2008a18 <___vfprintf_internal_r+0x1c78>
 2008b78:	80c00c04 	addi	r3,r16,48
 2008b7c:	00800c04 	movi	r2,48
 2008b80:	d8c008c5 	stb	r3,35(sp)
 2008b84:	d9800804 	addi	r6,sp,32
 2008b88:	d8c00904 	addi	r3,sp,36
 2008b8c:	d8800885 	stb	r2,34(sp)
 2008b90:	003f6506 	br	2008928 <___vfprintf_internal_r+0x1b88>
 2008b94:	d9014c17 	ldw	r4,1328(sp)
 2008b98:	2084703a 	and	r2,r4,r2
 2008b9c:	103f9c26 	beq	r2,zero,2008a10 <___vfprintf_internal_r+0x1c70>
 2008ba0:	003f6606 	br	200893c <___vfprintf_internal_r+0x1b9c>
 2008ba4:	d9800804 	addi	r6,sp,32
 2008ba8:	d8c00884 	addi	r3,sp,34
 2008bac:	003f5e06 	br	2008928 <___vfprintf_internal_r+0x1b88>
 2008bb0:	00800b44 	movi	r2,45
 2008bb4:	0121c83a 	sub	r16,zero,r4
 2008bb8:	d8800845 	stb	r2,33(sp)
 2008bbc:	003f3d06 	br	20088b4 <___vfprintf_internal_r+0x1b14>
 2008bc0:	00800084 	movi	r2,2
 2008bc4:	1105c83a 	sub	r2,r2,r4
 2008bc8:	003fe606 	br	2008b64 <___vfprintf_internal_r+0x1dc4>
 2008bcc:	d8014515 	stw	zero,1300(sp)
 2008bd0:	dc814715 	stw	r18,1308(sp)
 2008bd4:	003fb106 	br	2008a9c <___vfprintf_internal_r+0x1cfc>
 2008bd8:	000d883a 	mov	r6,zero
 2008bdc:	000f883a 	mov	r7,zero
 2008be0:	8009883a 	mov	r4,r16
 2008be4:	880b883a 	mov	r5,r17
 2008be8:	20132ac0 	call	20132ac <__nedf2>
 2008bec:	103f9f26 	beq	r2,zero,2008a6c <___vfprintf_internal_r+0x1ccc>
 2008bf0:	00800044 	movi	r2,1
 2008bf4:	1509c83a 	sub	r4,r2,r20
 2008bf8:	d9000515 	stw	r4,20(sp)
 2008bfc:	003f9b06 	br	2008a6c <___vfprintf_internal_r+0x1ccc>
 2008c00:	98000d1e 	bne	r19,zero,2008c38 <___vfprintf_internal_r+0x1e98>
 2008c04:	d8c14c17 	ldw	r3,1328(sp)
 2008c08:	1880004c 	andi	r2,r3,1
 2008c0c:	10000a1e 	bne	r2,zero,2008c38 <___vfprintf_internal_r+0x1e98>
 2008c10:	01000044 	movi	r4,1
 2008c14:	200f883a 	mov	r7,r4
 2008c18:	d9014515 	stw	r4,1300(sp)
 2008c1c:	003f4a06 	br	2008948 <___vfprintf_internal_r+0x1ba8>
 2008c20:	3cc00017 	ldw	r19,0(r7)
 2008c24:	39c00104 	addi	r7,r7,4
 2008c28:	983d0e0e 	bge	r19,zero,2008064 <___vfprintf_internal_r+0x12c4>
 2008c2c:	b8c00007 	ldb	r3,0(r23)
 2008c30:	04ffffc4 	movi	r19,-1
 2008c34:	0038d906 	br	2006f9c <___vfprintf_internal_r+0x1fc>
 2008c38:	9cc00084 	addi	r19,r19,2
 2008c3c:	dcc14515 	stw	r19,1300(sp)
 2008c40:	980f883a 	mov	r7,r19
 2008c44:	983f400e 	bge	r19,zero,2008948 <___vfprintf_internal_r+0x1ba8>
 2008c48:	003f7306 	br	2008a18 <___vfprintf_internal_r+0x1c78>

02008c4c <__vfprintf_internal>:
 2008c4c:	008080b4 	movhi	r2,514
 2008c50:	108c1704 	addi	r2,r2,12380
 2008c54:	2013883a 	mov	r9,r4
 2008c58:	11000017 	ldw	r4,0(r2)
 2008c5c:	2805883a 	mov	r2,r5
 2008c60:	300f883a 	mov	r7,r6
 2008c64:	480b883a 	mov	r5,r9
 2008c68:	100d883a 	mov	r6,r2
 2008c6c:	2006da01 	jmpi	2006da0 <___vfprintf_internal_r>

02008c70 <__svfscanf_r>:
 2008c70:	deff4e04 	addi	sp,sp,-712
 2008c74:	dd80ae15 	stw	r22,696(sp)
 2008c78:	dd00ac15 	stw	r20,688(sp)
 2008c7c:	dc40a915 	stw	r17,676(sp)
 2008c80:	dc00a815 	stw	r16,672(sp)
 2008c84:	dfc0b115 	stw	ra,708(sp)
 2008c88:	df00b015 	stw	fp,704(sp)
 2008c8c:	ddc0af15 	stw	r23,700(sp)
 2008c90:	dd40ad15 	stw	r21,692(sp)
 2008c94:	dcc0ab15 	stw	r19,684(sp)
 2008c98:	dc80aa15 	stw	r18,680(sp)
 2008c9c:	202d883a 	mov	r22,r4
 2008ca0:	2821883a 	mov	r16,r5
 2008ca4:	d9c0a415 	stw	r7,656(sp)
 2008ca8:	3029883a 	mov	r20,r6
 2008cac:	d800a215 	stw	zero,648(sp)
 2008cb0:	0023883a 	mov	r17,zero
 2008cb4:	d800a115 	stw	zero,644(sp)
 2008cb8:	d800a015 	stw	zero,640(sp)
 2008cbc:	a1000007 	ldb	r4,0(r20)
 2008cc0:	d9000115 	stw	r4,4(sp)
 2008cc4:	20001f26 	beq	r4,zero,2008d44 <__svfscanf_r+0xd4>
 2008cc8:	048080b4 	movhi	r18,514
 2008ccc:	948c1b04 	addi	r18,r18,12396
 2008cd0:	91800017 	ldw	r6,0(r18)
 2008cd4:	a5000044 	addi	r20,r20,1
 2008cd8:	3107883a 	add	r3,r6,r4
 2008cdc:	18800003 	ldbu	r2,0(r3)
 2008ce0:	1080020c 	andi	r2,r2,8
 2008ce4:	10002426 	beq	r2,zero,2008d78 <__svfscanf_r+0x108>
 2008ce8:	80c00117 	ldw	r3,4(r16)
 2008cec:	00c00e0e 	bge	zero,r3,2008d28 <__svfscanf_r+0xb8>
 2008cf0:	81400017 	ldw	r5,0(r16)
 2008cf4:	90800017 	ldw	r2,0(r18)
 2008cf8:	28c00003 	ldbu	r3,0(r5)
 2008cfc:	1887883a 	add	r3,r3,r2
 2008d00:	19000003 	ldbu	r4,0(r3)
 2008d04:	2100020c 	andi	r4,r4,8
 2008d08:	203fec26 	beq	r4,zero,2008cbc <__svfscanf_r+0x4c>
 2008d0c:	80c00117 	ldw	r3,4(r16)
 2008d10:	29800044 	addi	r6,r5,1
 2008d14:	8c400044 	addi	r17,r17,1
 2008d18:	18ffffc4 	addi	r3,r3,-1
 2008d1c:	81800015 	stw	r6,0(r16)
 2008d20:	80c00115 	stw	r3,4(r16)
 2008d24:	00fff216 	blt	zero,r3,2008cf0 <__svfscanf_r+0x80>
 2008d28:	b009883a 	mov	r4,r22
 2008d2c:	800b883a 	mov	r5,r16
 2008d30:	200eae80 	call	200eae8 <__srefill_r>
 2008d34:	103fee26 	beq	r2,zero,2008cf0 <__svfscanf_r+0x80>
 2008d38:	a1000007 	ldb	r4,0(r20)
 2008d3c:	d9000115 	stw	r4,4(sp)
 2008d40:	203fe11e 	bne	r4,zero,2008cc8 <__svfscanf_r+0x58>
 2008d44:	d880a217 	ldw	r2,648(sp)
 2008d48:	dfc0b117 	ldw	ra,708(sp)
 2008d4c:	df00b017 	ldw	fp,704(sp)
 2008d50:	ddc0af17 	ldw	r23,700(sp)
 2008d54:	dd80ae17 	ldw	r22,696(sp)
 2008d58:	dd40ad17 	ldw	r21,692(sp)
 2008d5c:	dd00ac17 	ldw	r20,688(sp)
 2008d60:	dcc0ab17 	ldw	r19,684(sp)
 2008d64:	dc80aa17 	ldw	r18,680(sp)
 2008d68:	dc40a917 	ldw	r17,676(sp)
 2008d6c:	dc00a817 	ldw	r16,672(sp)
 2008d70:	dec0b204 	addi	sp,sp,712
 2008d74:	f800283a 	ret
 2008d78:	00800944 	movi	r2,37
 2008d7c:	20801626 	beq	r4,r2,2008dd8 <__svfscanf_r+0x168>
 2008d80:	80800117 	ldw	r2,4(r16)
 2008d84:	00800b0e 	bge	zero,r2,2008db4 <__svfscanf_r+0x144>
 2008d88:	81000017 	ldw	r4,0(r16)
 2008d8c:	a0ffffc7 	ldb	r3,-1(r20)
 2008d90:	20800003 	ldbu	r2,0(r4)
 2008d94:	10ffeb1e 	bne	r2,r3,2008d44 <__svfscanf_r+0xd4>
 2008d98:	80c00117 	ldw	r3,4(r16)
 2008d9c:	21800044 	addi	r6,r4,1
 2008da0:	8c400044 	addi	r17,r17,1
 2008da4:	18ffffc4 	addi	r3,r3,-1
 2008da8:	80c00115 	stw	r3,4(r16)
 2008dac:	81800015 	stw	r6,0(r16)
 2008db0:	003fc206 	br	2008cbc <__svfscanf_r+0x4c>
 2008db4:	b009883a 	mov	r4,r22
 2008db8:	800b883a 	mov	r5,r16
 2008dbc:	200eae80 	call	200eae8 <__srefill_r>
 2008dc0:	103ff126 	beq	r2,zero,2008d88 <__svfscanf_r+0x118>
 2008dc4:	d900a217 	ldw	r4,648(sp)
 2008dc8:	2004c91e 	bne	r4,zero,200a0f0 <__svfscanf_r+0x1480>
 2008dcc:	00bfffc4 	movi	r2,-1
 2008dd0:	d880a215 	stw	r2,648(sp)
 2008dd4:	003fdb06 	br	2008d44 <__svfscanf_r+0xd4>
 2008dd8:	d800a315 	stw	zero,652(sp)
 2008ddc:	0027883a 	mov	r19,zero
 2008de0:	a0c00003 	ldbu	r3,0(r20)
 2008de4:	00801e04 	movi	r2,120
 2008de8:	a5000044 	addi	r20,r20,1
 2008dec:	19403fcc 	andi	r5,r3,255
 2008df0:	2940201c 	xori	r5,r5,128
 2008df4:	297fe004 	addi	r5,r5,-128
 2008df8:	10c08036 	bltu	r2,r3,2008ffc <__svfscanf_r+0x38c>
 2008dfc:	18c5883a 	add	r2,r3,r3
 2008e00:	1085883a 	add	r2,r2,r2
 2008e04:	00c08074 	movhi	r3,513
 2008e08:	18e38604 	addi	r3,r3,-29160
 2008e0c:	10c5883a 	add	r2,r2,r3
 2008e10:	11000017 	ldw	r4,0(r2)
 2008e14:	2000683a 	jmp	r4
 2008e18:	02008dcc 	andi	r8,zero,567
 2008e1c:	02008ffc 	xorhi	r8,zero,575
 2008e20:	02008ffc 	xorhi	r8,zero,575
 2008e24:	02008ffc 	xorhi	r8,zero,575
 2008e28:	02008ffc 	xorhi	r8,zero,575
 2008e2c:	02008ffc 	xorhi	r8,zero,575
 2008e30:	02008ffc 	xorhi	r8,zero,575
 2008e34:	02008ffc 	xorhi	r8,zero,575
 2008e38:	02008ffc 	xorhi	r8,zero,575
 2008e3c:	02008ffc 	xorhi	r8,zero,575
 2008e40:	02008ffc 	xorhi	r8,zero,575
 2008e44:	02008ffc 	xorhi	r8,zero,575
 2008e48:	02008ffc 	xorhi	r8,zero,575
 2008e4c:	02008ffc 	xorhi	r8,zero,575
 2008e50:	02008ffc 	xorhi	r8,zero,575
 2008e54:	02008ffc 	xorhi	r8,zero,575
 2008e58:	02008ffc 	xorhi	r8,zero,575
 2008e5c:	02008ffc 	xorhi	r8,zero,575
 2008e60:	02008ffc 	xorhi	r8,zero,575
 2008e64:	02008ffc 	xorhi	r8,zero,575
 2008e68:	02008ffc 	xorhi	r8,zero,575
 2008e6c:	02008ffc 	xorhi	r8,zero,575
 2008e70:	02008ffc 	xorhi	r8,zero,575
 2008e74:	02008ffc 	xorhi	r8,zero,575
 2008e78:	02008ffc 	xorhi	r8,zero,575
 2008e7c:	02008ffc 	xorhi	r8,zero,575
 2008e80:	02008ffc 	xorhi	r8,zero,575
 2008e84:	02008ffc 	xorhi	r8,zero,575
 2008e88:	02008ffc 	xorhi	r8,zero,575
 2008e8c:	02008ffc 	xorhi	r8,zero,575
 2008e90:	02008ffc 	xorhi	r8,zero,575
 2008e94:	02008ffc 	xorhi	r8,zero,575
 2008e98:	02008ffc 	xorhi	r8,zero,575
 2008e9c:	02008ffc 	xorhi	r8,zero,575
 2008ea0:	02008ffc 	xorhi	r8,zero,575
 2008ea4:	02008ffc 	xorhi	r8,zero,575
 2008ea8:	02008ffc 	xorhi	r8,zero,575
 2008eac:	02008d80 	call	2008d8 <OSCtxSw_SWITCH_PC+0x200898>
 2008eb0:	02008ffc 	xorhi	r8,zero,575
 2008eb4:	02008ffc 	xorhi	r8,zero,575
 2008eb8:	02008ffc 	xorhi	r8,zero,575
 2008ebc:	02008ffc 	xorhi	r8,zero,575
 2008ec0:	0200a020 	cmpeqi	r8,zero,640
 2008ec4:	02008ffc 	xorhi	r8,zero,575
 2008ec8:	02008ffc 	xorhi	r8,zero,575
 2008ecc:	02008ffc 	xorhi	r8,zero,575
 2008ed0:	02008ffc 	xorhi	r8,zero,575
 2008ed4:	02008ffc 	xorhi	r8,zero,575
 2008ed8:	02009a1c 	xori	r8,zero,616
 2008edc:	02009a1c 	xori	r8,zero,616
 2008ee0:	02009a1c 	xori	r8,zero,616
 2008ee4:	02009a1c 	xori	r8,zero,616
 2008ee8:	02009a1c 	xori	r8,zero,616
 2008eec:	02009a1c 	xori	r8,zero,616
 2008ef0:	02009a1c 	xori	r8,zero,616
 2008ef4:	02009a1c 	xori	r8,zero,616
 2008ef8:	02009a1c 	xori	r8,zero,616
 2008efc:	02009a1c 	xori	r8,zero,616
 2008f00:	02008ffc 	xorhi	r8,zero,575
 2008f04:	02008ffc 	xorhi	r8,zero,575
 2008f08:	02008ffc 	xorhi	r8,zero,575
 2008f0c:	02008ffc 	xorhi	r8,zero,575
 2008f10:	02008ffc 	xorhi	r8,zero,575
 2008f14:	02008ffc 	xorhi	r8,zero,575
 2008f18:	02008ffc 	xorhi	r8,zero,575
 2008f1c:	02008ffc 	xorhi	r8,zero,575
 2008f20:	02008ffc 	xorhi	r8,zero,575
 2008f24:	02008ffc 	xorhi	r8,zero,575
 2008f28:	0200a19c 	xori	r8,zero,646
 2008f2c:	0200a194 	movui	r8,646
 2008f30:	02008ffc 	xorhi	r8,zero,575
 2008f34:	0200a194 	movui	r8,646
 2008f38:	02008ffc 	xorhi	r8,zero,575
 2008f3c:	02008ffc 	xorhi	r8,zero,575
 2008f40:	02008ffc 	xorhi	r8,zero,575
 2008f44:	02008ffc 	xorhi	r8,zero,575
 2008f48:	0200a22c 	andhi	r8,zero,648
 2008f4c:	02008ffc 	xorhi	r8,zero,575
 2008f50:	02008ffc 	xorhi	r8,zero,575
 2008f54:	0200a1e4 	muli	r8,zero,647
 2008f58:	02008ffc 	xorhi	r8,zero,575
 2008f5c:	02008ffc 	xorhi	r8,zero,575
 2008f60:	02008ffc 	xorhi	r8,zero,575
 2008f64:	02008ffc 	xorhi	r8,zero,575
 2008f68:	02008ffc 	xorhi	r8,zero,575
 2008f6c:	02008ffc 	xorhi	r8,zero,575
 2008f70:	02008ffc 	xorhi	r8,zero,575
 2008f74:	02008ffc 	xorhi	r8,zero,575
 2008f78:	0200a028 	cmpgeui	r8,zero,640
 2008f7c:	02008ffc 	xorhi	r8,zero,575
 2008f80:	02008ffc 	xorhi	r8,zero,575
 2008f84:	0200a1c8 	cmpgei	r8,zero,647
 2008f88:	02008ffc 	xorhi	r8,zero,575
 2008f8c:	02008ffc 	xorhi	r8,zero,575
 2008f90:	02008ffc 	xorhi	r8,zero,575
 2008f94:	02008ffc 	xorhi	r8,zero,575
 2008f98:	02008ffc 	xorhi	r8,zero,575
 2008f9c:	02008ffc 	xorhi	r8,zero,575
 2008fa0:	02008ffc 	xorhi	r8,zero,575
 2008fa4:	0200a1bc 	xorhi	r8,zero,646
 2008fa8:	0200a1a0 	cmpeqi	r8,zero,646
 2008fac:	0200a194 	movui	r8,646
 2008fb0:	0200a194 	movui	r8,646
 2008fb4:	0200a194 	movui	r8,646
 2008fb8:	0200a18c 	andi	r8,zero,646
 2008fbc:	0200a280 	call	200a28 <OSCtxSw_SWITCH_PC+0x2009e8>
 2008fc0:	02008ffc 	xorhi	r8,zero,575
 2008fc4:	02008ffc 	xorhi	r8,zero,575
 2008fc8:	0200a26c 	andhi	r8,zero,649
 2008fcc:	02008ffc 	xorhi	r8,zero,575
 2008fd0:	0200a204 	movi	r8,648
 2008fd4:	0200a1e8 	cmpgeui	r8,zero,647
 2008fd8:	0200a23c 	xorhi	r8,zero,648
 2008fdc:	02008ffc 	xorhi	r8,zero,575
 2008fe0:	02008ffc 	xorhi	r8,zero,575
 2008fe4:	0200a234 	movhi	r8,648
 2008fe8:	02008ffc 	xorhi	r8,zero,575
 2008fec:	0200956c 	andhi	r8,zero,597
 2008ff0:	02008ffc 	xorhi	r8,zero,575
 2008ff4:	02008ffc 	xorhi	r8,zero,575
 2008ff8:	0200a028 	cmpgeui	r8,zero,640
 2008ffc:	2987883a 	add	r3,r5,r6
 2009000:	18800003 	ldbu	r2,0(r3)
 2009004:	1080004c 	andi	r2,r2,1
 2009008:	1005003a 	cmpeq	r2,r2,zero
 200900c:	10002c26 	beq	r2,zero,20090c0 <__svfscanf_r+0x450>
 2009010:	01008074 	movhi	r4,513
 2009014:	2101c604 	addi	r4,r4,1816
 2009018:	00800284 	movi	r2,10
 200901c:	d900a015 	stw	r4,640(sp)
 2009020:	054000c4 	movi	r21,3
 2009024:	d880a115 	stw	r2,644(sp)
 2009028:	80c00117 	ldw	r3,4(r16)
 200902c:	00c14a0e 	bge	zero,r3,2009558 <__svfscanf_r+0x8e8>
 2009030:	9880100c 	andi	r2,r19,64
 2009034:	10001326 	beq	r2,zero,2009084 <__svfscanf_r+0x414>
 2009038:	00800104 	movi	r2,4
 200903c:	157f1f36 	bltu	r2,r21,2008cbc <__svfscanf_r+0x4c>
 2009040:	ad45883a 	add	r2,r21,r21
 2009044:	1085883a 	add	r2,r2,r2
 2009048:	00c08074 	movhi	r3,513
 200904c:	18e41704 	addi	r3,r3,-28580
 2009050:	10c5883a 	add	r2,r2,r3
 2009054:	11000017 	ldw	r4,0(r2)
 2009058:	2000683a 	jmp	r4
 200905c:	020090c8 	cmpgei	r8,zero,579
 2009060:	020091d4 	movui	r8,583
 2009064:	02009248 	cmpgei	r8,zero,585
 2009068:	02009534 	movhi	r8,596
 200906c:	02009380 	call	200938 <OSCtxSw_SWITCH_PC+0x2008f8>
 2009070:	b009883a 	mov	r4,r22
 2009074:	800b883a 	mov	r5,r16
 2009078:	200eae80 	call	200eae8 <__srefill_r>
 200907c:	103f511e 	bne	r2,zero,2008dc4 <__svfscanf_r+0x154>
 2009080:	8c400044 	addi	r17,r17,1
 2009084:	81400017 	ldw	r5,0(r16)
 2009088:	90800017 	ldw	r2,0(r18)
 200908c:	28c00003 	ldbu	r3,0(r5)
 2009090:	1887883a 	add	r3,r3,r2
 2009094:	19000003 	ldbu	r4,0(r3)
 2009098:	2100020c 	andi	r4,r4,8
 200909c:	203fe626 	beq	r4,zero,2009038 <__svfscanf_r+0x3c8>
 20090a0:	80c00117 	ldw	r3,4(r16)
 20090a4:	18ffffc4 	addi	r3,r3,-1
 20090a8:	80c00115 	stw	r3,4(r16)
 20090ac:	00fff00e 	bge	zero,r3,2009070 <__svfscanf_r+0x400>
 20090b0:	29800044 	addi	r6,r5,1
 20090b4:	8c400044 	addi	r17,r17,1
 20090b8:	81800015 	stw	r6,0(r16)
 20090bc:	003ff106 	br	2009084 <__svfscanf_r+0x414>
 20090c0:	9cc00054 	ori	r19,r19,1
 20090c4:	003fd206 	br	2009010 <__svfscanf_r+0x3a0>
 20090c8:	d8c0a317 	ldw	r3,652(sp)
 20090cc:	1800021e 	bne	r3,zero,20090d8 <__svfscanf_r+0x468>
 20090d0:	01000044 	movi	r4,1
 20090d4:	d900a315 	stw	r4,652(sp)
 20090d8:	9880004c 	andi	r2,r19,1
 20090dc:	1005003a 	cmpeq	r2,r2,zero
 20090e0:	1003d91e 	bne	r2,zero,200a048 <__svfscanf_r+0x13d8>
 20090e4:	9d40040c 	andi	r21,r19,16
 20090e8:	a839003a 	cmpeq	fp,r21,zero
 20090ec:	e0042526 	beq	fp,zero,200a184 <__svfscanf_r+0x1514>
 20090f0:	d880a417 	ldw	r2,656(sp)
 20090f4:	14c00017 	ldw	r19,0(r2)
 20090f8:	10800104 	addi	r2,r2,4
 20090fc:	d880a415 	stw	r2,656(sp)
 2009100:	d8c0a317 	ldw	r3,652(sp)
 2009104:	18041a26 	beq	r3,zero,200a170 <__svfscanf_r+0x1500>
 2009108:	010080b4 	movhi	r4,514
 200910c:	210c1c04 	addi	r4,r4,12400
 2009110:	20800017 	ldw	r2,0(r4)
 2009114:	103f2b26 	beq	r2,zero,2008dc4 <__svfscanf_r+0x154>
 2009118:	d8804404 	addi	r2,sp,272
 200911c:	0025883a 	mov	r18,zero
 2009120:	d880a615 	stw	r2,664(sp)
 2009124:	05ffffc4 	movi	r23,-1
 2009128:	80800017 	ldw	r2,0(r16)
 200912c:	80c00117 	ldw	r3,4(r16)
 2009130:	d900a617 	ldw	r4,664(sp)
 2009134:	12000003 	ldbu	r8,0(r2)
 2009138:	18ffffc4 	addi	r3,r3,-1
 200913c:	11800044 	addi	r6,r2,1
 2009140:	248f883a 	add	r7,r4,r18
 2009144:	80c00115 	stw	r3,4(r16)
 2009148:	81800015 	stw	r6,0(r16)
 200914c:	3a000005 	stb	r8,0(r7)
 2009150:	d9000204 	addi	r4,sp,8
 2009154:	000b883a 	mov	r5,zero
 2009158:	01800204 	movi	r6,8
 200915c:	200d4680 	call	200d468 <memset>
 2009160:	d980a617 	ldw	r6,664(sp)
 2009164:	94800044 	addi	r18,r18,1
 2009168:	d8800204 	addi	r2,sp,8
 200916c:	b009883a 	mov	r4,r22
 2009170:	980b883a 	mov	r5,r19
 2009174:	900f883a 	mov	r7,r18
 2009178:	d8800015 	stw	r2,0(sp)
 200917c:	200d1040 	call	200d104 <_mbrtowc_r>
 2009180:	1007883a 	mov	r3,r2
 2009184:	15ff0f26 	beq	r2,r23,2008dc4 <__svfscanf_r+0x154>
 2009188:	1003f11e 	bne	r2,zero,200a150 <__svfscanf_r+0x14e0>
 200918c:	a800011e 	bne	r21,zero,2009194 <__svfscanf_r+0x524>
 2009190:	98000015 	stw	zero,0(r19)
 2009194:	d8c0a317 	ldw	r3,652(sp)
 2009198:	8ca3883a 	add	r17,r17,r18
 200919c:	18ffffc4 	addi	r3,r3,-1
 20091a0:	d8c0a315 	stw	r3,652(sp)
 20091a4:	e0000126 	beq	fp,zero,20091ac <__svfscanf_r+0x53c>
 20091a8:	9cc00104 	addi	r19,r19,4
 20091ac:	0025883a 	mov	r18,zero
 20091b0:	80c00117 	ldw	r3,4(r16)
 20091b4:	00c3e90e 	bge	zero,r3,200a15c <__svfscanf_r+0x14ec>
 20091b8:	d900a317 	ldw	r4,652(sp)
 20091bc:	2003ec26 	beq	r4,zero,200a170 <__svfscanf_r+0x1500>
 20091c0:	00c080b4 	movhi	r3,514
 20091c4:	18cc1c04 	addi	r3,r3,12400
 20091c8:	18800017 	ldw	r2,0(r3)
 20091cc:	90bfd61e 	bne	r18,r2,2009128 <__svfscanf_r+0x4b8>
 20091d0:	003efc06 	br	2008dc4 <__svfscanf_r+0x154>
 20091d4:	d880a317 	ldw	r2,652(sp)
 20091d8:	1000021e 	bne	r2,zero,20091e4 <__svfscanf_r+0x574>
 20091dc:	00ffffc4 	movi	r3,-1
 20091e0:	d8c0a315 	stw	r3,652(sp)
 20091e4:	9880040c 	andi	r2,r19,16
 20091e8:	10036526 	beq	r2,zero,2009f80 <__svfscanf_r+0x1310>
 20091ec:	0027883a 	mov	r19,zero
 20091f0:	dd400404 	addi	r21,sp,16
 20091f4:	81000017 	ldw	r4,0(r16)
 20091f8:	20800003 	ldbu	r2,0(r4)
 20091fc:	a885883a 	add	r2,r21,r2
 2009200:	10c00007 	ldb	r3,0(r2)
 2009204:	1803be26 	beq	r3,zero,200a100 <__svfscanf_r+0x1490>
 2009208:	80c00117 	ldw	r3,4(r16)
 200920c:	21800044 	addi	r6,r4,1
 2009210:	d900a317 	ldw	r4,652(sp)
 2009214:	18ffffc4 	addi	r3,r3,-1
 2009218:	9cc00044 	addi	r19,r19,1
 200921c:	81800015 	stw	r6,0(r16)
 2009220:	80c00115 	stw	r3,4(r16)
 2009224:	24c3b626 	beq	r4,r19,200a100 <__svfscanf_r+0x1490>
 2009228:	00fff216 	blt	zero,r3,20091f4 <__svfscanf_r+0x584>
 200922c:	b009883a 	mov	r4,r22
 2009230:	800b883a 	mov	r5,r16
 2009234:	200eae80 	call	200eae8 <__srefill_r>
 2009238:	103fee26 	beq	r2,zero,20091f4 <__svfscanf_r+0x584>
 200923c:	983ee126 	beq	r19,zero,2008dc4 <__svfscanf_r+0x154>
 2009240:	8ce3883a 	add	r17,r17,r19
 2009244:	003e9d06 	br	2008cbc <__svfscanf_r+0x4c>
 2009248:	d900a317 	ldw	r4,652(sp)
 200924c:	2000021e 	bne	r4,zero,2009258 <__svfscanf_r+0x5e8>
 2009250:	00bfffc4 	movi	r2,-1
 2009254:	d880a315 	stw	r2,652(sp)
 2009258:	9880004c 	andi	r2,r19,1
 200925c:	1005003a 	cmpeq	r2,r2,zero
 2009260:	1001f41e 	bne	r2,zero,2009a34 <__svfscanf_r+0xdc4>
 2009264:	9dc0040c 	andi	r23,r19,16
 2009268:	b807003a 	cmpeq	r3,r23,zero
 200926c:	d8c0a515 	stw	r3,660(sp)
 2009270:	1803b21e 	bne	r3,zero,200a13c <__svfscanf_r+0x14cc>
 2009274:	dd400104 	addi	r21,sp,4
 2009278:	0027883a 	mov	r19,zero
 200927c:	073fffc4 	movi	fp,-1
 2009280:	81400017 	ldw	r5,0(r16)
 2009284:	90800017 	ldw	r2,0(r18)
 2009288:	29c00003 	ldbu	r7,0(r5)
 200928c:	38c03fcc 	andi	r3,r7,255
 2009290:	1887883a 	add	r3,r3,r2
 2009294:	19000003 	ldbu	r4,0(r3)
 2009298:	2100020c 	andi	r4,r4,8
 200929c:	2000321e 	bne	r4,zero,2009368 <__svfscanf_r+0x6f8>
 20092a0:	d8c0a317 	ldw	r3,652(sp)
 20092a4:	18003026 	beq	r3,zero,2009368 <__svfscanf_r+0x6f8>
 20092a8:	008080b4 	movhi	r2,514
 20092ac:	108c1c04 	addi	r2,r2,12400
 20092b0:	10c00017 	ldw	r3,0(r2)
 20092b4:	98fec326 	beq	r19,r3,2008dc4 <__svfscanf_r+0x154>
 20092b8:	d8c04404 	addi	r3,sp,272
 20092bc:	80800117 	ldw	r2,4(r16)
 20092c0:	d8c0a615 	stw	r3,664(sp)
 20092c4:	d900a617 	ldw	r4,664(sp)
 20092c8:	10ffffc4 	addi	r3,r2,-1
 20092cc:	29800044 	addi	r6,r5,1
 20092d0:	80c00115 	stw	r3,4(r16)
 20092d4:	24c5883a 	add	r2,r4,r19
 20092d8:	81800015 	stw	r6,0(r16)
 20092dc:	d9000204 	addi	r4,sp,8
 20092e0:	000b883a 	mov	r5,zero
 20092e4:	01800204 	movi	r6,8
 20092e8:	11c00005 	stb	r7,0(r2)
 20092ec:	200d4680 	call	200d468 <memset>
 20092f0:	d980a617 	ldw	r6,664(sp)
 20092f4:	9cc00044 	addi	r19,r19,1
 20092f8:	d8800204 	addi	r2,sp,8
 20092fc:	b009883a 	mov	r4,r22
 2009300:	a80b883a 	mov	r5,r21
 2009304:	980f883a 	mov	r7,r19
 2009308:	d8800015 	stw	r2,0(sp)
 200930c:	200d1040 	call	200d104 <_mbrtowc_r>
 2009310:	1007883a 	mov	r3,r2
 2009314:	173eab26 	beq	r2,fp,2008dc4 <__svfscanf_r+0x154>
 2009318:	1003851e 	bne	r2,zero,200a130 <__svfscanf_r+0x14c0>
 200931c:	a8000015 	stw	zero,0(r21)
 2009320:	a9000017 	ldw	r4,0(r21)
 2009324:	200ce800 	call	200ce80 <iswspace>
 2009328:	1003781e 	bne	r2,zero,200a10c <__svfscanf_r+0x149c>
 200932c:	d900a317 	ldw	r4,652(sp)
 2009330:	d880a517 	ldw	r2,660(sp)
 2009334:	8ce3883a 	add	r17,r17,r19
 2009338:	213fffc4 	addi	r4,r4,-1
 200933c:	d900a315 	stw	r4,652(sp)
 2009340:	10000126 	beq	r2,zero,2009348 <__svfscanf_r+0x6d8>
 2009344:	ad400104 	addi	r21,r21,4
 2009348:	0027883a 	mov	r19,zero
 200934c:	80c00117 	ldw	r3,4(r16)
 2009350:	00ffcb16 	blt	zero,r3,2009280 <__svfscanf_r+0x610>
 2009354:	b009883a 	mov	r4,r22
 2009358:	800b883a 	mov	r5,r16
 200935c:	200eae80 	call	200eae8 <__srefill_r>
 2009360:	103fc726 	beq	r2,zero,2009280 <__svfscanf_r+0x610>
 2009364:	983e971e 	bne	r19,zero,2008dc4 <__svfscanf_r+0x154>
 2009368:	b83e541e 	bne	r23,zero,2008cbc <__svfscanf_r+0x4c>
 200936c:	d900a217 	ldw	r4,648(sp)
 2009370:	a8000015 	stw	zero,0(r21)
 2009374:	21000044 	addi	r4,r4,1
 2009378:	d900a215 	stw	r4,648(sp)
 200937c:	003e4f06 	br	2008cbc <__svfscanf_r+0x4c>
 2009380:	d900a317 	ldw	r4,652(sp)
 2009384:	00805704 	movi	r2,348
 2009388:	20ffffc4 	addi	r3,r4,-1
 200938c:	10c1ed2e 	bgeu	r2,r3,2009b44 <__svfscanf_r+0xed4>
 2009390:	00805744 	movi	r2,349
 2009394:	21bfa8c4 	addi	r6,r4,-349
 2009398:	9d41e014 	ori	r21,r19,1920
 200939c:	d880a315 	stw	r2,652(sp)
 20093a0:	d8c04404 	addi	r3,sp,272
 20093a4:	d8c0a615 	stw	r3,664(sp)
 20093a8:	182f883a 	mov	r23,r3
 20093ac:	d8009f15 	stw	zero,636(sp)
 20093b0:	d8009e15 	stw	zero,632(sp)
 20093b4:	d8009d15 	stw	zero,628(sp)
 20093b8:	d8009c15 	stw	zero,624(sp)
 20093bc:	0039883a 	mov	fp,zero
 20093c0:	0025883a 	mov	r18,zero
 20093c4:	80800017 	ldw	r2,0(r16)
 20093c8:	11400003 	ldbu	r5,0(r2)
 20093cc:	00801384 	movi	r2,78
 20093d0:	28fff544 	addi	r3,r5,-43
 20093d4:	18c03fcc 	andi	r3,r3,255
 20093d8:	10c07d36 	bltu	r2,r3,20095d0 <__svfscanf_r+0x960>
 20093dc:	18c5883a 	add	r2,r3,r3
 20093e0:	1085883a 	add	r2,r2,r2
 20093e4:	00c08074 	movhi	r3,513
 20093e8:	18e4fe04 	addi	r3,r3,-27656
 20093ec:	10c5883a 	add	r2,r2,r3
 20093f0:	11000017 	ldw	r4,0(r2)
 20093f4:	2000683a 	jmp	r4
 20093f8:	02009588 	cmpgei	r8,zero,598
 20093fc:	020095d0 	cmplti	r8,zero,599
 2009400:	02009588 	cmpgei	r8,zero,598
 2009404:	0200971c 	xori	r8,zero,604
 2009408:	020095d0 	cmplti	r8,zero,599
 200940c:	02009754 	movui	r8,605
 2009410:	02009788 	cmpgei	r8,zero,606
 2009414:	02009788 	cmpgei	r8,zero,606
 2009418:	02009788 	cmpgei	r8,zero,606
 200941c:	02009788 	cmpgei	r8,zero,606
 2009420:	02009788 	cmpgei	r8,zero,606
 2009424:	02009788 	cmpgei	r8,zero,606
 2009428:	02009788 	cmpgei	r8,zero,606
 200942c:	02009788 	cmpgei	r8,zero,606
 2009430:	02009788 	cmpgei	r8,zero,606
 2009434:	020095d0 	cmplti	r8,zero,599
 2009438:	020095d0 	cmplti	r8,zero,599
 200943c:	020095d0 	cmplti	r8,zero,599
 2009440:	020095d0 	cmplti	r8,zero,599
 2009444:	020095d0 	cmplti	r8,zero,599
 2009448:	020095d0 	cmplti	r8,zero,599
 200944c:	020095d0 	cmplti	r8,zero,599
 2009450:	020097a8 	cmpgeui	r8,zero,606
 2009454:	020095d0 	cmplti	r8,zero,599
 2009458:	020095d0 	cmplti	r8,zero,599
 200945c:	020095d0 	cmplti	r8,zero,599
 2009460:	020097b8 	rdprs	r8,zero,606
 2009464:	02009854 	movui	r8,609
 2009468:	020095d0 	cmplti	r8,zero,599
 200946c:	020095d0 	cmplti	r8,zero,599
 2009470:	02009870 	cmpltui	r8,zero,609
 2009474:	020095d0 	cmplti	r8,zero,599
 2009478:	020095d0 	cmplti	r8,zero,599
 200947c:	020095d0 	cmplti	r8,zero,599
 2009480:	020095d0 	cmplti	r8,zero,599
 2009484:	0200989c 	xori	r8,zero,610
 2009488:	020095d0 	cmplti	r8,zero,599
 200948c:	020095d0 	cmplti	r8,zero,599
 2009490:	020095d0 	cmplti	r8,zero,599
 2009494:	020095d0 	cmplti	r8,zero,599
 2009498:	020095d0 	cmplti	r8,zero,599
 200949c:	020098f0 	cmpltui	r8,zero,611
 20094a0:	020095d0 	cmplti	r8,zero,599
 20094a4:	020095d0 	cmplti	r8,zero,599
 20094a8:	020095d0 	cmplti	r8,zero,599
 20094ac:	020095d0 	cmplti	r8,zero,599
 20094b0:	02009a00 	call	2009a0 <OSCtxSw_SWITCH_PC+0x200960>
 20094b4:	020095d0 	cmplti	r8,zero,599
 20094b8:	020095d0 	cmplti	r8,zero,599
 20094bc:	020095d0 	cmplti	r8,zero,599
 20094c0:	020095d0 	cmplti	r8,zero,599
 20094c4:	020095d0 	cmplti	r8,zero,599
 20094c8:	020095d0 	cmplti	r8,zero,599
 20094cc:	020095d0 	cmplti	r8,zero,599
 20094d0:	020097a8 	cmpgeui	r8,zero,606
 20094d4:	020095d0 	cmplti	r8,zero,599
 20094d8:	020095d0 	cmplti	r8,zero,599
 20094dc:	020095d0 	cmplti	r8,zero,599
 20094e0:	020097b8 	rdprs	r8,zero,606
 20094e4:	02009854 	movui	r8,609
 20094e8:	020095d0 	cmplti	r8,zero,599
 20094ec:	020095d0 	cmplti	r8,zero,599
 20094f0:	02009870 	cmpltui	r8,zero,609
 20094f4:	020095d0 	cmplti	r8,zero,599
 20094f8:	020095d0 	cmplti	r8,zero,599
 20094fc:	020095d0 	cmplti	r8,zero,599
 2009500:	020095d0 	cmplti	r8,zero,599
 2009504:	0200989c 	xori	r8,zero,610
 2009508:	020095d0 	cmplti	r8,zero,599
 200950c:	020095d0 	cmplti	r8,zero,599
 2009510:	020095d0 	cmplti	r8,zero,599
 2009514:	020095d0 	cmplti	r8,zero,599
 2009518:	020095d0 	cmplti	r8,zero,599
 200951c:	020098f0 	cmpltui	r8,zero,611
 2009520:	020095d0 	cmplti	r8,zero,599
 2009524:	020095d0 	cmplti	r8,zero,599
 2009528:	020095d0 	cmplti	r8,zero,599
 200952c:	020095d0 	cmplti	r8,zero,599
 2009530:	02009a00 	call	2009a0 <OSCtxSw_SWITCH_PC+0x200960>
 2009534:	d900a317 	ldw	r4,652(sp)
 2009538:	00805704 	movi	r2,348
 200953c:	20ffffc4 	addi	r3,r4,-1
 2009540:	10c18c2e 	bgeu	r2,r3,2009b74 <__svfscanf_r+0xf04>
 2009544:	00805744 	movi	r2,349
 2009548:	257fa8c4 	addi	r21,r4,-349
 200954c:	9c836014 	ori	r18,r19,3456
 2009550:	d880a315 	stw	r2,652(sp)
 2009554:	0001a106 	br	2009bdc <__svfscanf_r+0xf6c>
 2009558:	b009883a 	mov	r4,r22
 200955c:	800b883a 	mov	r5,r16
 2009560:	200eae80 	call	200eae8 <__srefill_r>
 2009564:	103eb226 	beq	r2,zero,2009030 <__svfscanf_r+0x3c0>
 2009568:	003e1606 	br	2008dc4 <__svfscanf_r+0x154>
 200956c:	01000284 	movi	r4,10
 2009570:	00808074 	movhi	r2,513
 2009574:	10832604 	addi	r2,r2,3224
 2009578:	054000c4 	movi	r21,3
 200957c:	d900a115 	stw	r4,644(sp)
 2009580:	d880a015 	stw	r2,640(sp)
 2009584:	003ea806 	br	2009028 <__svfscanf_r+0x3b8>
 2009588:	a880200c 	andi	r2,r21,128
 200958c:	10001026 	beq	r2,zero,20095d0 <__svfscanf_r+0x960>
 2009590:	00bfdfc4 	movi	r2,-129
 2009594:	a8aa703a 	and	r21,r21,r2
 2009598:	b9400005 	stb	r5,0(r23)
 200959c:	bdc00044 	addi	r23,r23,1
 20095a0:	80c00117 	ldw	r3,4(r16)
 20095a4:	8c400044 	addi	r17,r17,1
 20095a8:	18bfffc4 	addi	r2,r3,-1
 20095ac:	80800115 	stw	r2,4(r16)
 20095b0:	0080610e 	bge	zero,r2,2009738 <__svfscanf_r+0xac8>
 20095b4:	80800017 	ldw	r2,0(r16)
 20095b8:	10800044 	addi	r2,r2,1
 20095bc:	80800015 	stw	r2,0(r16)
 20095c0:	d880a317 	ldw	r2,652(sp)
 20095c4:	10bfffc4 	addi	r2,r2,-1
 20095c8:	d880a315 	stw	r2,652(sp)
 20095cc:	103f7d1e 	bne	r2,zero,20093c4 <__svfscanf_r+0x754>
 20095d0:	d8c09e17 	ldw	r3,632(sp)
 20095d4:	18000226 	beq	r3,zero,20095e0 <__svfscanf_r+0x970>
 20095d8:	00bfbfc4 	movi	r2,-257
 20095dc:	a8aa703a 	and	r21,r21,r2
 20095e0:	90ffffc4 	addi	r3,r18,-1
 20095e4:	00800044 	movi	r2,1
 20095e8:	10c0cd2e 	bgeu	r2,r3,2009920 <__svfscanf_r+0xcb0>
 20095ec:	e1003fcc 	andi	r4,fp,255
 20095f0:	2100201c 	xori	r4,r4,128
 20095f4:	213fe004 	addi	r4,r4,-128
 20095f8:	20ffffc4 	addi	r3,r4,-1
 20095fc:	00800184 	movi	r2,6
 2009600:	10c01736 	bltu	r2,r3,2009660 <__svfscanf_r+0x9f0>
 2009604:	00c00084 	movi	r3,2
 2009608:	1900880e 	bge	r3,r4,200982c <__svfscanf_r+0xbbc>
 200960c:	008000c4 	movi	r2,3
 2009610:	1100130e 	bge	r2,r4,2009660 <__svfscanf_r+0x9f0>
 2009614:	e4ffffc4 	addi	r19,fp,-1
 2009618:	b825883a 	mov	r18,r23
 200961c:	94bfffc4 	addi	r18,r18,-1
 2009620:	91400007 	ldb	r5,0(r18)
 2009624:	b009883a 	mov	r4,r22
 2009628:	800d883a 	mov	r6,r16
 200962c:	20112b80 	call	20112b8 <_ungetc_r>
 2009630:	9cffffc4 	addi	r19,r19,-1
 2009634:	98c03fcc 	andi	r3,r19,255
 2009638:	18c0201c 	xori	r3,r3,128
 200963c:	18ffe004 	addi	r3,r3,-128
 2009640:	00800084 	movi	r2,2
 2009644:	18bff51e 	bne	r3,r2,200961c <__svfscanf_r+0x9ac>
 2009648:	e0bfff04 	addi	r2,fp,-4
 200964c:	10803fcc 	andi	r2,r2,255
 2009650:	b887c83a 	sub	r3,r23,r2
 2009654:	8885c83a 	sub	r2,r17,r2
 2009658:	147fffc4 	addi	r17,r2,-1
 200965c:	1dffffc4 	addi	r23,r3,-1
 2009660:	a880400c 	andi	r2,r21,256
 2009664:	10001226 	beq	r2,zero,20096b0 <__svfscanf_r+0xa40>
 2009668:	a881000c 	andi	r2,r21,1024
 200966c:	1000651e 	bne	r2,zero,2009804 <__svfscanf_r+0xb94>
 2009670:	bdffffc4 	addi	r23,r23,-1
 2009674:	b9400007 	ldb	r5,0(r23)
 2009678:	00801944 	movi	r2,101
 200967c:	8c7fffc4 	addi	r17,r17,-1
 2009680:	28800826 	beq	r5,r2,20096a4 <__svfscanf_r+0xa34>
 2009684:	00801144 	movi	r2,69
 2009688:	28800626 	beq	r5,r2,20096a4 <__svfscanf_r+0xa34>
 200968c:	bdffffc4 	addi	r23,r23,-1
 2009690:	b009883a 	mov	r4,r22
 2009694:	800d883a 	mov	r6,r16
 2009698:	20112b80 	call	20112b8 <_ungetc_r>
 200969c:	b9400007 	ldb	r5,0(r23)
 20096a0:	8c7fffc4 	addi	r17,r17,-1
 20096a4:	b009883a 	mov	r4,r22
 20096a8:	800d883a 	mov	r6,r16
 20096ac:	20112b80 	call	20112b8 <_ungetc_r>
 20096b0:	a880040c 	andi	r2,r21,16
 20096b4:	103d811e 	bne	r2,zero,2008cbc <__svfscanf_r+0x4c>
 20096b8:	a8c1800c 	andi	r3,r21,1536
 20096bc:	00810004 	movi	r2,1024
 20096c0:	b8000005 	stb	zero,0(r23)
 20096c4:	1880bb26 	beq	r3,r2,20099b4 <__svfscanf_r+0xd44>
 20096c8:	d8809d17 	ldw	r2,628(sp)
 20096cc:	1000a61e 	bne	r2,zero,2009968 <__svfscanf_r+0xcf8>
 20096d0:	d940a617 	ldw	r5,664(sp)
 20096d4:	b009883a 	mov	r4,r22
 20096d8:	000d883a 	mov	r6,zero
 20096dc:	200f0f40 	call	200f0f4 <_strtod_r>
 20096e0:	a900004c 	andi	r4,r21,1
 20096e4:	2009003a 	cmpeq	r4,r4,zero
 20096e8:	1025883a 	mov	r18,r2
 20096ec:	1827883a 	mov	r19,r3
 20096f0:	2000951e 	bne	r4,zero,2009948 <__svfscanf_r+0xcd8>
 20096f4:	d8c0a417 	ldw	r3,656(sp)
 20096f8:	18800017 	ldw	r2,0(r3)
 20096fc:	1d400104 	addi	r21,r3,4
 2009700:	14c00115 	stw	r19,4(r2)
 2009704:	14800015 	stw	r18,0(r2)
 2009708:	d8c0a217 	ldw	r3,648(sp)
 200970c:	dd40a415 	stw	r21,656(sp)
 2009710:	18c00044 	addi	r3,r3,1
 2009714:	d8c0a215 	stw	r3,648(sp)
 2009718:	003d6806 	br	2008cbc <__svfscanf_r+0x4c>
 200971c:	a880800c 	andi	r2,r21,512
 2009720:	103fab26 	beq	r2,zero,20095d0 <__svfscanf_r+0x960>
 2009724:	d9009e17 	ldw	r4,632(sp)
 2009728:	00bf5fc4 	movi	r2,-641
 200972c:	a8aa703a 	and	r21,r21,r2
 2009730:	d9009f15 	stw	r4,636(sp)
 2009734:	003f9806 	br	2009598 <__svfscanf_r+0x928>
 2009738:	b009883a 	mov	r4,r22
 200973c:	800b883a 	mov	r5,r16
 2009740:	d980a715 	stw	r6,668(sp)
 2009744:	200eae80 	call	200eae8 <__srefill_r>
 2009748:	d980a717 	ldw	r6,668(sp)
 200974c:	103f9c26 	beq	r2,zero,20095c0 <__svfscanf_r+0x950>
 2009750:	003f9f06 	br	20095d0 <__svfscanf_r+0x960>
 2009754:	a880400c 	andi	r2,r21,256
 2009758:	10000b26 	beq	r2,zero,2009788 <__svfscanf_r+0xb18>
 200975c:	00bfdfc4 	movi	r2,-129
 2009760:	a8aa703a 	and	r21,r21,r2
 2009764:	d8809e17 	ldw	r2,632(sp)
 2009768:	10800044 	addi	r2,r2,1
 200976c:	d8809e15 	stw	r2,632(sp)
 2009770:	303f8b26 	beq	r6,zero,20095a0 <__svfscanf_r+0x930>
 2009774:	d8c0a317 	ldw	r3,652(sp)
 2009778:	31bfffc4 	addi	r6,r6,-1
 200977c:	18c00044 	addi	r3,r3,1
 2009780:	d8c0a315 	stw	r3,652(sp)
 2009784:	003f8606 	br	20095a0 <__svfscanf_r+0x930>
 2009788:	e0803fcc 	andi	r2,fp,255
 200978c:	1080201c 	xori	r2,r2,128
 2009790:	10bfe004 	addi	r2,r2,-128
 2009794:	9085883a 	add	r2,r18,r2
 2009798:	103f8d1e 	bne	r2,zero,20095d0 <__svfscanf_r+0x960>
 200979c:	00bf9fc4 	movi	r2,-385
 20097a0:	a8aa703a 	and	r21,r21,r2
 20097a4:	003f7c06 	br	2009598 <__svfscanf_r+0x928>
 20097a8:	00800044 	movi	r2,1
 20097ac:	90bf881e 	bne	r18,r2,20095d0 <__svfscanf_r+0x960>
 20097b0:	04800084 	movi	r18,2
 20097b4:	003f7806 	br	2009598 <__svfscanf_r+0x928>
 20097b8:	a8c1400c 	andi	r3,r21,1280
 20097bc:	00810004 	movi	r2,1024
 20097c0:	18800426 	beq	r3,r2,20097d4 <__svfscanf_r+0xb64>
 20097c4:	a884703a 	and	r2,r21,r2
 20097c8:	103f8126 	beq	r2,zero,20095d0 <__svfscanf_r+0x960>
 20097cc:	d8809e17 	ldw	r2,632(sp)
 20097d0:	103f8326 	beq	r2,zero,20095e0 <__svfscanf_r+0x970>
 20097d4:	a880800c 	andi	r2,r21,512
 20097d8:	1000051e 	bne	r2,zero,20097f0 <__svfscanf_r+0xb80>
 20097dc:	d8c09e17 	ldw	r3,632(sp)
 20097e0:	d9009f17 	ldw	r4,636(sp)
 20097e4:	ddc09c15 	stw	r23,624(sp)
 20097e8:	1907c83a 	sub	r3,r3,r4
 20097ec:	d8c09d15 	stw	r3,628(sp)
 20097f0:	00be7fc4 	movi	r2,-1537
 20097f4:	a884703a 	and	r2,r21,r2
 20097f8:	15406014 	ori	r21,r2,384
 20097fc:	d8009e15 	stw	zero,632(sp)
 2009800:	003f6506 	br	2009598 <__svfscanf_r+0x928>
 2009804:	d900a617 	ldw	r4,664(sp)
 2009808:	25fd4e2e 	bgeu	r4,r23,2008d44 <__svfscanf_r+0xd4>
 200980c:	bdffffc4 	addi	r23,r23,-1
 2009810:	b9400007 	ldb	r5,0(r23)
 2009814:	b009883a 	mov	r4,r22
 2009818:	800d883a 	mov	r6,r16
 200981c:	20112b80 	call	20112b8 <_ungetc_r>
 2009820:	d880a617 	ldw	r2,664(sp)
 2009824:	15fff936 	bltu	r2,r23,200980c <__svfscanf_r+0xb9c>
 2009828:	003d4606 	br	2008d44 <__svfscanf_r+0xd4>
 200982c:	d900a617 	ldw	r4,664(sp)
 2009830:	25fd442e 	bgeu	r4,r23,2008d44 <__svfscanf_r+0xd4>
 2009834:	bdffffc4 	addi	r23,r23,-1
 2009838:	b9400007 	ldb	r5,0(r23)
 200983c:	b009883a 	mov	r4,r22
 2009840:	800d883a 	mov	r6,r16
 2009844:	20112b80 	call	20112b8 <_ungetc_r>
 2009848:	d8c0a617 	ldw	r3,664(sp)
 200984c:	1dfff936 	bltu	r3,r23,2009834 <__svfscanf_r+0xbc4>
 2009850:	003d3c06 	br	2008d44 <__svfscanf_r+0xd4>
 2009854:	e0c03fcc 	andi	r3,fp,255
 2009858:	18c0201c 	xori	r3,r3,128
 200985c:	18ffe004 	addi	r3,r3,-128
 2009860:	00800084 	movi	r2,2
 2009864:	18bf5a1e 	bne	r3,r2,20095d0 <__svfscanf_r+0x960>
 2009868:	070000c4 	movi	fp,3
 200986c:	003f4a06 	br	2009598 <__svfscanf_r+0x928>
 2009870:	e0c03fcc 	andi	r3,fp,255
 2009874:	18c0201c 	xori	r3,r3,128
 2009878:	18ffe004 	addi	r3,r3,-128
 200987c:	1800231e 	bne	r3,zero,200990c <__svfscanf_r+0xc9c>
 2009880:	a8c1c00c 	andi	r3,r21,1792
 2009884:	0081c004 	movi	r2,1792
 2009888:	18bf511e 	bne	r3,r2,20095d0 <__svfscanf_r+0x960>
 200988c:	00be1fc4 	movi	r2,-1921
 2009890:	a8aa703a 	and	r21,r21,r2
 2009894:	07000044 	movi	fp,1
 2009898:	003f3f06 	br	2009598 <__svfscanf_r+0x928>
 200989c:	9000101e 	bne	r18,zero,20098e0 <__svfscanf_r+0xc70>
 20098a0:	a8c1c00c 	andi	r3,r21,1792
 20098a4:	0081c004 	movi	r2,1792
 20098a8:	18800926 	beq	r3,r2,20098d0 <__svfscanf_r+0xc60>
 20098ac:	e0c03fcc 	andi	r3,fp,255
 20098b0:	18c0201c 	xori	r3,r3,128
 20098b4:	18ffe004 	addi	r3,r3,-128
 20098b8:	00800044 	movi	r2,1
 20098bc:	18800226 	beq	r3,r2,20098c8 <__svfscanf_r+0xc58>
 20098c0:	00800104 	movi	r2,4
 20098c4:	18bf421e 	bne	r3,r2,20095d0 <__svfscanf_r+0x960>
 20098c8:	e7000044 	addi	fp,fp,1
 20098cc:	003f3206 	br	2009598 <__svfscanf_r+0x928>
 20098d0:	00be1fc4 	movi	r2,-1921
 20098d4:	a8aa703a 	and	r21,r21,r2
 20098d8:	04800044 	movi	r18,1
 20098dc:	003f2e06 	br	2009598 <__svfscanf_r+0x928>
 20098e0:	00800084 	movi	r2,2
 20098e4:	90bff11e 	bne	r18,r2,20098ac <__svfscanf_r+0xc3c>
 20098e8:	048000c4 	movi	r18,3
 20098ec:	003f2a06 	br	2009598 <__svfscanf_r+0x928>
 20098f0:	e0c03fcc 	andi	r3,fp,255
 20098f4:	18c0201c 	xori	r3,r3,128
 20098f8:	18ffe004 	addi	r3,r3,-128
 20098fc:	00800184 	movi	r2,6
 2009900:	18bf331e 	bne	r3,r2,20095d0 <__svfscanf_r+0x960>
 2009904:	070001c4 	movi	fp,7
 2009908:	003f2306 	br	2009598 <__svfscanf_r+0x928>
 200990c:	008000c4 	movi	r2,3
 2009910:	18bfed26 	beq	r3,r2,20098c8 <__svfscanf_r+0xc58>
 2009914:	00800144 	movi	r2,5
 2009918:	18bfeb26 	beq	r3,r2,20098c8 <__svfscanf_r+0xc58>
 200991c:	003f2c06 	br	20095d0 <__svfscanf_r+0x960>
 2009920:	d900a617 	ldw	r4,664(sp)
 2009924:	25fd072e 	bgeu	r4,r23,2008d44 <__svfscanf_r+0xd4>
 2009928:	bdffffc4 	addi	r23,r23,-1
 200992c:	b9400007 	ldb	r5,0(r23)
 2009930:	b009883a 	mov	r4,r22
 2009934:	800d883a 	mov	r6,r16
 2009938:	20112b80 	call	20112b8 <_ungetc_r>
 200993c:	d880a617 	ldw	r2,664(sp)
 2009940:	15fff936 	bltu	r2,r23,2009928 <__svfscanf_r+0xcb8>
 2009944:	003cff06 	br	2008d44 <__svfscanf_r+0xd4>
 2009948:	a880008c 	andi	r2,r21,2
 200994c:	10002026 	beq	r2,zero,20099d0 <__svfscanf_r+0xd60>
 2009950:	d900a417 	ldw	r4,656(sp)
 2009954:	20800017 	ldw	r2,0(r4)
 2009958:	25400104 	addi	r21,r4,4
 200995c:	10c00115 	stw	r3,4(r2)
 2009960:	14800015 	stw	r18,0(r2)
 2009964:	003f6806 	br	2009708 <__svfscanf_r+0xa98>
 2009968:	d8c09c17 	ldw	r3,624(sp)
 200996c:	b009883a 	mov	r4,r22
 2009970:	000d883a 	mov	r6,zero
 2009974:	19400044 	addi	r5,r3,1
 2009978:	01c00284 	movi	r7,10
 200997c:	20107180 	call	2010718 <_strtol_r>
 2009980:	d9009d17 	ldw	r4,628(sp)
 2009984:	110dc83a 	sub	r6,r2,r4
 2009988:	d8c0a617 	ldw	r3,664(sp)
 200998c:	d9009c17 	ldw	r4,624(sp)
 2009990:	188054c4 	addi	r2,r3,339
 2009994:	20800236 	bltu	r4,r2,20099a0 <__svfscanf_r+0xd30>
 2009998:	18805484 	addi	r2,r3,338
 200999c:	d8809c15 	stw	r2,624(sp)
 20099a0:	d9009c17 	ldw	r4,624(sp)
 20099a4:	014080b4 	movhi	r5,514
 20099a8:	29435e04 	addi	r5,r5,3448
 20099ac:	200edd00 	call	200edd0 <sprintf>
 20099b0:	003f4706 	br	20096d0 <__svfscanf_r+0xa60>
 20099b4:	d8c09e17 	ldw	r3,632(sp)
 20099b8:	d9009f17 	ldw	r4,636(sp)
 20099bc:	1905c83a 	sub	r2,r3,r4
 20099c0:	103f4326 	beq	r2,zero,20096d0 <__svfscanf_r+0xa60>
 20099c4:	008dc83a 	sub	r6,zero,r2
 20099c8:	ddc09c15 	stw	r23,624(sp)
 20099cc:	003fee06 	br	2009988 <__svfscanf_r+0xd18>
 20099d0:	d880a417 	ldw	r2,656(sp)
 20099d4:	9009883a 	mov	r4,r18
 20099d8:	180b883a 	mov	r5,r3
 20099dc:	15c00017 	ldw	r23,0(r2)
 20099e0:	15400104 	addi	r21,r2,4
 20099e4:	20043740 	call	2004374 <__isnand>
 20099e8:	10021c1e 	bne	r2,zero,200a25c <__svfscanf_r+0x15ec>
 20099ec:	980b883a 	mov	r5,r19
 20099f0:	9009883a 	mov	r4,r18
 20099f4:	20059040 	call	2005904 <__truncdfsf2>
 20099f8:	b8800015 	stw	r2,0(r23)
 20099fc:	003f4206 	br	2009708 <__svfscanf_r+0xa98>
 2009a00:	e0c03fcc 	andi	r3,fp,255
 2009a04:	18c0201c 	xori	r3,r3,128
 2009a08:	18ffe004 	addi	r3,r3,-128
 2009a0c:	008001c4 	movi	r2,7
 2009a10:	18beef1e 	bne	r3,r2,20095d0 <__svfscanf_r+0x960>
 2009a14:	07000204 	movi	fp,8
 2009a18:	003edf06 	br	2009598 <__svfscanf_r+0x928>
 2009a1c:	d900a317 	ldw	r4,652(sp)
 2009a20:	208002a4 	muli	r2,r4,10
 2009a24:	1145883a 	add	r2,r2,r5
 2009a28:	10bff404 	addi	r2,r2,-48
 2009a2c:	d880a315 	stw	r2,652(sp)
 2009a30:	003ceb06 	br	2008de0 <__svfscanf_r+0x170>
 2009a34:	9880040c 	andi	r2,r19,16
 2009a38:	10001426 	beq	r2,zero,2009a8c <__svfscanf_r+0xe1c>
 2009a3c:	0027883a 	mov	r19,zero
 2009a40:	00000906 	br	2009a68 <__svfscanf_r+0xdf8>
 2009a44:	80c00117 	ldw	r3,4(r16)
 2009a48:	d880a317 	ldw	r2,652(sp)
 2009a4c:	29800044 	addi	r6,r5,1
 2009a50:	18ffffc4 	addi	r3,r3,-1
 2009a54:	9cc00044 	addi	r19,r19,1
 2009a58:	81800015 	stw	r6,0(r16)
 2009a5c:	80c00115 	stw	r3,4(r16)
 2009a60:	14fdf726 	beq	r2,r19,2009240 <__svfscanf_r+0x5d0>
 2009a64:	00c02c0e 	bge	zero,r3,2009b18 <__svfscanf_r+0xea8>
 2009a68:	81400017 	ldw	r5,0(r16)
 2009a6c:	90800017 	ldw	r2,0(r18)
 2009a70:	28c00003 	ldbu	r3,0(r5)
 2009a74:	1887883a 	add	r3,r3,r2
 2009a78:	19000003 	ldbu	r4,0(r3)
 2009a7c:	2100020c 	andi	r4,r4,8
 2009a80:	203ff026 	beq	r4,zero,2009a44 <__svfscanf_r+0xdd4>
 2009a84:	8ce3883a 	add	r17,r17,r19
 2009a88:	003c8c06 	br	2008cbc <__svfscanf_r+0x4c>
 2009a8c:	d8c0a417 	ldw	r3,656(sp)
 2009a90:	1d400017 	ldw	r21,0(r3)
 2009a94:	a827883a 	mov	r19,r21
 2009a98:	00000e06 	br	2009ad4 <__svfscanf_r+0xe64>
 2009a9c:	80800117 	ldw	r2,4(r16)
 2009aa0:	d900a317 	ldw	r4,652(sp)
 2009aa4:	29800044 	addi	r6,r5,1
 2009aa8:	10ffffc4 	addi	r3,r2,-1
 2009aac:	213fffc4 	addi	r4,r4,-1
 2009ab0:	d900a315 	stw	r4,652(sp)
 2009ab4:	80c00115 	stw	r3,4(r16)
 2009ab8:	28800003 	ldbu	r2,0(r5)
 2009abc:	98800005 	stb	r2,0(r19)
 2009ac0:	81800015 	stw	r6,0(r16)
 2009ac4:	9cc00044 	addi	r19,r19,1
 2009ac8:	20000926 	beq	r4,zero,2009af0 <__svfscanf_r+0xe80>
 2009acc:	80800117 	ldw	r2,4(r16)
 2009ad0:	0080170e 	bge	zero,r2,2009b30 <__svfscanf_r+0xec0>
 2009ad4:	81400017 	ldw	r5,0(r16)
 2009ad8:	90800017 	ldw	r2,0(r18)
 2009adc:	28c00003 	ldbu	r3,0(r5)
 2009ae0:	1887883a 	add	r3,r3,r2
 2009ae4:	19000003 	ldbu	r4,0(r3)
 2009ae8:	2100020c 	andi	r4,r4,8
 2009aec:	203feb26 	beq	r4,zero,2009a9c <__svfscanf_r+0xe2c>
 2009af0:	9d45c83a 	sub	r2,r19,r21
 2009af4:	d8c0a217 	ldw	r3,648(sp)
 2009af8:	88a3883a 	add	r17,r17,r2
 2009afc:	d880a417 	ldw	r2,656(sp)
 2009b00:	18c00044 	addi	r3,r3,1
 2009b04:	d8c0a215 	stw	r3,648(sp)
 2009b08:	10800104 	addi	r2,r2,4
 2009b0c:	d880a415 	stw	r2,656(sp)
 2009b10:	98000005 	stb	zero,0(r19)
 2009b14:	003c6906 	br	2008cbc <__svfscanf_r+0x4c>
 2009b18:	b009883a 	mov	r4,r22
 2009b1c:	800b883a 	mov	r5,r16
 2009b20:	200eae80 	call	200eae8 <__srefill_r>
 2009b24:	103fd026 	beq	r2,zero,2009a68 <__svfscanf_r+0xdf8>
 2009b28:	8ce3883a 	add	r17,r17,r19
 2009b2c:	003c6306 	br	2008cbc <__svfscanf_r+0x4c>
 2009b30:	b009883a 	mov	r4,r22
 2009b34:	800b883a 	mov	r5,r16
 2009b38:	200eae80 	call	200eae8 <__srefill_r>
 2009b3c:	103fe526 	beq	r2,zero,2009ad4 <__svfscanf_r+0xe64>
 2009b40:	003feb06 	br	2009af0 <__svfscanf_r+0xe80>
 2009b44:	d900a317 	ldw	r4,652(sp)
 2009b48:	9d41e014 	ori	r21,r19,1920
 2009b4c:	2000821e 	bne	r4,zero,2009d58 <__svfscanf_r+0x10e8>
 2009b50:	d8c04404 	addi	r3,sp,272
 2009b54:	182f883a 	mov	r23,r3
 2009b58:	0039883a 	mov	fp,zero
 2009b5c:	d8c0a615 	stw	r3,664(sp)
 2009b60:	d8009c15 	stw	zero,624(sp)
 2009b64:	d8009d15 	stw	zero,628(sp)
 2009b68:	d8009f15 	stw	zero,636(sp)
 2009b6c:	d8009e15 	stw	zero,632(sp)
 2009b70:	003e9e06 	br	20095ec <__svfscanf_r+0x97c>
 2009b74:	d900a317 	ldw	r4,652(sp)
 2009b78:	9c836014 	ori	r18,r19,3456
 2009b7c:	2000161e 	bne	r4,zero,2009bd8 <__svfscanf_r+0xf68>
 2009b80:	d8804404 	addi	r2,sp,272
 2009b84:	d880a615 	stw	r2,664(sp)
 2009b88:	002f883a 	mov	r23,zero
 2009b8c:	1027883a 	mov	r19,r2
 2009b90:	9080400c 	andi	r2,r18,256
 2009b94:	10000926 	beq	r2,zero,2009bbc <__svfscanf_r+0xf4c>
 2009b98:	d8c0a617 	ldw	r3,664(sp)
 2009b9c:	1cc0052e 	bgeu	r3,r19,2009bb4 <__svfscanf_r+0xf44>
 2009ba0:	9cffffc4 	addi	r19,r19,-1
 2009ba4:	99400007 	ldb	r5,0(r19)
 2009ba8:	b009883a 	mov	r4,r22
 2009bac:	800d883a 	mov	r6,r16
 2009bb0:	20112b80 	call	20112b8 <_ungetc_r>
 2009bb4:	d900a617 	ldw	r4,664(sp)
 2009bb8:	24fc6226 	beq	r4,r19,2008d44 <__svfscanf_r+0xd4>
 2009bbc:	9080040c 	andi	r2,r18,16
 2009bc0:	10006726 	beq	r2,zero,2009d60 <__svfscanf_r+0x10f0>
 2009bc4:	d8c0a617 	ldw	r3,664(sp)
 2009bc8:	98c5c83a 	sub	r2,r19,r3
 2009bcc:	b885883a 	add	r2,r23,r2
 2009bd0:	88a3883a 	add	r17,r17,r2
 2009bd4:	003c3906 	br	2008cbc <__svfscanf_r+0x4c>
 2009bd8:	002b883a 	mov	r21,zero
 2009bdc:	d8c04404 	addi	r3,sp,272
 2009be0:	d8c0a615 	stw	r3,664(sp)
 2009be4:	002f883a 	mov	r23,zero
 2009be8:	1827883a 	mov	r19,r3
 2009bec:	81800017 	ldw	r6,0(r16)
 2009bf0:	00c01344 	movi	r3,77
 2009bf4:	31400003 	ldbu	r5,0(r6)
 2009bf8:	28bff544 	addi	r2,r5,-43
 2009bfc:	10803fcc 	andi	r2,r2,255
 2009c00:	18bfe336 	bltu	r3,r2,2009b90 <__svfscanf_r+0xf20>
 2009c04:	1085883a 	add	r2,r2,r2
 2009c08:	1085883a 	add	r2,r2,r2
 2009c0c:	00c08074 	movhi	r3,513
 2009c10:	18e70804 	addi	r3,r3,-25568
 2009c14:	10c5883a 	add	r2,r2,r3
 2009c18:	11000017 	ldw	r4,0(r2)
 2009c1c:	2000683a 	jmp	r4
 2009c20:	02009db4 	movhi	r8,630
 2009c24:	02009b90 	cmplti	r8,zero,622
 2009c28:	02009db4 	movhi	r8,630
 2009c2c:	02009b90 	cmplti	r8,zero,622
 2009c30:	02009b90 	cmplti	r8,zero,622
 2009c34:	02009df8 	rdprs	r8,zero,631
 2009c38:	02009ef4 	movhi	r8,635
 2009c3c:	02009ef4 	movhi	r8,635
 2009c40:	02009ef4 	movhi	r8,635
 2009c44:	02009ef4 	movhi	r8,635
 2009c48:	02009ef4 	movhi	r8,635
 2009c4c:	02009ef4 	movhi	r8,635
 2009c50:	02009ef4 	movhi	r8,635
 2009c54:	02009f1c 	xori	r8,zero,636
 2009c58:	02009f1c 	xori	r8,zero,636
 2009c5c:	02009b90 	cmplti	r8,zero,622
 2009c60:	02009b90 	cmplti	r8,zero,622
 2009c64:	02009b90 	cmplti	r8,zero,622
 2009c68:	02009b90 	cmplti	r8,zero,622
 2009c6c:	02009b90 	cmplti	r8,zero,622
 2009c70:	02009b90 	cmplti	r8,zero,622
 2009c74:	02009b90 	cmplti	r8,zero,622
 2009c78:	02009f4c 	andi	r8,zero,637
 2009c7c:	02009f4c 	andi	r8,zero,637
 2009c80:	02009f4c 	andi	r8,zero,637
 2009c84:	02009f4c 	andi	r8,zero,637
 2009c88:	02009f4c 	andi	r8,zero,637
 2009c8c:	02009f4c 	andi	r8,zero,637
 2009c90:	02009b90 	cmplti	r8,zero,622
 2009c94:	02009b90 	cmplti	r8,zero,622
 2009c98:	02009b90 	cmplti	r8,zero,622
 2009c9c:	02009b90 	cmplti	r8,zero,622
 2009ca0:	02009b90 	cmplti	r8,zero,622
 2009ca4:	02009b90 	cmplti	r8,zero,622
 2009ca8:	02009b90 	cmplti	r8,zero,622
 2009cac:	02009b90 	cmplti	r8,zero,622
 2009cb0:	02009b90 	cmplti	r8,zero,622
 2009cb4:	02009b90 	cmplti	r8,zero,622
 2009cb8:	02009b90 	cmplti	r8,zero,622
 2009cbc:	02009b90 	cmplti	r8,zero,622
 2009cc0:	02009b90 	cmplti	r8,zero,622
 2009cc4:	02009b90 	cmplti	r8,zero,622
 2009cc8:	02009b90 	cmplti	r8,zero,622
 2009ccc:	02009b90 	cmplti	r8,zero,622
 2009cd0:	02009b90 	cmplti	r8,zero,622
 2009cd4:	02009f5c 	xori	r8,zero,637
 2009cd8:	02009b90 	cmplti	r8,zero,622
 2009cdc:	02009b90 	cmplti	r8,zero,622
 2009ce0:	02009b90 	cmplti	r8,zero,622
 2009ce4:	02009b90 	cmplti	r8,zero,622
 2009ce8:	02009b90 	cmplti	r8,zero,622
 2009cec:	02009b90 	cmplti	r8,zero,622
 2009cf0:	02009b90 	cmplti	r8,zero,622
 2009cf4:	02009b90 	cmplti	r8,zero,622
 2009cf8:	02009f4c 	andi	r8,zero,637
 2009cfc:	02009f4c 	andi	r8,zero,637
 2009d00:	02009f4c 	andi	r8,zero,637
 2009d04:	02009f4c 	andi	r8,zero,637
 2009d08:	02009f4c 	andi	r8,zero,637
 2009d0c:	02009f4c 	andi	r8,zero,637
 2009d10:	02009b90 	cmplti	r8,zero,622
 2009d14:	02009b90 	cmplti	r8,zero,622
 2009d18:	02009b90 	cmplti	r8,zero,622
 2009d1c:	02009b90 	cmplti	r8,zero,622
 2009d20:	02009b90 	cmplti	r8,zero,622
 2009d24:	02009b90 	cmplti	r8,zero,622
 2009d28:	02009b90 	cmplti	r8,zero,622
 2009d2c:	02009b90 	cmplti	r8,zero,622
 2009d30:	02009b90 	cmplti	r8,zero,622
 2009d34:	02009b90 	cmplti	r8,zero,622
 2009d38:	02009b90 	cmplti	r8,zero,622
 2009d3c:	02009b90 	cmplti	r8,zero,622
 2009d40:	02009b90 	cmplti	r8,zero,622
 2009d44:	02009b90 	cmplti	r8,zero,622
 2009d48:	02009b90 	cmplti	r8,zero,622
 2009d4c:	02009b90 	cmplti	r8,zero,622
 2009d50:	02009b90 	cmplti	r8,zero,622
 2009d54:	02009f5c 	xori	r8,zero,637
 2009d58:	000d883a 	mov	r6,zero
 2009d5c:	003d9006 	br	20093a0 <__svfscanf_r+0x730>
 2009d60:	98000005 	stb	zero,0(r19)
 2009d64:	d8c0a017 	ldw	r3,640(sp)
 2009d68:	d940a617 	ldw	r5,664(sp)
 2009d6c:	d9c0a117 	ldw	r7,644(sp)
 2009d70:	b009883a 	mov	r4,r22
 2009d74:	000d883a 	mov	r6,zero
 2009d78:	183ee83a 	callr	r3
 2009d7c:	1007883a 	mov	r3,r2
 2009d80:	9080080c 	andi	r2,r18,32
 2009d84:	10004d1e 	bne	r2,zero,2009ebc <__svfscanf_r+0x124c>
 2009d88:	9080010c 	andi	r2,r18,4
 2009d8c:	10003426 	beq	r2,zero,2009e60 <__svfscanf_r+0x11f0>
 2009d90:	d900a417 	ldw	r4,656(sp)
 2009d94:	20800017 	ldw	r2,0(r4)
 2009d98:	21000104 	addi	r4,r4,4
 2009d9c:	d900a415 	stw	r4,656(sp)
 2009da0:	10c0000d 	sth	r3,0(r2)
 2009da4:	d880a217 	ldw	r2,648(sp)
 2009da8:	10800044 	addi	r2,r2,1
 2009dac:	d880a215 	stw	r2,648(sp)
 2009db0:	003f8406 	br	2009bc4 <__svfscanf_r+0xf54>
 2009db4:	9080200c 	andi	r2,r18,128
 2009db8:	103f7526 	beq	r2,zero,2009b90 <__svfscanf_r+0xf20>
 2009dbc:	00bfdfc4 	movi	r2,-129
 2009dc0:	90a4703a 	and	r18,r18,r2
 2009dc4:	99400005 	stb	r5,0(r19)
 2009dc8:	9cc00044 	addi	r19,r19,1
 2009dcc:	80c00117 	ldw	r3,4(r16)
 2009dd0:	18ffffc4 	addi	r3,r3,-1
 2009dd4:	80c00115 	stw	r3,4(r16)
 2009dd8:	00c0130e 	bge	zero,r3,2009e28 <__svfscanf_r+0x11b8>
 2009ddc:	31800044 	addi	r6,r6,1
 2009de0:	81800015 	stw	r6,0(r16)
 2009de4:	d880a317 	ldw	r2,652(sp)
 2009de8:	10bfffc4 	addi	r2,r2,-1
 2009dec:	d880a315 	stw	r2,652(sp)
 2009df0:	103f7e1e 	bne	r2,zero,2009bec <__svfscanf_r+0xf7c>
 2009df4:	003f6606 	br	2009b90 <__svfscanf_r+0xf20>
 2009df8:	9082000c 	andi	r2,r18,2048
 2009dfc:	103ff126 	beq	r2,zero,2009dc4 <__svfscanf_r+0x1154>
 2009e00:	d8c0a117 	ldw	r3,644(sp)
 2009e04:	1800031e 	bne	r3,zero,2009e14 <__svfscanf_r+0x11a4>
 2009e08:	01000204 	movi	r4,8
 2009e0c:	94808014 	ori	r18,r18,512
 2009e10:	d900a115 	stw	r4,644(sp)
 2009e14:	9081000c 	andi	r2,r18,1024
 2009e18:	10000826 	beq	r2,zero,2009e3c <__svfscanf_r+0x11cc>
 2009e1c:	00be9fc4 	movi	r2,-1409
 2009e20:	90a4703a 	and	r18,r18,r2
 2009e24:	003fe706 	br	2009dc4 <__svfscanf_r+0x1154>
 2009e28:	b009883a 	mov	r4,r22
 2009e2c:	800b883a 	mov	r5,r16
 2009e30:	200eae80 	call	200eae8 <__srefill_r>
 2009e34:	103feb26 	beq	r2,zero,2009de4 <__svfscanf_r+0x1174>
 2009e38:	003f5506 	br	2009b90 <__svfscanf_r+0xf20>
 2009e3c:	a8000426 	beq	r21,zero,2009e50 <__svfscanf_r+0x11e0>
 2009e40:	d880a317 	ldw	r2,652(sp)
 2009e44:	ad7fffc4 	addi	r21,r21,-1
 2009e48:	10800044 	addi	r2,r2,1
 2009e4c:	d880a315 	stw	r2,652(sp)
 2009e50:	00bf1fc4 	movi	r2,-897
 2009e54:	90a4703a 	and	r18,r18,r2
 2009e58:	bdc00044 	addi	r23,r23,1
 2009e5c:	003fdb06 	br	2009dcc <__svfscanf_r+0x115c>
 2009e60:	9080004c 	andi	r2,r18,1
 2009e64:	1005003a 	cmpeq	r2,r2,zero
 2009e68:	10001426 	beq	r2,zero,2009ebc <__svfscanf_r+0x124c>
 2009e6c:	9080008c 	andi	r2,r18,2
 2009e70:	10001226 	beq	r2,zero,2009ebc <__svfscanf_r+0x124c>
 2009e74:	d8c0a017 	ldw	r3,640(sp)
 2009e78:	00808074 	movhi	r2,513
 2009e7c:	10832604 	addi	r2,r2,3224
 2009e80:	18801426 	beq	r3,r2,2009ed4 <__svfscanf_r+0x1264>
 2009e84:	d9c0a117 	ldw	r7,644(sp)
 2009e88:	d940a617 	ldw	r5,664(sp)
 2009e8c:	000d883a 	mov	r6,zero
 2009e90:	b009883a 	mov	r4,r22
 2009e94:	20109800 	call	2010980 <_strtoll_r>
 2009e98:	100d883a 	mov	r6,r2
 2009e9c:	180f883a 	mov	r7,r3
 2009ea0:	d900a417 	ldw	r4,656(sp)
 2009ea4:	20800017 	ldw	r2,0(r4)
 2009ea8:	21000104 	addi	r4,r4,4
 2009eac:	d900a415 	stw	r4,656(sp)
 2009eb0:	11c00115 	stw	r7,4(r2)
 2009eb4:	11800015 	stw	r6,0(r2)
 2009eb8:	003fba06 	br	2009da4 <__svfscanf_r+0x1134>
 2009ebc:	d900a417 	ldw	r4,656(sp)
 2009ec0:	20800017 	ldw	r2,0(r4)
 2009ec4:	21000104 	addi	r4,r4,4
 2009ec8:	d900a415 	stw	r4,656(sp)
 2009ecc:	10c00015 	stw	r3,0(r2)
 2009ed0:	003fb406 	br	2009da4 <__svfscanf_r+0x1134>
 2009ed4:	d9c0a117 	ldw	r7,644(sp)
 2009ed8:	d940a617 	ldw	r5,664(sp)
 2009edc:	000d883a 	mov	r6,zero
 2009ee0:	b009883a 	mov	r4,r22
 2009ee4:	2010eec0 	call	2010eec <_strtoull_r>
 2009ee8:	100d883a 	mov	r6,r2
 2009eec:	180f883a 	mov	r7,r3
 2009ef0:	003feb06 	br	2009ea0 <__svfscanf_r+0x1230>
 2009ef4:	d8c0a117 	ldw	r3,644(sp)
 2009ef8:	18c5883a 	add	r2,r3,r3
 2009efc:	00c080b4 	movhi	r3,514
 2009f00:	18c35f84 	addi	r3,r3,3454
 2009f04:	10c5883a 	add	r2,r2,r3
 2009f08:	1080000f 	ldh	r2,0(r2)
 2009f0c:	00fd1fc4 	movi	r3,-2945
 2009f10:	90e4703a 	and	r18,r18,r3
 2009f14:	d880a115 	stw	r2,644(sp)
 2009f18:	003faa06 	br	2009dc4 <__svfscanf_r+0x1154>
 2009f1c:	d900a117 	ldw	r4,644(sp)
 2009f20:	00c080b4 	movhi	r3,514
 2009f24:	18c35f84 	addi	r3,r3,3454
 2009f28:	2105883a 	add	r2,r4,r4
 2009f2c:	10c5883a 	add	r2,r2,r3
 2009f30:	1080000f 	ldh	r2,0(r2)
 2009f34:	00c00204 	movi	r3,8
 2009f38:	d880a115 	stw	r2,644(sp)
 2009f3c:	18bf140e 	bge	r3,r2,2009b90 <__svfscanf_r+0xf20>
 2009f40:	00bd1fc4 	movi	r2,-2945
 2009f44:	90a4703a 	and	r18,r18,r2
 2009f48:	003f9e06 	br	2009dc4 <__svfscanf_r+0x1154>
 2009f4c:	d8c0a117 	ldw	r3,644(sp)
 2009f50:	00800284 	movi	r2,10
 2009f54:	10fffa16 	blt	r2,r3,2009f40 <__svfscanf_r+0x12d0>
 2009f58:	003f0d06 	br	2009b90 <__svfscanf_r+0xf20>
 2009f5c:	90c1800c 	andi	r3,r18,1536
 2009f60:	00808004 	movi	r2,512
 2009f64:	18bf0a1e 	bne	r3,r2,2009b90 <__svfscanf_r+0xf20>
 2009f68:	00bf7fc4 	movi	r2,-513
 2009f6c:	9084703a 	and	r2,r18,r2
 2009f70:	01000404 	movi	r4,16
 2009f74:	14814014 	ori	r18,r2,1280
 2009f78:	d900a115 	stw	r4,644(sp)
 2009f7c:	003f9106 	br	2009dc4 <__svfscanf_r+0x1154>
 2009f80:	d880a417 	ldw	r2,656(sp)
 2009f84:	dd400404 	addi	r21,sp,16
 2009f88:	14800017 	ldw	r18,0(r2)
 2009f8c:	9027883a 	mov	r19,r18
 2009f90:	81000017 	ldw	r4,0(r16)
 2009f94:	20800003 	ldbu	r2,0(r4)
 2009f98:	a885883a 	add	r2,r21,r2
 2009f9c:	10c00007 	ldb	r3,0(r2)
 2009fa0:	18001426 	beq	r3,zero,2009ff4 <__svfscanf_r+0x1384>
 2009fa4:	d8c0a317 	ldw	r3,652(sp)
 2009fa8:	80800117 	ldw	r2,4(r16)
 2009fac:	21800044 	addi	r6,r4,1
 2009fb0:	18ffffc4 	addi	r3,r3,-1
 2009fb4:	d8c0a315 	stw	r3,652(sp)
 2009fb8:	10ffffc4 	addi	r3,r2,-1
 2009fbc:	80c00115 	stw	r3,4(r16)
 2009fc0:	20800003 	ldbu	r2,0(r4)
 2009fc4:	90800005 	stb	r2,0(r18)
 2009fc8:	d900a317 	ldw	r4,652(sp)
 2009fcc:	81800015 	stw	r6,0(r16)
 2009fd0:	94800044 	addi	r18,r18,1
 2009fd4:	20000726 	beq	r4,zero,2009ff4 <__svfscanf_r+0x1384>
 2009fd8:	80800117 	ldw	r2,4(r16)
 2009fdc:	00bfec16 	blt	zero,r2,2009f90 <__svfscanf_r+0x1320>
 2009fe0:	b009883a 	mov	r4,r22
 2009fe4:	800b883a 	mov	r5,r16
 2009fe8:	200eae80 	call	200eae8 <__srefill_r>
 2009fec:	103fe826 	beq	r2,zero,2009f90 <__svfscanf_r+0x1320>
 2009ff0:	9cbb7426 	beq	r19,r18,2008dc4 <__svfscanf_r+0x154>
 2009ff4:	94e7c83a 	sub	r19,r18,r19
 2009ff8:	983b5226 	beq	r19,zero,2008d44 <__svfscanf_r+0xd4>
 2009ffc:	90000005 	stb	zero,0(r18)
 200a000:	d880a417 	ldw	r2,656(sp)
 200a004:	d8c0a217 	ldw	r3,648(sp)
 200a008:	8ce3883a 	add	r17,r17,r19
 200a00c:	10800104 	addi	r2,r2,4
 200a010:	18c00044 	addi	r3,r3,1
 200a014:	d880a415 	stw	r2,656(sp)
 200a018:	d8c0a215 	stw	r3,648(sp)
 200a01c:	003b2706 	br	2008cbc <__svfscanf_r+0x4c>
 200a020:	9cc00414 	ori	r19,r19,16
 200a024:	003b6e06 	br	2008de0 <__svfscanf_r+0x170>
 200a028:	00c00404 	movi	r3,16
 200a02c:	01008074 	movhi	r4,513
 200a030:	21032604 	addi	r4,r4,3224
 200a034:	9cc08014 	ori	r19,r19,512
 200a038:	054000c4 	movi	r21,3
 200a03c:	d8c0a115 	stw	r3,644(sp)
 200a040:	d900a015 	stw	r4,640(sp)
 200a044:	003bf806 	br	2009028 <__svfscanf_r+0x3b8>
 200a048:	9880040c 	andi	r2,r19,16
 200a04c:	10001926 	beq	r2,zero,200a0b4 <__svfscanf_r+0x1444>
 200a050:	0027883a 	mov	r19,zero
 200a054:	00000b06 	br	200a084 <__svfscanf_r+0x1414>
 200a058:	80800017 	ldw	r2,0(r16)
 200a05c:	b009883a 	mov	r4,r22
 200a060:	800b883a 	mov	r5,r16
 200a064:	148d883a 	add	r6,r2,r18
 200a068:	81800015 	stw	r6,0(r16)
 200a06c:	9ca7883a 	add	r19,r19,r18
 200a070:	200eae80 	call	200eae8 <__srefill_r>
 200a074:	103c711e 	bne	r2,zero,200923c <__svfscanf_r+0x5cc>
 200a078:	d900a317 	ldw	r4,652(sp)
 200a07c:	2489c83a 	sub	r4,r4,r18
 200a080:	d900a315 	stw	r4,652(sp)
 200a084:	84800117 	ldw	r18,4(r16)
 200a088:	d8c0a317 	ldw	r3,652(sp)
 200a08c:	90fff216 	blt	r18,r3,200a058 <__svfscanf_r+0x13e8>
 200a090:	d900a317 	ldw	r4,652(sp)
 200a094:	80800017 	ldw	r2,0(r16)
 200a098:	9927883a 	add	r19,r19,r4
 200a09c:	9107c83a 	sub	r3,r18,r4
 200a0a0:	110d883a 	add	r6,r2,r4
 200a0a4:	8ce3883a 	add	r17,r17,r19
 200a0a8:	80c00115 	stw	r3,4(r16)
 200a0ac:	81800015 	stw	r6,0(r16)
 200a0b0:	003b0206 	br	2008cbc <__svfscanf_r+0x4c>
 200a0b4:	d880a417 	ldw	r2,656(sp)
 200a0b8:	d980a317 	ldw	r6,652(sp)
 200a0bc:	01400044 	movi	r5,1
 200a0c0:	11000017 	ldw	r4,0(r2)
 200a0c4:	800f883a 	mov	r7,r16
 200a0c8:	200c3e40 	call	200c3e4 <fread>
 200a0cc:	103b3d26 	beq	r2,zero,2008dc4 <__svfscanf_r+0x154>
 200a0d0:	d8c0a417 	ldw	r3,656(sp)
 200a0d4:	d900a217 	ldw	r4,648(sp)
 200a0d8:	88a3883a 	add	r17,r17,r2
 200a0dc:	18c00104 	addi	r3,r3,4
 200a0e0:	21000044 	addi	r4,r4,1
 200a0e4:	d8c0a415 	stw	r3,656(sp)
 200a0e8:	d900a215 	stw	r4,648(sp)
 200a0ec:	003af306 	br	2008cbc <__svfscanf_r+0x4c>
 200a0f0:	8080030b 	ldhu	r2,12(r16)
 200a0f4:	1080100c 	andi	r2,r2,64
 200a0f8:	103b1226 	beq	r2,zero,2008d44 <__svfscanf_r+0xd4>
 200a0fc:	003b3306 	br	2008dcc <__svfscanf_r+0x15c>
 200a100:	983b1026 	beq	r19,zero,2008d44 <__svfscanf_r+0xd4>
 200a104:	8ce3883a 	add	r17,r17,r19
 200a108:	003aec06 	br	2008cbc <__svfscanf_r+0x4c>
 200a10c:	983c9626 	beq	r19,zero,2009368 <__svfscanf_r+0x6f8>
 200a110:	9cffffc4 	addi	r19,r19,-1
 200a114:	d8c04404 	addi	r3,sp,272
 200a118:	1cc5883a 	add	r2,r3,r19
 200a11c:	11400003 	ldbu	r5,0(r2)
 200a120:	b009883a 	mov	r4,r22
 200a124:	800d883a 	mov	r6,r16
 200a128:	20112b80 	call	20112b8 <_ungetc_r>
 200a12c:	003ff706 	br	200a10c <__svfscanf_r+0x149c>
 200a130:	00bfff84 	movi	r2,-2
 200a134:	18bc7a1e 	bne	r3,r2,2009320 <__svfscanf_r+0x6b0>
 200a138:	003c8406 	br	200934c <__svfscanf_r+0x6dc>
 200a13c:	d900a417 	ldw	r4,656(sp)
 200a140:	25400017 	ldw	r21,0(r4)
 200a144:	21000104 	addi	r4,r4,4
 200a148:	d900a415 	stw	r4,656(sp)
 200a14c:	003c4a06 	br	2009278 <__svfscanf_r+0x608>
 200a150:	00bfff84 	movi	r2,-2
 200a154:	18bc0f1e 	bne	r3,r2,2009194 <__svfscanf_r+0x524>
 200a158:	003c1506 	br	20091b0 <__svfscanf_r+0x540>
 200a15c:	b009883a 	mov	r4,r22
 200a160:	800b883a 	mov	r5,r16
 200a164:	200eae80 	call	200eae8 <__srefill_r>
 200a168:	103c1326 	beq	r2,zero,20091b8 <__svfscanf_r+0x548>
 200a16c:	903b151e 	bne	r18,zero,2008dc4 <__svfscanf_r+0x154>
 200a170:	a83ad21e 	bne	r21,zero,2008cbc <__svfscanf_r+0x4c>
 200a174:	d880a217 	ldw	r2,648(sp)
 200a178:	10800044 	addi	r2,r2,1
 200a17c:	d880a215 	stw	r2,648(sp)
 200a180:	003ace06 	br	2008cbc <__svfscanf_r+0x4c>
 200a184:	0027883a 	mov	r19,zero
 200a188:	003bdd06 	br	2009100 <__svfscanf_r+0x490>
 200a18c:	9cc00114 	ori	r19,r19,4
 200a190:	003b1306 	br	2008de0 <__svfscanf_r+0x170>
 200a194:	05400104 	movi	r21,4
 200a198:	003ba306 	br	2009028 <__svfscanf_r+0x3b8>
 200a19c:	9cc00054 	ori	r19,r19,1
 200a1a0:	00808074 	movhi	r2,513
 200a1a4:	1081c604 	addi	r2,r2,1816
 200a1a8:	00c00284 	movi	r3,10
 200a1ac:	054000c4 	movi	r21,3
 200a1b0:	d880a015 	stw	r2,640(sp)
 200a1b4:	d8c0a115 	stw	r3,644(sp)
 200a1b8:	003b9b06 	br	2009028 <__svfscanf_r+0x3b8>
 200a1bc:	9cc01014 	ori	r19,r19,64
 200a1c0:	002b883a 	mov	r21,zero
 200a1c4:	003b9806 	br	2009028 <__svfscanf_r+0x3b8>
 200a1c8:	a00b883a 	mov	r5,r20
 200a1cc:	d9000404 	addi	r4,sp,16
 200a1d0:	200ed080 	call	200ed08 <__sccl>
 200a1d4:	1029883a 	mov	r20,r2
 200a1d8:	9cc01014 	ori	r19,r19,64
 200a1dc:	05400044 	movi	r21,1
 200a1e0:	003b9106 	br	2009028 <__svfscanf_r+0x3b8>
 200a1e4:	9cc00054 	ori	r19,r19,1
 200a1e8:	00800204 	movi	r2,8
 200a1ec:	00c08074 	movhi	r3,513
 200a1f0:	18c32604 	addi	r3,r3,3224
 200a1f4:	054000c4 	movi	r21,3
 200a1f8:	d880a115 	stw	r2,644(sp)
 200a1fc:	d8c0a015 	stw	r3,640(sp)
 200a200:	003b8906 	br	2009028 <__svfscanf_r+0x3b8>
 200a204:	9880040c 	andi	r2,r19,16
 200a208:	103aac1e 	bne	r2,zero,2008cbc <__svfscanf_r+0x4c>
 200a20c:	9880010c 	andi	r2,r19,4
 200a210:	10002426 	beq	r2,zero,200a2a4 <__svfscanf_r+0x1634>
 200a214:	d900a417 	ldw	r4,656(sp)
 200a218:	20800017 	ldw	r2,0(r4)
 200a21c:	21000104 	addi	r4,r4,4
 200a220:	d900a415 	stw	r4,656(sp)
 200a224:	1440000d 	sth	r17,0(r2)
 200a228:	003aa406 	br	2008cbc <__svfscanf_r+0x4c>
 200a22c:	9cc00094 	ori	r19,r19,2
 200a230:	003aeb06 	br	2008de0 <__svfscanf_r+0x170>
 200a234:	05400084 	movi	r21,2
 200a238:	003b7b06 	br	2009028 <__svfscanf_r+0x3b8>
 200a23c:	00800404 	movi	r2,16
 200a240:	00c08074 	movhi	r3,513
 200a244:	18c32604 	addi	r3,r3,3224
 200a248:	9cc08814 	ori	r19,r19,544
 200a24c:	054000c4 	movi	r21,3
 200a250:	d880a115 	stw	r2,644(sp)
 200a254:	d8c0a015 	stw	r3,640(sp)
 200a258:	003b7306 	br	2009028 <__svfscanf_r+0x3b8>
 200a25c:	0009883a 	mov	r4,zero
 200a260:	200edc80 	call	200edc8 <nanf>
 200a264:	b8800015 	stw	r2,0(r23)
 200a268:	003d2706 	br	2009708 <__svfscanf_r+0xa98>
 200a26c:	a0c00007 	ldb	r3,0(r20)
 200a270:	00801b04 	movi	r2,108
 200a274:	18800826 	beq	r3,r2,200a298 <__svfscanf_r+0x1628>
 200a278:	9cc00054 	ori	r19,r19,1
 200a27c:	003ad806 	br	2008de0 <__svfscanf_r+0x170>
 200a280:	01008074 	movhi	r4,513
 200a284:	2101c604 	addi	r4,r4,1816
 200a288:	054000c4 	movi	r21,3
 200a28c:	d900a015 	stw	r4,640(sp)
 200a290:	d800a115 	stw	zero,644(sp)
 200a294:	003b6406 	br	2009028 <__svfscanf_r+0x3b8>
 200a298:	a5000044 	addi	r20,r20,1
 200a29c:	9cc00094 	ori	r19,r19,2
 200a2a0:	003acf06 	br	2008de0 <__svfscanf_r+0x170>
 200a2a4:	9880004c 	andi	r2,r19,1
 200a2a8:	1005003a 	cmpeq	r2,r2,zero
 200a2ac:	10000a26 	beq	r2,zero,200a2d8 <__svfscanf_r+0x1668>
 200a2b0:	9880008c 	andi	r2,r19,2
 200a2b4:	10000826 	beq	r2,zero,200a2d8 <__svfscanf_r+0x1668>
 200a2b8:	d900a417 	ldw	r4,656(sp)
 200a2bc:	8807d7fa 	srai	r3,r17,31
 200a2c0:	20800017 	ldw	r2,0(r4)
 200a2c4:	21000104 	addi	r4,r4,4
 200a2c8:	d900a415 	stw	r4,656(sp)
 200a2cc:	14400015 	stw	r17,0(r2)
 200a2d0:	10c00115 	stw	r3,4(r2)
 200a2d4:	003a7906 	br	2008cbc <__svfscanf_r+0x4c>
 200a2d8:	d8c0a417 	ldw	r3,656(sp)
 200a2dc:	18800017 	ldw	r2,0(r3)
 200a2e0:	18c00104 	addi	r3,r3,4
 200a2e4:	d8c0a415 	stw	r3,656(sp)
 200a2e8:	14400015 	stw	r17,0(r2)
 200a2ec:	003a7306 	br	2008cbc <__svfscanf_r+0x4c>

0200a2f0 <__svfscanf>:
 200a2f0:	008080b4 	movhi	r2,514
 200a2f4:	108c1704 	addi	r2,r2,12380
 200a2f8:	2013883a 	mov	r9,r4
 200a2fc:	11000017 	ldw	r4,0(r2)
 200a300:	2805883a 	mov	r2,r5
 200a304:	300f883a 	mov	r7,r6
 200a308:	480b883a 	mov	r5,r9
 200a30c:	100d883a 	mov	r6,r2
 200a310:	2008c701 	jmpi	2008c70 <__svfscanf_r>

0200a314 <_vfscanf_r>:
 200a314:	defffb04 	addi	sp,sp,-20
 200a318:	dcc00315 	stw	r19,12(sp)
 200a31c:	dc800215 	stw	r18,8(sp)
 200a320:	dc400115 	stw	r17,4(sp)
 200a324:	dc000015 	stw	r16,0(sp)
 200a328:	dfc00415 	stw	ra,16(sp)
 200a32c:	2021883a 	mov	r16,r4
 200a330:	2823883a 	mov	r17,r5
 200a334:	3025883a 	mov	r18,r6
 200a338:	3827883a 	mov	r19,r7
 200a33c:	20000226 	beq	r4,zero,200a348 <_vfscanf_r+0x34>
 200a340:	20800e17 	ldw	r2,56(r4)
 200a344:	10000b26 	beq	r2,zero,200a374 <_vfscanf_r+0x60>
 200a348:	8009883a 	mov	r4,r16
 200a34c:	880b883a 	mov	r5,r17
 200a350:	900d883a 	mov	r6,r18
 200a354:	980f883a 	mov	r7,r19
 200a358:	dfc00417 	ldw	ra,16(sp)
 200a35c:	dcc00317 	ldw	r19,12(sp)
 200a360:	dc800217 	ldw	r18,8(sp)
 200a364:	dc400117 	ldw	r17,4(sp)
 200a368:	dc000017 	ldw	r16,0(sp)
 200a36c:	dec00504 	addi	sp,sp,20
 200a370:	2008c701 	jmpi	2008c70 <__svfscanf_r>
 200a374:	200bf900 	call	200bf90 <__sinit>
 200a378:	003ff306 	br	200a348 <_vfscanf_r+0x34>

0200a37c <vfscanf>:
 200a37c:	defffb04 	addi	sp,sp,-20
 200a380:	dcc00315 	stw	r19,12(sp)
 200a384:	04c080b4 	movhi	r19,514
 200a388:	9ccc1704 	addi	r19,r19,12380
 200a38c:	98c00017 	ldw	r3,0(r19)
 200a390:	dc800215 	stw	r18,8(sp)
 200a394:	dc400115 	stw	r17,4(sp)
 200a398:	dc000015 	stw	r16,0(sp)
 200a39c:	dfc00415 	stw	ra,16(sp)
 200a3a0:	2021883a 	mov	r16,r4
 200a3a4:	2823883a 	mov	r17,r5
 200a3a8:	3025883a 	mov	r18,r6
 200a3ac:	18000326 	beq	r3,zero,200a3bc <vfscanf+0x40>
 200a3b0:	18800e17 	ldw	r2,56(r3)
 200a3b4:	1809883a 	mov	r4,r3
 200a3b8:	10000b26 	beq	r2,zero,200a3e8 <vfscanf+0x6c>
 200a3bc:	99000017 	ldw	r4,0(r19)
 200a3c0:	800b883a 	mov	r5,r16
 200a3c4:	880d883a 	mov	r6,r17
 200a3c8:	900f883a 	mov	r7,r18
 200a3cc:	dfc00417 	ldw	ra,16(sp)
 200a3d0:	dcc00317 	ldw	r19,12(sp)
 200a3d4:	dc800217 	ldw	r18,8(sp)
 200a3d8:	dc400117 	ldw	r17,4(sp)
 200a3dc:	dc000017 	ldw	r16,0(sp)
 200a3e0:	dec00504 	addi	sp,sp,20
 200a3e4:	2008c701 	jmpi	2008c70 <__svfscanf_r>
 200a3e8:	200bf900 	call	200bf90 <__sinit>
 200a3ec:	003ff306 	br	200a3bc <vfscanf+0x40>

0200a3f0 <__swsetup_r>:
 200a3f0:	008080b4 	movhi	r2,514
 200a3f4:	108c1704 	addi	r2,r2,12380
 200a3f8:	10c00017 	ldw	r3,0(r2)
 200a3fc:	defffd04 	addi	sp,sp,-12
 200a400:	dc400115 	stw	r17,4(sp)
 200a404:	dc000015 	stw	r16,0(sp)
 200a408:	dfc00215 	stw	ra,8(sp)
 200a40c:	2023883a 	mov	r17,r4
 200a410:	2821883a 	mov	r16,r5
 200a414:	18000226 	beq	r3,zero,200a420 <__swsetup_r+0x30>
 200a418:	18800e17 	ldw	r2,56(r3)
 200a41c:	10001f26 	beq	r2,zero,200a49c <__swsetup_r+0xac>
 200a420:	8100030b 	ldhu	r4,12(r16)
 200a424:	2080020c 	andi	r2,r4,8
 200a428:	10002826 	beq	r2,zero,200a4cc <__swsetup_r+0xdc>
 200a42c:	81400417 	ldw	r5,16(r16)
 200a430:	28001d26 	beq	r5,zero,200a4a8 <__swsetup_r+0xb8>
 200a434:	2080004c 	andi	r2,r4,1
 200a438:	1005003a 	cmpeq	r2,r2,zero
 200a43c:	10000b26 	beq	r2,zero,200a46c <__swsetup_r+0x7c>
 200a440:	2080008c 	andi	r2,r4,2
 200a444:	10001226 	beq	r2,zero,200a490 <__swsetup_r+0xa0>
 200a448:	0005883a 	mov	r2,zero
 200a44c:	80800215 	stw	r2,8(r16)
 200a450:	28000b26 	beq	r5,zero,200a480 <__swsetup_r+0x90>
 200a454:	0005883a 	mov	r2,zero
 200a458:	dfc00217 	ldw	ra,8(sp)
 200a45c:	dc400117 	ldw	r17,4(sp)
 200a460:	dc000017 	ldw	r16,0(sp)
 200a464:	dec00304 	addi	sp,sp,12
 200a468:	f800283a 	ret
 200a46c:	80800517 	ldw	r2,20(r16)
 200a470:	80000215 	stw	zero,8(r16)
 200a474:	0085c83a 	sub	r2,zero,r2
 200a478:	80800615 	stw	r2,24(r16)
 200a47c:	283ff51e 	bne	r5,zero,200a454 <__swsetup_r+0x64>
 200a480:	2080200c 	andi	r2,r4,128
 200a484:	103ff326 	beq	r2,zero,200a454 <__swsetup_r+0x64>
 200a488:	00bfffc4 	movi	r2,-1
 200a48c:	003ff206 	br	200a458 <__swsetup_r+0x68>
 200a490:	80800517 	ldw	r2,20(r16)
 200a494:	80800215 	stw	r2,8(r16)
 200a498:	003fed06 	br	200a450 <__swsetup_r+0x60>
 200a49c:	1809883a 	mov	r4,r3
 200a4a0:	200bf900 	call	200bf90 <__sinit>
 200a4a4:	003fde06 	br	200a420 <__swsetup_r+0x30>
 200a4a8:	20c0a00c 	andi	r3,r4,640
 200a4ac:	00808004 	movi	r2,512
 200a4b0:	18bfe026 	beq	r3,r2,200a434 <__swsetup_r+0x44>
 200a4b4:	8809883a 	mov	r4,r17
 200a4b8:	800b883a 	mov	r5,r16
 200a4bc:	200cf700 	call	200cf70 <__smakebuf_r>
 200a4c0:	8100030b 	ldhu	r4,12(r16)
 200a4c4:	81400417 	ldw	r5,16(r16)
 200a4c8:	003fda06 	br	200a434 <__swsetup_r+0x44>
 200a4cc:	2080040c 	andi	r2,r4,16
 200a4d0:	103fed26 	beq	r2,zero,200a488 <__swsetup_r+0x98>
 200a4d4:	2080010c 	andi	r2,r4,4
 200a4d8:	10001226 	beq	r2,zero,200a524 <__swsetup_r+0x134>
 200a4dc:	81400c17 	ldw	r5,48(r16)
 200a4e0:	28000526 	beq	r5,zero,200a4f8 <__swsetup_r+0x108>
 200a4e4:	80801004 	addi	r2,r16,64
 200a4e8:	28800226 	beq	r5,r2,200a4f4 <__swsetup_r+0x104>
 200a4ec:	8809883a 	mov	r4,r17
 200a4f0:	200c5500 	call	200c550 <_free_r>
 200a4f4:	80000c15 	stw	zero,48(r16)
 200a4f8:	8080030b 	ldhu	r2,12(r16)
 200a4fc:	81400417 	ldw	r5,16(r16)
 200a500:	80000115 	stw	zero,4(r16)
 200a504:	10bff6cc 	andi	r2,r2,65499
 200a508:	8080030d 	sth	r2,12(r16)
 200a50c:	81400015 	stw	r5,0(r16)
 200a510:	8080030b 	ldhu	r2,12(r16)
 200a514:	10800214 	ori	r2,r2,8
 200a518:	113fffcc 	andi	r4,r2,65535
 200a51c:	8080030d 	sth	r2,12(r16)
 200a520:	003fc306 	br	200a430 <__swsetup_r+0x40>
 200a524:	81400417 	ldw	r5,16(r16)
 200a528:	003ff906 	br	200a510 <__swsetup_r+0x120>

0200a52c <quorem>:
 200a52c:	28c00417 	ldw	r3,16(r5)
 200a530:	20800417 	ldw	r2,16(r4)
 200a534:	defff604 	addi	sp,sp,-40
 200a538:	ddc00715 	stw	r23,28(sp)
 200a53c:	dd400515 	stw	r21,20(sp)
 200a540:	dfc00915 	stw	ra,36(sp)
 200a544:	df000815 	stw	fp,32(sp)
 200a548:	dd800615 	stw	r22,24(sp)
 200a54c:	dd000415 	stw	r20,16(sp)
 200a550:	dcc00315 	stw	r19,12(sp)
 200a554:	dc800215 	stw	r18,8(sp)
 200a558:	dc400115 	stw	r17,4(sp)
 200a55c:	dc000015 	stw	r16,0(sp)
 200a560:	202f883a 	mov	r23,r4
 200a564:	282b883a 	mov	r21,r5
 200a568:	10c07416 	blt	r2,r3,200a73c <quorem+0x210>
 200a56c:	1c7fffc4 	addi	r17,r3,-1
 200a570:	8c45883a 	add	r2,r17,r17
 200a574:	1085883a 	add	r2,r2,r2
 200a578:	2c000504 	addi	r16,r5,20
 200a57c:	24c00504 	addi	r19,r4,20
 200a580:	14ed883a 	add	r22,r2,r19
 200a584:	80a5883a 	add	r18,r16,r2
 200a588:	b7000017 	ldw	fp,0(r22)
 200a58c:	91400017 	ldw	r5,0(r18)
 200a590:	e009883a 	mov	r4,fp
 200a594:	29400044 	addi	r5,r5,1
 200a598:	2005ab40 	call	2005ab4 <__udivsi3>
 200a59c:	1029883a 	mov	r20,r2
 200a5a0:	10003c1e 	bne	r2,zero,200a694 <quorem+0x168>
 200a5a4:	a80b883a 	mov	r5,r21
 200a5a8:	b809883a 	mov	r4,r23
 200a5ac:	200d65c0 	call	200d65c <__mcmp>
 200a5b0:	10002b16 	blt	r2,zero,200a660 <quorem+0x134>
 200a5b4:	a5000044 	addi	r20,r20,1
 200a5b8:	980f883a 	mov	r7,r19
 200a5bc:	0011883a 	mov	r8,zero
 200a5c0:	0009883a 	mov	r4,zero
 200a5c4:	81400017 	ldw	r5,0(r16)
 200a5c8:	38c00017 	ldw	r3,0(r7)
 200a5cc:	84000104 	addi	r16,r16,4
 200a5d0:	28bfffcc 	andi	r2,r5,65535
 200a5d4:	2085883a 	add	r2,r4,r2
 200a5d8:	11bfffcc 	andi	r6,r2,65535
 200a5dc:	193fffcc 	andi	r4,r3,65535
 200a5e0:	1004d43a 	srli	r2,r2,16
 200a5e4:	280ad43a 	srli	r5,r5,16
 200a5e8:	2189c83a 	sub	r4,r4,r6
 200a5ec:	2209883a 	add	r4,r4,r8
 200a5f0:	1806d43a 	srli	r3,r3,16
 200a5f4:	288b883a 	add	r5,r5,r2
 200a5f8:	200dd43a 	srai	r6,r4,16
 200a5fc:	28bfffcc 	andi	r2,r5,65535
 200a600:	1887c83a 	sub	r3,r3,r2
 200a604:	1987883a 	add	r3,r3,r6
 200a608:	3900000d 	sth	r4,0(r7)
 200a60c:	38c0008d 	sth	r3,2(r7)
 200a610:	2808d43a 	srli	r4,r5,16
 200a614:	39c00104 	addi	r7,r7,4
 200a618:	1811d43a 	srai	r8,r3,16
 200a61c:	943fe92e 	bgeu	r18,r16,200a5c4 <quorem+0x98>
 200a620:	8c45883a 	add	r2,r17,r17
 200a624:	1085883a 	add	r2,r2,r2
 200a628:	9885883a 	add	r2,r19,r2
 200a62c:	10c00017 	ldw	r3,0(r2)
 200a630:	18000b1e 	bne	r3,zero,200a660 <quorem+0x134>
 200a634:	113fff04 	addi	r4,r2,-4
 200a638:	9900082e 	bgeu	r19,r4,200a65c <quorem+0x130>
 200a63c:	10bfff17 	ldw	r2,-4(r2)
 200a640:	10000326 	beq	r2,zero,200a650 <quorem+0x124>
 200a644:	00000506 	br	200a65c <quorem+0x130>
 200a648:	20800017 	ldw	r2,0(r4)
 200a64c:	1000031e 	bne	r2,zero,200a65c <quorem+0x130>
 200a650:	213fff04 	addi	r4,r4,-4
 200a654:	8c7fffc4 	addi	r17,r17,-1
 200a658:	993ffb36 	bltu	r19,r4,200a648 <quorem+0x11c>
 200a65c:	bc400415 	stw	r17,16(r23)
 200a660:	a005883a 	mov	r2,r20
 200a664:	dfc00917 	ldw	ra,36(sp)
 200a668:	df000817 	ldw	fp,32(sp)
 200a66c:	ddc00717 	ldw	r23,28(sp)
 200a670:	dd800617 	ldw	r22,24(sp)
 200a674:	dd400517 	ldw	r21,20(sp)
 200a678:	dd000417 	ldw	r20,16(sp)
 200a67c:	dcc00317 	ldw	r19,12(sp)
 200a680:	dc800217 	ldw	r18,8(sp)
 200a684:	dc400117 	ldw	r17,4(sp)
 200a688:	dc000017 	ldw	r16,0(sp)
 200a68c:	dec00a04 	addi	sp,sp,40
 200a690:	f800283a 	ret
 200a694:	980f883a 	mov	r7,r19
 200a698:	8011883a 	mov	r8,r16
 200a69c:	0013883a 	mov	r9,zero
 200a6a0:	000d883a 	mov	r6,zero
 200a6a4:	40c00017 	ldw	r3,0(r8)
 200a6a8:	39000017 	ldw	r4,0(r7)
 200a6ac:	42000104 	addi	r8,r8,4
 200a6b0:	18bfffcc 	andi	r2,r3,65535
 200a6b4:	a085383a 	mul	r2,r20,r2
 200a6b8:	1806d43a 	srli	r3,r3,16
 200a6bc:	217fffcc 	andi	r5,r4,65535
 200a6c0:	3085883a 	add	r2,r6,r2
 200a6c4:	11bfffcc 	andi	r6,r2,65535
 200a6c8:	a0c7383a 	mul	r3,r20,r3
 200a6cc:	1004d43a 	srli	r2,r2,16
 200a6d0:	298bc83a 	sub	r5,r5,r6
 200a6d4:	2a4b883a 	add	r5,r5,r9
 200a6d8:	2008d43a 	srli	r4,r4,16
 200a6dc:	1887883a 	add	r3,r3,r2
 200a6e0:	280dd43a 	srai	r6,r5,16
 200a6e4:	18bfffcc 	andi	r2,r3,65535
 200a6e8:	2089c83a 	sub	r4,r4,r2
 200a6ec:	2189883a 	add	r4,r4,r6
 200a6f0:	3900008d 	sth	r4,2(r7)
 200a6f4:	3940000d 	sth	r5,0(r7)
 200a6f8:	180cd43a 	srli	r6,r3,16
 200a6fc:	39c00104 	addi	r7,r7,4
 200a700:	2013d43a 	srai	r9,r4,16
 200a704:	923fe72e 	bgeu	r18,r8,200a6a4 <quorem+0x178>
 200a708:	e03fa61e 	bne	fp,zero,200a5a4 <quorem+0x78>
 200a70c:	b0ffff04 	addi	r3,r22,-4
 200a710:	98c0082e 	bgeu	r19,r3,200a734 <quorem+0x208>
 200a714:	b0bfff17 	ldw	r2,-4(r22)
 200a718:	10000326 	beq	r2,zero,200a728 <quorem+0x1fc>
 200a71c:	00000506 	br	200a734 <quorem+0x208>
 200a720:	18800017 	ldw	r2,0(r3)
 200a724:	1000031e 	bne	r2,zero,200a734 <quorem+0x208>
 200a728:	18ffff04 	addi	r3,r3,-4
 200a72c:	8c7fffc4 	addi	r17,r17,-1
 200a730:	98fffb36 	bltu	r19,r3,200a720 <quorem+0x1f4>
 200a734:	bc400415 	stw	r17,16(r23)
 200a738:	003f9a06 	br	200a5a4 <quorem+0x78>
 200a73c:	0005883a 	mov	r2,zero
 200a740:	003fc806 	br	200a664 <quorem+0x138>

0200a744 <_dtoa_r>:
 200a744:	22001017 	ldw	r8,64(r4)
 200a748:	deffda04 	addi	sp,sp,-152
 200a74c:	dd402115 	stw	r21,132(sp)
 200a750:	dd002015 	stw	r20,128(sp)
 200a754:	dc801e15 	stw	r18,120(sp)
 200a758:	dc401d15 	stw	r17,116(sp)
 200a75c:	dfc02515 	stw	ra,148(sp)
 200a760:	df002415 	stw	fp,144(sp)
 200a764:	ddc02315 	stw	r23,140(sp)
 200a768:	dd802215 	stw	r22,136(sp)
 200a76c:	dcc01f15 	stw	r19,124(sp)
 200a770:	dc001c15 	stw	r16,112(sp)
 200a774:	d9001615 	stw	r4,88(sp)
 200a778:	3023883a 	mov	r17,r6
 200a77c:	2829883a 	mov	r20,r5
 200a780:	d9c01715 	stw	r7,92(sp)
 200a784:	dc802817 	ldw	r18,160(sp)
 200a788:	302b883a 	mov	r21,r6
 200a78c:	40000a26 	beq	r8,zero,200a7b8 <_dtoa_r+0x74>
 200a790:	20801117 	ldw	r2,68(r4)
 200a794:	400b883a 	mov	r5,r8
 200a798:	40800115 	stw	r2,4(r8)
 200a79c:	20c01117 	ldw	r3,68(r4)
 200a7a0:	00800044 	movi	r2,1
 200a7a4:	10c4983a 	sll	r2,r2,r3
 200a7a8:	40800215 	stw	r2,8(r8)
 200a7ac:	200d5000 	call	200d500 <_Bfree>
 200a7b0:	d8c01617 	ldw	r3,88(sp)
 200a7b4:	18001015 	stw	zero,64(r3)
 200a7b8:	8800a316 	blt	r17,zero,200aa48 <_dtoa_r+0x304>
 200a7bc:	90000015 	stw	zero,0(r18)
 200a7c0:	a8dffc2c 	andhi	r3,r21,32752
 200a7c4:	009ffc34 	movhi	r2,32752
 200a7c8:	18809126 	beq	r3,r2,200aa10 <_dtoa_r+0x2cc>
 200a7cc:	000d883a 	mov	r6,zero
 200a7d0:	000f883a 	mov	r7,zero
 200a7d4:	a009883a 	mov	r4,r20
 200a7d8:	a80b883a 	mov	r5,r21
 200a7dc:	dd001215 	stw	r20,72(sp)
 200a7e0:	dd401315 	stw	r21,76(sp)
 200a7e4:	20132ac0 	call	20132ac <__nedf2>
 200a7e8:	1000171e 	bne	r2,zero,200a848 <_dtoa_r+0x104>
 200a7ec:	d9802717 	ldw	r6,156(sp)
 200a7f0:	00800044 	movi	r2,1
 200a7f4:	30800015 	stw	r2,0(r6)
 200a7f8:	d8802917 	ldw	r2,164(sp)
 200a7fc:	10029b26 	beq	r2,zero,200b26c <_dtoa_r+0xb28>
 200a800:	d9002917 	ldw	r4,164(sp)
 200a804:	008080b4 	movhi	r2,514
 200a808:	10835544 	addi	r2,r2,3413
 200a80c:	10ffffc4 	addi	r3,r2,-1
 200a810:	20800015 	stw	r2,0(r4)
 200a814:	1805883a 	mov	r2,r3
 200a818:	dfc02517 	ldw	ra,148(sp)
 200a81c:	df002417 	ldw	fp,144(sp)
 200a820:	ddc02317 	ldw	r23,140(sp)
 200a824:	dd802217 	ldw	r22,136(sp)
 200a828:	dd402117 	ldw	r21,132(sp)
 200a82c:	dd002017 	ldw	r20,128(sp)
 200a830:	dcc01f17 	ldw	r19,124(sp)
 200a834:	dc801e17 	ldw	r18,120(sp)
 200a838:	dc401d17 	ldw	r17,116(sp)
 200a83c:	dc001c17 	ldw	r16,112(sp)
 200a840:	dec02604 	addi	sp,sp,152
 200a844:	f800283a 	ret
 200a848:	d9001617 	ldw	r4,88(sp)
 200a84c:	d9401217 	ldw	r5,72(sp)
 200a850:	d8800104 	addi	r2,sp,4
 200a854:	a80d883a 	mov	r6,r21
 200a858:	d9c00204 	addi	r7,sp,8
 200a85c:	d8800015 	stw	r2,0(sp)
 200a860:	200db3c0 	call	200db3c <__d2b>
 200a864:	d8800715 	stw	r2,28(sp)
 200a868:	a804d53a 	srli	r2,r21,20
 200a86c:	1101ffcc 	andi	r4,r2,2047
 200a870:	20008626 	beq	r4,zero,200aa8c <_dtoa_r+0x348>
 200a874:	d8c01217 	ldw	r3,72(sp)
 200a878:	00800434 	movhi	r2,16
 200a87c:	10bfffc4 	addi	r2,r2,-1
 200a880:	ddc00117 	ldw	r23,4(sp)
 200a884:	a884703a 	and	r2,r21,r2
 200a888:	1811883a 	mov	r8,r3
 200a88c:	124ffc34 	orhi	r9,r2,16368
 200a890:	25bf0044 	addi	r22,r4,-1023
 200a894:	d8000815 	stw	zero,32(sp)
 200a898:	0005883a 	mov	r2,zero
 200a89c:	00cffe34 	movhi	r3,16376
 200a8a0:	480b883a 	mov	r5,r9
 200a8a4:	4009883a 	mov	r4,r8
 200a8a8:	180f883a 	mov	r7,r3
 200a8ac:	100d883a 	mov	r6,r2
 200a8b0:	2004edc0 	call	2004edc <__subdf3>
 200a8b4:	0218dbf4 	movhi	r8,25455
 200a8b8:	4210d844 	addi	r8,r8,17249
 200a8bc:	024ff4f4 	movhi	r9,16339
 200a8c0:	4a61e9c4 	addi	r9,r9,-30809
 200a8c4:	480f883a 	mov	r7,r9
 200a8c8:	400d883a 	mov	r6,r8
 200a8cc:	180b883a 	mov	r5,r3
 200a8d0:	1009883a 	mov	r4,r2
 200a8d4:	2004fd00 	call	2004fd0 <__muldf3>
 200a8d8:	0222d874 	movhi	r8,35681
 200a8dc:	42322cc4 	addi	r8,r8,-14157
 200a8e0:	024ff1f4 	movhi	r9,16327
 200a8e4:	4a628a04 	addi	r9,r9,-30168
 200a8e8:	480f883a 	mov	r7,r9
 200a8ec:	400d883a 	mov	r6,r8
 200a8f0:	180b883a 	mov	r5,r3
 200a8f4:	1009883a 	mov	r4,r2
 200a8f8:	2004f5c0 	call	2004f5c <__adddf3>
 200a8fc:	b009883a 	mov	r4,r22
 200a900:	1021883a 	mov	r16,r2
 200a904:	1823883a 	mov	r17,r3
 200a908:	20056fc0 	call	20056fc <__floatsidf>
 200a90c:	021427f4 	movhi	r8,20639
 200a910:	421e7ec4 	addi	r8,r8,31227
 200a914:	024ff4f4 	movhi	r9,16339
 200a918:	4a5104c4 	addi	r9,r9,17427
 200a91c:	480f883a 	mov	r7,r9
 200a920:	400d883a 	mov	r6,r8
 200a924:	180b883a 	mov	r5,r3
 200a928:	1009883a 	mov	r4,r2
 200a92c:	2004fd00 	call	2004fd0 <__muldf3>
 200a930:	180f883a 	mov	r7,r3
 200a934:	880b883a 	mov	r5,r17
 200a938:	100d883a 	mov	r6,r2
 200a93c:	8009883a 	mov	r4,r16
 200a940:	2004f5c0 	call	2004f5c <__adddf3>
 200a944:	1009883a 	mov	r4,r2
 200a948:	180b883a 	mov	r5,r3
 200a94c:	1021883a 	mov	r16,r2
 200a950:	1823883a 	mov	r17,r3
 200a954:	20057f40 	call	20057f4 <__fixdfsi>
 200a958:	000d883a 	mov	r6,zero
 200a95c:	000f883a 	mov	r7,zero
 200a960:	8009883a 	mov	r4,r16
 200a964:	880b883a 	mov	r5,r17
 200a968:	d8800d15 	stw	r2,52(sp)
 200a96c:	20056740 	call	2005674 <__ltdf2>
 200a970:	10031716 	blt	r2,zero,200b5d0 <_dtoa_r+0xe8c>
 200a974:	d8c00d17 	ldw	r3,52(sp)
 200a978:	00800584 	movi	r2,22
 200a97c:	10c1482e 	bgeu	r2,r3,200aea0 <_dtoa_r+0x75c>
 200a980:	01000044 	movi	r4,1
 200a984:	d9000c15 	stw	r4,48(sp)
 200a988:	bd85c83a 	sub	r2,r23,r22
 200a98c:	11bfffc4 	addi	r6,r2,-1
 200a990:	30030b16 	blt	r6,zero,200b5c0 <_dtoa_r+0xe7c>
 200a994:	d9800a15 	stw	r6,40(sp)
 200a998:	d8001115 	stw	zero,68(sp)
 200a99c:	d8c00d17 	ldw	r3,52(sp)
 200a9a0:	1802ff16 	blt	r3,zero,200b5a0 <_dtoa_r+0xe5c>
 200a9a4:	d9000a17 	ldw	r4,40(sp)
 200a9a8:	d8c00915 	stw	r3,36(sp)
 200a9ac:	d8001015 	stw	zero,64(sp)
 200a9b0:	20c9883a 	add	r4,r4,r3
 200a9b4:	d9000a15 	stw	r4,40(sp)
 200a9b8:	d9001717 	ldw	r4,92(sp)
 200a9bc:	00800244 	movi	r2,9
 200a9c0:	11004636 	bltu	r2,r4,200aadc <_dtoa_r+0x398>
 200a9c4:	00800144 	movi	r2,5
 200a9c8:	11020416 	blt	r2,r4,200b1dc <_dtoa_r+0xa98>
 200a9cc:	04400044 	movi	r17,1
 200a9d0:	d8c01717 	ldw	r3,92(sp)
 200a9d4:	00800144 	movi	r2,5
 200a9d8:	10c1ed36 	bltu	r2,r3,200b190 <_dtoa_r+0xa4c>
 200a9dc:	18c5883a 	add	r2,r3,r3
 200a9e0:	1085883a 	add	r2,r2,r2
 200a9e4:	00c08074 	movhi	r3,513
 200a9e8:	18ea7e04 	addi	r3,r3,-22024
 200a9ec:	10c5883a 	add	r2,r2,r3
 200a9f0:	11000017 	ldw	r4,0(r2)
 200a9f4:	2000683a 	jmp	r4
 200a9f8:	0200aae4 	muli	r8,zero,683
 200a9fc:	0200aae4 	muli	r8,zero,683
 200aa00:	0200b4e4 	muli	r8,zero,723
 200aa04:	0200b4bc 	xorhi	r8,zero,722
 200aa08:	0200b500 	call	200b50 <OSCtxSw_SWITCH_PC+0x200b10>
 200aa0c:	0200b50c 	andi	r8,zero,724
 200aa10:	d9002717 	ldw	r4,156(sp)
 200aa14:	0089c3c4 	movi	r2,9999
 200aa18:	20800015 	stw	r2,0(r4)
 200aa1c:	a0001026 	beq	r20,zero,200aa60 <_dtoa_r+0x31c>
 200aa20:	00c080b4 	movhi	r3,514
 200aa24:	18c40c04 	addi	r3,r3,4144
 200aa28:	d9802917 	ldw	r6,164(sp)
 200aa2c:	303f7926 	beq	r6,zero,200a814 <_dtoa_r+0xd0>
 200aa30:	188000c7 	ldb	r2,3(r3)
 200aa34:	190000c4 	addi	r4,r3,3
 200aa38:	1000101e 	bne	r2,zero,200aa7c <_dtoa_r+0x338>
 200aa3c:	d8802917 	ldw	r2,164(sp)
 200aa40:	11000015 	stw	r4,0(r2)
 200aa44:	003f7306 	br	200a814 <_dtoa_r+0xd0>
 200aa48:	00a00034 	movhi	r2,32768
 200aa4c:	10bfffc4 	addi	r2,r2,-1
 200aa50:	00c00044 	movi	r3,1
 200aa54:	88aa703a 	and	r21,r17,r2
 200aa58:	90c00015 	stw	r3,0(r18)
 200aa5c:	003f5806 	br	200a7c0 <_dtoa_r+0x7c>
 200aa60:	00800434 	movhi	r2,16
 200aa64:	10bfffc4 	addi	r2,r2,-1
 200aa68:	a884703a 	and	r2,r21,r2
 200aa6c:	103fec1e 	bne	r2,zero,200aa20 <_dtoa_r+0x2dc>
 200aa70:	00c080b4 	movhi	r3,514
 200aa74:	18c40904 	addi	r3,r3,4132
 200aa78:	003feb06 	br	200aa28 <_dtoa_r+0x2e4>
 200aa7c:	d8802917 	ldw	r2,164(sp)
 200aa80:	19000204 	addi	r4,r3,8
 200aa84:	11000015 	stw	r4,0(r2)
 200aa88:	003f6206 	br	200a814 <_dtoa_r+0xd0>
 200aa8c:	ddc00117 	ldw	r23,4(sp)
 200aa90:	d8800217 	ldw	r2,8(sp)
 200aa94:	01000804 	movi	r4,32
 200aa98:	b8c10c84 	addi	r3,r23,1074
 200aa9c:	18a3883a 	add	r17,r3,r2
 200aaa0:	2441b80e 	bge	r4,r17,200b184 <_dtoa_r+0xa40>
 200aaa4:	00c01004 	movi	r3,64
 200aaa8:	1c47c83a 	sub	r3,r3,r17
 200aaac:	88bff804 	addi	r2,r17,-32
 200aab0:	a8c6983a 	sll	r3,r21,r3
 200aab4:	a084d83a 	srl	r2,r20,r2
 200aab8:	1888b03a 	or	r4,r3,r2
 200aabc:	20134440 	call	2013444 <__floatunsidf>
 200aac0:	1011883a 	mov	r8,r2
 200aac4:	00bf8434 	movhi	r2,65040
 200aac8:	01000044 	movi	r4,1
 200aacc:	10d3883a 	add	r9,r2,r3
 200aad0:	8dbef344 	addi	r22,r17,-1075
 200aad4:	d9000815 	stw	r4,32(sp)
 200aad8:	003f6f06 	br	200a898 <_dtoa_r+0x154>
 200aadc:	d8001715 	stw	zero,92(sp)
 200aae0:	04400044 	movi	r17,1
 200aae4:	00bfffc4 	movi	r2,-1
 200aae8:	00c00044 	movi	r3,1
 200aaec:	d8800e15 	stw	r2,56(sp)
 200aaf0:	d8002615 	stw	zero,152(sp)
 200aaf4:	d8800f15 	stw	r2,60(sp)
 200aaf8:	d8c00b15 	stw	r3,44(sp)
 200aafc:	1021883a 	mov	r16,r2
 200ab00:	d8801617 	ldw	r2,88(sp)
 200ab04:	10001115 	stw	zero,68(r2)
 200ab08:	d8801617 	ldw	r2,88(sp)
 200ab0c:	11401117 	ldw	r5,68(r2)
 200ab10:	1009883a 	mov	r4,r2
 200ab14:	200da800 	call	200da80 <_Balloc>
 200ab18:	d8c01617 	ldw	r3,88(sp)
 200ab1c:	d8800515 	stw	r2,20(sp)
 200ab20:	18801015 	stw	r2,64(r3)
 200ab24:	00800384 	movi	r2,14
 200ab28:	14006836 	bltu	r2,r16,200accc <_dtoa_r+0x588>
 200ab2c:	8805003a 	cmpeq	r2,r17,zero
 200ab30:	1000661e 	bne	r2,zero,200accc <_dtoa_r+0x588>
 200ab34:	d9000d17 	ldw	r4,52(sp)
 200ab38:	0102300e 	bge	zero,r4,200b3fc <_dtoa_r+0xcb8>
 200ab3c:	208003cc 	andi	r2,r4,15
 200ab40:	100490fa 	slli	r2,r2,3
 200ab44:	2025d13a 	srai	r18,r4,4
 200ab48:	00c080b4 	movhi	r3,514
 200ab4c:	18c41d04 	addi	r3,r3,4212
 200ab50:	10c5883a 	add	r2,r2,r3
 200ab54:	90c0040c 	andi	r3,r18,16
 200ab58:	14000017 	ldw	r16,0(r2)
 200ab5c:	14400117 	ldw	r17,4(r2)
 200ab60:	18036a1e 	bne	r3,zero,200b90c <_dtoa_r+0x11c8>
 200ab64:	05800084 	movi	r22,2
 200ab68:	90001026 	beq	r18,zero,200abac <_dtoa_r+0x468>
 200ab6c:	04c080b4 	movhi	r19,514
 200ab70:	9cc44f04 	addi	r19,r19,4412
 200ab74:	9080004c 	andi	r2,r18,1
 200ab78:	1005003a 	cmpeq	r2,r2,zero
 200ab7c:	1000081e 	bne	r2,zero,200aba0 <_dtoa_r+0x45c>
 200ab80:	99800017 	ldw	r6,0(r19)
 200ab84:	99c00117 	ldw	r7,4(r19)
 200ab88:	880b883a 	mov	r5,r17
 200ab8c:	8009883a 	mov	r4,r16
 200ab90:	2004fd00 	call	2004fd0 <__muldf3>
 200ab94:	1021883a 	mov	r16,r2
 200ab98:	b5800044 	addi	r22,r22,1
 200ab9c:	1823883a 	mov	r17,r3
 200aba0:	9025d07a 	srai	r18,r18,1
 200aba4:	9cc00204 	addi	r19,r19,8
 200aba8:	903ff21e 	bne	r18,zero,200ab74 <_dtoa_r+0x430>
 200abac:	a80b883a 	mov	r5,r21
 200abb0:	a009883a 	mov	r4,r20
 200abb4:	880f883a 	mov	r7,r17
 200abb8:	800d883a 	mov	r6,r16
 200abbc:	20053940 	call	2005394 <__divdf3>
 200abc0:	1029883a 	mov	r20,r2
 200abc4:	182b883a 	mov	r21,r3
 200abc8:	d8c00c17 	ldw	r3,48(sp)
 200abcc:	1805003a 	cmpeq	r2,r3,zero
 200abd0:	1000081e 	bne	r2,zero,200abf4 <_dtoa_r+0x4b0>
 200abd4:	0005883a 	mov	r2,zero
 200abd8:	00cffc34 	movhi	r3,16368
 200abdc:	180f883a 	mov	r7,r3
 200abe0:	a009883a 	mov	r4,r20
 200abe4:	a80b883a 	mov	r5,r21
 200abe8:	100d883a 	mov	r6,r2
 200abec:	20056740 	call	2005674 <__ltdf2>
 200abf0:	1003fe16 	blt	r2,zero,200bbec <_dtoa_r+0x14a8>
 200abf4:	b009883a 	mov	r4,r22
 200abf8:	20056fc0 	call	20056fc <__floatsidf>
 200abfc:	180b883a 	mov	r5,r3
 200ac00:	1009883a 	mov	r4,r2
 200ac04:	a00d883a 	mov	r6,r20
 200ac08:	a80f883a 	mov	r7,r21
 200ac0c:	2004fd00 	call	2004fd0 <__muldf3>
 200ac10:	0011883a 	mov	r8,zero
 200ac14:	02500734 	movhi	r9,16412
 200ac18:	1009883a 	mov	r4,r2
 200ac1c:	180b883a 	mov	r5,r3
 200ac20:	480f883a 	mov	r7,r9
 200ac24:	400d883a 	mov	r6,r8
 200ac28:	2004f5c0 	call	2004f5c <__adddf3>
 200ac2c:	d9000f17 	ldw	r4,60(sp)
 200ac30:	102d883a 	mov	r22,r2
 200ac34:	00bf3034 	movhi	r2,64704
 200ac38:	18b9883a 	add	fp,r3,r2
 200ac3c:	e02f883a 	mov	r23,fp
 200ac40:	20028f1e 	bne	r4,zero,200b680 <_dtoa_r+0xf3c>
 200ac44:	0005883a 	mov	r2,zero
 200ac48:	00d00534 	movhi	r3,16404
 200ac4c:	a009883a 	mov	r4,r20
 200ac50:	a80b883a 	mov	r5,r21
 200ac54:	180f883a 	mov	r7,r3
 200ac58:	100d883a 	mov	r6,r2
 200ac5c:	2004edc0 	call	2004edc <__subdf3>
 200ac60:	1009883a 	mov	r4,r2
 200ac64:	e00f883a 	mov	r7,fp
 200ac68:	180b883a 	mov	r5,r3
 200ac6c:	b00d883a 	mov	r6,r22
 200ac70:	1025883a 	mov	r18,r2
 200ac74:	1827883a 	mov	r19,r3
 200ac78:	20055ec0 	call	20055ec <__gtdf2>
 200ac7c:	00834f16 	blt	zero,r2,200b9bc <_dtoa_r+0x1278>
 200ac80:	e0e0003c 	xorhi	r3,fp,32768
 200ac84:	9009883a 	mov	r4,r18
 200ac88:	980b883a 	mov	r5,r19
 200ac8c:	180f883a 	mov	r7,r3
 200ac90:	b00d883a 	mov	r6,r22
 200ac94:	20056740 	call	2005674 <__ltdf2>
 200ac98:	1000080e 	bge	r2,zero,200acbc <_dtoa_r+0x578>
 200ac9c:	0027883a 	mov	r19,zero
 200aca0:	0025883a 	mov	r18,zero
 200aca4:	d8802617 	ldw	r2,152(sp)
 200aca8:	df000517 	ldw	fp,20(sp)
 200acac:	d8000615 	stw	zero,24(sp)
 200acb0:	0084303a 	nor	r2,zero,r2
 200acb4:	d8800d15 	stw	r2,52(sp)
 200acb8:	00019b06 	br	200b328 <_dtoa_r+0xbe4>
 200acbc:	d9801217 	ldw	r6,72(sp)
 200acc0:	d8801317 	ldw	r2,76(sp)
 200acc4:	3029883a 	mov	r20,r6
 200acc8:	102b883a 	mov	r21,r2
 200accc:	d8c00217 	ldw	r3,8(sp)
 200acd0:	18008516 	blt	r3,zero,200aee8 <_dtoa_r+0x7a4>
 200acd4:	d9000d17 	ldw	r4,52(sp)
 200acd8:	00800384 	movi	r2,14
 200acdc:	11008216 	blt	r2,r4,200aee8 <_dtoa_r+0x7a4>
 200ace0:	200490fa 	slli	r2,r4,3
 200ace4:	d9802617 	ldw	r6,152(sp)
 200ace8:	00c080b4 	movhi	r3,514
 200acec:	18c41d04 	addi	r3,r3,4212
 200acf0:	10c5883a 	add	r2,r2,r3
 200acf4:	14800017 	ldw	r18,0(r2)
 200acf8:	14c00117 	ldw	r19,4(r2)
 200acfc:	30031e16 	blt	r6,zero,200b978 <_dtoa_r+0x1234>
 200ad00:	d9000517 	ldw	r4,20(sp)
 200ad04:	d8c00f17 	ldw	r3,60(sp)
 200ad08:	a823883a 	mov	r17,r21
 200ad0c:	a021883a 	mov	r16,r20
 200ad10:	192b883a 	add	r21,r3,r4
 200ad14:	2039883a 	mov	fp,r4
 200ad18:	00000f06 	br	200ad58 <_dtoa_r+0x614>
 200ad1c:	0005883a 	mov	r2,zero
 200ad20:	00d00934 	movhi	r3,16420
 200ad24:	5009883a 	mov	r4,r10
 200ad28:	580b883a 	mov	r5,r11
 200ad2c:	180f883a 	mov	r7,r3
 200ad30:	100d883a 	mov	r6,r2
 200ad34:	2004fd00 	call	2004fd0 <__muldf3>
 200ad38:	180b883a 	mov	r5,r3
 200ad3c:	000d883a 	mov	r6,zero
 200ad40:	000f883a 	mov	r7,zero
 200ad44:	1009883a 	mov	r4,r2
 200ad48:	1021883a 	mov	r16,r2
 200ad4c:	1823883a 	mov	r17,r3
 200ad50:	20132ac0 	call	20132ac <__nedf2>
 200ad54:	10004526 	beq	r2,zero,200ae6c <_dtoa_r+0x728>
 200ad58:	900d883a 	mov	r6,r18
 200ad5c:	980f883a 	mov	r7,r19
 200ad60:	8009883a 	mov	r4,r16
 200ad64:	880b883a 	mov	r5,r17
 200ad68:	20053940 	call	2005394 <__divdf3>
 200ad6c:	180b883a 	mov	r5,r3
 200ad70:	1009883a 	mov	r4,r2
 200ad74:	20057f40 	call	20057f4 <__fixdfsi>
 200ad78:	1009883a 	mov	r4,r2
 200ad7c:	1029883a 	mov	r20,r2
 200ad80:	20056fc0 	call	20056fc <__floatsidf>
 200ad84:	180f883a 	mov	r7,r3
 200ad88:	9009883a 	mov	r4,r18
 200ad8c:	980b883a 	mov	r5,r19
 200ad90:	100d883a 	mov	r6,r2
 200ad94:	2004fd00 	call	2004fd0 <__muldf3>
 200ad98:	180f883a 	mov	r7,r3
 200ad9c:	880b883a 	mov	r5,r17
 200ada0:	8009883a 	mov	r4,r16
 200ada4:	100d883a 	mov	r6,r2
 200ada8:	2004edc0 	call	2004edc <__subdf3>
 200adac:	1015883a 	mov	r10,r2
 200adb0:	a0800c04 	addi	r2,r20,48
 200adb4:	e0800005 	stb	r2,0(fp)
 200adb8:	e7000044 	addi	fp,fp,1
 200adbc:	1817883a 	mov	r11,r3
 200adc0:	e57fd61e 	bne	fp,r21,200ad1c <_dtoa_r+0x5d8>
 200adc4:	500d883a 	mov	r6,r10
 200adc8:	180f883a 	mov	r7,r3
 200adcc:	5009883a 	mov	r4,r10
 200add0:	180b883a 	mov	r5,r3
 200add4:	2004f5c0 	call	2004f5c <__adddf3>
 200add8:	100d883a 	mov	r6,r2
 200addc:	9009883a 	mov	r4,r18
 200ade0:	980b883a 	mov	r5,r19
 200ade4:	180f883a 	mov	r7,r3
 200ade8:	1021883a 	mov	r16,r2
 200adec:	1823883a 	mov	r17,r3
 200adf0:	20056740 	call	2005674 <__ltdf2>
 200adf4:	10000816 	blt	r2,zero,200ae18 <_dtoa_r+0x6d4>
 200adf8:	980b883a 	mov	r5,r19
 200adfc:	800d883a 	mov	r6,r16
 200ae00:	880f883a 	mov	r7,r17
 200ae04:	9009883a 	mov	r4,r18
 200ae08:	20132240 	call	2013224 <__eqdf2>
 200ae0c:	1000171e 	bne	r2,zero,200ae6c <_dtoa_r+0x728>
 200ae10:	a080004c 	andi	r2,r20,1
 200ae14:	10001526 	beq	r2,zero,200ae6c <_dtoa_r+0x728>
 200ae18:	d8800d17 	ldw	r2,52(sp)
 200ae1c:	d8800415 	stw	r2,16(sp)
 200ae20:	e009883a 	mov	r4,fp
 200ae24:	213fffc4 	addi	r4,r4,-1
 200ae28:	20c00007 	ldb	r3,0(r4)
 200ae2c:	00800e44 	movi	r2,57
 200ae30:	1880081e 	bne	r3,r2,200ae54 <_dtoa_r+0x710>
 200ae34:	d8800517 	ldw	r2,20(sp)
 200ae38:	113ffa1e 	bne	r2,r4,200ae24 <_dtoa_r+0x6e0>
 200ae3c:	d8c00417 	ldw	r3,16(sp)
 200ae40:	d9800517 	ldw	r6,20(sp)
 200ae44:	00800c04 	movi	r2,48
 200ae48:	18c00044 	addi	r3,r3,1
 200ae4c:	d8c00415 	stw	r3,16(sp)
 200ae50:	30800005 	stb	r2,0(r6)
 200ae54:	20800003 	ldbu	r2,0(r4)
 200ae58:	d8c00417 	ldw	r3,16(sp)
 200ae5c:	27000044 	addi	fp,r4,1
 200ae60:	10800044 	addi	r2,r2,1
 200ae64:	d8c00d15 	stw	r3,52(sp)
 200ae68:	20800005 	stb	r2,0(r4)
 200ae6c:	d9001617 	ldw	r4,88(sp)
 200ae70:	d9400717 	ldw	r5,28(sp)
 200ae74:	200d5000 	call	200d500 <_Bfree>
 200ae78:	e0000005 	stb	zero,0(fp)
 200ae7c:	d9800d17 	ldw	r6,52(sp)
 200ae80:	d8c02717 	ldw	r3,156(sp)
 200ae84:	d9002917 	ldw	r4,164(sp)
 200ae88:	30800044 	addi	r2,r6,1
 200ae8c:	18800015 	stw	r2,0(r3)
 200ae90:	20029c26 	beq	r4,zero,200b904 <_dtoa_r+0x11c0>
 200ae94:	d8c00517 	ldw	r3,20(sp)
 200ae98:	27000015 	stw	fp,0(r4)
 200ae9c:	003e5d06 	br	200a814 <_dtoa_r+0xd0>
 200aea0:	d9800d17 	ldw	r6,52(sp)
 200aea4:	00c080b4 	movhi	r3,514
 200aea8:	18c41d04 	addi	r3,r3,4212
 200aeac:	d9001217 	ldw	r4,72(sp)
 200aeb0:	300490fa 	slli	r2,r6,3
 200aeb4:	d9401317 	ldw	r5,76(sp)
 200aeb8:	10c5883a 	add	r2,r2,r3
 200aebc:	12000017 	ldw	r8,0(r2)
 200aec0:	12400117 	ldw	r9,4(r2)
 200aec4:	400d883a 	mov	r6,r8
 200aec8:	480f883a 	mov	r7,r9
 200aecc:	20056740 	call	2005674 <__ltdf2>
 200aed0:	1000030e 	bge	r2,zero,200aee0 <_dtoa_r+0x79c>
 200aed4:	d8800d17 	ldw	r2,52(sp)
 200aed8:	10bfffc4 	addi	r2,r2,-1
 200aedc:	d8800d15 	stw	r2,52(sp)
 200aee0:	d8000c15 	stw	zero,48(sp)
 200aee4:	003ea806 	br	200a988 <_dtoa_r+0x244>
 200aee8:	d9000b17 	ldw	r4,44(sp)
 200aeec:	202cc03a 	cmpne	r22,r4,zero
 200aef0:	b000c71e 	bne	r22,zero,200b210 <_dtoa_r+0xacc>
 200aef4:	dc001117 	ldw	r16,68(sp)
 200aef8:	dc801017 	ldw	r18,64(sp)
 200aefc:	0027883a 	mov	r19,zero
 200af00:	04000b0e 	bge	zero,r16,200af30 <_dtoa_r+0x7ec>
 200af04:	d8c00a17 	ldw	r3,40(sp)
 200af08:	00c0090e 	bge	zero,r3,200af30 <_dtoa_r+0x7ec>
 200af0c:	8005883a 	mov	r2,r16
 200af10:	1c011316 	blt	r3,r16,200b360 <_dtoa_r+0xc1c>
 200af14:	d9000a17 	ldw	r4,40(sp)
 200af18:	d9801117 	ldw	r6,68(sp)
 200af1c:	80a1c83a 	sub	r16,r16,r2
 200af20:	2089c83a 	sub	r4,r4,r2
 200af24:	308dc83a 	sub	r6,r6,r2
 200af28:	d9000a15 	stw	r4,40(sp)
 200af2c:	d9801115 	stw	r6,68(sp)
 200af30:	d8801017 	ldw	r2,64(sp)
 200af34:	0080150e 	bge	zero,r2,200af8c <_dtoa_r+0x848>
 200af38:	d8c00b17 	ldw	r3,44(sp)
 200af3c:	1805003a 	cmpeq	r2,r3,zero
 200af40:	1001c91e 	bne	r2,zero,200b668 <_dtoa_r+0xf24>
 200af44:	04800e0e 	bge	zero,r18,200af80 <_dtoa_r+0x83c>
 200af48:	d9001617 	ldw	r4,88(sp)
 200af4c:	980b883a 	mov	r5,r19
 200af50:	900d883a 	mov	r6,r18
 200af54:	200e2b40 	call	200e2b4 <__pow5mult>
 200af58:	d9001617 	ldw	r4,88(sp)
 200af5c:	d9800717 	ldw	r6,28(sp)
 200af60:	100b883a 	mov	r5,r2
 200af64:	1027883a 	mov	r19,r2
 200af68:	200df900 	call	200df90 <__multiply>
 200af6c:	d9001617 	ldw	r4,88(sp)
 200af70:	d9400717 	ldw	r5,28(sp)
 200af74:	1023883a 	mov	r17,r2
 200af78:	200d5000 	call	200d500 <_Bfree>
 200af7c:	dc400715 	stw	r17,28(sp)
 200af80:	d9001017 	ldw	r4,64(sp)
 200af84:	248dc83a 	sub	r6,r4,r18
 200af88:	30010e1e 	bne	r6,zero,200b3c4 <_dtoa_r+0xc80>
 200af8c:	d9001617 	ldw	r4,88(sp)
 200af90:	04400044 	movi	r17,1
 200af94:	880b883a 	mov	r5,r17
 200af98:	200e1780 	call	200e178 <__i2b>
 200af9c:	d9800917 	ldw	r6,36(sp)
 200afa0:	1025883a 	mov	r18,r2
 200afa4:	0180040e 	bge	zero,r6,200afb8 <_dtoa_r+0x874>
 200afa8:	d9001617 	ldw	r4,88(sp)
 200afac:	100b883a 	mov	r5,r2
 200afb0:	200e2b40 	call	200e2b4 <__pow5mult>
 200afb4:	1025883a 	mov	r18,r2
 200afb8:	d8801717 	ldw	r2,92(sp)
 200afbc:	8880f30e 	bge	r17,r2,200b38c <_dtoa_r+0xc48>
 200afc0:	0023883a 	mov	r17,zero
 200afc4:	d9800917 	ldw	r6,36(sp)
 200afc8:	30019e1e 	bne	r6,zero,200b644 <_dtoa_r+0xf00>
 200afcc:	00c00044 	movi	r3,1
 200afd0:	d9000a17 	ldw	r4,40(sp)
 200afd4:	20c5883a 	add	r2,r4,r3
 200afd8:	10c007cc 	andi	r3,r2,31
 200afdc:	1800841e 	bne	r3,zero,200b1f0 <_dtoa_r+0xaac>
 200afe0:	00800704 	movi	r2,28
 200afe4:	d9000a17 	ldw	r4,40(sp)
 200afe8:	d9801117 	ldw	r6,68(sp)
 200afec:	80a1883a 	add	r16,r16,r2
 200aff0:	2089883a 	add	r4,r4,r2
 200aff4:	308d883a 	add	r6,r6,r2
 200aff8:	d9000a15 	stw	r4,40(sp)
 200affc:	d9801115 	stw	r6,68(sp)
 200b000:	d8801117 	ldw	r2,68(sp)
 200b004:	0080050e 	bge	zero,r2,200b01c <_dtoa_r+0x8d8>
 200b008:	d9400717 	ldw	r5,28(sp)
 200b00c:	d9001617 	ldw	r4,88(sp)
 200b010:	100d883a 	mov	r6,r2
 200b014:	200de440 	call	200de44 <__lshift>
 200b018:	d8800715 	stw	r2,28(sp)
 200b01c:	d8c00a17 	ldw	r3,40(sp)
 200b020:	00c0050e 	bge	zero,r3,200b038 <_dtoa_r+0x8f4>
 200b024:	d9001617 	ldw	r4,88(sp)
 200b028:	900b883a 	mov	r5,r18
 200b02c:	180d883a 	mov	r6,r3
 200b030:	200de440 	call	200de44 <__lshift>
 200b034:	1025883a 	mov	r18,r2
 200b038:	d9000c17 	ldw	r4,48(sp)
 200b03c:	2005003a 	cmpeq	r2,r4,zero
 200b040:	10016f26 	beq	r2,zero,200b600 <_dtoa_r+0xebc>
 200b044:	d9000f17 	ldw	r4,60(sp)
 200b048:	0102170e 	bge	zero,r4,200b8a8 <_dtoa_r+0x1164>
 200b04c:	d9800b17 	ldw	r6,44(sp)
 200b050:	3005003a 	cmpeq	r2,r6,zero
 200b054:	1000881e 	bne	r2,zero,200b278 <_dtoa_r+0xb34>
 200b058:	0400050e 	bge	zero,r16,200b070 <_dtoa_r+0x92c>
 200b05c:	d9001617 	ldw	r4,88(sp)
 200b060:	980b883a 	mov	r5,r19
 200b064:	800d883a 	mov	r6,r16
 200b068:	200de440 	call	200de44 <__lshift>
 200b06c:	1027883a 	mov	r19,r2
 200b070:	8804c03a 	cmpne	r2,r17,zero
 200b074:	1002541e 	bne	r2,zero,200b9c8 <_dtoa_r+0x1284>
 200b078:	980b883a 	mov	r5,r19
 200b07c:	dd800517 	ldw	r22,20(sp)
 200b080:	dcc00615 	stw	r19,24(sp)
 200b084:	a700004c 	andi	fp,r20,1
 200b088:	2827883a 	mov	r19,r5
 200b08c:	d9000717 	ldw	r4,28(sp)
 200b090:	900b883a 	mov	r5,r18
 200b094:	200a52c0 	call	200a52c <quorem>
 200b098:	d9000717 	ldw	r4,28(sp)
 200b09c:	d9400617 	ldw	r5,24(sp)
 200b0a0:	1023883a 	mov	r17,r2
 200b0a4:	8dc00c04 	addi	r23,r17,48
 200b0a8:	200d65c0 	call	200d65c <__mcmp>
 200b0ac:	d9001617 	ldw	r4,88(sp)
 200b0b0:	900b883a 	mov	r5,r18
 200b0b4:	980d883a 	mov	r6,r19
 200b0b8:	1029883a 	mov	r20,r2
 200b0bc:	200dcb80 	call	200dcb8 <__mdiff>
 200b0c0:	102b883a 	mov	r21,r2
 200b0c4:	10800317 	ldw	r2,12(r2)
 200b0c8:	1001281e 	bne	r2,zero,200b56c <_dtoa_r+0xe28>
 200b0cc:	d9000717 	ldw	r4,28(sp)
 200b0d0:	a80b883a 	mov	r5,r21
 200b0d4:	200d65c0 	call	200d65c <__mcmp>
 200b0d8:	d9001617 	ldw	r4,88(sp)
 200b0dc:	1021883a 	mov	r16,r2
 200b0e0:	a80b883a 	mov	r5,r21
 200b0e4:	200d5000 	call	200d500 <_Bfree>
 200b0e8:	8000041e 	bne	r16,zero,200b0fc <_dtoa_r+0x9b8>
 200b0ec:	d8801717 	ldw	r2,92(sp)
 200b0f0:	1000021e 	bne	r2,zero,200b0fc <_dtoa_r+0x9b8>
 200b0f4:	e004c03a 	cmpne	r2,fp,zero
 200b0f8:	10011726 	beq	r2,zero,200b558 <_dtoa_r+0xe14>
 200b0fc:	a0010616 	blt	r20,zero,200b518 <_dtoa_r+0xdd4>
 200b100:	a000041e 	bne	r20,zero,200b114 <_dtoa_r+0x9d0>
 200b104:	d8c01717 	ldw	r3,92(sp)
 200b108:	1800021e 	bne	r3,zero,200b114 <_dtoa_r+0x9d0>
 200b10c:	e004c03a 	cmpne	r2,fp,zero
 200b110:	10010126 	beq	r2,zero,200b518 <_dtoa_r+0xdd4>
 200b114:	04023d16 	blt	zero,r16,200ba0c <_dtoa_r+0x12c8>
 200b118:	b5c00005 	stb	r23,0(r22)
 200b11c:	d9800517 	ldw	r6,20(sp)
 200b120:	d9000f17 	ldw	r4,60(sp)
 200b124:	b5800044 	addi	r22,r22,1
 200b128:	3105883a 	add	r2,r6,r4
 200b12c:	b0806526 	beq	r22,r2,200b2c4 <_dtoa_r+0xb80>
 200b130:	d9400717 	ldw	r5,28(sp)
 200b134:	d9001617 	ldw	r4,88(sp)
 200b138:	01800284 	movi	r6,10
 200b13c:	000f883a 	mov	r7,zero
 200b140:	200e1b40 	call	200e1b4 <__multadd>
 200b144:	d8800715 	stw	r2,28(sp)
 200b148:	d8800617 	ldw	r2,24(sp)
 200b14c:	14c10c26 	beq	r2,r19,200b580 <_dtoa_r+0xe3c>
 200b150:	d9400617 	ldw	r5,24(sp)
 200b154:	d9001617 	ldw	r4,88(sp)
 200b158:	01800284 	movi	r6,10
 200b15c:	000f883a 	mov	r7,zero
 200b160:	200e1b40 	call	200e1b4 <__multadd>
 200b164:	d9001617 	ldw	r4,88(sp)
 200b168:	980b883a 	mov	r5,r19
 200b16c:	01800284 	movi	r6,10
 200b170:	000f883a 	mov	r7,zero
 200b174:	d8800615 	stw	r2,24(sp)
 200b178:	200e1b40 	call	200e1b4 <__multadd>
 200b17c:	1027883a 	mov	r19,r2
 200b180:	003fc206 	br	200b08c <_dtoa_r+0x948>
 200b184:	2445c83a 	sub	r2,r4,r17
 200b188:	a088983a 	sll	r4,r20,r2
 200b18c:	003e4b06 	br	200aabc <_dtoa_r+0x378>
 200b190:	01bfffc4 	movi	r6,-1
 200b194:	00800044 	movi	r2,1
 200b198:	d9800e15 	stw	r6,56(sp)
 200b19c:	d9800f15 	stw	r6,60(sp)
 200b1a0:	d8800b15 	stw	r2,44(sp)
 200b1a4:	d8c01617 	ldw	r3,88(sp)
 200b1a8:	008005c4 	movi	r2,23
 200b1ac:	18001115 	stw	zero,68(r3)
 200b1b0:	1580082e 	bgeu	r2,r22,200b1d4 <_dtoa_r+0xa90>
 200b1b4:	00c00104 	movi	r3,4
 200b1b8:	0009883a 	mov	r4,zero
 200b1bc:	18c7883a 	add	r3,r3,r3
 200b1c0:	18800504 	addi	r2,r3,20
 200b1c4:	21000044 	addi	r4,r4,1
 200b1c8:	b0bffc2e 	bgeu	r22,r2,200b1bc <_dtoa_r+0xa78>
 200b1cc:	d9801617 	ldw	r6,88(sp)
 200b1d0:	31001115 	stw	r4,68(r6)
 200b1d4:	dc000f17 	ldw	r16,60(sp)
 200b1d8:	003e4b06 	br	200ab08 <_dtoa_r+0x3c4>
 200b1dc:	d9801717 	ldw	r6,92(sp)
 200b1e0:	0023883a 	mov	r17,zero
 200b1e4:	31bfff04 	addi	r6,r6,-4
 200b1e8:	d9801715 	stw	r6,92(sp)
 200b1ec:	003df806 	br	200a9d0 <_dtoa_r+0x28c>
 200b1f0:	00800804 	movi	r2,32
 200b1f4:	10c9c83a 	sub	r4,r2,r3
 200b1f8:	00c00104 	movi	r3,4
 200b1fc:	19005a16 	blt	r3,r4,200b368 <_dtoa_r+0xc24>
 200b200:	008000c4 	movi	r2,3
 200b204:	113f7e16 	blt	r2,r4,200b000 <_dtoa_r+0x8bc>
 200b208:	20800704 	addi	r2,r4,28
 200b20c:	003f7506 	br	200afe4 <_dtoa_r+0x8a0>
 200b210:	d9801717 	ldw	r6,92(sp)
 200b214:	00800044 	movi	r2,1
 200b218:	1180a10e 	bge	r2,r6,200b4a0 <_dtoa_r+0xd5c>
 200b21c:	d9800f17 	ldw	r6,60(sp)
 200b220:	d8c01017 	ldw	r3,64(sp)
 200b224:	30bfffc4 	addi	r2,r6,-1
 200b228:	1881c616 	blt	r3,r2,200b944 <_dtoa_r+0x1200>
 200b22c:	18a5c83a 	sub	r18,r3,r2
 200b230:	d8800f17 	ldw	r2,60(sp)
 200b234:	10026216 	blt	r2,zero,200bbc0 <_dtoa_r+0x147c>
 200b238:	dc001117 	ldw	r16,68(sp)
 200b23c:	1007883a 	mov	r3,r2
 200b240:	d9800a17 	ldw	r6,40(sp)
 200b244:	d8801117 	ldw	r2,68(sp)
 200b248:	d9001617 	ldw	r4,88(sp)
 200b24c:	30cd883a 	add	r6,r6,r3
 200b250:	10c5883a 	add	r2,r2,r3
 200b254:	01400044 	movi	r5,1
 200b258:	d9800a15 	stw	r6,40(sp)
 200b25c:	d8801115 	stw	r2,68(sp)
 200b260:	200e1780 	call	200e178 <__i2b>
 200b264:	1027883a 	mov	r19,r2
 200b268:	003f2506 	br	200af00 <_dtoa_r+0x7bc>
 200b26c:	00c080b4 	movhi	r3,514
 200b270:	18c35504 	addi	r3,r3,3412
 200b274:	003d6706 	br	200a814 <_dtoa_r+0xd0>
 200b278:	dd800517 	ldw	r22,20(sp)
 200b27c:	04000044 	movi	r16,1
 200b280:	00000706 	br	200b2a0 <_dtoa_r+0xb5c>
 200b284:	d9400717 	ldw	r5,28(sp)
 200b288:	d9001617 	ldw	r4,88(sp)
 200b28c:	01800284 	movi	r6,10
 200b290:	000f883a 	mov	r7,zero
 200b294:	200e1b40 	call	200e1b4 <__multadd>
 200b298:	d8800715 	stw	r2,28(sp)
 200b29c:	84000044 	addi	r16,r16,1
 200b2a0:	d9000717 	ldw	r4,28(sp)
 200b2a4:	900b883a 	mov	r5,r18
 200b2a8:	200a52c0 	call	200a52c <quorem>
 200b2ac:	15c00c04 	addi	r23,r2,48
 200b2b0:	b5c00005 	stb	r23,0(r22)
 200b2b4:	d8c00f17 	ldw	r3,60(sp)
 200b2b8:	b5800044 	addi	r22,r22,1
 200b2bc:	80fff116 	blt	r16,r3,200b284 <_dtoa_r+0xb40>
 200b2c0:	d8000615 	stw	zero,24(sp)
 200b2c4:	d9400717 	ldw	r5,28(sp)
 200b2c8:	d9001617 	ldw	r4,88(sp)
 200b2cc:	01800044 	movi	r6,1
 200b2d0:	200de440 	call	200de44 <__lshift>
 200b2d4:	1009883a 	mov	r4,r2
 200b2d8:	900b883a 	mov	r5,r18
 200b2dc:	d8800715 	stw	r2,28(sp)
 200b2e0:	200d65c0 	call	200d65c <__mcmp>
 200b2e4:	00803c0e 	bge	zero,r2,200b3d8 <_dtoa_r+0xc94>
 200b2e8:	b009883a 	mov	r4,r22
 200b2ec:	213fffc4 	addi	r4,r4,-1
 200b2f0:	21400003 	ldbu	r5,0(r4)
 200b2f4:	00800e44 	movi	r2,57
 200b2f8:	28c03fcc 	andi	r3,r5,255
 200b2fc:	18c0201c 	xori	r3,r3,128
 200b300:	18ffe004 	addi	r3,r3,-128
 200b304:	1881981e 	bne	r3,r2,200b968 <_dtoa_r+0x1224>
 200b308:	d9800517 	ldw	r6,20(sp)
 200b30c:	21bff71e 	bne	r4,r6,200b2ec <_dtoa_r+0xba8>
 200b310:	d8800d17 	ldw	r2,52(sp)
 200b314:	37000044 	addi	fp,r6,1
 200b318:	10800044 	addi	r2,r2,1
 200b31c:	d8800d15 	stw	r2,52(sp)
 200b320:	00800c44 	movi	r2,49
 200b324:	30800005 	stb	r2,0(r6)
 200b328:	d9001617 	ldw	r4,88(sp)
 200b32c:	900b883a 	mov	r5,r18
 200b330:	200d5000 	call	200d500 <_Bfree>
 200b334:	983ecd26 	beq	r19,zero,200ae6c <_dtoa_r+0x728>
 200b338:	d8c00617 	ldw	r3,24(sp)
 200b33c:	18000426 	beq	r3,zero,200b350 <_dtoa_r+0xc0c>
 200b340:	1cc00326 	beq	r3,r19,200b350 <_dtoa_r+0xc0c>
 200b344:	d9001617 	ldw	r4,88(sp)
 200b348:	180b883a 	mov	r5,r3
 200b34c:	200d5000 	call	200d500 <_Bfree>
 200b350:	d9001617 	ldw	r4,88(sp)
 200b354:	980b883a 	mov	r5,r19
 200b358:	200d5000 	call	200d500 <_Bfree>
 200b35c:	003ec306 	br	200ae6c <_dtoa_r+0x728>
 200b360:	1805883a 	mov	r2,r3
 200b364:	003eeb06 	br	200af14 <_dtoa_r+0x7d0>
 200b368:	d9800a17 	ldw	r6,40(sp)
 200b36c:	d8c01117 	ldw	r3,68(sp)
 200b370:	20bfff04 	addi	r2,r4,-4
 200b374:	308d883a 	add	r6,r6,r2
 200b378:	1887883a 	add	r3,r3,r2
 200b37c:	80a1883a 	add	r16,r16,r2
 200b380:	d9800a15 	stw	r6,40(sp)
 200b384:	d8c01115 	stw	r3,68(sp)
 200b388:	003f1d06 	br	200b000 <_dtoa_r+0x8bc>
 200b38c:	a03f0c1e 	bne	r20,zero,200afc0 <_dtoa_r+0x87c>
 200b390:	00800434 	movhi	r2,16
 200b394:	10bfffc4 	addi	r2,r2,-1
 200b398:	a884703a 	and	r2,r21,r2
 200b39c:	103f081e 	bne	r2,zero,200afc0 <_dtoa_r+0x87c>
 200b3a0:	a89ffc2c 	andhi	r2,r21,32752
 200b3a4:	103f0626 	beq	r2,zero,200afc0 <_dtoa_r+0x87c>
 200b3a8:	d8c01117 	ldw	r3,68(sp)
 200b3ac:	d9000a17 	ldw	r4,40(sp)
 200b3b0:	18c00044 	addi	r3,r3,1
 200b3b4:	21000044 	addi	r4,r4,1
 200b3b8:	d8c01115 	stw	r3,68(sp)
 200b3bc:	d9000a15 	stw	r4,40(sp)
 200b3c0:	003f0006 	br	200afc4 <_dtoa_r+0x880>
 200b3c4:	d9400717 	ldw	r5,28(sp)
 200b3c8:	d9001617 	ldw	r4,88(sp)
 200b3cc:	200e2b40 	call	200e2b4 <__pow5mult>
 200b3d0:	d8800715 	stw	r2,28(sp)
 200b3d4:	003eed06 	br	200af8c <_dtoa_r+0x848>
 200b3d8:	1000021e 	bne	r2,zero,200b3e4 <_dtoa_r+0xca0>
 200b3dc:	b880004c 	andi	r2,r23,1
 200b3e0:	103fc11e 	bne	r2,zero,200b2e8 <_dtoa_r+0xba4>
 200b3e4:	b5bfffc4 	addi	r22,r22,-1
 200b3e8:	b0c00007 	ldb	r3,0(r22)
 200b3ec:	00800c04 	movi	r2,48
 200b3f0:	18bffc26 	beq	r3,r2,200b3e4 <_dtoa_r+0xca0>
 200b3f4:	b7000044 	addi	fp,r22,1
 200b3f8:	003fcb06 	br	200b328 <_dtoa_r+0xbe4>
 200b3fc:	d9800d17 	ldw	r6,52(sp)
 200b400:	018fc83a 	sub	r7,zero,r6
 200b404:	3801f726 	beq	r7,zero,200bbe4 <_dtoa_r+0x14a0>
 200b408:	398003cc 	andi	r6,r7,15
 200b40c:	300c90fa 	slli	r6,r6,3
 200b410:	014080b4 	movhi	r5,514
 200b414:	29441d04 	addi	r5,r5,4212
 200b418:	d9001217 	ldw	r4,72(sp)
 200b41c:	314d883a 	add	r6,r6,r5
 200b420:	30c00117 	ldw	r3,4(r6)
 200b424:	30800017 	ldw	r2,0(r6)
 200b428:	d9401317 	ldw	r5,76(sp)
 200b42c:	3821d13a 	srai	r16,r7,4
 200b430:	100d883a 	mov	r6,r2
 200b434:	180f883a 	mov	r7,r3
 200b438:	2004fd00 	call	2004fd0 <__muldf3>
 200b43c:	1011883a 	mov	r8,r2
 200b440:	1813883a 	mov	r9,r3
 200b444:	1029883a 	mov	r20,r2
 200b448:	182b883a 	mov	r21,r3
 200b44c:	8001e526 	beq	r16,zero,200bbe4 <_dtoa_r+0x14a0>
 200b450:	05800084 	movi	r22,2
 200b454:	044080b4 	movhi	r17,514
 200b458:	8c444f04 	addi	r17,r17,4412
 200b45c:	8080004c 	andi	r2,r16,1
 200b460:	1005003a 	cmpeq	r2,r2,zero
 200b464:	1000081e 	bne	r2,zero,200b488 <_dtoa_r+0xd44>
 200b468:	89800017 	ldw	r6,0(r17)
 200b46c:	89c00117 	ldw	r7,4(r17)
 200b470:	480b883a 	mov	r5,r9
 200b474:	4009883a 	mov	r4,r8
 200b478:	2004fd00 	call	2004fd0 <__muldf3>
 200b47c:	1011883a 	mov	r8,r2
 200b480:	b5800044 	addi	r22,r22,1
 200b484:	1813883a 	mov	r9,r3
 200b488:	8021d07a 	srai	r16,r16,1
 200b48c:	8c400204 	addi	r17,r17,8
 200b490:	803ff21e 	bne	r16,zero,200b45c <_dtoa_r+0xd18>
 200b494:	4029883a 	mov	r20,r8
 200b498:	482b883a 	mov	r21,r9
 200b49c:	003dca06 	br	200abc8 <_dtoa_r+0x484>
 200b4a0:	d9000817 	ldw	r4,32(sp)
 200b4a4:	2005003a 	cmpeq	r2,r4,zero
 200b4a8:	1001f61e 	bne	r2,zero,200bc84 <_dtoa_r+0x1540>
 200b4ac:	dc001117 	ldw	r16,68(sp)
 200b4b0:	dc801017 	ldw	r18,64(sp)
 200b4b4:	18c10cc4 	addi	r3,r3,1075
 200b4b8:	003f6106 	br	200b240 <_dtoa_r+0xafc>
 200b4bc:	d8000b15 	stw	zero,44(sp)
 200b4c0:	d9802617 	ldw	r6,152(sp)
 200b4c4:	d8c00d17 	ldw	r3,52(sp)
 200b4c8:	30800044 	addi	r2,r6,1
 200b4cc:	18ad883a 	add	r22,r3,r2
 200b4d0:	b13fffc4 	addi	r4,r22,-1
 200b4d4:	d9000e15 	stw	r4,56(sp)
 200b4d8:	0581f60e 	bge	zero,r22,200bcb4 <_dtoa_r+0x1570>
 200b4dc:	dd800f15 	stw	r22,60(sp)
 200b4e0:	003f3006 	br	200b1a4 <_dtoa_r+0xa60>
 200b4e4:	d8000b15 	stw	zero,44(sp)
 200b4e8:	d9002617 	ldw	r4,152(sp)
 200b4ec:	0101eb0e 	bge	zero,r4,200bc9c <_dtoa_r+0x1558>
 200b4f0:	202d883a 	mov	r22,r4
 200b4f4:	d9000e15 	stw	r4,56(sp)
 200b4f8:	d9000f15 	stw	r4,60(sp)
 200b4fc:	003f2906 	br	200b1a4 <_dtoa_r+0xa60>
 200b500:	01800044 	movi	r6,1
 200b504:	d9800b15 	stw	r6,44(sp)
 200b508:	003ff706 	br	200b4e8 <_dtoa_r+0xda4>
 200b50c:	01000044 	movi	r4,1
 200b510:	d9000b15 	stw	r4,44(sp)
 200b514:	003fea06 	br	200b4c0 <_dtoa_r+0xd7c>
 200b518:	04000c0e 	bge	zero,r16,200b54c <_dtoa_r+0xe08>
 200b51c:	d9400717 	ldw	r5,28(sp)
 200b520:	d9001617 	ldw	r4,88(sp)
 200b524:	01800044 	movi	r6,1
 200b528:	200de440 	call	200de44 <__lshift>
 200b52c:	1009883a 	mov	r4,r2
 200b530:	900b883a 	mov	r5,r18
 200b534:	d8800715 	stw	r2,28(sp)
 200b538:	200d65c0 	call	200d65c <__mcmp>
 200b53c:	0081e00e 	bge	zero,r2,200bcc0 <_dtoa_r+0x157c>
 200b540:	bdc00044 	addi	r23,r23,1
 200b544:	00800e84 	movi	r2,58
 200b548:	b881a226 	beq	r23,r2,200bbd4 <_dtoa_r+0x1490>
 200b54c:	b7000044 	addi	fp,r22,1
 200b550:	b5c00005 	stb	r23,0(r22)
 200b554:	003f7406 	br	200b328 <_dtoa_r+0xbe4>
 200b558:	00800e44 	movi	r2,57
 200b55c:	b8819d26 	beq	r23,r2,200bbd4 <_dtoa_r+0x1490>
 200b560:	053ffa0e 	bge	zero,r20,200b54c <_dtoa_r+0xe08>
 200b564:	8dc00c44 	addi	r23,r17,49
 200b568:	003ff806 	br	200b54c <_dtoa_r+0xe08>
 200b56c:	d9001617 	ldw	r4,88(sp)
 200b570:	a80b883a 	mov	r5,r21
 200b574:	04000044 	movi	r16,1
 200b578:	200d5000 	call	200d500 <_Bfree>
 200b57c:	003edf06 	br	200b0fc <_dtoa_r+0x9b8>
 200b580:	d9001617 	ldw	r4,88(sp)
 200b584:	980b883a 	mov	r5,r19
 200b588:	01800284 	movi	r6,10
 200b58c:	000f883a 	mov	r7,zero
 200b590:	200e1b40 	call	200e1b4 <__multadd>
 200b594:	1027883a 	mov	r19,r2
 200b598:	d8800615 	stw	r2,24(sp)
 200b59c:	003ebb06 	br	200b08c <_dtoa_r+0x948>
 200b5a0:	d9801117 	ldw	r6,68(sp)
 200b5a4:	d8800d17 	ldw	r2,52(sp)
 200b5a8:	d8000915 	stw	zero,36(sp)
 200b5ac:	308dc83a 	sub	r6,r6,r2
 200b5b0:	0087c83a 	sub	r3,zero,r2
 200b5b4:	d9801115 	stw	r6,68(sp)
 200b5b8:	d8c01015 	stw	r3,64(sp)
 200b5bc:	003cfe06 	br	200a9b8 <_dtoa_r+0x274>
 200b5c0:	018dc83a 	sub	r6,zero,r6
 200b5c4:	d9801115 	stw	r6,68(sp)
 200b5c8:	d8000a15 	stw	zero,40(sp)
 200b5cc:	003cf306 	br	200a99c <_dtoa_r+0x258>
 200b5d0:	d9000d17 	ldw	r4,52(sp)
 200b5d4:	20056fc0 	call	20056fc <__floatsidf>
 200b5d8:	880b883a 	mov	r5,r17
 200b5dc:	8009883a 	mov	r4,r16
 200b5e0:	180f883a 	mov	r7,r3
 200b5e4:	100d883a 	mov	r6,r2
 200b5e8:	20132ac0 	call	20132ac <__nedf2>
 200b5ec:	103ce126 	beq	r2,zero,200a974 <_dtoa_r+0x230>
 200b5f0:	d9800d17 	ldw	r6,52(sp)
 200b5f4:	31bfffc4 	addi	r6,r6,-1
 200b5f8:	d9800d15 	stw	r6,52(sp)
 200b5fc:	003cdd06 	br	200a974 <_dtoa_r+0x230>
 200b600:	d9000717 	ldw	r4,28(sp)
 200b604:	900b883a 	mov	r5,r18
 200b608:	200d65c0 	call	200d65c <__mcmp>
 200b60c:	103e8d0e 	bge	r2,zero,200b044 <_dtoa_r+0x900>
 200b610:	d9400717 	ldw	r5,28(sp)
 200b614:	d9001617 	ldw	r4,88(sp)
 200b618:	01800284 	movi	r6,10
 200b61c:	000f883a 	mov	r7,zero
 200b620:	200e1b40 	call	200e1b4 <__multadd>
 200b624:	d9800d17 	ldw	r6,52(sp)
 200b628:	d8800715 	stw	r2,28(sp)
 200b62c:	31bfffc4 	addi	r6,r6,-1
 200b630:	d9800d15 	stw	r6,52(sp)
 200b634:	b001a71e 	bne	r22,zero,200bcd4 <_dtoa_r+0x1590>
 200b638:	d8800e17 	ldw	r2,56(sp)
 200b63c:	d8800f15 	stw	r2,60(sp)
 200b640:	003e8006 	br	200b044 <_dtoa_r+0x900>
 200b644:	90800417 	ldw	r2,16(r18)
 200b648:	1085883a 	add	r2,r2,r2
 200b64c:	1085883a 	add	r2,r2,r2
 200b650:	1485883a 	add	r2,r2,r18
 200b654:	11000417 	ldw	r4,16(r2)
 200b658:	200d5280 	call	200d528 <__hi0bits>
 200b65c:	00c00804 	movi	r3,32
 200b660:	1887c83a 	sub	r3,r3,r2
 200b664:	003e5a06 	br	200afd0 <_dtoa_r+0x88c>
 200b668:	d9400717 	ldw	r5,28(sp)
 200b66c:	d9801017 	ldw	r6,64(sp)
 200b670:	d9001617 	ldw	r4,88(sp)
 200b674:	200e2b40 	call	200e2b4 <__pow5mult>
 200b678:	d8800715 	stw	r2,28(sp)
 200b67c:	003e4306 	br	200af8c <_dtoa_r+0x848>
 200b680:	d9800f17 	ldw	r6,60(sp)
 200b684:	d8800d17 	ldw	r2,52(sp)
 200b688:	d9800315 	stw	r6,12(sp)
 200b68c:	d8800415 	stw	r2,16(sp)
 200b690:	d8c00b17 	ldw	r3,44(sp)
 200b694:	1805003a 	cmpeq	r2,r3,zero
 200b698:	1000e21e 	bne	r2,zero,200ba24 <_dtoa_r+0x12e0>
 200b69c:	d9000317 	ldw	r4,12(sp)
 200b6a0:	0005883a 	mov	r2,zero
 200b6a4:	00cff834 	movhi	r3,16352
 200b6a8:	200c90fa 	slli	r6,r4,3
 200b6ac:	010080b4 	movhi	r4,514
 200b6b0:	21041d04 	addi	r4,r4,4212
 200b6b4:	180b883a 	mov	r5,r3
 200b6b8:	310d883a 	add	r6,r6,r4
 200b6bc:	327fff17 	ldw	r9,-4(r6)
 200b6c0:	323ffe17 	ldw	r8,-8(r6)
 200b6c4:	1009883a 	mov	r4,r2
 200b6c8:	480f883a 	mov	r7,r9
 200b6cc:	400d883a 	mov	r6,r8
 200b6d0:	20053940 	call	2005394 <__divdf3>
 200b6d4:	180b883a 	mov	r5,r3
 200b6d8:	b00d883a 	mov	r6,r22
 200b6dc:	b80f883a 	mov	r7,r23
 200b6e0:	1009883a 	mov	r4,r2
 200b6e4:	2004edc0 	call	2004edc <__subdf3>
 200b6e8:	a80b883a 	mov	r5,r21
 200b6ec:	a009883a 	mov	r4,r20
 200b6f0:	d8c01915 	stw	r3,100(sp)
 200b6f4:	d8801815 	stw	r2,96(sp)
 200b6f8:	20057f40 	call	20057f4 <__fixdfsi>
 200b6fc:	1009883a 	mov	r4,r2
 200b700:	1027883a 	mov	r19,r2
 200b704:	20056fc0 	call	20056fc <__floatsidf>
 200b708:	a80b883a 	mov	r5,r21
 200b70c:	a009883a 	mov	r4,r20
 200b710:	180f883a 	mov	r7,r3
 200b714:	100d883a 	mov	r6,r2
 200b718:	2004edc0 	call	2004edc <__subdf3>
 200b71c:	d9801817 	ldw	r6,96(sp)
 200b720:	1823883a 	mov	r17,r3
 200b724:	d8801415 	stw	r2,80(sp)
 200b728:	302d883a 	mov	r22,r6
 200b72c:	d9800517 	ldw	r6,20(sp)
 200b730:	9cc00c04 	addi	r19,r19,48
 200b734:	dc401515 	stw	r17,84(sp)
 200b738:	d8c01917 	ldw	r3,100(sp)
 200b73c:	34c00005 	stb	r19,0(r6)
 200b740:	d8800517 	ldw	r2,20(sp)
 200b744:	d9401917 	ldw	r5,100(sp)
 200b748:	d9801417 	ldw	r6,80(sp)
 200b74c:	b009883a 	mov	r4,r22
 200b750:	880f883a 	mov	r7,r17
 200b754:	182f883a 	mov	r23,r3
 200b758:	17000044 	addi	fp,r2,1
 200b75c:	20055ec0 	call	20055ec <__gtdf2>
 200b760:	00804e16 	blt	zero,r2,200b89c <_dtoa_r+0x1158>
 200b764:	d9801417 	ldw	r6,80(sp)
 200b768:	0005883a 	mov	r2,zero
 200b76c:	00cffc34 	movhi	r3,16368
 200b770:	180b883a 	mov	r5,r3
 200b774:	880f883a 	mov	r7,r17
 200b778:	1009883a 	mov	r4,r2
 200b77c:	2004edc0 	call	2004edc <__subdf3>
 200b780:	d9401917 	ldw	r5,100(sp)
 200b784:	180f883a 	mov	r7,r3
 200b788:	b009883a 	mov	r4,r22
 200b78c:	100d883a 	mov	r6,r2
 200b790:	20055ec0 	call	20055ec <__gtdf2>
 200b794:	00bda216 	blt	zero,r2,200ae20 <_dtoa_r+0x6dc>
 200b798:	d8c00317 	ldw	r3,12(sp)
 200b79c:	00800044 	movi	r2,1
 200b7a0:	10c01216 	blt	r2,r3,200b7ec <_dtoa_r+0x10a8>
 200b7a4:	003d4506 	br	200acbc <_dtoa_r+0x578>
 200b7a8:	d9801417 	ldw	r6,80(sp)
 200b7ac:	0005883a 	mov	r2,zero
 200b7b0:	00cffc34 	movhi	r3,16368
 200b7b4:	180b883a 	mov	r5,r3
 200b7b8:	880f883a 	mov	r7,r17
 200b7bc:	1009883a 	mov	r4,r2
 200b7c0:	2004edc0 	call	2004edc <__subdf3>
 200b7c4:	d9c01b17 	ldw	r7,108(sp)
 200b7c8:	180b883a 	mov	r5,r3
 200b7cc:	1009883a 	mov	r4,r2
 200b7d0:	b00d883a 	mov	r6,r22
 200b7d4:	20056740 	call	2005674 <__ltdf2>
 200b7d8:	103d9116 	blt	r2,zero,200ae20 <_dtoa_r+0x6dc>
 200b7dc:	d9800517 	ldw	r6,20(sp)
 200b7e0:	d9000317 	ldw	r4,12(sp)
 200b7e4:	3105883a 	add	r2,r6,r4
 200b7e8:	e0bd3426 	beq	fp,r2,200acbc <_dtoa_r+0x578>
 200b7ec:	04500934 	movhi	r17,16420
 200b7f0:	0021883a 	mov	r16,zero
 200b7f4:	b80b883a 	mov	r5,r23
 200b7f8:	b009883a 	mov	r4,r22
 200b7fc:	800d883a 	mov	r6,r16
 200b800:	880f883a 	mov	r7,r17
 200b804:	2004fd00 	call	2004fd0 <__muldf3>
 200b808:	d9401517 	ldw	r5,84(sp)
 200b80c:	d9001417 	ldw	r4,80(sp)
 200b810:	880f883a 	mov	r7,r17
 200b814:	000d883a 	mov	r6,zero
 200b818:	d8801a15 	stw	r2,104(sp)
 200b81c:	d8c01b15 	stw	r3,108(sp)
 200b820:	2004fd00 	call	2004fd0 <__muldf3>
 200b824:	180b883a 	mov	r5,r3
 200b828:	1009883a 	mov	r4,r2
 200b82c:	1823883a 	mov	r17,r3
 200b830:	1021883a 	mov	r16,r2
 200b834:	20057f40 	call	20057f4 <__fixdfsi>
 200b838:	1009883a 	mov	r4,r2
 200b83c:	102b883a 	mov	r21,r2
 200b840:	20056fc0 	call	20056fc <__floatsidf>
 200b844:	880b883a 	mov	r5,r17
 200b848:	8009883a 	mov	r4,r16
 200b84c:	180f883a 	mov	r7,r3
 200b850:	100d883a 	mov	r6,r2
 200b854:	2004edc0 	call	2004edc <__subdf3>
 200b858:	1021883a 	mov	r16,r2
 200b85c:	d9001b17 	ldw	r4,108(sp)
 200b860:	1823883a 	mov	r17,r3
 200b864:	dc001415 	stw	r16,80(sp)
 200b868:	ad400c04 	addi	r21,r21,48
 200b86c:	dc401515 	stw	r17,84(sp)
 200b870:	d8801a17 	ldw	r2,104(sp)
 200b874:	e5400005 	stb	r21,0(fp)
 200b878:	202f883a 	mov	r23,r4
 200b87c:	d9c01b17 	ldw	r7,108(sp)
 200b880:	d9001417 	ldw	r4,80(sp)
 200b884:	880b883a 	mov	r5,r17
 200b888:	100d883a 	mov	r6,r2
 200b88c:	102d883a 	mov	r22,r2
 200b890:	e7000044 	addi	fp,fp,1
 200b894:	20056740 	call	2005674 <__ltdf2>
 200b898:	103fc30e 	bge	r2,zero,200b7a8 <_dtoa_r+0x1064>
 200b89c:	d9000417 	ldw	r4,16(sp)
 200b8a0:	d9000d15 	stw	r4,52(sp)
 200b8a4:	003d7106 	br	200ae6c <_dtoa_r+0x728>
 200b8a8:	d9801717 	ldw	r6,92(sp)
 200b8ac:	00800084 	movi	r2,2
 200b8b0:	11bde60e 	bge	r2,r6,200b04c <_dtoa_r+0x908>
 200b8b4:	203cfb1e 	bne	r4,zero,200aca4 <_dtoa_r+0x560>
 200b8b8:	d9001617 	ldw	r4,88(sp)
 200b8bc:	900b883a 	mov	r5,r18
 200b8c0:	01800144 	movi	r6,5
 200b8c4:	000f883a 	mov	r7,zero
 200b8c8:	200e1b40 	call	200e1b4 <__multadd>
 200b8cc:	d9000717 	ldw	r4,28(sp)
 200b8d0:	100b883a 	mov	r5,r2
 200b8d4:	1025883a 	mov	r18,r2
 200b8d8:	200d65c0 	call	200d65c <__mcmp>
 200b8dc:	00bcf10e 	bge	zero,r2,200aca4 <_dtoa_r+0x560>
 200b8e0:	d8c00d17 	ldw	r3,52(sp)
 200b8e4:	d9000517 	ldw	r4,20(sp)
 200b8e8:	d8000615 	stw	zero,24(sp)
 200b8ec:	18c00044 	addi	r3,r3,1
 200b8f0:	d8c00d15 	stw	r3,52(sp)
 200b8f4:	00800c44 	movi	r2,49
 200b8f8:	27000044 	addi	fp,r4,1
 200b8fc:	20800005 	stb	r2,0(r4)
 200b900:	003e8906 	br	200b328 <_dtoa_r+0xbe4>
 200b904:	d8c00517 	ldw	r3,20(sp)
 200b908:	003bc206 	br	200a814 <_dtoa_r+0xd0>
 200b90c:	018080b4 	movhi	r6,514
 200b910:	31844f04 	addi	r6,r6,4412
 200b914:	30c00917 	ldw	r3,36(r6)
 200b918:	30800817 	ldw	r2,32(r6)
 200b91c:	d9001217 	ldw	r4,72(sp)
 200b920:	d9401317 	ldw	r5,76(sp)
 200b924:	180f883a 	mov	r7,r3
 200b928:	100d883a 	mov	r6,r2
 200b92c:	20053940 	call	2005394 <__divdf3>
 200b930:	948003cc 	andi	r18,r18,15
 200b934:	058000c4 	movi	r22,3
 200b938:	1029883a 	mov	r20,r2
 200b93c:	182b883a 	mov	r21,r3
 200b940:	003c8906 	br	200ab68 <_dtoa_r+0x424>
 200b944:	d9001017 	ldw	r4,64(sp)
 200b948:	d9800917 	ldw	r6,36(sp)
 200b94c:	0025883a 	mov	r18,zero
 200b950:	1105c83a 	sub	r2,r2,r4
 200b954:	2089883a 	add	r4,r4,r2
 200b958:	308d883a 	add	r6,r6,r2
 200b95c:	d9001015 	stw	r4,64(sp)
 200b960:	d9800915 	stw	r6,36(sp)
 200b964:	003e3206 	br	200b230 <_dtoa_r+0xaec>
 200b968:	28800044 	addi	r2,r5,1
 200b96c:	27000044 	addi	fp,r4,1
 200b970:	20800005 	stb	r2,0(r4)
 200b974:	003e6c06 	br	200b328 <_dtoa_r+0xbe4>
 200b978:	d8800f17 	ldw	r2,60(sp)
 200b97c:	00bce016 	blt	zero,r2,200ad00 <_dtoa_r+0x5bc>
 200b980:	d9800f17 	ldw	r6,60(sp)
 200b984:	303cc51e 	bne	r6,zero,200ac9c <_dtoa_r+0x558>
 200b988:	0005883a 	mov	r2,zero
 200b98c:	00d00534 	movhi	r3,16404
 200b990:	980b883a 	mov	r5,r19
 200b994:	180f883a 	mov	r7,r3
 200b998:	9009883a 	mov	r4,r18
 200b99c:	100d883a 	mov	r6,r2
 200b9a0:	2004fd00 	call	2004fd0 <__muldf3>
 200b9a4:	180b883a 	mov	r5,r3
 200b9a8:	a80f883a 	mov	r7,r21
 200b9ac:	1009883a 	mov	r4,r2
 200b9b0:	a00d883a 	mov	r6,r20
 200b9b4:	20133340 	call	2013334 <__gedf2>
 200b9b8:	103cb80e 	bge	r2,zero,200ac9c <_dtoa_r+0x558>
 200b9bc:	0027883a 	mov	r19,zero
 200b9c0:	0025883a 	mov	r18,zero
 200b9c4:	003fc606 	br	200b8e0 <_dtoa_r+0x119c>
 200b9c8:	99400117 	ldw	r5,4(r19)
 200b9cc:	d9001617 	ldw	r4,88(sp)
 200b9d0:	200da800 	call	200da80 <_Balloc>
 200b9d4:	99800417 	ldw	r6,16(r19)
 200b9d8:	11000304 	addi	r4,r2,12
 200b9dc:	99400304 	addi	r5,r19,12
 200b9e0:	318d883a 	add	r6,r6,r6
 200b9e4:	318d883a 	add	r6,r6,r6
 200b9e8:	31800204 	addi	r6,r6,8
 200b9ec:	1023883a 	mov	r17,r2
 200b9f0:	200d2e80 	call	200d2e8 <memcpy>
 200b9f4:	d9001617 	ldw	r4,88(sp)
 200b9f8:	880b883a 	mov	r5,r17
 200b9fc:	01800044 	movi	r6,1
 200ba00:	200de440 	call	200de44 <__lshift>
 200ba04:	100b883a 	mov	r5,r2
 200ba08:	003d9c06 	br	200b07c <_dtoa_r+0x938>
 200ba0c:	00800e44 	movi	r2,57
 200ba10:	b8807026 	beq	r23,r2,200bbd4 <_dtoa_r+0x1490>
 200ba14:	b8800044 	addi	r2,r23,1
 200ba18:	b7000044 	addi	fp,r22,1
 200ba1c:	b0800005 	stb	r2,0(r22)
 200ba20:	003e4106 	br	200b328 <_dtoa_r+0xbe4>
 200ba24:	d8800317 	ldw	r2,12(sp)
 200ba28:	018080b4 	movhi	r6,514
 200ba2c:	31841d04 	addi	r6,r6,4212
 200ba30:	b009883a 	mov	r4,r22
 200ba34:	100e90fa 	slli	r7,r2,3
 200ba38:	b80b883a 	mov	r5,r23
 200ba3c:	398f883a 	add	r7,r7,r6
 200ba40:	38bffe17 	ldw	r2,-8(r7)
 200ba44:	d9800517 	ldw	r6,20(sp)
 200ba48:	38ffff17 	ldw	r3,-4(r7)
 200ba4c:	37000044 	addi	fp,r6,1
 200ba50:	180f883a 	mov	r7,r3
 200ba54:	100d883a 	mov	r6,r2
 200ba58:	2004fd00 	call	2004fd0 <__muldf3>
 200ba5c:	a80b883a 	mov	r5,r21
 200ba60:	a009883a 	mov	r4,r20
 200ba64:	182f883a 	mov	r23,r3
 200ba68:	102d883a 	mov	r22,r2
 200ba6c:	20057f40 	call	20057f4 <__fixdfsi>
 200ba70:	1009883a 	mov	r4,r2
 200ba74:	1027883a 	mov	r19,r2
 200ba78:	20056fc0 	call	20056fc <__floatsidf>
 200ba7c:	a80b883a 	mov	r5,r21
 200ba80:	a009883a 	mov	r4,r20
 200ba84:	180f883a 	mov	r7,r3
 200ba88:	100d883a 	mov	r6,r2
 200ba8c:	2004edc0 	call	2004edc <__subdf3>
 200ba90:	180b883a 	mov	r5,r3
 200ba94:	d8c00517 	ldw	r3,20(sp)
 200ba98:	9cc00c04 	addi	r19,r19,48
 200ba9c:	1009883a 	mov	r4,r2
 200baa0:	1cc00005 	stb	r19,0(r3)
 200baa4:	2021883a 	mov	r16,r4
 200baa8:	d9000317 	ldw	r4,12(sp)
 200baac:	00800044 	movi	r2,1
 200bab0:	2823883a 	mov	r17,r5
 200bab4:	20802226 	beq	r4,r2,200bb40 <_dtoa_r+0x13fc>
 200bab8:	1029883a 	mov	r20,r2
 200babc:	0005883a 	mov	r2,zero
 200bac0:	00d00934 	movhi	r3,16420
 200bac4:	180f883a 	mov	r7,r3
 200bac8:	100d883a 	mov	r6,r2
 200bacc:	880b883a 	mov	r5,r17
 200bad0:	8009883a 	mov	r4,r16
 200bad4:	2004fd00 	call	2004fd0 <__muldf3>
 200bad8:	180b883a 	mov	r5,r3
 200badc:	1009883a 	mov	r4,r2
 200bae0:	1823883a 	mov	r17,r3
 200bae4:	1021883a 	mov	r16,r2
 200bae8:	20057f40 	call	20057f4 <__fixdfsi>
 200baec:	1009883a 	mov	r4,r2
 200baf0:	102b883a 	mov	r21,r2
 200baf4:	20056fc0 	call	20056fc <__floatsidf>
 200baf8:	880b883a 	mov	r5,r17
 200bafc:	8009883a 	mov	r4,r16
 200bb00:	180f883a 	mov	r7,r3
 200bb04:	100d883a 	mov	r6,r2
 200bb08:	2004edc0 	call	2004edc <__subdf3>
 200bb0c:	180b883a 	mov	r5,r3
 200bb10:	d8c00517 	ldw	r3,20(sp)
 200bb14:	1009883a 	mov	r4,r2
 200bb18:	ad400c04 	addi	r21,r21,48
 200bb1c:	1d05883a 	add	r2,r3,r20
 200bb20:	15400005 	stb	r21,0(r2)
 200bb24:	2021883a 	mov	r16,r4
 200bb28:	d9000317 	ldw	r4,12(sp)
 200bb2c:	a5000044 	addi	r20,r20,1
 200bb30:	2823883a 	mov	r17,r5
 200bb34:	a13fe11e 	bne	r20,r4,200babc <_dtoa_r+0x1378>
 200bb38:	e505883a 	add	r2,fp,r20
 200bb3c:	173fffc4 	addi	fp,r2,-1
 200bb40:	0025883a 	mov	r18,zero
 200bb44:	04cff834 	movhi	r19,16352
 200bb48:	b009883a 	mov	r4,r22
 200bb4c:	b80b883a 	mov	r5,r23
 200bb50:	900d883a 	mov	r6,r18
 200bb54:	980f883a 	mov	r7,r19
 200bb58:	2004f5c0 	call	2004f5c <__adddf3>
 200bb5c:	180b883a 	mov	r5,r3
 200bb60:	1009883a 	mov	r4,r2
 200bb64:	800d883a 	mov	r6,r16
 200bb68:	880f883a 	mov	r7,r17
 200bb6c:	20056740 	call	2005674 <__ltdf2>
 200bb70:	103cab16 	blt	r2,zero,200ae20 <_dtoa_r+0x6dc>
 200bb74:	0009883a 	mov	r4,zero
 200bb78:	980b883a 	mov	r5,r19
 200bb7c:	b80f883a 	mov	r7,r23
 200bb80:	b00d883a 	mov	r6,r22
 200bb84:	2004edc0 	call	2004edc <__subdf3>
 200bb88:	180b883a 	mov	r5,r3
 200bb8c:	880f883a 	mov	r7,r17
 200bb90:	1009883a 	mov	r4,r2
 200bb94:	800d883a 	mov	r6,r16
 200bb98:	20055ec0 	call	20055ec <__gtdf2>
 200bb9c:	00bc470e 	bge	zero,r2,200acbc <_dtoa_r+0x578>
 200bba0:	00c00c04 	movi	r3,48
 200bba4:	e73fffc4 	addi	fp,fp,-1
 200bba8:	e0800007 	ldb	r2,0(fp)
 200bbac:	10fffd26 	beq	r2,r3,200bba4 <_dtoa_r+0x1460>
 200bbb0:	d9800417 	ldw	r6,16(sp)
 200bbb4:	e7000044 	addi	fp,fp,1
 200bbb8:	d9800d15 	stw	r6,52(sp)
 200bbbc:	003cab06 	br	200ae6c <_dtoa_r+0x728>
 200bbc0:	d8c00f17 	ldw	r3,60(sp)
 200bbc4:	d9001117 	ldw	r4,68(sp)
 200bbc8:	20e1c83a 	sub	r16,r4,r3
 200bbcc:	0007883a 	mov	r3,zero
 200bbd0:	003d9b06 	br	200b240 <_dtoa_r+0xafc>
 200bbd4:	00800e44 	movi	r2,57
 200bbd8:	b0800005 	stb	r2,0(r22)
 200bbdc:	b5800044 	addi	r22,r22,1
 200bbe0:	003dc106 	br	200b2e8 <_dtoa_r+0xba4>
 200bbe4:	05800084 	movi	r22,2
 200bbe8:	003bf706 	br	200abc8 <_dtoa_r+0x484>
 200bbec:	d9000f17 	ldw	r4,60(sp)
 200bbf0:	013c000e 	bge	zero,r4,200abf4 <_dtoa_r+0x4b0>
 200bbf4:	d9800e17 	ldw	r6,56(sp)
 200bbf8:	01bc300e 	bge	zero,r6,200acbc <_dtoa_r+0x578>
 200bbfc:	0005883a 	mov	r2,zero
 200bc00:	00d00934 	movhi	r3,16420
 200bc04:	a80b883a 	mov	r5,r21
 200bc08:	180f883a 	mov	r7,r3
 200bc0c:	a009883a 	mov	r4,r20
 200bc10:	100d883a 	mov	r6,r2
 200bc14:	2004fd00 	call	2004fd0 <__muldf3>
 200bc18:	b1000044 	addi	r4,r22,1
 200bc1c:	1021883a 	mov	r16,r2
 200bc20:	1823883a 	mov	r17,r3
 200bc24:	20056fc0 	call	20056fc <__floatsidf>
 200bc28:	880b883a 	mov	r5,r17
 200bc2c:	8009883a 	mov	r4,r16
 200bc30:	180f883a 	mov	r7,r3
 200bc34:	100d883a 	mov	r6,r2
 200bc38:	2004fd00 	call	2004fd0 <__muldf3>
 200bc3c:	0011883a 	mov	r8,zero
 200bc40:	02500734 	movhi	r9,16412
 200bc44:	180b883a 	mov	r5,r3
 200bc48:	480f883a 	mov	r7,r9
 200bc4c:	1009883a 	mov	r4,r2
 200bc50:	400d883a 	mov	r6,r8
 200bc54:	2004f5c0 	call	2004f5c <__adddf3>
 200bc58:	102d883a 	mov	r22,r2
 200bc5c:	00bf3034 	movhi	r2,64704
 200bc60:	10ef883a 	add	r23,r2,r3
 200bc64:	d8800d17 	ldw	r2,52(sp)
 200bc68:	d8c00e17 	ldw	r3,56(sp)
 200bc6c:	8029883a 	mov	r20,r16
 200bc70:	10bfffc4 	addi	r2,r2,-1
 200bc74:	882b883a 	mov	r21,r17
 200bc78:	d8800415 	stw	r2,16(sp)
 200bc7c:	d8c00315 	stw	r3,12(sp)
 200bc80:	003e8306 	br	200b690 <_dtoa_r+0xf4c>
 200bc84:	d8800117 	ldw	r2,4(sp)
 200bc88:	dc001117 	ldw	r16,68(sp)
 200bc8c:	dc801017 	ldw	r18,64(sp)
 200bc90:	00c00d84 	movi	r3,54
 200bc94:	1887c83a 	sub	r3,r3,r2
 200bc98:	003d6906 	br	200b240 <_dtoa_r+0xafc>
 200bc9c:	01800044 	movi	r6,1
 200bca0:	3021883a 	mov	r16,r6
 200bca4:	d9800f15 	stw	r6,60(sp)
 200bca8:	d9802615 	stw	r6,152(sp)
 200bcac:	d9800e15 	stw	r6,56(sp)
 200bcb0:	003b9306 	br	200ab00 <_dtoa_r+0x3bc>
 200bcb4:	b021883a 	mov	r16,r22
 200bcb8:	dd800f15 	stw	r22,60(sp)
 200bcbc:	003b9006 	br	200ab00 <_dtoa_r+0x3bc>
 200bcc0:	103e221e 	bne	r2,zero,200b54c <_dtoa_r+0xe08>
 200bcc4:	b880004c 	andi	r2,r23,1
 200bcc8:	1005003a 	cmpeq	r2,r2,zero
 200bccc:	103e1f1e 	bne	r2,zero,200b54c <_dtoa_r+0xe08>
 200bcd0:	003e1b06 	br	200b540 <_dtoa_r+0xdfc>
 200bcd4:	d9001617 	ldw	r4,88(sp)
 200bcd8:	980b883a 	mov	r5,r19
 200bcdc:	01800284 	movi	r6,10
 200bce0:	000f883a 	mov	r7,zero
 200bce4:	200e1b40 	call	200e1b4 <__multadd>
 200bce8:	d8c00e17 	ldw	r3,56(sp)
 200bcec:	1027883a 	mov	r19,r2
 200bcf0:	d8c00f15 	stw	r3,60(sp)
 200bcf4:	003cd306 	br	200b044 <_dtoa_r+0x900>

0200bcf8 <_fflush_r>:
 200bcf8:	defffb04 	addi	sp,sp,-20
 200bcfc:	dcc00315 	stw	r19,12(sp)
 200bd00:	dc800215 	stw	r18,8(sp)
 200bd04:	dfc00415 	stw	ra,16(sp)
 200bd08:	dc400115 	stw	r17,4(sp)
 200bd0c:	dc000015 	stw	r16,0(sp)
 200bd10:	2027883a 	mov	r19,r4
 200bd14:	2825883a 	mov	r18,r5
 200bd18:	20000226 	beq	r4,zero,200bd24 <_fflush_r+0x2c>
 200bd1c:	20800e17 	ldw	r2,56(r4)
 200bd20:	10005626 	beq	r2,zero,200be7c <_fflush_r+0x184>
 200bd24:	9100030b 	ldhu	r4,12(r18)
 200bd28:	20ffffcc 	andi	r3,r4,65535
 200bd2c:	18e0001c 	xori	r3,r3,32768
 200bd30:	18e00004 	addi	r3,r3,-32768
 200bd34:	1880020c 	andi	r2,r3,8
 200bd38:	1000261e 	bne	r2,zero,200bdd4 <_fflush_r+0xdc>
 200bd3c:	90c00117 	ldw	r3,4(r18)
 200bd40:	20820014 	ori	r2,r4,2048
 200bd44:	9080030d 	sth	r2,12(r18)
 200bd48:	1009883a 	mov	r4,r2
 200bd4c:	00c0400e 	bge	zero,r3,200be50 <_fflush_r+0x158>
 200bd50:	92000a17 	ldw	r8,40(r18)
 200bd54:	40004026 	beq	r8,zero,200be58 <_fflush_r+0x160>
 200bd58:	2084000c 	andi	r2,r4,4096
 200bd5c:	10005326 	beq	r2,zero,200beac <_fflush_r+0x1b4>
 200bd60:	94001417 	ldw	r16,80(r18)
 200bd64:	9080030b 	ldhu	r2,12(r18)
 200bd68:	1080010c 	andi	r2,r2,4
 200bd6c:	1000481e 	bne	r2,zero,200be90 <_fflush_r+0x198>
 200bd70:	91400717 	ldw	r5,28(r18)
 200bd74:	9809883a 	mov	r4,r19
 200bd78:	800d883a 	mov	r6,r16
 200bd7c:	000f883a 	mov	r7,zero
 200bd80:	403ee83a 	callr	r8
 200bd84:	8080261e 	bne	r16,r2,200be20 <_fflush_r+0x128>
 200bd88:	9080030b 	ldhu	r2,12(r18)
 200bd8c:	91000417 	ldw	r4,16(r18)
 200bd90:	90000115 	stw	zero,4(r18)
 200bd94:	10bdffcc 	andi	r2,r2,63487
 200bd98:	10ffffcc 	andi	r3,r2,65535
 200bd9c:	18c4000c 	andi	r3,r3,4096
 200bda0:	9080030d 	sth	r2,12(r18)
 200bda4:	91000015 	stw	r4,0(r18)
 200bda8:	18002b26 	beq	r3,zero,200be58 <_fflush_r+0x160>
 200bdac:	0007883a 	mov	r3,zero
 200bdb0:	1805883a 	mov	r2,r3
 200bdb4:	94001415 	stw	r16,80(r18)
 200bdb8:	dfc00417 	ldw	ra,16(sp)
 200bdbc:	dcc00317 	ldw	r19,12(sp)
 200bdc0:	dc800217 	ldw	r18,8(sp)
 200bdc4:	dc400117 	ldw	r17,4(sp)
 200bdc8:	dc000017 	ldw	r16,0(sp)
 200bdcc:	dec00504 	addi	sp,sp,20
 200bdd0:	f800283a 	ret
 200bdd4:	94400417 	ldw	r17,16(r18)
 200bdd8:	88001f26 	beq	r17,zero,200be58 <_fflush_r+0x160>
 200bddc:	90800017 	ldw	r2,0(r18)
 200bde0:	18c000cc 	andi	r3,r3,3
 200bde4:	94400015 	stw	r17,0(r18)
 200bde8:	1461c83a 	sub	r16,r2,r17
 200bdec:	18002526 	beq	r3,zero,200be84 <_fflush_r+0x18c>
 200bdf0:	0005883a 	mov	r2,zero
 200bdf4:	90800215 	stw	r2,8(r18)
 200bdf8:	0400170e 	bge	zero,r16,200be58 <_fflush_r+0x160>
 200bdfc:	90c00917 	ldw	r3,36(r18)
 200be00:	91400717 	ldw	r5,28(r18)
 200be04:	880d883a 	mov	r6,r17
 200be08:	800f883a 	mov	r7,r16
 200be0c:	9809883a 	mov	r4,r19
 200be10:	183ee83a 	callr	r3
 200be14:	88a3883a 	add	r17,r17,r2
 200be18:	80a1c83a 	sub	r16,r16,r2
 200be1c:	00bff616 	blt	zero,r2,200bdf8 <_fflush_r+0x100>
 200be20:	9080030b 	ldhu	r2,12(r18)
 200be24:	00ffffc4 	movi	r3,-1
 200be28:	10801014 	ori	r2,r2,64
 200be2c:	9080030d 	sth	r2,12(r18)
 200be30:	1805883a 	mov	r2,r3
 200be34:	dfc00417 	ldw	ra,16(sp)
 200be38:	dcc00317 	ldw	r19,12(sp)
 200be3c:	dc800217 	ldw	r18,8(sp)
 200be40:	dc400117 	ldw	r17,4(sp)
 200be44:	dc000017 	ldw	r16,0(sp)
 200be48:	dec00504 	addi	sp,sp,20
 200be4c:	f800283a 	ret
 200be50:	90800f17 	ldw	r2,60(r18)
 200be54:	00bfbe16 	blt	zero,r2,200bd50 <_fflush_r+0x58>
 200be58:	0007883a 	mov	r3,zero
 200be5c:	1805883a 	mov	r2,r3
 200be60:	dfc00417 	ldw	ra,16(sp)
 200be64:	dcc00317 	ldw	r19,12(sp)
 200be68:	dc800217 	ldw	r18,8(sp)
 200be6c:	dc400117 	ldw	r17,4(sp)
 200be70:	dc000017 	ldw	r16,0(sp)
 200be74:	dec00504 	addi	sp,sp,20
 200be78:	f800283a 	ret
 200be7c:	200bf900 	call	200bf90 <__sinit>
 200be80:	003fa806 	br	200bd24 <_fflush_r+0x2c>
 200be84:	90800517 	ldw	r2,20(r18)
 200be88:	90800215 	stw	r2,8(r18)
 200be8c:	003fda06 	br	200bdf8 <_fflush_r+0x100>
 200be90:	90800117 	ldw	r2,4(r18)
 200be94:	90c00c17 	ldw	r3,48(r18)
 200be98:	80a1c83a 	sub	r16,r16,r2
 200be9c:	183fb426 	beq	r3,zero,200bd70 <_fflush_r+0x78>
 200bea0:	90800f17 	ldw	r2,60(r18)
 200bea4:	80a1c83a 	sub	r16,r16,r2
 200bea8:	003fb106 	br	200bd70 <_fflush_r+0x78>
 200beac:	91400717 	ldw	r5,28(r18)
 200beb0:	9809883a 	mov	r4,r19
 200beb4:	000d883a 	mov	r6,zero
 200beb8:	01c00044 	movi	r7,1
 200bebc:	403ee83a 	callr	r8
 200bec0:	1021883a 	mov	r16,r2
 200bec4:	00bfffc4 	movi	r2,-1
 200bec8:	80800226 	beq	r16,r2,200bed4 <_fflush_r+0x1dc>
 200becc:	92000a17 	ldw	r8,40(r18)
 200bed0:	003fa406 	br	200bd64 <_fflush_r+0x6c>
 200bed4:	98c00017 	ldw	r3,0(r19)
 200bed8:	00800744 	movi	r2,29
 200bedc:	18bfde26 	beq	r3,r2,200be58 <_fflush_r+0x160>
 200bee0:	9080030b 	ldhu	r2,12(r18)
 200bee4:	8007883a 	mov	r3,r16
 200bee8:	10801014 	ori	r2,r2,64
 200beec:	9080030d 	sth	r2,12(r18)
 200bef0:	003fcf06 	br	200be30 <_fflush_r+0x138>

0200bef4 <fflush>:
 200bef4:	01408074 	movhi	r5,513
 200bef8:	296f3e04 	addi	r5,r5,-17160
 200befc:	2007883a 	mov	r3,r4
 200bf00:	20000526 	beq	r4,zero,200bf18 <fflush+0x24>
 200bf04:	008080b4 	movhi	r2,514
 200bf08:	108c1704 	addi	r2,r2,12380
 200bf0c:	11000017 	ldw	r4,0(r2)
 200bf10:	180b883a 	mov	r5,r3
 200bf14:	200bcf81 	jmpi	200bcf8 <_fflush_r>
 200bf18:	008080b4 	movhi	r2,514
 200bf1c:	108c1804 	addi	r2,r2,12384
 200bf20:	11000017 	ldw	r4,0(r2)
 200bf24:	200cd001 	jmpi	200cd00 <_fwalk_reent>

0200bf28 <std>:
 200bf28:	00808074 	movhi	r2,513
 200bf2c:	10bba904 	addi	r2,r2,-4444
 200bf30:	20800b15 	stw	r2,44(r4)
 200bf34:	00808074 	movhi	r2,513
 200bf38:	10bbe404 	addi	r2,r2,-4208
 200bf3c:	20800815 	stw	r2,32(r4)
 200bf40:	00c08074 	movhi	r3,513
 200bf44:	18fbc504 	addi	r3,r3,-4332
 200bf48:	00808074 	movhi	r2,513
 200bf4c:	10bbab04 	addi	r2,r2,-4436
 200bf50:	2140030d 	sth	r5,12(r4)
 200bf54:	2180038d 	sth	r6,14(r4)
 200bf58:	20c00915 	stw	r3,36(r4)
 200bf5c:	20800a15 	stw	r2,40(r4)
 200bf60:	20000015 	stw	zero,0(r4)
 200bf64:	20000115 	stw	zero,4(r4)
 200bf68:	20000215 	stw	zero,8(r4)
 200bf6c:	20000415 	stw	zero,16(r4)
 200bf70:	20000515 	stw	zero,20(r4)
 200bf74:	20000615 	stw	zero,24(r4)
 200bf78:	21000715 	stw	r4,28(r4)
 200bf7c:	f800283a 	ret

0200bf80 <__sfp_lock_acquire>:
 200bf80:	f800283a 	ret

0200bf84 <__sfp_lock_release>:
 200bf84:	f800283a 	ret

0200bf88 <__sinit_lock_acquire>:
 200bf88:	f800283a 	ret

0200bf8c <__sinit_lock_release>:
 200bf8c:	f800283a 	ret

0200bf90 <__sinit>:
 200bf90:	20800e17 	ldw	r2,56(r4)
 200bf94:	defffd04 	addi	sp,sp,-12
 200bf98:	dc400115 	stw	r17,4(sp)
 200bf9c:	dc000015 	stw	r16,0(sp)
 200bfa0:	dfc00215 	stw	ra,8(sp)
 200bfa4:	04400044 	movi	r17,1
 200bfa8:	01400104 	movi	r5,4
 200bfac:	000d883a 	mov	r6,zero
 200bfb0:	2021883a 	mov	r16,r4
 200bfb4:	2200bb04 	addi	r8,r4,748
 200bfb8:	200f883a 	mov	r7,r4
 200bfbc:	10000526 	beq	r2,zero,200bfd4 <__sinit+0x44>
 200bfc0:	dfc00217 	ldw	ra,8(sp)
 200bfc4:	dc400117 	ldw	r17,4(sp)
 200bfc8:	dc000017 	ldw	r16,0(sp)
 200bfcc:	dec00304 	addi	sp,sp,12
 200bfd0:	f800283a 	ret
 200bfd4:	21000117 	ldw	r4,4(r4)
 200bfd8:	00808074 	movhi	r2,513
 200bfdc:	10b01d04 	addi	r2,r2,-16268
 200bfe0:	00c000c4 	movi	r3,3
 200bfe4:	80800f15 	stw	r2,60(r16)
 200bfe8:	80c0b915 	stw	r3,740(r16)
 200bfec:	8200ba15 	stw	r8,744(r16)
 200bff0:	84400e15 	stw	r17,56(r16)
 200bff4:	8000b815 	stw	zero,736(r16)
 200bff8:	200bf280 	call	200bf28 <std>
 200bffc:	81000217 	ldw	r4,8(r16)
 200c000:	880d883a 	mov	r6,r17
 200c004:	800f883a 	mov	r7,r16
 200c008:	01400284 	movi	r5,10
 200c00c:	200bf280 	call	200bf28 <std>
 200c010:	81000317 	ldw	r4,12(r16)
 200c014:	800f883a 	mov	r7,r16
 200c018:	01400484 	movi	r5,18
 200c01c:	01800084 	movi	r6,2
 200c020:	dfc00217 	ldw	ra,8(sp)
 200c024:	dc400117 	ldw	r17,4(sp)
 200c028:	dc000017 	ldw	r16,0(sp)
 200c02c:	dec00304 	addi	sp,sp,12
 200c030:	200bf281 	jmpi	200bf28 <std>

0200c034 <__fp_lock>:
 200c034:	0005883a 	mov	r2,zero
 200c038:	f800283a 	ret

0200c03c <__fp_unlock>:
 200c03c:	0005883a 	mov	r2,zero
 200c040:	f800283a 	ret

0200c044 <__fp_unlock_all>:
 200c044:	008080b4 	movhi	r2,514
 200c048:	108c1704 	addi	r2,r2,12380
 200c04c:	11000017 	ldw	r4,0(r2)
 200c050:	01408074 	movhi	r5,513
 200c054:	29700f04 	addi	r5,r5,-16324
 200c058:	200cdc81 	jmpi	200cdc8 <_fwalk>

0200c05c <__fp_lock_all>:
 200c05c:	008080b4 	movhi	r2,514
 200c060:	108c1704 	addi	r2,r2,12380
 200c064:	11000017 	ldw	r4,0(r2)
 200c068:	01408074 	movhi	r5,513
 200c06c:	29700d04 	addi	r5,r5,-16332
 200c070:	200cdc81 	jmpi	200cdc8 <_fwalk>

0200c074 <_cleanup_r>:
 200c074:	01408074 	movhi	r5,513
 200c078:	2945c704 	addi	r5,r5,5916
 200c07c:	200cdc81 	jmpi	200cdc8 <_fwalk>

0200c080 <_cleanup>:
 200c080:	008080b4 	movhi	r2,514
 200c084:	108c1804 	addi	r2,r2,12384
 200c088:	11000017 	ldw	r4,0(r2)
 200c08c:	200c0741 	jmpi	200c074 <_cleanup_r>

0200c090 <__sfmoreglue>:
 200c090:	defffc04 	addi	sp,sp,-16
 200c094:	dc400115 	stw	r17,4(sp)
 200c098:	2c401724 	muli	r17,r5,92
 200c09c:	dc800215 	stw	r18,8(sp)
 200c0a0:	2825883a 	mov	r18,r5
 200c0a4:	89400304 	addi	r5,r17,12
 200c0a8:	dc000015 	stw	r16,0(sp)
 200c0ac:	dfc00315 	stw	ra,12(sp)
 200c0b0:	200637c0 	call	200637c <_malloc_r>
 200c0b4:	0021883a 	mov	r16,zero
 200c0b8:	880d883a 	mov	r6,r17
 200c0bc:	000b883a 	mov	r5,zero
 200c0c0:	10000626 	beq	r2,zero,200c0dc <__sfmoreglue+0x4c>
 200c0c4:	11000304 	addi	r4,r2,12
 200c0c8:	14800115 	stw	r18,4(r2)
 200c0cc:	10000015 	stw	zero,0(r2)
 200c0d0:	11000215 	stw	r4,8(r2)
 200c0d4:	1021883a 	mov	r16,r2
 200c0d8:	200d4680 	call	200d468 <memset>
 200c0dc:	8005883a 	mov	r2,r16
 200c0e0:	dfc00317 	ldw	ra,12(sp)
 200c0e4:	dc800217 	ldw	r18,8(sp)
 200c0e8:	dc400117 	ldw	r17,4(sp)
 200c0ec:	dc000017 	ldw	r16,0(sp)
 200c0f0:	dec00404 	addi	sp,sp,16
 200c0f4:	f800283a 	ret

0200c0f8 <__sfp>:
 200c0f8:	defffd04 	addi	sp,sp,-12
 200c0fc:	008080b4 	movhi	r2,514
 200c100:	108c1804 	addi	r2,r2,12384
 200c104:	dc000015 	stw	r16,0(sp)
 200c108:	14000017 	ldw	r16,0(r2)
 200c10c:	dc400115 	stw	r17,4(sp)
 200c110:	dfc00215 	stw	ra,8(sp)
 200c114:	80800e17 	ldw	r2,56(r16)
 200c118:	2023883a 	mov	r17,r4
 200c11c:	10002626 	beq	r2,zero,200c1b8 <__sfp+0xc0>
 200c120:	8400b804 	addi	r16,r16,736
 200c124:	80800117 	ldw	r2,4(r16)
 200c128:	81000217 	ldw	r4,8(r16)
 200c12c:	10ffffc4 	addi	r3,r2,-1
 200c130:	18000916 	blt	r3,zero,200c158 <__sfp+0x60>
 200c134:	2080030f 	ldh	r2,12(r4)
 200c138:	10000b26 	beq	r2,zero,200c168 <__sfp+0x70>
 200c13c:	017fffc4 	movi	r5,-1
 200c140:	00000206 	br	200c14c <__sfp+0x54>
 200c144:	2080030f 	ldh	r2,12(r4)
 200c148:	10000726 	beq	r2,zero,200c168 <__sfp+0x70>
 200c14c:	18ffffc4 	addi	r3,r3,-1
 200c150:	21001704 	addi	r4,r4,92
 200c154:	197ffb1e 	bne	r3,r5,200c144 <__sfp+0x4c>
 200c158:	80800017 	ldw	r2,0(r16)
 200c15c:	10001926 	beq	r2,zero,200c1c4 <__sfp+0xcc>
 200c160:	1021883a 	mov	r16,r2
 200c164:	003fef06 	br	200c124 <__sfp+0x2c>
 200c168:	00bfffc4 	movi	r2,-1
 200c16c:	00c00044 	movi	r3,1
 200c170:	2080038d 	sth	r2,14(r4)
 200c174:	20c0030d 	sth	r3,12(r4)
 200c178:	20000015 	stw	zero,0(r4)
 200c17c:	20000215 	stw	zero,8(r4)
 200c180:	20000115 	stw	zero,4(r4)
 200c184:	20000415 	stw	zero,16(r4)
 200c188:	20000515 	stw	zero,20(r4)
 200c18c:	20000615 	stw	zero,24(r4)
 200c190:	20000c15 	stw	zero,48(r4)
 200c194:	20000d15 	stw	zero,52(r4)
 200c198:	20001115 	stw	zero,68(r4)
 200c19c:	20001215 	stw	zero,72(r4)
 200c1a0:	2005883a 	mov	r2,r4
 200c1a4:	dfc00217 	ldw	ra,8(sp)
 200c1a8:	dc400117 	ldw	r17,4(sp)
 200c1ac:	dc000017 	ldw	r16,0(sp)
 200c1b0:	dec00304 	addi	sp,sp,12
 200c1b4:	f800283a 	ret
 200c1b8:	8009883a 	mov	r4,r16
 200c1bc:	200bf900 	call	200bf90 <__sinit>
 200c1c0:	003fd706 	br	200c120 <__sfp+0x28>
 200c1c4:	8809883a 	mov	r4,r17
 200c1c8:	01400104 	movi	r5,4
 200c1cc:	200c0900 	call	200c090 <__sfmoreglue>
 200c1d0:	80800015 	stw	r2,0(r16)
 200c1d4:	103fe21e 	bne	r2,zero,200c160 <__sfp+0x68>
 200c1d8:	00800304 	movi	r2,12
 200c1dc:	0009883a 	mov	r4,zero
 200c1e0:	88800015 	stw	r2,0(r17)
 200c1e4:	003fee06 	br	200c1a0 <__sfp+0xa8>

0200c1e8 <_fread_r>:
 200c1e8:	defff504 	addi	sp,sp,-44
 200c1ec:	ddc00815 	stw	r23,32(sp)
 200c1f0:	39af383a 	mul	r23,r7,r6
 200c1f4:	df000915 	stw	fp,36(sp)
 200c1f8:	dd800715 	stw	r22,28(sp)
 200c1fc:	dcc00415 	stw	r19,16(sp)
 200c200:	dc000115 	stw	r16,4(sp)
 200c204:	dfc00a15 	stw	ra,40(sp)
 200c208:	dd400615 	stw	r21,24(sp)
 200c20c:	dd000515 	stw	r20,20(sp)
 200c210:	dc800315 	stw	r18,12(sp)
 200c214:	dc400215 	stw	r17,8(sp)
 200c218:	d9800015 	stw	r6,0(sp)
 200c21c:	3839883a 	mov	fp,r7
 200c220:	2821883a 	mov	r16,r5
 200c224:	202d883a 	mov	r22,r4
 200c228:	dcc00b17 	ldw	r19,44(sp)
 200c22c:	b8005926 	beq	r23,zero,200c394 <_fread_r+0x1ac>
 200c230:	20000226 	beq	r4,zero,200c23c <_fread_r+0x54>
 200c234:	20800e17 	ldw	r2,56(r4)
 200c238:	10005826 	beq	r2,zero,200c39c <_fread_r+0x1b4>
 200c23c:	9c400117 	ldw	r17,4(r19)
 200c240:	88005916 	blt	r17,zero,200c3a8 <_fread_r+0x1c0>
 200c244:	9880030b 	ldhu	r2,12(r19)
 200c248:	8029883a 	mov	r20,r16
 200c24c:	1080008c 	andi	r2,r2,2
 200c250:	1000221e 	bne	r2,zero,200c2dc <_fread_r+0xf4>
 200c254:	b825883a 	mov	r18,r23
 200c258:	00000106 	br	200c260 <_fread_r+0x78>
 200c25c:	9c400117 	ldw	r17,4(r19)
 200c260:	a009883a 	mov	r4,r20
 200c264:	880d883a 	mov	r6,r17
 200c268:	8c80542e 	bgeu	r17,r18,200c3bc <_fread_r+0x1d4>
 200c26c:	99400017 	ldw	r5,0(r19)
 200c270:	a469883a 	add	r20,r20,r17
 200c274:	9465c83a 	sub	r18,r18,r17
 200c278:	200d2e80 	call	200d2e8 <memcpy>
 200c27c:	98800017 	ldw	r2,0(r19)
 200c280:	b009883a 	mov	r4,r22
 200c284:	980b883a 	mov	r5,r19
 200c288:	1461883a 	add	r16,r2,r17
 200c28c:	9c000015 	stw	r16,0(r19)
 200c290:	200eae80 	call	200eae8 <__srefill_r>
 200c294:	103ff126 	beq	r2,zero,200c25c <_fread_r+0x74>
 200c298:	d9400017 	ldw	r5,0(sp)
 200c29c:	bc89c83a 	sub	r4,r23,r18
 200c2a0:	2005ab40 	call	2005ab4 <__udivsi3>
 200c2a4:	1039883a 	mov	fp,r2
 200c2a8:	e005883a 	mov	r2,fp
 200c2ac:	dfc00a17 	ldw	ra,40(sp)
 200c2b0:	df000917 	ldw	fp,36(sp)
 200c2b4:	ddc00817 	ldw	r23,32(sp)
 200c2b8:	dd800717 	ldw	r22,28(sp)
 200c2bc:	dd400617 	ldw	r21,24(sp)
 200c2c0:	dd000517 	ldw	r20,20(sp)
 200c2c4:	dcc00417 	ldw	r19,16(sp)
 200c2c8:	dc800317 	ldw	r18,12(sp)
 200c2cc:	dc400217 	ldw	r17,8(sp)
 200c2d0:	dc000117 	ldw	r16,4(sp)
 200c2d4:	dec00b04 	addi	sp,sp,44
 200c2d8:	f800283a 	ret
 200c2dc:	b825883a 	mov	r18,r23
 200c2e0:	8dc03436 	bltu	r17,r23,200c3b4 <_fread_r+0x1cc>
 200c2e4:	99400017 	ldw	r5,0(r19)
 200c2e8:	a009883a 	mov	r4,r20
 200c2ec:	900d883a 	mov	r6,r18
 200c2f0:	200d2e80 	call	200d2e8 <memcpy>
 200c2f4:	9c000017 	ldw	r16,0(r19)
 200c2f8:	98800117 	ldw	r2,4(r19)
 200c2fc:	99400c17 	ldw	r5,48(r19)
 200c300:	84a1883a 	add	r16,r16,r18
 200c304:	14a3c83a 	sub	r17,r2,r18
 200c308:	a4ab883a 	add	r21,r20,r18
 200c30c:	9c400115 	stw	r17,4(r19)
 200c310:	9c000015 	stw	r16,0(r19)
 200c314:	bca9c83a 	sub	r20,r23,r18
 200c318:	28000826 	beq	r5,zero,200c33c <_fread_r+0x154>
 200c31c:	a03fe226 	beq	r20,zero,200c2a8 <_fread_r+0xc0>
 200c320:	98801004 	addi	r2,r19,64
 200c324:	28800326 	beq	r5,r2,200c334 <_fread_r+0x14c>
 200c328:	b009883a 	mov	r4,r22
 200c32c:	200c5500 	call	200c550 <_free_r>
 200c330:	9c000017 	ldw	r16,0(r19)
 200c334:	98000c15 	stw	zero,48(r19)
 200c338:	00000106 	br	200c340 <_fread_r+0x158>
 200c33c:	a03fda26 	beq	r20,zero,200c2a8 <_fread_r+0xc0>
 200c340:	9c800417 	ldw	r18,16(r19)
 200c344:	9c400517 	ldw	r17,20(r19)
 200c348:	9d400015 	stw	r21,0(r19)
 200c34c:	9d400415 	stw	r21,16(r19)
 200c350:	9d000515 	stw	r20,20(r19)
 200c354:	b009883a 	mov	r4,r22
 200c358:	980b883a 	mov	r5,r19
 200c35c:	200eae80 	call	200eae8 <__srefill_r>
 200c360:	98c00117 	ldw	r3,4(r19)
 200c364:	9c800415 	stw	r18,16(r19)
 200c368:	9c400515 	stw	r17,20(r19)
 200c36c:	a8eb883a 	add	r21,r21,r3
 200c370:	9c000015 	stw	r16,0(r19)
 200c374:	a0e9c83a 	sub	r20,r20,r3
 200c378:	98000115 	stw	zero,4(r19)
 200c37c:	103fef26 	beq	r2,zero,200c33c <_fread_r+0x154>
 200c380:	d9400017 	ldw	r5,0(sp)
 200c384:	bd09c83a 	sub	r4,r23,r20
 200c388:	2005ab40 	call	2005ab4 <__udivsi3>
 200c38c:	1039883a 	mov	fp,r2
 200c390:	003fc506 	br	200c2a8 <_fread_r+0xc0>
 200c394:	0039883a 	mov	fp,zero
 200c398:	003fc306 	br	200c2a8 <_fread_r+0xc0>
 200c39c:	200bf900 	call	200bf90 <__sinit>
 200c3a0:	9c400117 	ldw	r17,4(r19)
 200c3a4:	883fa70e 	bge	r17,zero,200c244 <_fread_r+0x5c>
 200c3a8:	0023883a 	mov	r17,zero
 200c3ac:	98000115 	stw	zero,4(r19)
 200c3b0:	003fa406 	br	200c244 <_fread_r+0x5c>
 200c3b4:	8825883a 	mov	r18,r17
 200c3b8:	003fca06 	br	200c2e4 <_fread_r+0xfc>
 200c3bc:	99400017 	ldw	r5,0(r19)
 200c3c0:	900d883a 	mov	r6,r18
 200c3c4:	200d2e80 	call	200d2e8 <memcpy>
 200c3c8:	98c00117 	ldw	r3,4(r19)
 200c3cc:	98800017 	ldw	r2,0(r19)
 200c3d0:	1c87c83a 	sub	r3,r3,r18
 200c3d4:	1485883a 	add	r2,r2,r18
 200c3d8:	98800015 	stw	r2,0(r19)
 200c3dc:	98c00115 	stw	r3,4(r19)
 200c3e0:	003fb106 	br	200c2a8 <_fread_r+0xc0>

0200c3e4 <fread>:
 200c3e4:	008080b4 	movhi	r2,514
 200c3e8:	108c1704 	addi	r2,r2,12380
 200c3ec:	2017883a 	mov	r11,r4
 200c3f0:	11000017 	ldw	r4,0(r2)
 200c3f4:	defffe04 	addi	sp,sp,-8
 200c3f8:	3013883a 	mov	r9,r6
 200c3fc:	2805883a 	mov	r2,r5
 200c400:	d9c00015 	stw	r7,0(sp)
 200c404:	580b883a 	mov	r5,r11
 200c408:	100d883a 	mov	r6,r2
 200c40c:	480f883a 	mov	r7,r9
 200c410:	dfc00115 	stw	ra,4(sp)
 200c414:	200c1e80 	call	200c1e8 <_fread_r>
 200c418:	dfc00117 	ldw	ra,4(sp)
 200c41c:	dec00204 	addi	sp,sp,8
 200c420:	f800283a 	ret

0200c424 <_malloc_trim_r>:
 200c424:	defffb04 	addi	sp,sp,-20
 200c428:	dcc00315 	stw	r19,12(sp)
 200c42c:	04c080b4 	movhi	r19,514
 200c430:	9cc65004 	addi	r19,r19,6464
 200c434:	dc800215 	stw	r18,8(sp)
 200c438:	dc400115 	stw	r17,4(sp)
 200c43c:	dc000015 	stw	r16,0(sp)
 200c440:	2823883a 	mov	r17,r5
 200c444:	2025883a 	mov	r18,r4
 200c448:	dfc00415 	stw	ra,16(sp)
 200c44c:	20148900 	call	2014890 <__malloc_lock>
 200c450:	98800217 	ldw	r2,8(r19)
 200c454:	9009883a 	mov	r4,r18
 200c458:	000b883a 	mov	r5,zero
 200c45c:	10c00117 	ldw	r3,4(r2)
 200c460:	00bfff04 	movi	r2,-4
 200c464:	18a0703a 	and	r16,r3,r2
 200c468:	8463c83a 	sub	r17,r16,r17
 200c46c:	8c43fbc4 	addi	r17,r17,4079
 200c470:	8822d33a 	srli	r17,r17,12
 200c474:	0083ffc4 	movi	r2,4095
 200c478:	8c7fffc4 	addi	r17,r17,-1
 200c47c:	8822933a 	slli	r17,r17,12
 200c480:	1440060e 	bge	r2,r17,200c49c <_malloc_trim_r+0x78>
 200c484:	2006be80 	call	2006be8 <_sbrk_r>
 200c488:	98c00217 	ldw	r3,8(r19)
 200c48c:	9009883a 	mov	r4,r18
 200c490:	044bc83a 	sub	r5,zero,r17
 200c494:	80c7883a 	add	r3,r16,r3
 200c498:	10c00926 	beq	r2,r3,200c4c0 <_malloc_trim_r+0x9c>
 200c49c:	20149980 	call	2014998 <__malloc_unlock>
 200c4a0:	0005883a 	mov	r2,zero
 200c4a4:	dfc00417 	ldw	ra,16(sp)
 200c4a8:	dcc00317 	ldw	r19,12(sp)
 200c4ac:	dc800217 	ldw	r18,8(sp)
 200c4b0:	dc400117 	ldw	r17,4(sp)
 200c4b4:	dc000017 	ldw	r16,0(sp)
 200c4b8:	dec00504 	addi	sp,sp,20
 200c4bc:	f800283a 	ret
 200c4c0:	9009883a 	mov	r4,r18
 200c4c4:	2006be80 	call	2006be8 <_sbrk_r>
 200c4c8:	844dc83a 	sub	r6,r16,r17
 200c4cc:	00ffffc4 	movi	r3,-1
 200c4d0:	9009883a 	mov	r4,r18
 200c4d4:	000b883a 	mov	r5,zero
 200c4d8:	01c080b4 	movhi	r7,514
 200c4dc:	39d3eb04 	addi	r7,r7,20396
 200c4e0:	31800054 	ori	r6,r6,1
 200c4e4:	10c00926 	beq	r2,r3,200c50c <_malloc_trim_r+0xe8>
 200c4e8:	38800017 	ldw	r2,0(r7)
 200c4ec:	98c00217 	ldw	r3,8(r19)
 200c4f0:	9009883a 	mov	r4,r18
 200c4f4:	1445c83a 	sub	r2,r2,r17
 200c4f8:	38800015 	stw	r2,0(r7)
 200c4fc:	19800115 	stw	r6,4(r3)
 200c500:	20149980 	call	2014998 <__malloc_unlock>
 200c504:	00800044 	movi	r2,1
 200c508:	003fe606 	br	200c4a4 <_malloc_trim_r+0x80>
 200c50c:	2006be80 	call	2006be8 <_sbrk_r>
 200c510:	99800217 	ldw	r6,8(r19)
 200c514:	100f883a 	mov	r7,r2
 200c518:	9009883a 	mov	r4,r18
 200c51c:	1187c83a 	sub	r3,r2,r6
 200c520:	008003c4 	movi	r2,15
 200c524:	19400054 	ori	r5,r3,1
 200c528:	10ffdc0e 	bge	r2,r3,200c49c <_malloc_trim_r+0x78>
 200c52c:	008080b4 	movhi	r2,514
 200c530:	108c1a04 	addi	r2,r2,12392
 200c534:	10c00017 	ldw	r3,0(r2)
 200c538:	008080b4 	movhi	r2,514
 200c53c:	1093eb04 	addi	r2,r2,20396
 200c540:	31400115 	stw	r5,4(r6)
 200c544:	38c7c83a 	sub	r3,r7,r3
 200c548:	10c00015 	stw	r3,0(r2)
 200c54c:	003fd306 	br	200c49c <_malloc_trim_r+0x78>

0200c550 <_free_r>:
 200c550:	defffd04 	addi	sp,sp,-12
 200c554:	dc400115 	stw	r17,4(sp)
 200c558:	dc000015 	stw	r16,0(sp)
 200c55c:	dfc00215 	stw	ra,8(sp)
 200c560:	2821883a 	mov	r16,r5
 200c564:	2023883a 	mov	r17,r4
 200c568:	28005a26 	beq	r5,zero,200c6d4 <_free_r+0x184>
 200c56c:	20148900 	call	2014890 <__malloc_lock>
 200c570:	823ffe04 	addi	r8,r16,-8
 200c574:	41400117 	ldw	r5,4(r8)
 200c578:	00bfff84 	movi	r2,-2
 200c57c:	028080b4 	movhi	r10,514
 200c580:	52865004 	addi	r10,r10,6464
 200c584:	288e703a 	and	r7,r5,r2
 200c588:	41cd883a 	add	r6,r8,r7
 200c58c:	30c00117 	ldw	r3,4(r6)
 200c590:	51000217 	ldw	r4,8(r10)
 200c594:	00bfff04 	movi	r2,-4
 200c598:	1892703a 	and	r9,r3,r2
 200c59c:	5017883a 	mov	r11,r10
 200c5a0:	31006726 	beq	r6,r4,200c740 <_free_r+0x1f0>
 200c5a4:	2880004c 	andi	r2,r5,1
 200c5a8:	1005003a 	cmpeq	r2,r2,zero
 200c5ac:	32400115 	stw	r9,4(r6)
 200c5b0:	10001a1e 	bne	r2,zero,200c61c <_free_r+0xcc>
 200c5b4:	000b883a 	mov	r5,zero
 200c5b8:	3247883a 	add	r3,r6,r9
 200c5bc:	18800117 	ldw	r2,4(r3)
 200c5c0:	1080004c 	andi	r2,r2,1
 200c5c4:	1000231e 	bne	r2,zero,200c654 <_free_r+0x104>
 200c5c8:	280ac03a 	cmpne	r5,r5,zero
 200c5cc:	3a4f883a 	add	r7,r7,r9
 200c5d0:	2800451e 	bne	r5,zero,200c6e8 <_free_r+0x198>
 200c5d4:	31000217 	ldw	r4,8(r6)
 200c5d8:	008080b4 	movhi	r2,514
 200c5dc:	10865204 	addi	r2,r2,6472
 200c5e0:	20807b26 	beq	r4,r2,200c7d0 <_free_r+0x280>
 200c5e4:	30800317 	ldw	r2,12(r6)
 200c5e8:	3a07883a 	add	r3,r7,r8
 200c5ec:	19c00015 	stw	r7,0(r3)
 200c5f0:	11000215 	stw	r4,8(r2)
 200c5f4:	20800315 	stw	r2,12(r4)
 200c5f8:	38800054 	ori	r2,r7,1
 200c5fc:	40800115 	stw	r2,4(r8)
 200c600:	28001a26 	beq	r5,zero,200c66c <_free_r+0x11c>
 200c604:	8809883a 	mov	r4,r17
 200c608:	dfc00217 	ldw	ra,8(sp)
 200c60c:	dc400117 	ldw	r17,4(sp)
 200c610:	dc000017 	ldw	r16,0(sp)
 200c614:	dec00304 	addi	sp,sp,12
 200c618:	20149981 	jmpi	2014998 <__malloc_unlock>
 200c61c:	80bffe17 	ldw	r2,-8(r16)
 200c620:	50c00204 	addi	r3,r10,8
 200c624:	4091c83a 	sub	r8,r8,r2
 200c628:	41000217 	ldw	r4,8(r8)
 200c62c:	388f883a 	add	r7,r7,r2
 200c630:	20c06126 	beq	r4,r3,200c7b8 <_free_r+0x268>
 200c634:	40800317 	ldw	r2,12(r8)
 200c638:	3247883a 	add	r3,r6,r9
 200c63c:	000b883a 	mov	r5,zero
 200c640:	11000215 	stw	r4,8(r2)
 200c644:	20800315 	stw	r2,12(r4)
 200c648:	18800117 	ldw	r2,4(r3)
 200c64c:	1080004c 	andi	r2,r2,1
 200c650:	103fdd26 	beq	r2,zero,200c5c8 <_free_r+0x78>
 200c654:	38800054 	ori	r2,r7,1
 200c658:	3a07883a 	add	r3,r7,r8
 200c65c:	280ac03a 	cmpne	r5,r5,zero
 200c660:	40800115 	stw	r2,4(r8)
 200c664:	19c00015 	stw	r7,0(r3)
 200c668:	283fe61e 	bne	r5,zero,200c604 <_free_r+0xb4>
 200c66c:	00807fc4 	movi	r2,511
 200c670:	11c01f2e 	bgeu	r2,r7,200c6f0 <_free_r+0x1a0>
 200c674:	3806d27a 	srli	r3,r7,9
 200c678:	1800481e 	bne	r3,zero,200c79c <_free_r+0x24c>
 200c67c:	3804d0fa 	srli	r2,r7,3
 200c680:	100690fa 	slli	r3,r2,3
 200c684:	1acd883a 	add	r6,r3,r11
 200c688:	31400217 	ldw	r5,8(r6)
 200c68c:	31405926 	beq	r6,r5,200c7f4 <_free_r+0x2a4>
 200c690:	28800117 	ldw	r2,4(r5)
 200c694:	00ffff04 	movi	r3,-4
 200c698:	10c4703a 	and	r2,r2,r3
 200c69c:	3880022e 	bgeu	r7,r2,200c6a8 <_free_r+0x158>
 200c6a0:	29400217 	ldw	r5,8(r5)
 200c6a4:	317ffa1e 	bne	r6,r5,200c690 <_free_r+0x140>
 200c6a8:	29800317 	ldw	r6,12(r5)
 200c6ac:	41800315 	stw	r6,12(r8)
 200c6b0:	41400215 	stw	r5,8(r8)
 200c6b4:	8809883a 	mov	r4,r17
 200c6b8:	2a000315 	stw	r8,12(r5)
 200c6bc:	32000215 	stw	r8,8(r6)
 200c6c0:	dfc00217 	ldw	ra,8(sp)
 200c6c4:	dc400117 	ldw	r17,4(sp)
 200c6c8:	dc000017 	ldw	r16,0(sp)
 200c6cc:	dec00304 	addi	sp,sp,12
 200c6d0:	20149981 	jmpi	2014998 <__malloc_unlock>
 200c6d4:	dfc00217 	ldw	ra,8(sp)
 200c6d8:	dc400117 	ldw	r17,4(sp)
 200c6dc:	dc000017 	ldw	r16,0(sp)
 200c6e0:	dec00304 	addi	sp,sp,12
 200c6e4:	f800283a 	ret
 200c6e8:	31000217 	ldw	r4,8(r6)
 200c6ec:	003fbd06 	br	200c5e4 <_free_r+0x94>
 200c6f0:	3806d0fa 	srli	r3,r7,3
 200c6f4:	00800044 	movi	r2,1
 200c6f8:	51400117 	ldw	r5,4(r10)
 200c6fc:	180890fa 	slli	r4,r3,3
 200c700:	1807d0ba 	srai	r3,r3,2
 200c704:	22c9883a 	add	r4,r4,r11
 200c708:	21800217 	ldw	r6,8(r4)
 200c70c:	10c4983a 	sll	r2,r2,r3
 200c710:	41000315 	stw	r4,12(r8)
 200c714:	41800215 	stw	r6,8(r8)
 200c718:	288ab03a 	or	r5,r5,r2
 200c71c:	22000215 	stw	r8,8(r4)
 200c720:	8809883a 	mov	r4,r17
 200c724:	51400115 	stw	r5,4(r10)
 200c728:	32000315 	stw	r8,12(r6)
 200c72c:	dfc00217 	ldw	ra,8(sp)
 200c730:	dc400117 	ldw	r17,4(sp)
 200c734:	dc000017 	ldw	r16,0(sp)
 200c738:	dec00304 	addi	sp,sp,12
 200c73c:	20149981 	jmpi	2014998 <__malloc_unlock>
 200c740:	2880004c 	andi	r2,r5,1
 200c744:	3a4d883a 	add	r6,r7,r9
 200c748:	1000071e 	bne	r2,zero,200c768 <_free_r+0x218>
 200c74c:	80bffe17 	ldw	r2,-8(r16)
 200c750:	4091c83a 	sub	r8,r8,r2
 200c754:	41000317 	ldw	r4,12(r8)
 200c758:	40c00217 	ldw	r3,8(r8)
 200c75c:	308d883a 	add	r6,r6,r2
 200c760:	20c00215 	stw	r3,8(r4)
 200c764:	19000315 	stw	r4,12(r3)
 200c768:	008080b4 	movhi	r2,514
 200c76c:	108c1904 	addi	r2,r2,12388
 200c770:	11000017 	ldw	r4,0(r2)
 200c774:	30c00054 	ori	r3,r6,1
 200c778:	52000215 	stw	r8,8(r10)
 200c77c:	40c00115 	stw	r3,4(r8)
 200c780:	313fa036 	bltu	r6,r4,200c604 <_free_r+0xb4>
 200c784:	008080b4 	movhi	r2,514
 200c788:	1093c504 	addi	r2,r2,20244
 200c78c:	11400017 	ldw	r5,0(r2)
 200c790:	8809883a 	mov	r4,r17
 200c794:	200c4240 	call	200c424 <_malloc_trim_r>
 200c798:	003f9a06 	br	200c604 <_free_r+0xb4>
 200c79c:	00800104 	movi	r2,4
 200c7a0:	10c0072e 	bgeu	r2,r3,200c7c0 <_free_r+0x270>
 200c7a4:	00800504 	movi	r2,20
 200c7a8:	10c01936 	bltu	r2,r3,200c810 <_free_r+0x2c0>
 200c7ac:	188016c4 	addi	r2,r3,91
 200c7b0:	100690fa 	slli	r3,r2,3
 200c7b4:	003fb306 	br	200c684 <_free_r+0x134>
 200c7b8:	01400044 	movi	r5,1
 200c7bc:	003f7e06 	br	200c5b8 <_free_r+0x68>
 200c7c0:	3804d1ba 	srli	r2,r7,6
 200c7c4:	10800e04 	addi	r2,r2,56
 200c7c8:	100690fa 	slli	r3,r2,3
 200c7cc:	003fad06 	br	200c684 <_free_r+0x134>
 200c7d0:	22000315 	stw	r8,12(r4)
 200c7d4:	22000215 	stw	r8,8(r4)
 200c7d8:	3a05883a 	add	r2,r7,r8
 200c7dc:	38c00054 	ori	r3,r7,1
 200c7e0:	11c00015 	stw	r7,0(r2)
 200c7e4:	41000215 	stw	r4,8(r8)
 200c7e8:	40c00115 	stw	r3,4(r8)
 200c7ec:	41000315 	stw	r4,12(r8)
 200c7f0:	003f8406 	br	200c604 <_free_r+0xb4>
 200c7f4:	1005d0ba 	srai	r2,r2,2
 200c7f8:	00c00044 	movi	r3,1
 200c7fc:	51000117 	ldw	r4,4(r10)
 200c800:	1886983a 	sll	r3,r3,r2
 200c804:	20c8b03a 	or	r4,r4,r3
 200c808:	51000115 	stw	r4,4(r10)
 200c80c:	003fa706 	br	200c6ac <_free_r+0x15c>
 200c810:	00801504 	movi	r2,84
 200c814:	10c00436 	bltu	r2,r3,200c828 <_free_r+0x2d8>
 200c818:	3804d33a 	srli	r2,r7,12
 200c81c:	10801b84 	addi	r2,r2,110
 200c820:	100690fa 	slli	r3,r2,3
 200c824:	003f9706 	br	200c684 <_free_r+0x134>
 200c828:	00805504 	movi	r2,340
 200c82c:	10c00436 	bltu	r2,r3,200c840 <_free_r+0x2f0>
 200c830:	3804d3fa 	srli	r2,r7,15
 200c834:	10801dc4 	addi	r2,r2,119
 200c838:	100690fa 	slli	r3,r2,3
 200c83c:	003f9106 	br	200c684 <_free_r+0x134>
 200c840:	00815504 	movi	r2,1364
 200c844:	10c0032e 	bgeu	r2,r3,200c854 <_free_r+0x304>
 200c848:	00801f84 	movi	r2,126
 200c84c:	00c0fc04 	movi	r3,1008
 200c850:	003f8c06 	br	200c684 <_free_r+0x134>
 200c854:	3804d4ba 	srli	r2,r7,18
 200c858:	10801f04 	addi	r2,r2,124
 200c85c:	100690fa 	slli	r3,r2,3
 200c860:	003f8806 	br	200c684 <_free_r+0x134>

0200c864 <__sfvwrite_r>:
 200c864:	30800217 	ldw	r2,8(r6)
 200c868:	defff504 	addi	sp,sp,-44
 200c86c:	df000915 	stw	fp,36(sp)
 200c870:	dd800715 	stw	r22,28(sp)
 200c874:	dc800315 	stw	r18,12(sp)
 200c878:	dfc00a15 	stw	ra,40(sp)
 200c87c:	ddc00815 	stw	r23,32(sp)
 200c880:	dd400615 	stw	r21,24(sp)
 200c884:	dd000515 	stw	r20,20(sp)
 200c888:	dcc00415 	stw	r19,16(sp)
 200c88c:	dc400215 	stw	r17,8(sp)
 200c890:	dc000115 	stw	r16,4(sp)
 200c894:	302d883a 	mov	r22,r6
 200c898:	2039883a 	mov	fp,r4
 200c89c:	2825883a 	mov	r18,r5
 200c8a0:	10001c26 	beq	r2,zero,200c914 <__sfvwrite_r+0xb0>
 200c8a4:	29c0030b 	ldhu	r7,12(r5)
 200c8a8:	3880020c 	andi	r2,r7,8
 200c8ac:	10002726 	beq	r2,zero,200c94c <__sfvwrite_r+0xe8>
 200c8b0:	28800417 	ldw	r2,16(r5)
 200c8b4:	10002526 	beq	r2,zero,200c94c <__sfvwrite_r+0xe8>
 200c8b8:	3880008c 	andi	r2,r7,2
 200c8bc:	b5400017 	ldw	r21,0(r22)
 200c8c0:	10002826 	beq	r2,zero,200c964 <__sfvwrite_r+0x100>
 200c8c4:	0021883a 	mov	r16,zero
 200c8c8:	0023883a 	mov	r17,zero
 200c8cc:	880d883a 	mov	r6,r17
 200c8d0:	e009883a 	mov	r4,fp
 200c8d4:	00810004 	movi	r2,1024
 200c8d8:	80006e26 	beq	r16,zero,200ca94 <__sfvwrite_r+0x230>
 200c8dc:	800f883a 	mov	r7,r16
 200c8e0:	91400717 	ldw	r5,28(r18)
 200c8e4:	1400012e 	bgeu	r2,r16,200c8ec <__sfvwrite_r+0x88>
 200c8e8:	100f883a 	mov	r7,r2
 200c8ec:	90c00917 	ldw	r3,36(r18)
 200c8f0:	183ee83a 	callr	r3
 200c8f4:	1007883a 	mov	r3,r2
 200c8f8:	80a1c83a 	sub	r16,r16,r2
 200c8fc:	88a3883a 	add	r17,r17,r2
 200c900:	00806d0e 	bge	zero,r2,200cab8 <__sfvwrite_r+0x254>
 200c904:	b0800217 	ldw	r2,8(r22)
 200c908:	10c5c83a 	sub	r2,r2,r3
 200c90c:	b0800215 	stw	r2,8(r22)
 200c910:	103fee1e 	bne	r2,zero,200c8cc <__sfvwrite_r+0x68>
 200c914:	0009883a 	mov	r4,zero
 200c918:	2005883a 	mov	r2,r4
 200c91c:	dfc00a17 	ldw	ra,40(sp)
 200c920:	df000917 	ldw	fp,36(sp)
 200c924:	ddc00817 	ldw	r23,32(sp)
 200c928:	dd800717 	ldw	r22,28(sp)
 200c92c:	dd400617 	ldw	r21,24(sp)
 200c930:	dd000517 	ldw	r20,20(sp)
 200c934:	dcc00417 	ldw	r19,16(sp)
 200c938:	dc800317 	ldw	r18,12(sp)
 200c93c:	dc400217 	ldw	r17,8(sp)
 200c940:	dc000117 	ldw	r16,4(sp)
 200c944:	dec00b04 	addi	sp,sp,44
 200c948:	f800283a 	ret
 200c94c:	200a3f00 	call	200a3f0 <__swsetup_r>
 200c950:	1000e41e 	bne	r2,zero,200cce4 <__sfvwrite_r+0x480>
 200c954:	91c0030b 	ldhu	r7,12(r18)
 200c958:	b5400017 	ldw	r21,0(r22)
 200c95c:	3880008c 	andi	r2,r7,2
 200c960:	103fd81e 	bne	r2,zero,200c8c4 <__sfvwrite_r+0x60>
 200c964:	3880004c 	andi	r2,r7,1
 200c968:	1005003a 	cmpeq	r2,r2,zero
 200c96c:	10005726 	beq	r2,zero,200cacc <__sfvwrite_r+0x268>
 200c970:	0029883a 	mov	r20,zero
 200c974:	002f883a 	mov	r23,zero
 200c978:	a0004226 	beq	r20,zero,200ca84 <__sfvwrite_r+0x220>
 200c97c:	3880800c 	andi	r2,r7,512
 200c980:	94000217 	ldw	r16,8(r18)
 200c984:	10008b26 	beq	r2,zero,200cbb4 <__sfvwrite_r+0x350>
 200c988:	800d883a 	mov	r6,r16
 200c98c:	a400a536 	bltu	r20,r16,200cc24 <__sfvwrite_r+0x3c0>
 200c990:	3881200c 	andi	r2,r7,1152
 200c994:	10002726 	beq	r2,zero,200ca34 <__sfvwrite_r+0x1d0>
 200c998:	90800517 	ldw	r2,20(r18)
 200c99c:	92000417 	ldw	r8,16(r18)
 200c9a0:	91400017 	ldw	r5,0(r18)
 200c9a4:	1087883a 	add	r3,r2,r2
 200c9a8:	1887883a 	add	r3,r3,r2
 200c9ac:	1808d7fa 	srli	r4,r3,31
 200c9b0:	2a21c83a 	sub	r16,r5,r8
 200c9b4:	80800044 	addi	r2,r16,1
 200c9b8:	20c9883a 	add	r4,r4,r3
 200c9bc:	2027d07a 	srai	r19,r4,1
 200c9c0:	a085883a 	add	r2,r20,r2
 200c9c4:	980d883a 	mov	r6,r19
 200c9c8:	9880022e 	bgeu	r19,r2,200c9d4 <__sfvwrite_r+0x170>
 200c9cc:	1027883a 	mov	r19,r2
 200c9d0:	100d883a 	mov	r6,r2
 200c9d4:	3881000c 	andi	r2,r7,1024
 200c9d8:	1000b826 	beq	r2,zero,200ccbc <__sfvwrite_r+0x458>
 200c9dc:	300b883a 	mov	r5,r6
 200c9e0:	e009883a 	mov	r4,fp
 200c9e4:	200637c0 	call	200637c <_malloc_r>
 200c9e8:	10003126 	beq	r2,zero,200cab0 <__sfvwrite_r+0x24c>
 200c9ec:	91400417 	ldw	r5,16(r18)
 200c9f0:	1009883a 	mov	r4,r2
 200c9f4:	800d883a 	mov	r6,r16
 200c9f8:	1023883a 	mov	r17,r2
 200c9fc:	200d2e80 	call	200d2e8 <memcpy>
 200ca00:	90c0030b 	ldhu	r3,12(r18)
 200ca04:	00beffc4 	movi	r2,-1025
 200ca08:	1886703a 	and	r3,r3,r2
 200ca0c:	18c02014 	ori	r3,r3,128
 200ca10:	90c0030d 	sth	r3,12(r18)
 200ca14:	9c07c83a 	sub	r3,r19,r16
 200ca18:	8c05883a 	add	r2,r17,r16
 200ca1c:	a00d883a 	mov	r6,r20
 200ca20:	a021883a 	mov	r16,r20
 200ca24:	90800015 	stw	r2,0(r18)
 200ca28:	90c00215 	stw	r3,8(r18)
 200ca2c:	94400415 	stw	r17,16(r18)
 200ca30:	94c00515 	stw	r19,20(r18)
 200ca34:	91000017 	ldw	r4,0(r18)
 200ca38:	b80b883a 	mov	r5,r23
 200ca3c:	a023883a 	mov	r17,r20
 200ca40:	200d3880 	call	200d388 <memmove>
 200ca44:	90c00217 	ldw	r3,8(r18)
 200ca48:	90800017 	ldw	r2,0(r18)
 200ca4c:	a027883a 	mov	r19,r20
 200ca50:	1c07c83a 	sub	r3,r3,r16
 200ca54:	1405883a 	add	r2,r2,r16
 200ca58:	90c00215 	stw	r3,8(r18)
 200ca5c:	a021883a 	mov	r16,r20
 200ca60:	90800015 	stw	r2,0(r18)
 200ca64:	b0800217 	ldw	r2,8(r22)
 200ca68:	1405c83a 	sub	r2,r2,r16
 200ca6c:	b0800215 	stw	r2,8(r22)
 200ca70:	103fa826 	beq	r2,zero,200c914 <__sfvwrite_r+0xb0>
 200ca74:	a469c83a 	sub	r20,r20,r17
 200ca78:	91c0030b 	ldhu	r7,12(r18)
 200ca7c:	bcef883a 	add	r23,r23,r19
 200ca80:	a03fbe1e 	bne	r20,zero,200c97c <__sfvwrite_r+0x118>
 200ca84:	adc00017 	ldw	r23,0(r21)
 200ca88:	ad000117 	ldw	r20,4(r21)
 200ca8c:	ad400204 	addi	r21,r21,8
 200ca90:	003fb906 	br	200c978 <__sfvwrite_r+0x114>
 200ca94:	ac400017 	ldw	r17,0(r21)
 200ca98:	ac000117 	ldw	r16,4(r21)
 200ca9c:	ad400204 	addi	r21,r21,8
 200caa0:	003f8a06 	br	200c8cc <__sfvwrite_r+0x68>
 200caa4:	91400417 	ldw	r5,16(r18)
 200caa8:	e009883a 	mov	r4,fp
 200caac:	200c5500 	call	200c550 <_free_r>
 200cab0:	00800304 	movi	r2,12
 200cab4:	e0800015 	stw	r2,0(fp)
 200cab8:	9080030b 	ldhu	r2,12(r18)
 200cabc:	013fffc4 	movi	r4,-1
 200cac0:	10801014 	ori	r2,r2,64
 200cac4:	9080030d 	sth	r2,12(r18)
 200cac8:	003f9306 	br	200c918 <__sfvwrite_r+0xb4>
 200cacc:	0027883a 	mov	r19,zero
 200cad0:	002f883a 	mov	r23,zero
 200cad4:	d8000015 	stw	zero,0(sp)
 200cad8:	0029883a 	mov	r20,zero
 200cadc:	98001e26 	beq	r19,zero,200cb58 <__sfvwrite_r+0x2f4>
 200cae0:	d8c00017 	ldw	r3,0(sp)
 200cae4:	1804c03a 	cmpne	r2,r3,zero
 200cae8:	10005e26 	beq	r2,zero,200cc64 <__sfvwrite_r+0x400>
 200caec:	9821883a 	mov	r16,r19
 200caf0:	a4c0012e 	bgeu	r20,r19,200caf8 <__sfvwrite_r+0x294>
 200caf4:	a021883a 	mov	r16,r20
 200caf8:	91000017 	ldw	r4,0(r18)
 200cafc:	90800417 	ldw	r2,16(r18)
 200cb00:	91800217 	ldw	r6,8(r18)
 200cb04:	91c00517 	ldw	r7,20(r18)
 200cb08:	1100022e 	bgeu	r2,r4,200cb14 <__sfvwrite_r+0x2b0>
 200cb0c:	31e3883a 	add	r17,r6,r7
 200cb10:	8c001616 	blt	r17,r16,200cb6c <__sfvwrite_r+0x308>
 200cb14:	81c03816 	blt	r16,r7,200cbf8 <__sfvwrite_r+0x394>
 200cb18:	90c00917 	ldw	r3,36(r18)
 200cb1c:	91400717 	ldw	r5,28(r18)
 200cb20:	e009883a 	mov	r4,fp
 200cb24:	b80d883a 	mov	r6,r23
 200cb28:	183ee83a 	callr	r3
 200cb2c:	1023883a 	mov	r17,r2
 200cb30:	00bfe10e 	bge	zero,r2,200cab8 <__sfvwrite_r+0x254>
 200cb34:	a469c83a 	sub	r20,r20,r17
 200cb38:	a0001826 	beq	r20,zero,200cb9c <__sfvwrite_r+0x338>
 200cb3c:	b0800217 	ldw	r2,8(r22)
 200cb40:	1445c83a 	sub	r2,r2,r17
 200cb44:	b0800215 	stw	r2,8(r22)
 200cb48:	103f7226 	beq	r2,zero,200c914 <__sfvwrite_r+0xb0>
 200cb4c:	9c67c83a 	sub	r19,r19,r17
 200cb50:	bc6f883a 	add	r23,r23,r17
 200cb54:	983fe21e 	bne	r19,zero,200cae0 <__sfvwrite_r+0x27c>
 200cb58:	adc00017 	ldw	r23,0(r21)
 200cb5c:	acc00117 	ldw	r19,4(r21)
 200cb60:	ad400204 	addi	r21,r21,8
 200cb64:	d8000015 	stw	zero,0(sp)
 200cb68:	003fdc06 	br	200cadc <__sfvwrite_r+0x278>
 200cb6c:	b80b883a 	mov	r5,r23
 200cb70:	880d883a 	mov	r6,r17
 200cb74:	200d3880 	call	200d388 <memmove>
 200cb78:	90c00017 	ldw	r3,0(r18)
 200cb7c:	e009883a 	mov	r4,fp
 200cb80:	900b883a 	mov	r5,r18
 200cb84:	1c47883a 	add	r3,r3,r17
 200cb88:	90c00015 	stw	r3,0(r18)
 200cb8c:	200bcf80 	call	200bcf8 <_fflush_r>
 200cb90:	103fc91e 	bne	r2,zero,200cab8 <__sfvwrite_r+0x254>
 200cb94:	a469c83a 	sub	r20,r20,r17
 200cb98:	a03fe81e 	bne	r20,zero,200cb3c <__sfvwrite_r+0x2d8>
 200cb9c:	e009883a 	mov	r4,fp
 200cba0:	900b883a 	mov	r5,r18
 200cba4:	200bcf80 	call	200bcf8 <_fflush_r>
 200cba8:	103fc31e 	bne	r2,zero,200cab8 <__sfvwrite_r+0x254>
 200cbac:	d8000015 	stw	zero,0(sp)
 200cbb0:	003fe206 	br	200cb3c <__sfvwrite_r+0x2d8>
 200cbb4:	91000017 	ldw	r4,0(r18)
 200cbb8:	90800417 	ldw	r2,16(r18)
 200cbbc:	1100022e 	bgeu	r2,r4,200cbc8 <__sfvwrite_r+0x364>
 200cbc0:	8023883a 	mov	r17,r16
 200cbc4:	85003136 	bltu	r16,r20,200cc8c <__sfvwrite_r+0x428>
 200cbc8:	91c00517 	ldw	r7,20(r18)
 200cbcc:	a1c01836 	bltu	r20,r7,200cc30 <__sfvwrite_r+0x3cc>
 200cbd0:	90c00917 	ldw	r3,36(r18)
 200cbd4:	91400717 	ldw	r5,28(r18)
 200cbd8:	e009883a 	mov	r4,fp
 200cbdc:	b80d883a 	mov	r6,r23
 200cbe0:	183ee83a 	callr	r3
 200cbe4:	1021883a 	mov	r16,r2
 200cbe8:	00bfb30e 	bge	zero,r2,200cab8 <__sfvwrite_r+0x254>
 200cbec:	1023883a 	mov	r17,r2
 200cbf0:	1027883a 	mov	r19,r2
 200cbf4:	003f9b06 	br	200ca64 <__sfvwrite_r+0x200>
 200cbf8:	b80b883a 	mov	r5,r23
 200cbfc:	800d883a 	mov	r6,r16
 200cc00:	200d3880 	call	200d388 <memmove>
 200cc04:	90c00217 	ldw	r3,8(r18)
 200cc08:	90800017 	ldw	r2,0(r18)
 200cc0c:	8023883a 	mov	r17,r16
 200cc10:	1c07c83a 	sub	r3,r3,r16
 200cc14:	1405883a 	add	r2,r2,r16
 200cc18:	90c00215 	stw	r3,8(r18)
 200cc1c:	90800015 	stw	r2,0(r18)
 200cc20:	003fc406 	br	200cb34 <__sfvwrite_r+0x2d0>
 200cc24:	a00d883a 	mov	r6,r20
 200cc28:	a021883a 	mov	r16,r20
 200cc2c:	003f8106 	br	200ca34 <__sfvwrite_r+0x1d0>
 200cc30:	b80b883a 	mov	r5,r23
 200cc34:	a00d883a 	mov	r6,r20
 200cc38:	200d3880 	call	200d388 <memmove>
 200cc3c:	90c00217 	ldw	r3,8(r18)
 200cc40:	90800017 	ldw	r2,0(r18)
 200cc44:	a021883a 	mov	r16,r20
 200cc48:	1d07c83a 	sub	r3,r3,r20
 200cc4c:	1505883a 	add	r2,r2,r20
 200cc50:	a023883a 	mov	r17,r20
 200cc54:	a027883a 	mov	r19,r20
 200cc58:	90c00215 	stw	r3,8(r18)
 200cc5c:	90800015 	stw	r2,0(r18)
 200cc60:	003f8006 	br	200ca64 <__sfvwrite_r+0x200>
 200cc64:	b809883a 	mov	r4,r23
 200cc68:	01400284 	movi	r5,10
 200cc6c:	980d883a 	mov	r6,r19
 200cc70:	200d2040 	call	200d204 <memchr>
 200cc74:	10001726 	beq	r2,zero,200ccd4 <__sfvwrite_r+0x470>
 200cc78:	15c5c83a 	sub	r2,r2,r23
 200cc7c:	15000044 	addi	r20,r2,1
 200cc80:	00800044 	movi	r2,1
 200cc84:	d8800015 	stw	r2,0(sp)
 200cc88:	003f9806 	br	200caec <__sfvwrite_r+0x288>
 200cc8c:	b80b883a 	mov	r5,r23
 200cc90:	800d883a 	mov	r6,r16
 200cc94:	200d3880 	call	200d388 <memmove>
 200cc98:	90c00017 	ldw	r3,0(r18)
 200cc9c:	e009883a 	mov	r4,fp
 200cca0:	900b883a 	mov	r5,r18
 200cca4:	1c07883a 	add	r3,r3,r16
 200cca8:	90c00015 	stw	r3,0(r18)
 200ccac:	8027883a 	mov	r19,r16
 200ccb0:	200bcf80 	call	200bcf8 <_fflush_r>
 200ccb4:	103f6b26 	beq	r2,zero,200ca64 <__sfvwrite_r+0x200>
 200ccb8:	003f7f06 	br	200cab8 <__sfvwrite_r+0x254>
 200ccbc:	400b883a 	mov	r5,r8
 200ccc0:	e009883a 	mov	r4,fp
 200ccc4:	200e4f40 	call	200e4f4 <_realloc_r>
 200ccc8:	103f7626 	beq	r2,zero,200caa4 <__sfvwrite_r+0x240>
 200cccc:	1023883a 	mov	r17,r2
 200ccd0:	003f5006 	br	200ca14 <__sfvwrite_r+0x1b0>
 200ccd4:	00c00044 	movi	r3,1
 200ccd8:	9d000044 	addi	r20,r19,1
 200ccdc:	d8c00015 	stw	r3,0(sp)
 200cce0:	003f8206 	br	200caec <__sfvwrite_r+0x288>
 200cce4:	9080030b 	ldhu	r2,12(r18)
 200cce8:	00c00244 	movi	r3,9
 200ccec:	013fffc4 	movi	r4,-1
 200ccf0:	10801014 	ori	r2,r2,64
 200ccf4:	9080030d 	sth	r2,12(r18)
 200ccf8:	e0c00015 	stw	r3,0(fp)
 200ccfc:	003f0606 	br	200c918 <__sfvwrite_r+0xb4>

0200cd00 <_fwalk_reent>:
 200cd00:	defff704 	addi	sp,sp,-36
 200cd04:	dcc00315 	stw	r19,12(sp)
 200cd08:	24c0b804 	addi	r19,r4,736
 200cd0c:	dd800615 	stw	r22,24(sp)
 200cd10:	dd400515 	stw	r21,20(sp)
 200cd14:	dfc00815 	stw	ra,32(sp)
 200cd18:	ddc00715 	stw	r23,28(sp)
 200cd1c:	dd000415 	stw	r20,16(sp)
 200cd20:	dc800215 	stw	r18,8(sp)
 200cd24:	dc400115 	stw	r17,4(sp)
 200cd28:	dc000015 	stw	r16,0(sp)
 200cd2c:	202b883a 	mov	r21,r4
 200cd30:	282d883a 	mov	r22,r5
 200cd34:	200bf800 	call	200bf80 <__sfp_lock_acquire>
 200cd38:	98002126 	beq	r19,zero,200cdc0 <_fwalk_reent+0xc0>
 200cd3c:	002f883a 	mov	r23,zero
 200cd40:	9c800117 	ldw	r18,4(r19)
 200cd44:	9c000217 	ldw	r16,8(r19)
 200cd48:	90bfffc4 	addi	r2,r18,-1
 200cd4c:	10000d16 	blt	r2,zero,200cd84 <_fwalk_reent+0x84>
 200cd50:	0023883a 	mov	r17,zero
 200cd54:	053fffc4 	movi	r20,-1
 200cd58:	8080030f 	ldh	r2,12(r16)
 200cd5c:	8c400044 	addi	r17,r17,1
 200cd60:	10000626 	beq	r2,zero,200cd7c <_fwalk_reent+0x7c>
 200cd64:	8080038f 	ldh	r2,14(r16)
 200cd68:	800b883a 	mov	r5,r16
 200cd6c:	a809883a 	mov	r4,r21
 200cd70:	15000226 	beq	r2,r20,200cd7c <_fwalk_reent+0x7c>
 200cd74:	b03ee83a 	callr	r22
 200cd78:	b8aeb03a 	or	r23,r23,r2
 200cd7c:	84001704 	addi	r16,r16,92
 200cd80:	947ff51e 	bne	r18,r17,200cd58 <_fwalk_reent+0x58>
 200cd84:	9cc00017 	ldw	r19,0(r19)
 200cd88:	983fed1e 	bne	r19,zero,200cd40 <_fwalk_reent+0x40>
 200cd8c:	200bf840 	call	200bf84 <__sfp_lock_release>
 200cd90:	b805883a 	mov	r2,r23
 200cd94:	dfc00817 	ldw	ra,32(sp)
 200cd98:	ddc00717 	ldw	r23,28(sp)
 200cd9c:	dd800617 	ldw	r22,24(sp)
 200cda0:	dd400517 	ldw	r21,20(sp)
 200cda4:	dd000417 	ldw	r20,16(sp)
 200cda8:	dcc00317 	ldw	r19,12(sp)
 200cdac:	dc800217 	ldw	r18,8(sp)
 200cdb0:	dc400117 	ldw	r17,4(sp)
 200cdb4:	dc000017 	ldw	r16,0(sp)
 200cdb8:	dec00904 	addi	sp,sp,36
 200cdbc:	f800283a 	ret
 200cdc0:	002f883a 	mov	r23,zero
 200cdc4:	003ff106 	br	200cd8c <_fwalk_reent+0x8c>

0200cdc8 <_fwalk>:
 200cdc8:	defff804 	addi	sp,sp,-32
 200cdcc:	dcc00315 	stw	r19,12(sp)
 200cdd0:	24c0b804 	addi	r19,r4,736
 200cdd4:	dd400515 	stw	r21,20(sp)
 200cdd8:	dfc00715 	stw	ra,28(sp)
 200cddc:	dd800615 	stw	r22,24(sp)
 200cde0:	dd000415 	stw	r20,16(sp)
 200cde4:	dc800215 	stw	r18,8(sp)
 200cde8:	dc400115 	stw	r17,4(sp)
 200cdec:	dc000015 	stw	r16,0(sp)
 200cdf0:	282b883a 	mov	r21,r5
 200cdf4:	200bf800 	call	200bf80 <__sfp_lock_acquire>
 200cdf8:	98001f26 	beq	r19,zero,200ce78 <_fwalk+0xb0>
 200cdfc:	002d883a 	mov	r22,zero
 200ce00:	9c800117 	ldw	r18,4(r19)
 200ce04:	9c000217 	ldw	r16,8(r19)
 200ce08:	90bfffc4 	addi	r2,r18,-1
 200ce0c:	10000c16 	blt	r2,zero,200ce40 <_fwalk+0x78>
 200ce10:	0023883a 	mov	r17,zero
 200ce14:	053fffc4 	movi	r20,-1
 200ce18:	8080030f 	ldh	r2,12(r16)
 200ce1c:	8c400044 	addi	r17,r17,1
 200ce20:	10000526 	beq	r2,zero,200ce38 <_fwalk+0x70>
 200ce24:	8080038f 	ldh	r2,14(r16)
 200ce28:	8009883a 	mov	r4,r16
 200ce2c:	15000226 	beq	r2,r20,200ce38 <_fwalk+0x70>
 200ce30:	a83ee83a 	callr	r21
 200ce34:	b0acb03a 	or	r22,r22,r2
 200ce38:	84001704 	addi	r16,r16,92
 200ce3c:	947ff61e 	bne	r18,r17,200ce18 <_fwalk+0x50>
 200ce40:	9cc00017 	ldw	r19,0(r19)
 200ce44:	983fee1e 	bne	r19,zero,200ce00 <_fwalk+0x38>
 200ce48:	200bf840 	call	200bf84 <__sfp_lock_release>
 200ce4c:	b005883a 	mov	r2,r22
 200ce50:	dfc00717 	ldw	ra,28(sp)
 200ce54:	dd800617 	ldw	r22,24(sp)
 200ce58:	dd400517 	ldw	r21,20(sp)
 200ce5c:	dd000417 	ldw	r20,16(sp)
 200ce60:	dcc00317 	ldw	r19,12(sp)
 200ce64:	dc800217 	ldw	r18,8(sp)
 200ce68:	dc400117 	ldw	r17,4(sp)
 200ce6c:	dc000017 	ldw	r16,0(sp)
 200ce70:	dec00804 	addi	sp,sp,32
 200ce74:	f800283a 	ret
 200ce78:	002d883a 	mov	r22,zero
 200ce7c:	003ff206 	br	200ce48 <_fwalk+0x80>

0200ce80 <iswspace>:
 200ce80:	00803fc4 	movi	r2,255
 200ce84:	0007883a 	mov	r3,zero
 200ce88:	11000636 	bltu	r2,r4,200cea4 <iswspace+0x24>
 200ce8c:	008080b4 	movhi	r2,514
 200ce90:	108c1b04 	addi	r2,r2,12396
 200ce94:	10c00017 	ldw	r3,0(r2)
 200ce98:	1907883a 	add	r3,r3,r4
 200ce9c:	18800003 	ldbu	r2,0(r3)
 200cea0:	10c0020c 	andi	r3,r2,8
 200cea4:	1805883a 	mov	r2,r3
 200cea8:	f800283a 	ret

0200ceac <__locale_charset>:
 200ceac:	d0a00717 	ldw	r2,-32740(gp)
 200ceb0:	f800283a 	ret

0200ceb4 <_localeconv_r>:
 200ceb4:	008080b4 	movhi	r2,514
 200ceb8:	10841104 	addi	r2,r2,4164
 200cebc:	f800283a 	ret

0200cec0 <localeconv>:
 200cec0:	008080b4 	movhi	r2,514
 200cec4:	108c1704 	addi	r2,r2,12380
 200cec8:	11000017 	ldw	r4,0(r2)
 200cecc:	200ceb41 	jmpi	200ceb4 <_localeconv_r>

0200ced0 <_setlocale_r>:
 200ced0:	defffc04 	addi	sp,sp,-16
 200ced4:	00c080b4 	movhi	r3,514
 200ced8:	18c33c04 	addi	r3,r3,3312
 200cedc:	dc800215 	stw	r18,8(sp)
 200cee0:	dc400115 	stw	r17,4(sp)
 200cee4:	dc000015 	stw	r16,0(sp)
 200cee8:	2023883a 	mov	r17,r4
 200ceec:	2825883a 	mov	r18,r5
 200cef0:	dfc00315 	stw	ra,12(sp)
 200cef4:	3021883a 	mov	r16,r6
 200cef8:	3009883a 	mov	r4,r6
 200cefc:	180b883a 	mov	r5,r3
 200cf00:	30000926 	beq	r6,zero,200cf28 <_setlocale_r+0x58>
 200cf04:	200eff00 	call	200eff0 <strcmp>
 200cf08:	8009883a 	mov	r4,r16
 200cf0c:	014080b4 	movhi	r5,514
 200cf10:	29434d04 	addi	r5,r5,3380
 200cf14:	10000b1e 	bne	r2,zero,200cf44 <_setlocale_r+0x74>
 200cf18:	8c000d15 	stw	r16,52(r17)
 200cf1c:	8c800c15 	stw	r18,48(r17)
 200cf20:	00c080b4 	movhi	r3,514
 200cf24:	18c33c04 	addi	r3,r3,3312
 200cf28:	1805883a 	mov	r2,r3
 200cf2c:	dfc00317 	ldw	ra,12(sp)
 200cf30:	dc800217 	ldw	r18,8(sp)
 200cf34:	dc400117 	ldw	r17,4(sp)
 200cf38:	dc000017 	ldw	r16,0(sp)
 200cf3c:	dec00404 	addi	sp,sp,16
 200cf40:	f800283a 	ret
 200cf44:	200eff00 	call	200eff0 <strcmp>
 200cf48:	0007883a 	mov	r3,zero
 200cf4c:	103ff226 	beq	r2,zero,200cf18 <_setlocale_r+0x48>
 200cf50:	003ff506 	br	200cf28 <_setlocale_r+0x58>

0200cf54 <setlocale>:
 200cf54:	018080b4 	movhi	r6,514
 200cf58:	318c1704 	addi	r6,r6,12380
 200cf5c:	2007883a 	mov	r3,r4
 200cf60:	31000017 	ldw	r4,0(r6)
 200cf64:	280d883a 	mov	r6,r5
 200cf68:	180b883a 	mov	r5,r3
 200cf6c:	200ced01 	jmpi	200ced0 <_setlocale_r>

0200cf70 <__smakebuf_r>:
 200cf70:	2880030b 	ldhu	r2,12(r5)
 200cf74:	deffed04 	addi	sp,sp,-76
 200cf78:	dc401015 	stw	r17,64(sp)
 200cf7c:	1080008c 	andi	r2,r2,2
 200cf80:	dc000f15 	stw	r16,60(sp)
 200cf84:	dfc01215 	stw	ra,72(sp)
 200cf88:	dc801115 	stw	r18,68(sp)
 200cf8c:	2821883a 	mov	r16,r5
 200cf90:	2023883a 	mov	r17,r4
 200cf94:	10000b26 	beq	r2,zero,200cfc4 <__smakebuf_r+0x54>
 200cf98:	28c010c4 	addi	r3,r5,67
 200cf9c:	00800044 	movi	r2,1
 200cfa0:	28800515 	stw	r2,20(r5)
 200cfa4:	28c00415 	stw	r3,16(r5)
 200cfa8:	28c00015 	stw	r3,0(r5)
 200cfac:	dfc01217 	ldw	ra,72(sp)
 200cfb0:	dc801117 	ldw	r18,68(sp)
 200cfb4:	dc401017 	ldw	r17,64(sp)
 200cfb8:	dc000f17 	ldw	r16,60(sp)
 200cfbc:	dec01304 	addi	sp,sp,76
 200cfc0:	f800283a 	ret
 200cfc4:	2940038f 	ldh	r5,14(r5)
 200cfc8:	28002116 	blt	r5,zero,200d050 <__smakebuf_r+0xe0>
 200cfcc:	d80d883a 	mov	r6,sp
 200cfd0:	20117300 	call	2011730 <_fstat_r>
 200cfd4:	10001e16 	blt	r2,zero,200d050 <__smakebuf_r+0xe0>
 200cfd8:	d8800117 	ldw	r2,4(sp)
 200cfdc:	00e00014 	movui	r3,32768
 200cfe0:	113c000c 	andi	r4,r2,61440
 200cfe4:	20c03126 	beq	r4,r3,200d0ac <__smakebuf_r+0x13c>
 200cfe8:	8080030b 	ldhu	r2,12(r16)
 200cfec:	00c80004 	movi	r3,8192
 200cff0:	10820014 	ori	r2,r2,2048
 200cff4:	8080030d 	sth	r2,12(r16)
 200cff8:	20c01e26 	beq	r4,r3,200d074 <__smakebuf_r+0x104>
 200cffc:	04810004 	movi	r18,1024
 200d000:	8809883a 	mov	r4,r17
 200d004:	900b883a 	mov	r5,r18
 200d008:	200637c0 	call	200637c <_malloc_r>
 200d00c:	1009883a 	mov	r4,r2
 200d010:	10003126 	beq	r2,zero,200d0d8 <__smakebuf_r+0x168>
 200d014:	80c0030b 	ldhu	r3,12(r16)
 200d018:	00808074 	movhi	r2,513
 200d01c:	10b01d04 	addi	r2,r2,-16268
 200d020:	88800f15 	stw	r2,60(r17)
 200d024:	18c02014 	ori	r3,r3,128
 200d028:	84800515 	stw	r18,20(r16)
 200d02c:	80c0030d 	sth	r3,12(r16)
 200d030:	81000415 	stw	r4,16(r16)
 200d034:	81000015 	stw	r4,0(r16)
 200d038:	dfc01217 	ldw	ra,72(sp)
 200d03c:	dc801117 	ldw	r18,68(sp)
 200d040:	dc401017 	ldw	r17,64(sp)
 200d044:	dc000f17 	ldw	r16,60(sp)
 200d048:	dec01304 	addi	sp,sp,76
 200d04c:	f800283a 	ret
 200d050:	80c0030b 	ldhu	r3,12(r16)
 200d054:	1880200c 	andi	r2,r3,128
 200d058:	10000426 	beq	r2,zero,200d06c <__smakebuf_r+0xfc>
 200d05c:	04801004 	movi	r18,64
 200d060:	18820014 	ori	r2,r3,2048
 200d064:	8080030d 	sth	r2,12(r16)
 200d068:	003fe506 	br	200d000 <__smakebuf_r+0x90>
 200d06c:	04810004 	movi	r18,1024
 200d070:	003ffb06 	br	200d060 <__smakebuf_r+0xf0>
 200d074:	8140038f 	ldh	r5,14(r16)
 200d078:	8809883a 	mov	r4,r17
 200d07c:	201232c0 	call	201232c <_isatty_r>
 200d080:	103fde26 	beq	r2,zero,200cffc <__smakebuf_r+0x8c>
 200d084:	8080030b 	ldhu	r2,12(r16)
 200d088:	80c010c4 	addi	r3,r16,67
 200d08c:	04810004 	movi	r18,1024
 200d090:	10800054 	ori	r2,r2,1
 200d094:	8080030d 	sth	r2,12(r16)
 200d098:	00800044 	movi	r2,1
 200d09c:	80c00415 	stw	r3,16(r16)
 200d0a0:	80800515 	stw	r2,20(r16)
 200d0a4:	80c00015 	stw	r3,0(r16)
 200d0a8:	003fd506 	br	200d000 <__smakebuf_r+0x90>
 200d0ac:	80c00a17 	ldw	r3,40(r16)
 200d0b0:	00808074 	movhi	r2,513
 200d0b4:	10bbab04 	addi	r2,r2,-4436
 200d0b8:	18bfcb1e 	bne	r3,r2,200cfe8 <__smakebuf_r+0x78>
 200d0bc:	8080030b 	ldhu	r2,12(r16)
 200d0c0:	00c10004 	movi	r3,1024
 200d0c4:	1825883a 	mov	r18,r3
 200d0c8:	10c4b03a 	or	r2,r2,r3
 200d0cc:	8080030d 	sth	r2,12(r16)
 200d0d0:	80c01315 	stw	r3,76(r16)
 200d0d4:	003fca06 	br	200d000 <__smakebuf_r+0x90>
 200d0d8:	8100030b 	ldhu	r4,12(r16)
 200d0dc:	2080800c 	andi	r2,r4,512
 200d0e0:	103fb21e 	bne	r2,zero,200cfac <__smakebuf_r+0x3c>
 200d0e4:	80c010c4 	addi	r3,r16,67
 200d0e8:	21000094 	ori	r4,r4,2
 200d0ec:	00800044 	movi	r2,1
 200d0f0:	80800515 	stw	r2,20(r16)
 200d0f4:	8100030d 	sth	r4,12(r16)
 200d0f8:	80c00415 	stw	r3,16(r16)
 200d0fc:	80c00015 	stw	r3,0(r16)
 200d100:	003faa06 	br	200cfac <__smakebuf_r+0x3c>

0200d104 <_mbrtowc_r>:
 200d104:	defffc04 	addi	sp,sp,-16
 200d108:	dc400215 	stw	r17,8(sp)
 200d10c:	dc000115 	stw	r16,4(sp)
 200d110:	dfc00315 	stw	ra,12(sp)
 200d114:	dc000417 	ldw	r16,16(sp)
 200d118:	2023883a 	mov	r17,r4
 200d11c:	30000f26 	beq	r6,zero,200d15c <_mbrtowc_r+0x58>
 200d120:	dc000015 	stw	r16,0(sp)
 200d124:	200d1c40 	call	200d1c4 <_mbtowc_r>
 200d128:	1007883a 	mov	r3,r2
 200d12c:	00bfffc4 	movi	r2,-1
 200d130:	1809883a 	mov	r4,r3
 200d134:	1880111e 	bne	r3,r2,200d17c <_mbrtowc_r+0x78>
 200d138:	80000015 	stw	zero,0(r16)
 200d13c:	00802284 	movi	r2,138
 200d140:	88800015 	stw	r2,0(r17)
 200d144:	2005883a 	mov	r2,r4
 200d148:	dfc00317 	ldw	ra,12(sp)
 200d14c:	dc400217 	ldw	r17,8(sp)
 200d150:	dc000117 	ldw	r16,4(sp)
 200d154:	dec00404 	addi	sp,sp,16
 200d158:	f800283a 	ret
 200d15c:	000b883a 	mov	r5,zero
 200d160:	018080b4 	movhi	r6,514
 200d164:	31834d04 	addi	r6,r6,3380
 200d168:	01c00044 	movi	r7,1
 200d16c:	dc000015 	stw	r16,0(sp)
 200d170:	200d1c40 	call	200d1c4 <_mbtowc_r>
 200d174:	1007883a 	mov	r3,r2
 200d178:	003fec06 	br	200d12c <_mbrtowc_r+0x28>
 200d17c:	1809883a 	mov	r4,r3
 200d180:	003ff006 	br	200d144 <_mbrtowc_r+0x40>

0200d184 <mbrtowc>:
 200d184:	008080b4 	movhi	r2,514
 200d188:	108c1704 	addi	r2,r2,12380
 200d18c:	2017883a 	mov	r11,r4
 200d190:	11000017 	ldw	r4,0(r2)
 200d194:	defffe04 	addi	sp,sp,-8
 200d198:	3013883a 	mov	r9,r6
 200d19c:	2805883a 	mov	r2,r5
 200d1a0:	d9c00015 	stw	r7,0(sp)
 200d1a4:	580b883a 	mov	r5,r11
 200d1a8:	100d883a 	mov	r6,r2
 200d1ac:	480f883a 	mov	r7,r9
 200d1b0:	dfc00115 	stw	ra,4(sp)
 200d1b4:	200d1040 	call	200d104 <_mbrtowc_r>
 200d1b8:	dfc00117 	ldw	ra,4(sp)
 200d1bc:	dec00204 	addi	sp,sp,8
 200d1c0:	f800283a 	ret

0200d1c4 <_mbtowc_r>:
 200d1c4:	deffff04 	addi	sp,sp,-4
 200d1c8:	0005883a 	mov	r2,zero
 200d1cc:	28000326 	beq	r5,zero,200d1dc <_mbtowc_r+0x18>
 200d1d0:	3000041e 	bne	r6,zero,200d1e4 <_mbtowc_r+0x20>
 200d1d4:	dec00104 	addi	sp,sp,4
 200d1d8:	f800283a 	ret
 200d1dc:	d80b883a 	mov	r5,sp
 200d1e0:	303ffc26 	beq	r6,zero,200d1d4 <_mbtowc_r+0x10>
 200d1e4:	00bfff84 	movi	r2,-2
 200d1e8:	383ffa26 	beq	r7,zero,200d1d4 <_mbtowc_r+0x10>
 200d1ec:	30800003 	ldbu	r2,0(r6)
 200d1f0:	28800015 	stw	r2,0(r5)
 200d1f4:	30c00003 	ldbu	r3,0(r6)
 200d1f8:	1804c03a 	cmpne	r2,r3,zero
 200d1fc:	dec00104 	addi	sp,sp,4
 200d200:	f800283a 	ret

0200d204 <memchr>:
 200d204:	008000c4 	movi	r2,3
 200d208:	29403fcc 	andi	r5,r5,255
 200d20c:	2007883a 	mov	r3,r4
 200d210:	1180022e 	bgeu	r2,r6,200d21c <memchr+0x18>
 200d214:	2084703a 	and	r2,r4,r2
 200d218:	10000b26 	beq	r2,zero,200d248 <memchr+0x44>
 200d21c:	313fffc4 	addi	r4,r6,-1
 200d220:	3000051e 	bne	r6,zero,200d238 <memchr+0x34>
 200d224:	00002c06 	br	200d2d8 <memchr+0xd4>
 200d228:	213fffc4 	addi	r4,r4,-1
 200d22c:	00bfffc4 	movi	r2,-1
 200d230:	18c00044 	addi	r3,r3,1
 200d234:	20802826 	beq	r4,r2,200d2d8 <memchr+0xd4>
 200d238:	18800003 	ldbu	r2,0(r3)
 200d23c:	28bffa1e 	bne	r5,r2,200d228 <memchr+0x24>
 200d240:	1805883a 	mov	r2,r3
 200d244:	f800283a 	ret
 200d248:	0011883a 	mov	r8,zero
 200d24c:	0007883a 	mov	r3,zero
 200d250:	01c00104 	movi	r7,4
 200d254:	4004923a 	slli	r2,r8,8
 200d258:	18c00044 	addi	r3,r3,1
 200d25c:	1151883a 	add	r8,r2,r5
 200d260:	19fffc1e 	bne	r3,r7,200d254 <memchr+0x50>
 200d264:	02bfbff4 	movhi	r10,65279
 200d268:	52bfbfc4 	addi	r10,r10,-257
 200d26c:	02602074 	movhi	r9,32897
 200d270:	4a602004 	addi	r9,r9,-32640
 200d274:	02c000c4 	movi	r11,3
 200d278:	20800017 	ldw	r2,0(r4)
 200d27c:	31bfff04 	addi	r6,r6,-4
 200d280:	200f883a 	mov	r7,r4
 200d284:	1204f03a 	xor	r2,r2,r8
 200d288:	1287883a 	add	r3,r2,r10
 200d28c:	1a46703a 	and	r3,r3,r9
 200d290:	0084303a 	nor	r2,zero,r2
 200d294:	10c4703a 	and	r2,r2,r3
 200d298:	10000b26 	beq	r2,zero,200d2c8 <memchr+0xc4>
 200d29c:	20800003 	ldbu	r2,0(r4)
 200d2a0:	28800f26 	beq	r5,r2,200d2e0 <memchr+0xdc>
 200d2a4:	20800043 	ldbu	r2,1(r4)
 200d2a8:	21c00044 	addi	r7,r4,1
 200d2ac:	28800c26 	beq	r5,r2,200d2e0 <memchr+0xdc>
 200d2b0:	20800083 	ldbu	r2,2(r4)
 200d2b4:	21c00084 	addi	r7,r4,2
 200d2b8:	28800926 	beq	r5,r2,200d2e0 <memchr+0xdc>
 200d2bc:	208000c3 	ldbu	r2,3(r4)
 200d2c0:	21c000c4 	addi	r7,r4,3
 200d2c4:	28800626 	beq	r5,r2,200d2e0 <memchr+0xdc>
 200d2c8:	21000104 	addi	r4,r4,4
 200d2cc:	59bfea36 	bltu	r11,r6,200d278 <memchr+0x74>
 200d2d0:	2007883a 	mov	r3,r4
 200d2d4:	003fd106 	br	200d21c <memchr+0x18>
 200d2d8:	0005883a 	mov	r2,zero
 200d2dc:	f800283a 	ret
 200d2e0:	3805883a 	mov	r2,r7
 200d2e4:	f800283a 	ret

0200d2e8 <memcpy>:
 200d2e8:	01c003c4 	movi	r7,15
 200d2ec:	2007883a 	mov	r3,r4
 200d2f0:	3980032e 	bgeu	r7,r6,200d300 <memcpy+0x18>
 200d2f4:	2904b03a 	or	r2,r5,r4
 200d2f8:	108000cc 	andi	r2,r2,3
 200d2fc:	10000926 	beq	r2,zero,200d324 <memcpy+0x3c>
 200d300:	30000626 	beq	r6,zero,200d31c <memcpy+0x34>
 200d304:	30cd883a 	add	r6,r6,r3
 200d308:	28800003 	ldbu	r2,0(r5)
 200d30c:	29400044 	addi	r5,r5,1
 200d310:	18800005 	stb	r2,0(r3)
 200d314:	18c00044 	addi	r3,r3,1
 200d318:	30fffb1e 	bne	r6,r3,200d308 <memcpy+0x20>
 200d31c:	2005883a 	mov	r2,r4
 200d320:	f800283a 	ret
 200d324:	3811883a 	mov	r8,r7
 200d328:	200f883a 	mov	r7,r4
 200d32c:	28c00017 	ldw	r3,0(r5)
 200d330:	31bffc04 	addi	r6,r6,-16
 200d334:	38c00015 	stw	r3,0(r7)
 200d338:	28800117 	ldw	r2,4(r5)
 200d33c:	38800115 	stw	r2,4(r7)
 200d340:	28c00217 	ldw	r3,8(r5)
 200d344:	38c00215 	stw	r3,8(r7)
 200d348:	28800317 	ldw	r2,12(r5)
 200d34c:	29400404 	addi	r5,r5,16
 200d350:	38800315 	stw	r2,12(r7)
 200d354:	39c00404 	addi	r7,r7,16
 200d358:	41bff436 	bltu	r8,r6,200d32c <memcpy+0x44>
 200d35c:	008000c4 	movi	r2,3
 200d360:	1180072e 	bgeu	r2,r6,200d380 <memcpy+0x98>
 200d364:	1007883a 	mov	r3,r2
 200d368:	28800017 	ldw	r2,0(r5)
 200d36c:	31bfff04 	addi	r6,r6,-4
 200d370:	29400104 	addi	r5,r5,4
 200d374:	38800015 	stw	r2,0(r7)
 200d378:	39c00104 	addi	r7,r7,4
 200d37c:	19bffa36 	bltu	r3,r6,200d368 <memcpy+0x80>
 200d380:	3807883a 	mov	r3,r7
 200d384:	003fde06 	br	200d300 <memcpy+0x18>

0200d388 <memmove>:
 200d388:	2807883a 	mov	r3,r5
 200d38c:	2011883a 	mov	r8,r4
 200d390:	29000c2e 	bgeu	r5,r4,200d3c4 <memmove+0x3c>
 200d394:	298f883a 	add	r7,r5,r6
 200d398:	21c00a2e 	bgeu	r4,r7,200d3c4 <memmove+0x3c>
 200d39c:	30000726 	beq	r6,zero,200d3bc <memmove+0x34>
 200d3a0:	2187883a 	add	r3,r4,r6
 200d3a4:	198dc83a 	sub	r6,r3,r6
 200d3a8:	39ffffc4 	addi	r7,r7,-1
 200d3ac:	38800003 	ldbu	r2,0(r7)
 200d3b0:	18ffffc4 	addi	r3,r3,-1
 200d3b4:	18800005 	stb	r2,0(r3)
 200d3b8:	19bffb1e 	bne	r3,r6,200d3a8 <memmove+0x20>
 200d3bc:	2005883a 	mov	r2,r4
 200d3c0:	f800283a 	ret
 200d3c4:	01c003c4 	movi	r7,15
 200d3c8:	39800a36 	bltu	r7,r6,200d3f4 <memmove+0x6c>
 200d3cc:	303ffb26 	beq	r6,zero,200d3bc <memmove+0x34>
 200d3d0:	400f883a 	mov	r7,r8
 200d3d4:	320d883a 	add	r6,r6,r8
 200d3d8:	28800003 	ldbu	r2,0(r5)
 200d3dc:	29400044 	addi	r5,r5,1
 200d3e0:	38800005 	stb	r2,0(r7)
 200d3e4:	39c00044 	addi	r7,r7,1
 200d3e8:	39bffb1e 	bne	r7,r6,200d3d8 <memmove+0x50>
 200d3ec:	2005883a 	mov	r2,r4
 200d3f0:	f800283a 	ret
 200d3f4:	1904b03a 	or	r2,r3,r4
 200d3f8:	108000cc 	andi	r2,r2,3
 200d3fc:	103ff31e 	bne	r2,zero,200d3cc <memmove+0x44>
 200d400:	3811883a 	mov	r8,r7
 200d404:	180b883a 	mov	r5,r3
 200d408:	200f883a 	mov	r7,r4
 200d40c:	28c00017 	ldw	r3,0(r5)
 200d410:	31bffc04 	addi	r6,r6,-16
 200d414:	38c00015 	stw	r3,0(r7)
 200d418:	28800117 	ldw	r2,4(r5)
 200d41c:	38800115 	stw	r2,4(r7)
 200d420:	28c00217 	ldw	r3,8(r5)
 200d424:	38c00215 	stw	r3,8(r7)
 200d428:	28800317 	ldw	r2,12(r5)
 200d42c:	29400404 	addi	r5,r5,16
 200d430:	38800315 	stw	r2,12(r7)
 200d434:	39c00404 	addi	r7,r7,16
 200d438:	41bff436 	bltu	r8,r6,200d40c <memmove+0x84>
 200d43c:	008000c4 	movi	r2,3
 200d440:	1180072e 	bgeu	r2,r6,200d460 <memmove+0xd8>
 200d444:	1007883a 	mov	r3,r2
 200d448:	28800017 	ldw	r2,0(r5)
 200d44c:	31bfff04 	addi	r6,r6,-4
 200d450:	29400104 	addi	r5,r5,4
 200d454:	38800015 	stw	r2,0(r7)
 200d458:	39c00104 	addi	r7,r7,4
 200d45c:	19bffa36 	bltu	r3,r6,200d448 <memmove+0xc0>
 200d460:	3811883a 	mov	r8,r7
 200d464:	003fd906 	br	200d3cc <memmove+0x44>

0200d468 <memset>:
 200d468:	008000c4 	movi	r2,3
 200d46c:	29403fcc 	andi	r5,r5,255
 200d470:	2007883a 	mov	r3,r4
 200d474:	1180022e 	bgeu	r2,r6,200d480 <memset+0x18>
 200d478:	2084703a 	and	r2,r4,r2
 200d47c:	10000826 	beq	r2,zero,200d4a0 <memset+0x38>
 200d480:	30000526 	beq	r6,zero,200d498 <memset+0x30>
 200d484:	2805883a 	mov	r2,r5
 200d488:	30cd883a 	add	r6,r6,r3
 200d48c:	18800005 	stb	r2,0(r3)
 200d490:	18c00044 	addi	r3,r3,1
 200d494:	19bffd1e 	bne	r3,r6,200d48c <memset+0x24>
 200d498:	2005883a 	mov	r2,r4
 200d49c:	f800283a 	ret
 200d4a0:	2804923a 	slli	r2,r5,8
 200d4a4:	020003c4 	movi	r8,15
 200d4a8:	200f883a 	mov	r7,r4
 200d4ac:	2884b03a 	or	r2,r5,r2
 200d4b0:	1006943a 	slli	r3,r2,16
 200d4b4:	10c6b03a 	or	r3,r2,r3
 200d4b8:	41800a2e 	bgeu	r8,r6,200d4e4 <memset+0x7c>
 200d4bc:	4005883a 	mov	r2,r8
 200d4c0:	31bffc04 	addi	r6,r6,-16
 200d4c4:	38c00015 	stw	r3,0(r7)
 200d4c8:	38c00115 	stw	r3,4(r7)
 200d4cc:	38c00215 	stw	r3,8(r7)
 200d4d0:	38c00315 	stw	r3,12(r7)
 200d4d4:	39c00404 	addi	r7,r7,16
 200d4d8:	11bff936 	bltu	r2,r6,200d4c0 <memset+0x58>
 200d4dc:	008000c4 	movi	r2,3
 200d4e0:	1180052e 	bgeu	r2,r6,200d4f8 <memset+0x90>
 200d4e4:	31bfff04 	addi	r6,r6,-4
 200d4e8:	008000c4 	movi	r2,3
 200d4ec:	38c00015 	stw	r3,0(r7)
 200d4f0:	39c00104 	addi	r7,r7,4
 200d4f4:	11bffb36 	bltu	r2,r6,200d4e4 <memset+0x7c>
 200d4f8:	3807883a 	mov	r3,r7
 200d4fc:	003fe006 	br	200d480 <memset+0x18>

0200d500 <_Bfree>:
 200d500:	28000826 	beq	r5,zero,200d524 <_Bfree+0x24>
 200d504:	28800117 	ldw	r2,4(r5)
 200d508:	21001317 	ldw	r4,76(r4)
 200d50c:	1085883a 	add	r2,r2,r2
 200d510:	1085883a 	add	r2,r2,r2
 200d514:	1105883a 	add	r2,r2,r4
 200d518:	10c00017 	ldw	r3,0(r2)
 200d51c:	28c00015 	stw	r3,0(r5)
 200d520:	11400015 	stw	r5,0(r2)
 200d524:	f800283a 	ret

0200d528 <__hi0bits>:
 200d528:	20bfffec 	andhi	r2,r4,65535
 200d52c:	10001426 	beq	r2,zero,200d580 <__hi0bits+0x58>
 200d530:	0007883a 	mov	r3,zero
 200d534:	20bfc02c 	andhi	r2,r4,65280
 200d538:	1000021e 	bne	r2,zero,200d544 <__hi0bits+0x1c>
 200d53c:	2008923a 	slli	r4,r4,8
 200d540:	18c00204 	addi	r3,r3,8
 200d544:	20bc002c 	andhi	r2,r4,61440
 200d548:	1000021e 	bne	r2,zero,200d554 <__hi0bits+0x2c>
 200d54c:	2008913a 	slli	r4,r4,4
 200d550:	18c00104 	addi	r3,r3,4
 200d554:	20b0002c 	andhi	r2,r4,49152
 200d558:	1000031e 	bne	r2,zero,200d568 <__hi0bits+0x40>
 200d55c:	2105883a 	add	r2,r4,r4
 200d560:	18c00084 	addi	r3,r3,2
 200d564:	1089883a 	add	r4,r2,r2
 200d568:	20000316 	blt	r4,zero,200d578 <__hi0bits+0x50>
 200d56c:	2090002c 	andhi	r2,r4,16384
 200d570:	10000626 	beq	r2,zero,200d58c <__hi0bits+0x64>
 200d574:	18c00044 	addi	r3,r3,1
 200d578:	1805883a 	mov	r2,r3
 200d57c:	f800283a 	ret
 200d580:	2008943a 	slli	r4,r4,16
 200d584:	00c00404 	movi	r3,16
 200d588:	003fea06 	br	200d534 <__hi0bits+0xc>
 200d58c:	00c00804 	movi	r3,32
 200d590:	1805883a 	mov	r2,r3
 200d594:	f800283a 	ret

0200d598 <__lo0bits>:
 200d598:	20c00017 	ldw	r3,0(r4)
 200d59c:	188001cc 	andi	r2,r3,7
 200d5a0:	10000a26 	beq	r2,zero,200d5cc <__lo0bits+0x34>
 200d5a4:	1880004c 	andi	r2,r3,1
 200d5a8:	1005003a 	cmpeq	r2,r2,zero
 200d5ac:	10002126 	beq	r2,zero,200d634 <__lo0bits+0x9c>
 200d5b0:	1880008c 	andi	r2,r3,2
 200d5b4:	1000251e 	bne	r2,zero,200d64c <__lo0bits+0xb4>
 200d5b8:	1804d0ba 	srli	r2,r3,2
 200d5bc:	01400084 	movi	r5,2
 200d5c0:	20800015 	stw	r2,0(r4)
 200d5c4:	2805883a 	mov	r2,r5
 200d5c8:	f800283a 	ret
 200d5cc:	18bfffcc 	andi	r2,r3,65535
 200d5d0:	10001526 	beq	r2,zero,200d628 <__lo0bits+0x90>
 200d5d4:	000b883a 	mov	r5,zero
 200d5d8:	18803fcc 	andi	r2,r3,255
 200d5dc:	1000021e 	bne	r2,zero,200d5e8 <__lo0bits+0x50>
 200d5e0:	1806d23a 	srli	r3,r3,8
 200d5e4:	29400204 	addi	r5,r5,8
 200d5e8:	188003cc 	andi	r2,r3,15
 200d5ec:	1000021e 	bne	r2,zero,200d5f8 <__lo0bits+0x60>
 200d5f0:	1806d13a 	srli	r3,r3,4
 200d5f4:	29400104 	addi	r5,r5,4
 200d5f8:	188000cc 	andi	r2,r3,3
 200d5fc:	1000021e 	bne	r2,zero,200d608 <__lo0bits+0x70>
 200d600:	1806d0ba 	srli	r3,r3,2
 200d604:	29400084 	addi	r5,r5,2
 200d608:	1880004c 	andi	r2,r3,1
 200d60c:	1000031e 	bne	r2,zero,200d61c <__lo0bits+0x84>
 200d610:	1806d07a 	srli	r3,r3,1
 200d614:	18000a26 	beq	r3,zero,200d640 <__lo0bits+0xa8>
 200d618:	29400044 	addi	r5,r5,1
 200d61c:	2805883a 	mov	r2,r5
 200d620:	20c00015 	stw	r3,0(r4)
 200d624:	f800283a 	ret
 200d628:	1806d43a 	srli	r3,r3,16
 200d62c:	01400404 	movi	r5,16
 200d630:	003fe906 	br	200d5d8 <__lo0bits+0x40>
 200d634:	000b883a 	mov	r5,zero
 200d638:	2805883a 	mov	r2,r5
 200d63c:	f800283a 	ret
 200d640:	01400804 	movi	r5,32
 200d644:	2805883a 	mov	r2,r5
 200d648:	f800283a 	ret
 200d64c:	1804d07a 	srli	r2,r3,1
 200d650:	01400044 	movi	r5,1
 200d654:	20800015 	stw	r2,0(r4)
 200d658:	003fda06 	br	200d5c4 <__lo0bits+0x2c>

0200d65c <__mcmp>:
 200d65c:	20800417 	ldw	r2,16(r4)
 200d660:	28c00417 	ldw	r3,16(r5)
 200d664:	10cfc83a 	sub	r7,r2,r3
 200d668:	38000c1e 	bne	r7,zero,200d69c <__mcmp+0x40>
 200d66c:	18c5883a 	add	r2,r3,r3
 200d670:	1085883a 	add	r2,r2,r2
 200d674:	10c00504 	addi	r3,r2,20
 200d678:	21000504 	addi	r4,r4,20
 200d67c:	28cb883a 	add	r5,r5,r3
 200d680:	2085883a 	add	r2,r4,r2
 200d684:	10bfff04 	addi	r2,r2,-4
 200d688:	297fff04 	addi	r5,r5,-4
 200d68c:	11800017 	ldw	r6,0(r2)
 200d690:	28c00017 	ldw	r3,0(r5)
 200d694:	30c0031e 	bne	r6,r3,200d6a4 <__mcmp+0x48>
 200d698:	20bffa36 	bltu	r4,r2,200d684 <__mcmp+0x28>
 200d69c:	3805883a 	mov	r2,r7
 200d6a0:	f800283a 	ret
 200d6a4:	30c00336 	bltu	r6,r3,200d6b4 <__mcmp+0x58>
 200d6a8:	01c00044 	movi	r7,1
 200d6ac:	3805883a 	mov	r2,r7
 200d6b0:	f800283a 	ret
 200d6b4:	01ffffc4 	movi	r7,-1
 200d6b8:	003ff806 	br	200d69c <__mcmp+0x40>

0200d6bc <__ulp>:
 200d6bc:	295ffc2c 	andhi	r5,r5,32752
 200d6c0:	013f3034 	movhi	r4,64704
 200d6c4:	290b883a 	add	r5,r5,r4
 200d6c8:	0145c83a 	sub	r2,zero,r5
 200d6cc:	1007d53a 	srai	r3,r2,20
 200d6d0:	000d883a 	mov	r6,zero
 200d6d4:	0140040e 	bge	zero,r5,200d6e8 <__ulp+0x2c>
 200d6d8:	280f883a 	mov	r7,r5
 200d6dc:	3807883a 	mov	r3,r7
 200d6e0:	3005883a 	mov	r2,r6
 200d6e4:	f800283a 	ret
 200d6e8:	008004c4 	movi	r2,19
 200d6ec:	193ffb04 	addi	r4,r3,-20
 200d6f0:	10c00c0e 	bge	r2,r3,200d724 <__ulp+0x68>
 200d6f4:	008007c4 	movi	r2,31
 200d6f8:	1107c83a 	sub	r3,r2,r4
 200d6fc:	00800784 	movi	r2,30
 200d700:	01400044 	movi	r5,1
 200d704:	11000216 	blt	r2,r4,200d710 <__ulp+0x54>
 200d708:	00800044 	movi	r2,1
 200d70c:	10ca983a 	sll	r5,r2,r3
 200d710:	000f883a 	mov	r7,zero
 200d714:	280d883a 	mov	r6,r5
 200d718:	3807883a 	mov	r3,r7
 200d71c:	3005883a 	mov	r2,r6
 200d720:	f800283a 	ret
 200d724:	00800234 	movhi	r2,8
 200d728:	10cfd83a 	sra	r7,r2,r3
 200d72c:	000d883a 	mov	r6,zero
 200d730:	3005883a 	mov	r2,r6
 200d734:	3807883a 	mov	r3,r7
 200d738:	f800283a 	ret

0200d73c <__b2d>:
 200d73c:	20800417 	ldw	r2,16(r4)
 200d740:	defff904 	addi	sp,sp,-28
 200d744:	dd000415 	stw	r20,16(sp)
 200d748:	1085883a 	add	r2,r2,r2
 200d74c:	25000504 	addi	r20,r4,20
 200d750:	1085883a 	add	r2,r2,r2
 200d754:	dc000015 	stw	r16,0(sp)
 200d758:	a0a1883a 	add	r16,r20,r2
 200d75c:	dd400515 	stw	r21,20(sp)
 200d760:	857fff17 	ldw	r21,-4(r16)
 200d764:	dc400115 	stw	r17,4(sp)
 200d768:	dfc00615 	stw	ra,24(sp)
 200d76c:	a809883a 	mov	r4,r21
 200d770:	2823883a 	mov	r17,r5
 200d774:	dcc00315 	stw	r19,12(sp)
 200d778:	dc800215 	stw	r18,8(sp)
 200d77c:	200d5280 	call	200d528 <__hi0bits>
 200d780:	100b883a 	mov	r5,r2
 200d784:	00800804 	movi	r2,32
 200d788:	1145c83a 	sub	r2,r2,r5
 200d78c:	88800015 	stw	r2,0(r17)
 200d790:	00800284 	movi	r2,10
 200d794:	80ffff04 	addi	r3,r16,-4
 200d798:	11401416 	blt	r2,r5,200d7ec <__b2d+0xb0>
 200d79c:	008002c4 	movi	r2,11
 200d7a0:	1149c83a 	sub	r4,r2,r5
 200d7a4:	a0c02736 	bltu	r20,r3,200d844 <__b2d+0x108>
 200d7a8:	000d883a 	mov	r6,zero
 200d7ac:	28800544 	addi	r2,r5,21
 200d7b0:	a906d83a 	srl	r3,r21,r4
 200d7b4:	a884983a 	sll	r2,r21,r2
 200d7b8:	1ccffc34 	orhi	r19,r3,16368
 200d7bc:	11a4b03a 	or	r18,r2,r6
 200d7c0:	9005883a 	mov	r2,r18
 200d7c4:	9807883a 	mov	r3,r19
 200d7c8:	dfc00617 	ldw	ra,24(sp)
 200d7cc:	dd400517 	ldw	r21,20(sp)
 200d7d0:	dd000417 	ldw	r20,16(sp)
 200d7d4:	dcc00317 	ldw	r19,12(sp)
 200d7d8:	dc800217 	ldw	r18,8(sp)
 200d7dc:	dc400117 	ldw	r17,4(sp)
 200d7e0:	dc000017 	ldw	r16,0(sp)
 200d7e4:	dec00704 	addi	sp,sp,28
 200d7e8:	f800283a 	ret
 200d7ec:	a0c00e36 	bltu	r20,r3,200d828 <__b2d+0xec>
 200d7f0:	293ffd44 	addi	r4,r5,-11
 200d7f4:	000d883a 	mov	r6,zero
 200d7f8:	20000f26 	beq	r4,zero,200d838 <__b2d+0xfc>
 200d7fc:	00800804 	movi	r2,32
 200d800:	110bc83a 	sub	r5,r2,r4
 200d804:	a0c01236 	bltu	r20,r3,200d850 <__b2d+0x114>
 200d808:	000f883a 	mov	r7,zero
 200d80c:	a904983a 	sll	r2,r21,r4
 200d810:	3146d83a 	srl	r3,r6,r5
 200d814:	3108983a 	sll	r4,r6,r4
 200d818:	108ffc34 	orhi	r2,r2,16368
 200d81c:	18a6b03a 	or	r19,r3,r2
 200d820:	3924b03a 	or	r18,r7,r4
 200d824:	003fe606 	br	200d7c0 <__b2d+0x84>
 200d828:	293ffd44 	addi	r4,r5,-11
 200d82c:	81bffe17 	ldw	r6,-8(r16)
 200d830:	80fffe04 	addi	r3,r16,-8
 200d834:	203ff11e 	bne	r4,zero,200d7fc <__b2d+0xc0>
 200d838:	accffc34 	orhi	r19,r21,16368
 200d83c:	3025883a 	mov	r18,r6
 200d840:	003fdf06 	br	200d7c0 <__b2d+0x84>
 200d844:	18bfff17 	ldw	r2,-4(r3)
 200d848:	110cd83a 	srl	r6,r2,r4
 200d84c:	003fd706 	br	200d7ac <__b2d+0x70>
 200d850:	18bfff17 	ldw	r2,-4(r3)
 200d854:	114ed83a 	srl	r7,r2,r5
 200d858:	003fec06 	br	200d80c <__b2d+0xd0>

0200d85c <__ratio>:
 200d85c:	defff904 	addi	sp,sp,-28
 200d860:	dc400215 	stw	r17,8(sp)
 200d864:	2823883a 	mov	r17,r5
 200d868:	d80b883a 	mov	r5,sp
 200d86c:	dfc00615 	stw	ra,24(sp)
 200d870:	dd000515 	stw	r20,20(sp)
 200d874:	dcc00415 	stw	r19,16(sp)
 200d878:	dc800315 	stw	r18,12(sp)
 200d87c:	2025883a 	mov	r18,r4
 200d880:	200d73c0 	call	200d73c <__b2d>
 200d884:	8809883a 	mov	r4,r17
 200d888:	d9400104 	addi	r5,sp,4
 200d88c:	1027883a 	mov	r19,r2
 200d890:	1829883a 	mov	r20,r3
 200d894:	200d73c0 	call	200d73c <__b2d>
 200d898:	89000417 	ldw	r4,16(r17)
 200d89c:	91c00417 	ldw	r7,16(r18)
 200d8a0:	d9800117 	ldw	r6,4(sp)
 200d8a4:	180b883a 	mov	r5,r3
 200d8a8:	390fc83a 	sub	r7,r7,r4
 200d8ac:	1009883a 	mov	r4,r2
 200d8b0:	d8800017 	ldw	r2,0(sp)
 200d8b4:	380e917a 	slli	r7,r7,5
 200d8b8:	2011883a 	mov	r8,r4
 200d8bc:	1185c83a 	sub	r2,r2,r6
 200d8c0:	11c5883a 	add	r2,r2,r7
 200d8c4:	1006953a 	slli	r3,r2,20
 200d8c8:	2813883a 	mov	r9,r5
 200d8cc:	00800d0e 	bge	zero,r2,200d904 <__ratio+0xa8>
 200d8d0:	1d29883a 	add	r20,r3,r20
 200d8d4:	a00b883a 	mov	r5,r20
 200d8d8:	480f883a 	mov	r7,r9
 200d8dc:	9809883a 	mov	r4,r19
 200d8e0:	400d883a 	mov	r6,r8
 200d8e4:	20053940 	call	2005394 <__divdf3>
 200d8e8:	dfc00617 	ldw	ra,24(sp)
 200d8ec:	dd000517 	ldw	r20,20(sp)
 200d8f0:	dcc00417 	ldw	r19,16(sp)
 200d8f4:	dc800317 	ldw	r18,12(sp)
 200d8f8:	dc400217 	ldw	r17,8(sp)
 200d8fc:	dec00704 	addi	sp,sp,28
 200d900:	f800283a 	ret
 200d904:	28d3c83a 	sub	r9,r5,r3
 200d908:	003ff206 	br	200d8d4 <__ratio+0x78>

0200d90c <_mprec_log10>:
 200d90c:	defffe04 	addi	sp,sp,-8
 200d910:	008005c4 	movi	r2,23
 200d914:	dc000015 	stw	r16,0(sp)
 200d918:	dfc00115 	stw	ra,4(sp)
 200d91c:	2021883a 	mov	r16,r4
 200d920:	11000c16 	blt	r2,r4,200d954 <_mprec_log10+0x48>
 200d924:	200490fa 	slli	r2,r4,3
 200d928:	00c080b4 	movhi	r3,514
 200d92c:	18c41d04 	addi	r3,r3,4212
 200d930:	10c5883a 	add	r2,r2,r3
 200d934:	12400117 	ldw	r9,4(r2)
 200d938:	12000017 	ldw	r8,0(r2)
 200d93c:	4807883a 	mov	r3,r9
 200d940:	4005883a 	mov	r2,r8
 200d944:	dfc00117 	ldw	ra,4(sp)
 200d948:	dc000017 	ldw	r16,0(sp)
 200d94c:	dec00204 	addi	sp,sp,8
 200d950:	f800283a 	ret
 200d954:	0011883a 	mov	r8,zero
 200d958:	024ffc34 	movhi	r9,16368
 200d95c:	0005883a 	mov	r2,zero
 200d960:	00d00934 	movhi	r3,16420
 200d964:	480b883a 	mov	r5,r9
 200d968:	4009883a 	mov	r4,r8
 200d96c:	180f883a 	mov	r7,r3
 200d970:	100d883a 	mov	r6,r2
 200d974:	2004fd00 	call	2004fd0 <__muldf3>
 200d978:	843fffc4 	addi	r16,r16,-1
 200d97c:	1011883a 	mov	r8,r2
 200d980:	1813883a 	mov	r9,r3
 200d984:	803ff51e 	bne	r16,zero,200d95c <_mprec_log10+0x50>
 200d988:	4005883a 	mov	r2,r8
 200d98c:	4807883a 	mov	r3,r9
 200d990:	dfc00117 	ldw	ra,4(sp)
 200d994:	dc000017 	ldw	r16,0(sp)
 200d998:	dec00204 	addi	sp,sp,8
 200d99c:	f800283a 	ret

0200d9a0 <__copybits>:
 200d9a0:	297fffc4 	addi	r5,r5,-1
 200d9a4:	30800417 	ldw	r2,16(r6)
 200d9a8:	280bd17a 	srai	r5,r5,5
 200d9ac:	31800504 	addi	r6,r6,20
 200d9b0:	1085883a 	add	r2,r2,r2
 200d9b4:	294b883a 	add	r5,r5,r5
 200d9b8:	294b883a 	add	r5,r5,r5
 200d9bc:	1085883a 	add	r2,r2,r2
 200d9c0:	290b883a 	add	r5,r5,r4
 200d9c4:	3087883a 	add	r3,r6,r2
 200d9c8:	29400104 	addi	r5,r5,4
 200d9cc:	30c0052e 	bgeu	r6,r3,200d9e4 <__copybits+0x44>
 200d9d0:	30800017 	ldw	r2,0(r6)
 200d9d4:	31800104 	addi	r6,r6,4
 200d9d8:	20800015 	stw	r2,0(r4)
 200d9dc:	21000104 	addi	r4,r4,4
 200d9e0:	30fffb36 	bltu	r6,r3,200d9d0 <__copybits+0x30>
 200d9e4:	2140032e 	bgeu	r4,r5,200d9f4 <__copybits+0x54>
 200d9e8:	20000015 	stw	zero,0(r4)
 200d9ec:	21000104 	addi	r4,r4,4
 200d9f0:	217ffd36 	bltu	r4,r5,200d9e8 <__copybits+0x48>
 200d9f4:	f800283a 	ret

0200d9f8 <__any_on>:
 200d9f8:	20800417 	ldw	r2,16(r4)
 200d9fc:	2807d17a 	srai	r3,r5,5
 200da00:	21000504 	addi	r4,r4,20
 200da04:	10c00d0e 	bge	r2,r3,200da3c <__any_on+0x44>
 200da08:	1085883a 	add	r2,r2,r2
 200da0c:	1085883a 	add	r2,r2,r2
 200da10:	208d883a 	add	r6,r4,r2
 200da14:	2180182e 	bgeu	r4,r6,200da78 <__any_on+0x80>
 200da18:	30bfff17 	ldw	r2,-4(r6)
 200da1c:	30ffff04 	addi	r3,r6,-4
 200da20:	1000041e 	bne	r2,zero,200da34 <__any_on+0x3c>
 200da24:	20c0142e 	bgeu	r4,r3,200da78 <__any_on+0x80>
 200da28:	18ffff04 	addi	r3,r3,-4
 200da2c:	18800017 	ldw	r2,0(r3)
 200da30:	103ffc26 	beq	r2,zero,200da24 <__any_on+0x2c>
 200da34:	00800044 	movi	r2,1
 200da38:	f800283a 	ret
 200da3c:	18800a0e 	bge	r3,r2,200da68 <__any_on+0x70>
 200da40:	294007cc 	andi	r5,r5,31
 200da44:	28000826 	beq	r5,zero,200da68 <__any_on+0x70>
 200da48:	18c5883a 	add	r2,r3,r3
 200da4c:	1085883a 	add	r2,r2,r2
 200da50:	208d883a 	add	r6,r4,r2
 200da54:	30c00017 	ldw	r3,0(r6)
 200da58:	1944d83a 	srl	r2,r3,r5
 200da5c:	1144983a 	sll	r2,r2,r5
 200da60:	18bff41e 	bne	r3,r2,200da34 <__any_on+0x3c>
 200da64:	003feb06 	br	200da14 <__any_on+0x1c>
 200da68:	18c5883a 	add	r2,r3,r3
 200da6c:	1085883a 	add	r2,r2,r2
 200da70:	208d883a 	add	r6,r4,r2
 200da74:	003fe706 	br	200da14 <__any_on+0x1c>
 200da78:	0005883a 	mov	r2,zero
 200da7c:	f800283a 	ret

0200da80 <_Balloc>:
 200da80:	20c01317 	ldw	r3,76(r4)
 200da84:	defffb04 	addi	sp,sp,-20
 200da88:	dcc00315 	stw	r19,12(sp)
 200da8c:	dc800215 	stw	r18,8(sp)
 200da90:	dfc00415 	stw	ra,16(sp)
 200da94:	2825883a 	mov	r18,r5
 200da98:	dc400115 	stw	r17,4(sp)
 200da9c:	dc000015 	stw	r16,0(sp)
 200daa0:	2027883a 	mov	r19,r4
 200daa4:	01800404 	movi	r6,16
 200daa8:	01400104 	movi	r5,4
 200daac:	18001726 	beq	r3,zero,200db0c <_Balloc+0x8c>
 200dab0:	01400044 	movi	r5,1
 200dab4:	9485883a 	add	r2,r18,r18
 200dab8:	2ca2983a 	sll	r17,r5,r18
 200dabc:	1085883a 	add	r2,r2,r2
 200dac0:	10c7883a 	add	r3,r2,r3
 200dac4:	1c000017 	ldw	r16,0(r3)
 200dac8:	8c4d883a 	add	r6,r17,r17
 200dacc:	318d883a 	add	r6,r6,r6
 200dad0:	9809883a 	mov	r4,r19
 200dad4:	31800504 	addi	r6,r6,20
 200dad8:	80001226 	beq	r16,zero,200db24 <_Balloc+0xa4>
 200dadc:	80800017 	ldw	r2,0(r16)
 200dae0:	18800015 	stw	r2,0(r3)
 200dae4:	80000415 	stw	zero,16(r16)
 200dae8:	80000315 	stw	zero,12(r16)
 200daec:	8005883a 	mov	r2,r16
 200daf0:	dfc00417 	ldw	ra,16(sp)
 200daf4:	dcc00317 	ldw	r19,12(sp)
 200daf8:	dc800217 	ldw	r18,8(sp)
 200dafc:	dc400117 	ldw	r17,4(sp)
 200db00:	dc000017 	ldw	r16,0(sp)
 200db04:	dec00504 	addi	sp,sp,20
 200db08:	f800283a 	ret
 200db0c:	20114e80 	call	20114e8 <_calloc_r>
 200db10:	1007883a 	mov	r3,r2
 200db14:	0021883a 	mov	r16,zero
 200db18:	98801315 	stw	r2,76(r19)
 200db1c:	103fe41e 	bne	r2,zero,200dab0 <_Balloc+0x30>
 200db20:	003ff206 	br	200daec <_Balloc+0x6c>
 200db24:	20114e80 	call	20114e8 <_calloc_r>
 200db28:	103ff026 	beq	r2,zero,200daec <_Balloc+0x6c>
 200db2c:	1021883a 	mov	r16,r2
 200db30:	14800115 	stw	r18,4(r2)
 200db34:	14400215 	stw	r17,8(r2)
 200db38:	003fea06 	br	200dae4 <_Balloc+0x64>

0200db3c <__d2b>:
 200db3c:	defff504 	addi	sp,sp,-44
 200db40:	dcc00515 	stw	r19,20(sp)
 200db44:	04c00044 	movi	r19,1
 200db48:	dc000215 	stw	r16,8(sp)
 200db4c:	2821883a 	mov	r16,r5
 200db50:	980b883a 	mov	r5,r19
 200db54:	ddc00915 	stw	r23,36(sp)
 200db58:	dd800815 	stw	r22,32(sp)
 200db5c:	dd400715 	stw	r21,28(sp)
 200db60:	dd000615 	stw	r20,24(sp)
 200db64:	dc800415 	stw	r18,16(sp)
 200db68:	dc400315 	stw	r17,12(sp)
 200db6c:	dfc00a15 	stw	ra,40(sp)
 200db70:	3023883a 	mov	r17,r6
 200db74:	382d883a 	mov	r22,r7
 200db78:	ddc00b17 	ldw	r23,44(sp)
 200db7c:	200da800 	call	200da80 <_Balloc>
 200db80:	1025883a 	mov	r18,r2
 200db84:	00a00034 	movhi	r2,32768
 200db88:	10bfffc4 	addi	r2,r2,-1
 200db8c:	8888703a 	and	r4,r17,r2
 200db90:	202ad53a 	srli	r21,r4,20
 200db94:	00800434 	movhi	r2,16
 200db98:	10bfffc4 	addi	r2,r2,-1
 200db9c:	8886703a 	and	r3,r17,r2
 200dba0:	a829003a 	cmpeq	r20,r21,zero
 200dba4:	800b883a 	mov	r5,r16
 200dba8:	d8c00115 	stw	r3,4(sp)
 200dbac:	94000504 	addi	r16,r18,20
 200dbb0:	a000021e 	bne	r20,zero,200dbbc <__d2b+0x80>
 200dbb4:	18c00434 	orhi	r3,r3,16
 200dbb8:	d8c00115 	stw	r3,4(sp)
 200dbbc:	28002726 	beq	r5,zero,200dc5c <__d2b+0x120>
 200dbc0:	d809883a 	mov	r4,sp
 200dbc4:	d9400015 	stw	r5,0(sp)
 200dbc8:	200d5980 	call	200d598 <__lo0bits>
 200dbcc:	100d883a 	mov	r6,r2
 200dbd0:	10003526 	beq	r2,zero,200dca8 <__d2b+0x16c>
 200dbd4:	d8c00117 	ldw	r3,4(sp)
 200dbd8:	00800804 	movi	r2,32
 200dbdc:	1185c83a 	sub	r2,r2,r6
 200dbe0:	d9000017 	ldw	r4,0(sp)
 200dbe4:	1886983a 	sll	r3,r3,r2
 200dbe8:	1906b03a 	or	r3,r3,r4
 200dbec:	90c00515 	stw	r3,20(r18)
 200dbf0:	d8c00117 	ldw	r3,4(sp)
 200dbf4:	1986d83a 	srl	r3,r3,r6
 200dbf8:	d8c00115 	stw	r3,4(sp)
 200dbfc:	180b003a 	cmpeq	r5,r3,zero
 200dc00:	00800084 	movi	r2,2
 200dc04:	114bc83a 	sub	r5,r2,r5
 200dc08:	80c00115 	stw	r3,4(r16)
 200dc0c:	91400415 	stw	r5,16(r18)
 200dc10:	a0001a1e 	bne	r20,zero,200dc7c <__d2b+0x140>
 200dc14:	3545883a 	add	r2,r6,r21
 200dc18:	10bef344 	addi	r2,r2,-1075
 200dc1c:	00c00d44 	movi	r3,53
 200dc20:	b0800015 	stw	r2,0(r22)
 200dc24:	1987c83a 	sub	r3,r3,r6
 200dc28:	b8c00015 	stw	r3,0(r23)
 200dc2c:	9005883a 	mov	r2,r18
 200dc30:	dfc00a17 	ldw	ra,40(sp)
 200dc34:	ddc00917 	ldw	r23,36(sp)
 200dc38:	dd800817 	ldw	r22,32(sp)
 200dc3c:	dd400717 	ldw	r21,28(sp)
 200dc40:	dd000617 	ldw	r20,24(sp)
 200dc44:	dcc00517 	ldw	r19,20(sp)
 200dc48:	dc800417 	ldw	r18,16(sp)
 200dc4c:	dc400317 	ldw	r17,12(sp)
 200dc50:	dc000217 	ldw	r16,8(sp)
 200dc54:	dec00b04 	addi	sp,sp,44
 200dc58:	f800283a 	ret
 200dc5c:	d9000104 	addi	r4,sp,4
 200dc60:	200d5980 	call	200d598 <__lo0bits>
 200dc64:	11800804 	addi	r6,r2,32
 200dc68:	d8800117 	ldw	r2,4(sp)
 200dc6c:	94c00415 	stw	r19,16(r18)
 200dc70:	980b883a 	mov	r5,r19
 200dc74:	90800515 	stw	r2,20(r18)
 200dc78:	a03fe626 	beq	r20,zero,200dc14 <__d2b+0xd8>
 200dc7c:	2945883a 	add	r2,r5,r5
 200dc80:	1085883a 	add	r2,r2,r2
 200dc84:	1405883a 	add	r2,r2,r16
 200dc88:	113fff17 	ldw	r4,-4(r2)
 200dc8c:	30fef384 	addi	r3,r6,-1074
 200dc90:	2820917a 	slli	r16,r5,5
 200dc94:	b0c00015 	stw	r3,0(r22)
 200dc98:	200d5280 	call	200d528 <__hi0bits>
 200dc9c:	80a1c83a 	sub	r16,r16,r2
 200dca0:	bc000015 	stw	r16,0(r23)
 200dca4:	003fe106 	br	200dc2c <__d2b+0xf0>
 200dca8:	d8800017 	ldw	r2,0(sp)
 200dcac:	90800515 	stw	r2,20(r18)
 200dcb0:	d8c00117 	ldw	r3,4(sp)
 200dcb4:	003fd106 	br	200dbfc <__d2b+0xc0>

0200dcb8 <__mdiff>:
 200dcb8:	defffb04 	addi	sp,sp,-20
 200dcbc:	dc000015 	stw	r16,0(sp)
 200dcc0:	2821883a 	mov	r16,r5
 200dcc4:	dc800215 	stw	r18,8(sp)
 200dcc8:	300b883a 	mov	r5,r6
 200dccc:	2025883a 	mov	r18,r4
 200dcd0:	8009883a 	mov	r4,r16
 200dcd4:	dc400115 	stw	r17,4(sp)
 200dcd8:	dfc00415 	stw	ra,16(sp)
 200dcdc:	dcc00315 	stw	r19,12(sp)
 200dce0:	3023883a 	mov	r17,r6
 200dce4:	200d65c0 	call	200d65c <__mcmp>
 200dce8:	10004226 	beq	r2,zero,200ddf4 <__mdiff+0x13c>
 200dcec:	10005016 	blt	r2,zero,200de30 <__mdiff+0x178>
 200dcf0:	0027883a 	mov	r19,zero
 200dcf4:	81400117 	ldw	r5,4(r16)
 200dcf8:	9009883a 	mov	r4,r18
 200dcfc:	200da800 	call	200da80 <_Balloc>
 200dd00:	1019883a 	mov	r12,r2
 200dd04:	82800417 	ldw	r10,16(r16)
 200dd08:	88800417 	ldw	r2,16(r17)
 200dd0c:	81800504 	addi	r6,r16,20
 200dd10:	5287883a 	add	r3,r10,r10
 200dd14:	1085883a 	add	r2,r2,r2
 200dd18:	18c7883a 	add	r3,r3,r3
 200dd1c:	1085883a 	add	r2,r2,r2
 200dd20:	8a000504 	addi	r8,r17,20
 200dd24:	64c00315 	stw	r19,12(r12)
 200dd28:	30db883a 	add	r13,r6,r3
 200dd2c:	4097883a 	add	r11,r8,r2
 200dd30:	61c00504 	addi	r7,r12,20
 200dd34:	0013883a 	mov	r9,zero
 200dd38:	31000017 	ldw	r4,0(r6)
 200dd3c:	41400017 	ldw	r5,0(r8)
 200dd40:	42000104 	addi	r8,r8,4
 200dd44:	20bfffcc 	andi	r2,r4,65535
 200dd48:	28ffffcc 	andi	r3,r5,65535
 200dd4c:	10c5c83a 	sub	r2,r2,r3
 200dd50:	1245883a 	add	r2,r2,r9
 200dd54:	2008d43a 	srli	r4,r4,16
 200dd58:	280ad43a 	srli	r5,r5,16
 200dd5c:	1007d43a 	srai	r3,r2,16
 200dd60:	3880000d 	sth	r2,0(r7)
 200dd64:	2149c83a 	sub	r4,r4,r5
 200dd68:	20c9883a 	add	r4,r4,r3
 200dd6c:	3900008d 	sth	r4,2(r7)
 200dd70:	31800104 	addi	r6,r6,4
 200dd74:	39c00104 	addi	r7,r7,4
 200dd78:	2013d43a 	srai	r9,r4,16
 200dd7c:	42ffee36 	bltu	r8,r11,200dd38 <__mdiff+0x80>
 200dd80:	33400c2e 	bgeu	r6,r13,200ddb4 <__mdiff+0xfc>
 200dd84:	30800017 	ldw	r2,0(r6)
 200dd88:	31800104 	addi	r6,r6,4
 200dd8c:	10ffffcc 	andi	r3,r2,65535
 200dd90:	1a47883a 	add	r3,r3,r9
 200dd94:	1004d43a 	srli	r2,r2,16
 200dd98:	1809d43a 	srai	r4,r3,16
 200dd9c:	38c0000d 	sth	r3,0(r7)
 200dda0:	1105883a 	add	r2,r2,r4
 200dda4:	3880008d 	sth	r2,2(r7)
 200dda8:	1013d43a 	srai	r9,r2,16
 200ddac:	39c00104 	addi	r7,r7,4
 200ddb0:	337ff436 	bltu	r6,r13,200dd84 <__mdiff+0xcc>
 200ddb4:	38bfff17 	ldw	r2,-4(r7)
 200ddb8:	38ffff04 	addi	r3,r7,-4
 200ddbc:	1000041e 	bne	r2,zero,200ddd0 <__mdiff+0x118>
 200ddc0:	18ffff04 	addi	r3,r3,-4
 200ddc4:	18800017 	ldw	r2,0(r3)
 200ddc8:	52bfffc4 	addi	r10,r10,-1
 200ddcc:	103ffc26 	beq	r2,zero,200ddc0 <__mdiff+0x108>
 200ddd0:	6005883a 	mov	r2,r12
 200ddd4:	62800415 	stw	r10,16(r12)
 200ddd8:	dfc00417 	ldw	ra,16(sp)
 200dddc:	dcc00317 	ldw	r19,12(sp)
 200dde0:	dc800217 	ldw	r18,8(sp)
 200dde4:	dc400117 	ldw	r17,4(sp)
 200dde8:	dc000017 	ldw	r16,0(sp)
 200ddec:	dec00504 	addi	sp,sp,20
 200ddf0:	f800283a 	ret
 200ddf4:	9009883a 	mov	r4,r18
 200ddf8:	000b883a 	mov	r5,zero
 200ddfc:	200da800 	call	200da80 <_Balloc>
 200de00:	1019883a 	mov	r12,r2
 200de04:	00800044 	movi	r2,1
 200de08:	60800415 	stw	r2,16(r12)
 200de0c:	6005883a 	mov	r2,r12
 200de10:	60000515 	stw	zero,20(r12)
 200de14:	dfc00417 	ldw	ra,16(sp)
 200de18:	dcc00317 	ldw	r19,12(sp)
 200de1c:	dc800217 	ldw	r18,8(sp)
 200de20:	dc400117 	ldw	r17,4(sp)
 200de24:	dc000017 	ldw	r16,0(sp)
 200de28:	dec00504 	addi	sp,sp,20
 200de2c:	f800283a 	ret
 200de30:	880d883a 	mov	r6,r17
 200de34:	04c00044 	movi	r19,1
 200de38:	8023883a 	mov	r17,r16
 200de3c:	3021883a 	mov	r16,r6
 200de40:	003fac06 	br	200dcf4 <__mdiff+0x3c>

0200de44 <__lshift>:
 200de44:	defff904 	addi	sp,sp,-28
 200de48:	28800417 	ldw	r2,16(r5)
 200de4c:	dc000015 	stw	r16,0(sp)
 200de50:	3021d17a 	srai	r16,r6,5
 200de54:	28c00217 	ldw	r3,8(r5)
 200de58:	10800044 	addi	r2,r2,1
 200de5c:	dc400115 	stw	r17,4(sp)
 200de60:	80a3883a 	add	r17,r16,r2
 200de64:	dd400515 	stw	r21,20(sp)
 200de68:	dd000415 	stw	r20,16(sp)
 200de6c:	dc800215 	stw	r18,8(sp)
 200de70:	dfc00615 	stw	ra,24(sp)
 200de74:	2825883a 	mov	r18,r5
 200de78:	dcc00315 	stw	r19,12(sp)
 200de7c:	3029883a 	mov	r20,r6
 200de80:	202b883a 	mov	r21,r4
 200de84:	29400117 	ldw	r5,4(r5)
 200de88:	1c40030e 	bge	r3,r17,200de98 <__lshift+0x54>
 200de8c:	18c7883a 	add	r3,r3,r3
 200de90:	29400044 	addi	r5,r5,1
 200de94:	1c7ffd16 	blt	r3,r17,200de8c <__lshift+0x48>
 200de98:	a809883a 	mov	r4,r21
 200de9c:	200da800 	call	200da80 <_Balloc>
 200dea0:	1027883a 	mov	r19,r2
 200dea4:	11400504 	addi	r5,r2,20
 200dea8:	0400090e 	bge	zero,r16,200ded0 <__lshift+0x8c>
 200deac:	2805883a 	mov	r2,r5
 200deb0:	0007883a 	mov	r3,zero
 200deb4:	18c00044 	addi	r3,r3,1
 200deb8:	10000015 	stw	zero,0(r2)
 200debc:	10800104 	addi	r2,r2,4
 200dec0:	80fffc1e 	bne	r16,r3,200deb4 <__lshift+0x70>
 200dec4:	8405883a 	add	r2,r16,r16
 200dec8:	1085883a 	add	r2,r2,r2
 200decc:	288b883a 	add	r5,r5,r2
 200ded0:	90800417 	ldw	r2,16(r18)
 200ded4:	91000504 	addi	r4,r18,20
 200ded8:	a18007cc 	andi	r6,r20,31
 200dedc:	1085883a 	add	r2,r2,r2
 200dee0:	1085883a 	add	r2,r2,r2
 200dee4:	208f883a 	add	r7,r4,r2
 200dee8:	30001e26 	beq	r6,zero,200df64 <__lshift+0x120>
 200deec:	00800804 	movi	r2,32
 200def0:	1191c83a 	sub	r8,r2,r6
 200def4:	0007883a 	mov	r3,zero
 200def8:	20800017 	ldw	r2,0(r4)
 200defc:	1184983a 	sll	r2,r2,r6
 200df00:	1884b03a 	or	r2,r3,r2
 200df04:	28800015 	stw	r2,0(r5)
 200df08:	20c00017 	ldw	r3,0(r4)
 200df0c:	21000104 	addi	r4,r4,4
 200df10:	29400104 	addi	r5,r5,4
 200df14:	1a06d83a 	srl	r3,r3,r8
 200df18:	21fff736 	bltu	r4,r7,200def8 <__lshift+0xb4>
 200df1c:	28c00015 	stw	r3,0(r5)
 200df20:	18000126 	beq	r3,zero,200df28 <__lshift+0xe4>
 200df24:	8c400044 	addi	r17,r17,1
 200df28:	88bfffc4 	addi	r2,r17,-1
 200df2c:	98800415 	stw	r2,16(r19)
 200df30:	a809883a 	mov	r4,r21
 200df34:	900b883a 	mov	r5,r18
 200df38:	200d5000 	call	200d500 <_Bfree>
 200df3c:	9805883a 	mov	r2,r19
 200df40:	dfc00617 	ldw	ra,24(sp)
 200df44:	dd400517 	ldw	r21,20(sp)
 200df48:	dd000417 	ldw	r20,16(sp)
 200df4c:	dcc00317 	ldw	r19,12(sp)
 200df50:	dc800217 	ldw	r18,8(sp)
 200df54:	dc400117 	ldw	r17,4(sp)
 200df58:	dc000017 	ldw	r16,0(sp)
 200df5c:	dec00704 	addi	sp,sp,28
 200df60:	f800283a 	ret
 200df64:	20800017 	ldw	r2,0(r4)
 200df68:	21000104 	addi	r4,r4,4
 200df6c:	28800015 	stw	r2,0(r5)
 200df70:	29400104 	addi	r5,r5,4
 200df74:	21ffec2e 	bgeu	r4,r7,200df28 <__lshift+0xe4>
 200df78:	20800017 	ldw	r2,0(r4)
 200df7c:	21000104 	addi	r4,r4,4
 200df80:	28800015 	stw	r2,0(r5)
 200df84:	29400104 	addi	r5,r5,4
 200df88:	21fff636 	bltu	r4,r7,200df64 <__lshift+0x120>
 200df8c:	003fe606 	br	200df28 <__lshift+0xe4>

0200df90 <__multiply>:
 200df90:	defff904 	addi	sp,sp,-28
 200df94:	dcc00315 	stw	r19,12(sp)
 200df98:	dc800215 	stw	r18,8(sp)
 200df9c:	2cc00417 	ldw	r19,16(r5)
 200dfa0:	34800417 	ldw	r18,16(r6)
 200dfa4:	dd000415 	stw	r20,16(sp)
 200dfa8:	dc400115 	stw	r17,4(sp)
 200dfac:	dfc00615 	stw	ra,24(sp)
 200dfb0:	dd400515 	stw	r21,20(sp)
 200dfb4:	dc000015 	stw	r16,0(sp)
 200dfb8:	2823883a 	mov	r17,r5
 200dfbc:	3029883a 	mov	r20,r6
 200dfc0:	9c80040e 	bge	r19,r18,200dfd4 <__multiply+0x44>
 200dfc4:	9027883a 	mov	r19,r18
 200dfc8:	2c800417 	ldw	r18,16(r5)
 200dfcc:	2829883a 	mov	r20,r5
 200dfd0:	3023883a 	mov	r17,r6
 200dfd4:	88800217 	ldw	r2,8(r17)
 200dfd8:	9ca1883a 	add	r16,r19,r18
 200dfdc:	89400117 	ldw	r5,4(r17)
 200dfe0:	1400010e 	bge	r2,r16,200dfe8 <__multiply+0x58>
 200dfe4:	29400044 	addi	r5,r5,1
 200dfe8:	200da800 	call	200da80 <_Balloc>
 200dfec:	102b883a 	mov	r21,r2
 200dff0:	8405883a 	add	r2,r16,r16
 200dff4:	1085883a 	add	r2,r2,r2
 200dff8:	a9000504 	addi	r4,r21,20
 200dffc:	209d883a 	add	r14,r4,r2
 200e000:	2380042e 	bgeu	r4,r14,200e014 <__multiply+0x84>
 200e004:	2005883a 	mov	r2,r4
 200e008:	10000015 	stw	zero,0(r2)
 200e00c:	10800104 	addi	r2,r2,4
 200e010:	13bffd36 	bltu	r2,r14,200e008 <__multiply+0x78>
 200e014:	9485883a 	add	r2,r18,r18
 200e018:	9cc7883a 	add	r3,r19,r19
 200e01c:	a1800504 	addi	r6,r20,20
 200e020:	1085883a 	add	r2,r2,r2
 200e024:	8b400504 	addi	r13,r17,20
 200e028:	18c7883a 	add	r3,r3,r3
 200e02c:	309f883a 	add	r15,r6,r2
 200e030:	68d7883a 	add	r11,r13,r3
 200e034:	33c03b2e 	bgeu	r6,r15,200e124 <__multiply+0x194>
 200e038:	2019883a 	mov	r12,r4
 200e03c:	30800017 	ldw	r2,0(r6)
 200e040:	127fffcc 	andi	r9,r2,65535
 200e044:	48001826 	beq	r9,zero,200e0a8 <__multiply+0x118>
 200e048:	6811883a 	mov	r8,r13
 200e04c:	600f883a 	mov	r7,r12
 200e050:	0015883a 	mov	r10,zero
 200e054:	40c00017 	ldw	r3,0(r8)
 200e058:	39400017 	ldw	r5,0(r7)
 200e05c:	42000104 	addi	r8,r8,4
 200e060:	193fffcc 	andi	r4,r3,65535
 200e064:	4909383a 	mul	r4,r9,r4
 200e068:	1806d43a 	srli	r3,r3,16
 200e06c:	28bfffcc 	andi	r2,r5,65535
 200e070:	5085883a 	add	r2,r10,r2
 200e074:	2089883a 	add	r4,r4,r2
 200e078:	48c7383a 	mul	r3,r9,r3
 200e07c:	280ad43a 	srli	r5,r5,16
 200e080:	2004d43a 	srli	r2,r4,16
 200e084:	3900000d 	sth	r4,0(r7)
 200e088:	1947883a 	add	r3,r3,r5
 200e08c:	10c5883a 	add	r2,r2,r3
 200e090:	3880008d 	sth	r2,2(r7)
 200e094:	1014d43a 	srli	r10,r2,16
 200e098:	39c00104 	addi	r7,r7,4
 200e09c:	42ffed36 	bltu	r8,r11,200e054 <__multiply+0xc4>
 200e0a0:	3a800015 	stw	r10,0(r7)
 200e0a4:	30800017 	ldw	r2,0(r6)
 200e0a8:	1012d43a 	srli	r9,r2,16
 200e0ac:	48001926 	beq	r9,zero,200e114 <__multiply+0x184>
 200e0b0:	60800017 	ldw	r2,0(r12)
 200e0b4:	6811883a 	mov	r8,r13
 200e0b8:	600f883a 	mov	r7,r12
 200e0bc:	0015883a 	mov	r10,zero
 200e0c0:	100b883a 	mov	r5,r2
 200e0c4:	41000017 	ldw	r4,0(r8)
 200e0c8:	2806d43a 	srli	r3,r5,16
 200e0cc:	3880000d 	sth	r2,0(r7)
 200e0d0:	20bfffcc 	andi	r2,r4,65535
 200e0d4:	4885383a 	mul	r2,r9,r2
 200e0d8:	50c7883a 	add	r3,r10,r3
 200e0dc:	2008d43a 	srli	r4,r4,16
 200e0e0:	10c5883a 	add	r2,r2,r3
 200e0e4:	3880008d 	sth	r2,2(r7)
 200e0e8:	39c00104 	addi	r7,r7,4
 200e0ec:	39400017 	ldw	r5,0(r7)
 200e0f0:	4909383a 	mul	r4,r9,r4
 200e0f4:	1004d43a 	srli	r2,r2,16
 200e0f8:	28ffffcc 	andi	r3,r5,65535
 200e0fc:	20c9883a 	add	r4,r4,r3
 200e100:	1105883a 	add	r2,r2,r4
 200e104:	42000104 	addi	r8,r8,4
 200e108:	1014d43a 	srli	r10,r2,16
 200e10c:	42ffed36 	bltu	r8,r11,200e0c4 <__multiply+0x134>
 200e110:	38800015 	stw	r2,0(r7)
 200e114:	31800104 	addi	r6,r6,4
 200e118:	33c0022e 	bgeu	r6,r15,200e124 <__multiply+0x194>
 200e11c:	63000104 	addi	r12,r12,4
 200e120:	003fc606 	br	200e03c <__multiply+0xac>
 200e124:	0400090e 	bge	zero,r16,200e14c <__multiply+0x1bc>
 200e128:	70bfff17 	ldw	r2,-4(r14)
 200e12c:	70ffff04 	addi	r3,r14,-4
 200e130:	10000326 	beq	r2,zero,200e140 <__multiply+0x1b0>
 200e134:	00000506 	br	200e14c <__multiply+0x1bc>
 200e138:	18800017 	ldw	r2,0(r3)
 200e13c:	1000031e 	bne	r2,zero,200e14c <__multiply+0x1bc>
 200e140:	843fffc4 	addi	r16,r16,-1
 200e144:	18ffff04 	addi	r3,r3,-4
 200e148:	803ffb1e 	bne	r16,zero,200e138 <__multiply+0x1a8>
 200e14c:	a805883a 	mov	r2,r21
 200e150:	ac000415 	stw	r16,16(r21)
 200e154:	dfc00617 	ldw	ra,24(sp)
 200e158:	dd400517 	ldw	r21,20(sp)
 200e15c:	dd000417 	ldw	r20,16(sp)
 200e160:	dcc00317 	ldw	r19,12(sp)
 200e164:	dc800217 	ldw	r18,8(sp)
 200e168:	dc400117 	ldw	r17,4(sp)
 200e16c:	dc000017 	ldw	r16,0(sp)
 200e170:	dec00704 	addi	sp,sp,28
 200e174:	f800283a 	ret

0200e178 <__i2b>:
 200e178:	defffd04 	addi	sp,sp,-12
 200e17c:	dc000015 	stw	r16,0(sp)
 200e180:	04000044 	movi	r16,1
 200e184:	dc800115 	stw	r18,4(sp)
 200e188:	2825883a 	mov	r18,r5
 200e18c:	800b883a 	mov	r5,r16
 200e190:	dfc00215 	stw	ra,8(sp)
 200e194:	200da800 	call	200da80 <_Balloc>
 200e198:	14000415 	stw	r16,16(r2)
 200e19c:	14800515 	stw	r18,20(r2)
 200e1a0:	dfc00217 	ldw	ra,8(sp)
 200e1a4:	dc800117 	ldw	r18,4(sp)
 200e1a8:	dc000017 	ldw	r16,0(sp)
 200e1ac:	dec00304 	addi	sp,sp,12
 200e1b0:	f800283a 	ret

0200e1b4 <__multadd>:
 200e1b4:	defffa04 	addi	sp,sp,-24
 200e1b8:	dc800215 	stw	r18,8(sp)
 200e1bc:	2c800417 	ldw	r18,16(r5)
 200e1c0:	dd000415 	stw	r20,16(sp)
 200e1c4:	dcc00315 	stw	r19,12(sp)
 200e1c8:	dc000015 	stw	r16,0(sp)
 200e1cc:	dfc00515 	stw	ra,20(sp)
 200e1d0:	3821883a 	mov	r16,r7
 200e1d4:	dc400115 	stw	r17,4(sp)
 200e1d8:	2827883a 	mov	r19,r5
 200e1dc:	2029883a 	mov	r20,r4
 200e1e0:	2a000504 	addi	r8,r5,20
 200e1e4:	000f883a 	mov	r7,zero
 200e1e8:	40800017 	ldw	r2,0(r8)
 200e1ec:	39c00044 	addi	r7,r7,1
 200e1f0:	10ffffcc 	andi	r3,r2,65535
 200e1f4:	1987383a 	mul	r3,r3,r6
 200e1f8:	1004d43a 	srli	r2,r2,16
 200e1fc:	1c07883a 	add	r3,r3,r16
 200e200:	180ad43a 	srli	r5,r3,16
 200e204:	1185383a 	mul	r2,r2,r6
 200e208:	18ffffcc 	andi	r3,r3,65535
 200e20c:	1145883a 	add	r2,r2,r5
 200e210:	1008943a 	slli	r4,r2,16
 200e214:	1020d43a 	srli	r16,r2,16
 200e218:	20c9883a 	add	r4,r4,r3
 200e21c:	41000015 	stw	r4,0(r8)
 200e220:	42000104 	addi	r8,r8,4
 200e224:	3cbff016 	blt	r7,r18,200e1e8 <__multadd+0x34>
 200e228:	80000826 	beq	r16,zero,200e24c <__multadd+0x98>
 200e22c:	98800217 	ldw	r2,8(r19)
 200e230:	90800f0e 	bge	r18,r2,200e270 <__multadd+0xbc>
 200e234:	9485883a 	add	r2,r18,r18
 200e238:	1085883a 	add	r2,r2,r2
 200e23c:	14c5883a 	add	r2,r2,r19
 200e240:	90c00044 	addi	r3,r18,1
 200e244:	14000515 	stw	r16,20(r2)
 200e248:	98c00415 	stw	r3,16(r19)
 200e24c:	9805883a 	mov	r2,r19
 200e250:	dfc00517 	ldw	ra,20(sp)
 200e254:	dd000417 	ldw	r20,16(sp)
 200e258:	dcc00317 	ldw	r19,12(sp)
 200e25c:	dc800217 	ldw	r18,8(sp)
 200e260:	dc400117 	ldw	r17,4(sp)
 200e264:	dc000017 	ldw	r16,0(sp)
 200e268:	dec00604 	addi	sp,sp,24
 200e26c:	f800283a 	ret
 200e270:	99400117 	ldw	r5,4(r19)
 200e274:	a009883a 	mov	r4,r20
 200e278:	29400044 	addi	r5,r5,1
 200e27c:	200da800 	call	200da80 <_Balloc>
 200e280:	99800417 	ldw	r6,16(r19)
 200e284:	99400304 	addi	r5,r19,12
 200e288:	11000304 	addi	r4,r2,12
 200e28c:	318d883a 	add	r6,r6,r6
 200e290:	318d883a 	add	r6,r6,r6
 200e294:	31800204 	addi	r6,r6,8
 200e298:	1023883a 	mov	r17,r2
 200e29c:	200d2e80 	call	200d2e8 <memcpy>
 200e2a0:	980b883a 	mov	r5,r19
 200e2a4:	a009883a 	mov	r4,r20
 200e2a8:	200d5000 	call	200d500 <_Bfree>
 200e2ac:	8827883a 	mov	r19,r17
 200e2b0:	003fe006 	br	200e234 <__multadd+0x80>

0200e2b4 <__pow5mult>:
 200e2b4:	defffa04 	addi	sp,sp,-24
 200e2b8:	308000cc 	andi	r2,r6,3
 200e2bc:	dd000415 	stw	r20,16(sp)
 200e2c0:	dcc00315 	stw	r19,12(sp)
 200e2c4:	dc000015 	stw	r16,0(sp)
 200e2c8:	dfc00515 	stw	ra,20(sp)
 200e2cc:	dc800215 	stw	r18,8(sp)
 200e2d0:	dc400115 	stw	r17,4(sp)
 200e2d4:	3021883a 	mov	r16,r6
 200e2d8:	2027883a 	mov	r19,r4
 200e2dc:	2829883a 	mov	r20,r5
 200e2e0:	10002b1e 	bne	r2,zero,200e390 <__pow5mult+0xdc>
 200e2e4:	8025d0ba 	srai	r18,r16,2
 200e2e8:	90001b26 	beq	r18,zero,200e358 <__pow5mult+0xa4>
 200e2ec:	9c001217 	ldw	r16,72(r19)
 200e2f0:	8000081e 	bne	r16,zero,200e314 <__pow5mult+0x60>
 200e2f4:	00003006 	br	200e3b8 <__pow5mult+0x104>
 200e2f8:	800b883a 	mov	r5,r16
 200e2fc:	800d883a 	mov	r6,r16
 200e300:	9809883a 	mov	r4,r19
 200e304:	90001426 	beq	r18,zero,200e358 <__pow5mult+0xa4>
 200e308:	80800017 	ldw	r2,0(r16)
 200e30c:	10001b26 	beq	r2,zero,200e37c <__pow5mult+0xc8>
 200e310:	1021883a 	mov	r16,r2
 200e314:	9080004c 	andi	r2,r18,1
 200e318:	1005003a 	cmpeq	r2,r2,zero
 200e31c:	9025d07a 	srai	r18,r18,1
 200e320:	800d883a 	mov	r6,r16
 200e324:	9809883a 	mov	r4,r19
 200e328:	a00b883a 	mov	r5,r20
 200e32c:	103ff21e 	bne	r2,zero,200e2f8 <__pow5mult+0x44>
 200e330:	200df900 	call	200df90 <__multiply>
 200e334:	a00b883a 	mov	r5,r20
 200e338:	9809883a 	mov	r4,r19
 200e33c:	1023883a 	mov	r17,r2
 200e340:	200d5000 	call	200d500 <_Bfree>
 200e344:	8829883a 	mov	r20,r17
 200e348:	800b883a 	mov	r5,r16
 200e34c:	800d883a 	mov	r6,r16
 200e350:	9809883a 	mov	r4,r19
 200e354:	903fec1e 	bne	r18,zero,200e308 <__pow5mult+0x54>
 200e358:	a005883a 	mov	r2,r20
 200e35c:	dfc00517 	ldw	ra,20(sp)
 200e360:	dd000417 	ldw	r20,16(sp)
 200e364:	dcc00317 	ldw	r19,12(sp)
 200e368:	dc800217 	ldw	r18,8(sp)
 200e36c:	dc400117 	ldw	r17,4(sp)
 200e370:	dc000017 	ldw	r16,0(sp)
 200e374:	dec00604 	addi	sp,sp,24
 200e378:	f800283a 	ret
 200e37c:	200df900 	call	200df90 <__multiply>
 200e380:	80800015 	stw	r2,0(r16)
 200e384:	1021883a 	mov	r16,r2
 200e388:	10000015 	stw	zero,0(r2)
 200e38c:	003fe106 	br	200e314 <__pow5mult+0x60>
 200e390:	1085883a 	add	r2,r2,r2
 200e394:	00c080b4 	movhi	r3,514
 200e398:	18c46304 	addi	r3,r3,4492
 200e39c:	1085883a 	add	r2,r2,r2
 200e3a0:	10c5883a 	add	r2,r2,r3
 200e3a4:	11bfff17 	ldw	r6,-4(r2)
 200e3a8:	000f883a 	mov	r7,zero
 200e3ac:	200e1b40 	call	200e1b4 <__multadd>
 200e3b0:	1029883a 	mov	r20,r2
 200e3b4:	003fcb06 	br	200e2e4 <__pow5mult+0x30>
 200e3b8:	9809883a 	mov	r4,r19
 200e3bc:	01409c44 	movi	r5,625
 200e3c0:	200e1780 	call	200e178 <__i2b>
 200e3c4:	98801215 	stw	r2,72(r19)
 200e3c8:	1021883a 	mov	r16,r2
 200e3cc:	10000015 	stw	zero,0(r2)
 200e3d0:	003fd006 	br	200e314 <__pow5mult+0x60>

0200e3d4 <__s2b>:
 200e3d4:	defff904 	addi	sp,sp,-28
 200e3d8:	dcc00315 	stw	r19,12(sp)
 200e3dc:	dc800215 	stw	r18,8(sp)
 200e3e0:	2827883a 	mov	r19,r5
 200e3e4:	2025883a 	mov	r18,r4
 200e3e8:	01400244 	movi	r5,9
 200e3ec:	39000204 	addi	r4,r7,8
 200e3f0:	dd000415 	stw	r20,16(sp)
 200e3f4:	dc400115 	stw	r17,4(sp)
 200e3f8:	dfc00615 	stw	ra,24(sp)
 200e3fc:	dd400515 	stw	r21,20(sp)
 200e400:	dc000015 	stw	r16,0(sp)
 200e404:	3829883a 	mov	r20,r7
 200e408:	3023883a 	mov	r17,r6
 200e40c:	20059f40 	call	20059f4 <__divsi3>
 200e410:	00c00044 	movi	r3,1
 200e414:	1880350e 	bge	r3,r2,200e4ec <__s2b+0x118>
 200e418:	000b883a 	mov	r5,zero
 200e41c:	18c7883a 	add	r3,r3,r3
 200e420:	29400044 	addi	r5,r5,1
 200e424:	18bffd16 	blt	r3,r2,200e41c <__s2b+0x48>
 200e428:	9009883a 	mov	r4,r18
 200e42c:	200da800 	call	200da80 <_Balloc>
 200e430:	1011883a 	mov	r8,r2
 200e434:	d8800717 	ldw	r2,28(sp)
 200e438:	00c00044 	movi	r3,1
 200e43c:	01800244 	movi	r6,9
 200e440:	40800515 	stw	r2,20(r8)
 200e444:	40c00415 	stw	r3,16(r8)
 200e448:	3440260e 	bge	r6,r17,200e4e4 <__s2b+0x110>
 200e44c:	3021883a 	mov	r16,r6
 200e450:	99ab883a 	add	r21,r19,r6
 200e454:	9c05883a 	add	r2,r19,r16
 200e458:	11c00007 	ldb	r7,0(r2)
 200e45c:	400b883a 	mov	r5,r8
 200e460:	9009883a 	mov	r4,r18
 200e464:	39fff404 	addi	r7,r7,-48
 200e468:	01800284 	movi	r6,10
 200e46c:	200e1b40 	call	200e1b4 <__multadd>
 200e470:	84000044 	addi	r16,r16,1
 200e474:	1011883a 	mov	r8,r2
 200e478:	8c3ff61e 	bne	r17,r16,200e454 <__s2b+0x80>
 200e47c:	ac45883a 	add	r2,r21,r17
 200e480:	117ffe04 	addi	r5,r2,-8
 200e484:	880d883a 	mov	r6,r17
 200e488:	35000c0e 	bge	r6,r20,200e4bc <__s2b+0xe8>
 200e48c:	a185c83a 	sub	r2,r20,r6
 200e490:	2821883a 	mov	r16,r5
 200e494:	28a3883a 	add	r17,r5,r2
 200e498:	81c00007 	ldb	r7,0(r16)
 200e49c:	400b883a 	mov	r5,r8
 200e4a0:	9009883a 	mov	r4,r18
 200e4a4:	39fff404 	addi	r7,r7,-48
 200e4a8:	01800284 	movi	r6,10
 200e4ac:	200e1b40 	call	200e1b4 <__multadd>
 200e4b0:	84000044 	addi	r16,r16,1
 200e4b4:	1011883a 	mov	r8,r2
 200e4b8:	847ff71e 	bne	r16,r17,200e498 <__s2b+0xc4>
 200e4bc:	4005883a 	mov	r2,r8
 200e4c0:	dfc00617 	ldw	ra,24(sp)
 200e4c4:	dd400517 	ldw	r21,20(sp)
 200e4c8:	dd000417 	ldw	r20,16(sp)
 200e4cc:	dcc00317 	ldw	r19,12(sp)
 200e4d0:	dc800217 	ldw	r18,8(sp)
 200e4d4:	dc400117 	ldw	r17,4(sp)
 200e4d8:	dc000017 	ldw	r16,0(sp)
 200e4dc:	dec00704 	addi	sp,sp,28
 200e4e0:	f800283a 	ret
 200e4e4:	99400284 	addi	r5,r19,10
 200e4e8:	003fe706 	br	200e488 <__s2b+0xb4>
 200e4ec:	000b883a 	mov	r5,zero
 200e4f0:	003fcd06 	br	200e428 <__s2b+0x54>

0200e4f4 <_realloc_r>:
 200e4f4:	defff404 	addi	sp,sp,-48
 200e4f8:	dd800815 	stw	r22,32(sp)
 200e4fc:	dc800415 	stw	r18,16(sp)
 200e500:	dc400315 	stw	r17,12(sp)
 200e504:	dfc00b15 	stw	ra,44(sp)
 200e508:	df000a15 	stw	fp,40(sp)
 200e50c:	ddc00915 	stw	r23,36(sp)
 200e510:	dd400715 	stw	r21,28(sp)
 200e514:	dd000615 	stw	r20,24(sp)
 200e518:	dcc00515 	stw	r19,20(sp)
 200e51c:	dc000215 	stw	r16,8(sp)
 200e520:	2825883a 	mov	r18,r5
 200e524:	3023883a 	mov	r17,r6
 200e528:	202d883a 	mov	r22,r4
 200e52c:	2800c926 	beq	r5,zero,200e854 <_realloc_r+0x360>
 200e530:	20148900 	call	2014890 <__malloc_lock>
 200e534:	943ffe04 	addi	r16,r18,-8
 200e538:	88c002c4 	addi	r3,r17,11
 200e53c:	00800584 	movi	r2,22
 200e540:	82000117 	ldw	r8,4(r16)
 200e544:	10c01b2e 	bgeu	r2,r3,200e5b4 <_realloc_r+0xc0>
 200e548:	00bffe04 	movi	r2,-8
 200e54c:	188e703a 	and	r7,r3,r2
 200e550:	3839883a 	mov	fp,r7
 200e554:	38001a16 	blt	r7,zero,200e5c0 <_realloc_r+0xcc>
 200e558:	e4401936 	bltu	fp,r17,200e5c0 <_realloc_r+0xcc>
 200e55c:	013fff04 	movi	r4,-4
 200e560:	4126703a 	and	r19,r8,r4
 200e564:	99c02616 	blt	r19,r7,200e600 <_realloc_r+0x10c>
 200e568:	802b883a 	mov	r21,r16
 200e56c:	9829883a 	mov	r20,r19
 200e570:	84000204 	addi	r16,r16,8
 200e574:	a80f883a 	mov	r7,r21
 200e578:	a70dc83a 	sub	r6,r20,fp
 200e57c:	008003c4 	movi	r2,15
 200e580:	1180c136 	bltu	r2,r6,200e888 <_realloc_r+0x394>
 200e584:	38800117 	ldw	r2,4(r7)
 200e588:	a549883a 	add	r4,r20,r21
 200e58c:	1080004c 	andi	r2,r2,1
 200e590:	a084b03a 	or	r2,r20,r2
 200e594:	38800115 	stw	r2,4(r7)
 200e598:	20c00117 	ldw	r3,4(r4)
 200e59c:	18c00054 	ori	r3,r3,1
 200e5a0:	20c00115 	stw	r3,4(r4)
 200e5a4:	b009883a 	mov	r4,r22
 200e5a8:	20149980 	call	2014998 <__malloc_unlock>
 200e5ac:	8023883a 	mov	r17,r16
 200e5b0:	00000606 	br	200e5cc <_realloc_r+0xd8>
 200e5b4:	01c00404 	movi	r7,16
 200e5b8:	3839883a 	mov	fp,r7
 200e5bc:	e47fe72e 	bgeu	fp,r17,200e55c <_realloc_r+0x68>
 200e5c0:	00800304 	movi	r2,12
 200e5c4:	0023883a 	mov	r17,zero
 200e5c8:	b0800015 	stw	r2,0(r22)
 200e5cc:	8805883a 	mov	r2,r17
 200e5d0:	dfc00b17 	ldw	ra,44(sp)
 200e5d4:	df000a17 	ldw	fp,40(sp)
 200e5d8:	ddc00917 	ldw	r23,36(sp)
 200e5dc:	dd800817 	ldw	r22,32(sp)
 200e5e0:	dd400717 	ldw	r21,28(sp)
 200e5e4:	dd000617 	ldw	r20,24(sp)
 200e5e8:	dcc00517 	ldw	r19,20(sp)
 200e5ec:	dc800417 	ldw	r18,16(sp)
 200e5f0:	dc400317 	ldw	r17,12(sp)
 200e5f4:	dc000217 	ldw	r16,8(sp)
 200e5f8:	dec00c04 	addi	sp,sp,48
 200e5fc:	f800283a 	ret
 200e600:	008080b4 	movhi	r2,514
 200e604:	10865004 	addi	r2,r2,6464
 200e608:	12400217 	ldw	r9,8(r2)
 200e60c:	84cd883a 	add	r6,r16,r19
 200e610:	802b883a 	mov	r21,r16
 200e614:	3240b926 	beq	r6,r9,200e8fc <_realloc_r+0x408>
 200e618:	31400117 	ldw	r5,4(r6)
 200e61c:	00bfff84 	movi	r2,-2
 200e620:	2884703a 	and	r2,r5,r2
 200e624:	1185883a 	add	r2,r2,r6
 200e628:	10c00117 	ldw	r3,4(r2)
 200e62c:	18c0004c 	andi	r3,r3,1
 200e630:	1807003a 	cmpeq	r3,r3,zero
 200e634:	1800a326 	beq	r3,zero,200e8c4 <_realloc_r+0x3d0>
 200e638:	2908703a 	and	r4,r5,r4
 200e63c:	9929883a 	add	r20,r19,r4
 200e640:	a1c0a30e 	bge	r20,r7,200e8d0 <_realloc_r+0x3dc>
 200e644:	4080004c 	andi	r2,r8,1
 200e648:	1000551e 	bne	r2,zero,200e7a0 <_realloc_r+0x2ac>
 200e64c:	80800017 	ldw	r2,0(r16)
 200e650:	80afc83a 	sub	r23,r16,r2
 200e654:	b8c00117 	ldw	r3,4(r23)
 200e658:	00bfff04 	movi	r2,-4
 200e65c:	1884703a 	and	r2,r3,r2
 200e660:	30002e26 	beq	r6,zero,200e71c <_realloc_r+0x228>
 200e664:	3240b926 	beq	r6,r9,200e94c <_realloc_r+0x458>
 200e668:	98a9883a 	add	r20,r19,r2
 200e66c:	2509883a 	add	r4,r4,r20
 200e670:	d9000015 	stw	r4,0(sp)
 200e674:	21c02a16 	blt	r4,r7,200e720 <_realloc_r+0x22c>
 200e678:	30800317 	ldw	r2,12(r6)
 200e67c:	30c00217 	ldw	r3,8(r6)
 200e680:	01400904 	movi	r5,36
 200e684:	99bfff04 	addi	r6,r19,-4
 200e688:	18800315 	stw	r2,12(r3)
 200e68c:	10c00215 	stw	r3,8(r2)
 200e690:	b9000317 	ldw	r4,12(r23)
 200e694:	b8800217 	ldw	r2,8(r23)
 200e698:	b82b883a 	mov	r21,r23
 200e69c:	bc000204 	addi	r16,r23,8
 200e6a0:	20800215 	stw	r2,8(r4)
 200e6a4:	11000315 	stw	r4,12(r2)
 200e6a8:	2980e436 	bltu	r5,r6,200ea3c <_realloc_r+0x548>
 200e6ac:	008004c4 	movi	r2,19
 200e6b0:	9009883a 	mov	r4,r18
 200e6b4:	8011883a 	mov	r8,r16
 200e6b8:	11800f2e 	bgeu	r2,r6,200e6f8 <_realloc_r+0x204>
 200e6bc:	90800017 	ldw	r2,0(r18)
 200e6c0:	ba000404 	addi	r8,r23,16
 200e6c4:	91000204 	addi	r4,r18,8
 200e6c8:	b8800215 	stw	r2,8(r23)
 200e6cc:	90c00117 	ldw	r3,4(r18)
 200e6d0:	008006c4 	movi	r2,27
 200e6d4:	b8c00315 	stw	r3,12(r23)
 200e6d8:	1180072e 	bgeu	r2,r6,200e6f8 <_realloc_r+0x204>
 200e6dc:	90c00217 	ldw	r3,8(r18)
 200e6e0:	ba000604 	addi	r8,r23,24
 200e6e4:	91000404 	addi	r4,r18,16
 200e6e8:	b8c00415 	stw	r3,16(r23)
 200e6ec:	90800317 	ldw	r2,12(r18)
 200e6f0:	b8800515 	stw	r2,20(r23)
 200e6f4:	3140e726 	beq	r6,r5,200ea94 <_realloc_r+0x5a0>
 200e6f8:	20800017 	ldw	r2,0(r4)
 200e6fc:	dd000017 	ldw	r20,0(sp)
 200e700:	b80f883a 	mov	r7,r23
 200e704:	40800015 	stw	r2,0(r8)
 200e708:	20c00117 	ldw	r3,4(r4)
 200e70c:	40c00115 	stw	r3,4(r8)
 200e710:	20800217 	ldw	r2,8(r4)
 200e714:	40800215 	stw	r2,8(r8)
 200e718:	003f9706 	br	200e578 <_realloc_r+0x84>
 200e71c:	98a9883a 	add	r20,r19,r2
 200e720:	a1c01f16 	blt	r20,r7,200e7a0 <_realloc_r+0x2ac>
 200e724:	b8c00317 	ldw	r3,12(r23)
 200e728:	b8800217 	ldw	r2,8(r23)
 200e72c:	99bfff04 	addi	r6,r19,-4
 200e730:	01400904 	movi	r5,36
 200e734:	b82b883a 	mov	r21,r23
 200e738:	18800215 	stw	r2,8(r3)
 200e73c:	10c00315 	stw	r3,12(r2)
 200e740:	bc000204 	addi	r16,r23,8
 200e744:	2980c336 	bltu	r5,r6,200ea54 <_realloc_r+0x560>
 200e748:	008004c4 	movi	r2,19
 200e74c:	9009883a 	mov	r4,r18
 200e750:	8011883a 	mov	r8,r16
 200e754:	11800f2e 	bgeu	r2,r6,200e794 <_realloc_r+0x2a0>
 200e758:	90800017 	ldw	r2,0(r18)
 200e75c:	ba000404 	addi	r8,r23,16
 200e760:	91000204 	addi	r4,r18,8
 200e764:	b8800215 	stw	r2,8(r23)
 200e768:	90c00117 	ldw	r3,4(r18)
 200e76c:	008006c4 	movi	r2,27
 200e770:	b8c00315 	stw	r3,12(r23)
 200e774:	1180072e 	bgeu	r2,r6,200e794 <_realloc_r+0x2a0>
 200e778:	90c00217 	ldw	r3,8(r18)
 200e77c:	ba000604 	addi	r8,r23,24
 200e780:	91000404 	addi	r4,r18,16
 200e784:	b8c00415 	stw	r3,16(r23)
 200e788:	90800317 	ldw	r2,12(r18)
 200e78c:	b8800515 	stw	r2,20(r23)
 200e790:	3140c726 	beq	r6,r5,200eab0 <_realloc_r+0x5bc>
 200e794:	20800017 	ldw	r2,0(r4)
 200e798:	b80f883a 	mov	r7,r23
 200e79c:	003fd906 	br	200e704 <_realloc_r+0x210>
 200e7a0:	880b883a 	mov	r5,r17
 200e7a4:	b009883a 	mov	r4,r22
 200e7a8:	200637c0 	call	200637c <_malloc_r>
 200e7ac:	1023883a 	mov	r17,r2
 200e7b0:	10002526 	beq	r2,zero,200e848 <_realloc_r+0x354>
 200e7b4:	80800117 	ldw	r2,4(r16)
 200e7b8:	00ffff84 	movi	r3,-2
 200e7bc:	893ffe04 	addi	r4,r17,-8
 200e7c0:	10c4703a 	and	r2,r2,r3
 200e7c4:	8085883a 	add	r2,r16,r2
 200e7c8:	20809526 	beq	r4,r2,200ea20 <_realloc_r+0x52c>
 200e7cc:	99bfff04 	addi	r6,r19,-4
 200e7d0:	01c00904 	movi	r7,36
 200e7d4:	39804536 	bltu	r7,r6,200e8ec <_realloc_r+0x3f8>
 200e7d8:	008004c4 	movi	r2,19
 200e7dc:	9009883a 	mov	r4,r18
 200e7e0:	880b883a 	mov	r5,r17
 200e7e4:	11800f2e 	bgeu	r2,r6,200e824 <_realloc_r+0x330>
 200e7e8:	90800017 	ldw	r2,0(r18)
 200e7ec:	89400204 	addi	r5,r17,8
 200e7f0:	91000204 	addi	r4,r18,8
 200e7f4:	88800015 	stw	r2,0(r17)
 200e7f8:	90c00117 	ldw	r3,4(r18)
 200e7fc:	008006c4 	movi	r2,27
 200e800:	88c00115 	stw	r3,4(r17)
 200e804:	1180072e 	bgeu	r2,r6,200e824 <_realloc_r+0x330>
 200e808:	90c00217 	ldw	r3,8(r18)
 200e80c:	89400404 	addi	r5,r17,16
 200e810:	91000404 	addi	r4,r18,16
 200e814:	88c00215 	stw	r3,8(r17)
 200e818:	90800317 	ldw	r2,12(r18)
 200e81c:	88800315 	stw	r2,12(r17)
 200e820:	31c09126 	beq	r6,r7,200ea68 <_realloc_r+0x574>
 200e824:	20800017 	ldw	r2,0(r4)
 200e828:	28800015 	stw	r2,0(r5)
 200e82c:	20c00117 	ldw	r3,4(r4)
 200e830:	28c00115 	stw	r3,4(r5)
 200e834:	20800217 	ldw	r2,8(r4)
 200e838:	28800215 	stw	r2,8(r5)
 200e83c:	900b883a 	mov	r5,r18
 200e840:	b009883a 	mov	r4,r22
 200e844:	200c5500 	call	200c550 <_free_r>
 200e848:	b009883a 	mov	r4,r22
 200e84c:	20149980 	call	2014998 <__malloc_unlock>
 200e850:	003f5e06 	br	200e5cc <_realloc_r+0xd8>
 200e854:	300b883a 	mov	r5,r6
 200e858:	dfc00b17 	ldw	ra,44(sp)
 200e85c:	df000a17 	ldw	fp,40(sp)
 200e860:	ddc00917 	ldw	r23,36(sp)
 200e864:	dd800817 	ldw	r22,32(sp)
 200e868:	dd400717 	ldw	r21,28(sp)
 200e86c:	dd000617 	ldw	r20,24(sp)
 200e870:	dcc00517 	ldw	r19,20(sp)
 200e874:	dc800417 	ldw	r18,16(sp)
 200e878:	dc400317 	ldw	r17,12(sp)
 200e87c:	dc000217 	ldw	r16,8(sp)
 200e880:	dec00c04 	addi	sp,sp,48
 200e884:	200637c1 	jmpi	200637c <_malloc_r>
 200e888:	38800117 	ldw	r2,4(r7)
 200e88c:	e54b883a 	add	r5,fp,r21
 200e890:	31000054 	ori	r4,r6,1
 200e894:	1080004c 	andi	r2,r2,1
 200e898:	1704b03a 	or	r2,r2,fp
 200e89c:	38800115 	stw	r2,4(r7)
 200e8a0:	29000115 	stw	r4,4(r5)
 200e8a4:	2987883a 	add	r3,r5,r6
 200e8a8:	18800117 	ldw	r2,4(r3)
 200e8ac:	29400204 	addi	r5,r5,8
 200e8b0:	b009883a 	mov	r4,r22
 200e8b4:	10800054 	ori	r2,r2,1
 200e8b8:	18800115 	stw	r2,4(r3)
 200e8bc:	200c5500 	call	200c550 <_free_r>
 200e8c0:	003f3806 	br	200e5a4 <_realloc_r+0xb0>
 200e8c4:	000d883a 	mov	r6,zero
 200e8c8:	0009883a 	mov	r4,zero
 200e8cc:	003f5d06 	br	200e644 <_realloc_r+0x150>
 200e8d0:	30c00217 	ldw	r3,8(r6)
 200e8d4:	30800317 	ldw	r2,12(r6)
 200e8d8:	800f883a 	mov	r7,r16
 200e8dc:	84000204 	addi	r16,r16,8
 200e8e0:	10c00215 	stw	r3,8(r2)
 200e8e4:	18800315 	stw	r2,12(r3)
 200e8e8:	003f2306 	br	200e578 <_realloc_r+0x84>
 200e8ec:	8809883a 	mov	r4,r17
 200e8f0:	900b883a 	mov	r5,r18
 200e8f4:	200d3880 	call	200d388 <memmove>
 200e8f8:	003fd006 	br	200e83c <_realloc_r+0x348>
 200e8fc:	30800117 	ldw	r2,4(r6)
 200e900:	e0c00404 	addi	r3,fp,16
 200e904:	1108703a 	and	r4,r2,r4
 200e908:	9905883a 	add	r2,r19,r4
 200e90c:	10ff4d16 	blt	r2,r3,200e644 <_realloc_r+0x150>
 200e910:	1705c83a 	sub	r2,r2,fp
 200e914:	870b883a 	add	r5,r16,fp
 200e918:	10800054 	ori	r2,r2,1
 200e91c:	28800115 	stw	r2,4(r5)
 200e920:	80c00117 	ldw	r3,4(r16)
 200e924:	008080b4 	movhi	r2,514
 200e928:	10865004 	addi	r2,r2,6464
 200e92c:	b009883a 	mov	r4,r22
 200e930:	18c0004c 	andi	r3,r3,1
 200e934:	e0c6b03a 	or	r3,fp,r3
 200e938:	11400215 	stw	r5,8(r2)
 200e93c:	80c00115 	stw	r3,4(r16)
 200e940:	20149980 	call	2014998 <__malloc_unlock>
 200e944:	84400204 	addi	r17,r16,8
 200e948:	003f2006 	br	200e5cc <_realloc_r+0xd8>
 200e94c:	98a9883a 	add	r20,r19,r2
 200e950:	2509883a 	add	r4,r4,r20
 200e954:	e0800404 	addi	r2,fp,16
 200e958:	d9000115 	stw	r4,4(sp)
 200e95c:	20bf7016 	blt	r4,r2,200e720 <_realloc_r+0x22c>
 200e960:	b8c00317 	ldw	r3,12(r23)
 200e964:	b8800217 	ldw	r2,8(r23)
 200e968:	99bfff04 	addi	r6,r19,-4
 200e96c:	01400904 	movi	r5,36
 200e970:	18800215 	stw	r2,8(r3)
 200e974:	10c00315 	stw	r3,12(r2)
 200e978:	bc400204 	addi	r17,r23,8
 200e97c:	29804136 	bltu	r5,r6,200ea84 <_realloc_r+0x590>
 200e980:	008004c4 	movi	r2,19
 200e984:	9009883a 	mov	r4,r18
 200e988:	880f883a 	mov	r7,r17
 200e98c:	11800f2e 	bgeu	r2,r6,200e9cc <_realloc_r+0x4d8>
 200e990:	90800017 	ldw	r2,0(r18)
 200e994:	b9c00404 	addi	r7,r23,16
 200e998:	91000204 	addi	r4,r18,8
 200e99c:	b8800215 	stw	r2,8(r23)
 200e9a0:	90c00117 	ldw	r3,4(r18)
 200e9a4:	008006c4 	movi	r2,27
 200e9a8:	b8c00315 	stw	r3,12(r23)
 200e9ac:	1180072e 	bgeu	r2,r6,200e9cc <_realloc_r+0x4d8>
 200e9b0:	90c00217 	ldw	r3,8(r18)
 200e9b4:	b9c00604 	addi	r7,r23,24
 200e9b8:	91000404 	addi	r4,r18,16
 200e9bc:	b8c00415 	stw	r3,16(r23)
 200e9c0:	90800317 	ldw	r2,12(r18)
 200e9c4:	b8800515 	stw	r2,20(r23)
 200e9c8:	31404026 	beq	r6,r5,200eacc <_realloc_r+0x5d8>
 200e9cc:	20800017 	ldw	r2,0(r4)
 200e9d0:	38800015 	stw	r2,0(r7)
 200e9d4:	20c00117 	ldw	r3,4(r4)
 200e9d8:	38c00115 	stw	r3,4(r7)
 200e9dc:	20800217 	ldw	r2,8(r4)
 200e9e0:	38800215 	stw	r2,8(r7)
 200e9e4:	d8c00117 	ldw	r3,4(sp)
 200e9e8:	bf0b883a 	add	r5,r23,fp
 200e9ec:	b009883a 	mov	r4,r22
 200e9f0:	1f05c83a 	sub	r2,r3,fp
 200e9f4:	10800054 	ori	r2,r2,1
 200e9f8:	28800115 	stw	r2,4(r5)
 200e9fc:	b8c00117 	ldw	r3,4(r23)
 200ea00:	008080b4 	movhi	r2,514
 200ea04:	10865004 	addi	r2,r2,6464
 200ea08:	11400215 	stw	r5,8(r2)
 200ea0c:	18c0004c 	andi	r3,r3,1
 200ea10:	e0c6b03a 	or	r3,fp,r3
 200ea14:	b8c00115 	stw	r3,4(r23)
 200ea18:	20149980 	call	2014998 <__malloc_unlock>
 200ea1c:	003eeb06 	br	200e5cc <_realloc_r+0xd8>
 200ea20:	20800117 	ldw	r2,4(r4)
 200ea24:	00ffff04 	movi	r3,-4
 200ea28:	800f883a 	mov	r7,r16
 200ea2c:	10c4703a 	and	r2,r2,r3
 200ea30:	98a9883a 	add	r20,r19,r2
 200ea34:	84000204 	addi	r16,r16,8
 200ea38:	003ecf06 	br	200e578 <_realloc_r+0x84>
 200ea3c:	900b883a 	mov	r5,r18
 200ea40:	8009883a 	mov	r4,r16
 200ea44:	200d3880 	call	200d388 <memmove>
 200ea48:	dd000017 	ldw	r20,0(sp)
 200ea4c:	b80f883a 	mov	r7,r23
 200ea50:	003ec906 	br	200e578 <_realloc_r+0x84>
 200ea54:	900b883a 	mov	r5,r18
 200ea58:	8009883a 	mov	r4,r16
 200ea5c:	200d3880 	call	200d388 <memmove>
 200ea60:	b80f883a 	mov	r7,r23
 200ea64:	003ec406 	br	200e578 <_realloc_r+0x84>
 200ea68:	90c00417 	ldw	r3,16(r18)
 200ea6c:	89400604 	addi	r5,r17,24
 200ea70:	91000604 	addi	r4,r18,24
 200ea74:	88c00415 	stw	r3,16(r17)
 200ea78:	90800517 	ldw	r2,20(r18)
 200ea7c:	88800515 	stw	r2,20(r17)
 200ea80:	003f6806 	br	200e824 <_realloc_r+0x330>
 200ea84:	900b883a 	mov	r5,r18
 200ea88:	8809883a 	mov	r4,r17
 200ea8c:	200d3880 	call	200d388 <memmove>
 200ea90:	003fd406 	br	200e9e4 <_realloc_r+0x4f0>
 200ea94:	90c00417 	ldw	r3,16(r18)
 200ea98:	91000604 	addi	r4,r18,24
 200ea9c:	ba000804 	addi	r8,r23,32
 200eaa0:	b8c00615 	stw	r3,24(r23)
 200eaa4:	90800517 	ldw	r2,20(r18)
 200eaa8:	b8800715 	stw	r2,28(r23)
 200eaac:	003f1206 	br	200e6f8 <_realloc_r+0x204>
 200eab0:	90c00417 	ldw	r3,16(r18)
 200eab4:	91000604 	addi	r4,r18,24
 200eab8:	ba000804 	addi	r8,r23,32
 200eabc:	b8c00615 	stw	r3,24(r23)
 200eac0:	90800517 	ldw	r2,20(r18)
 200eac4:	b8800715 	stw	r2,28(r23)
 200eac8:	003f3206 	br	200e794 <_realloc_r+0x2a0>
 200eacc:	90c00417 	ldw	r3,16(r18)
 200ead0:	91000604 	addi	r4,r18,24
 200ead4:	b9c00804 	addi	r7,r23,32
 200ead8:	b8c00615 	stw	r3,24(r23)
 200eadc:	90800517 	ldw	r2,20(r18)
 200eae0:	b8800715 	stw	r2,28(r23)
 200eae4:	003fb906 	br	200e9cc <_realloc_r+0x4d8>

0200eae8 <__srefill_r>:
 200eae8:	defffd04 	addi	sp,sp,-12
 200eaec:	dc400115 	stw	r17,4(sp)
 200eaf0:	dc000015 	stw	r16,0(sp)
 200eaf4:	dfc00215 	stw	ra,8(sp)
 200eaf8:	2023883a 	mov	r17,r4
 200eafc:	2821883a 	mov	r16,r5
 200eb00:	20000226 	beq	r4,zero,200eb0c <__srefill_r+0x24>
 200eb04:	20800e17 	ldw	r2,56(r4)
 200eb08:	10004126 	beq	r2,zero,200ec10 <__srefill_r+0x128>
 200eb0c:	80c0030b 	ldhu	r3,12(r16)
 200eb10:	80000115 	stw	zero,4(r16)
 200eb14:	1880080c 	andi	r2,r3,32
 200eb18:	1000361e 	bne	r2,zero,200ebf4 <__srefill_r+0x10c>
 200eb1c:	1880010c 	andi	r2,r3,4
 200eb20:	1000211e 	bne	r2,zero,200eba8 <__srefill_r+0xc0>
 200eb24:	1880040c 	andi	r2,r3,16
 200eb28:	10005026 	beq	r2,zero,200ec6c <__srefill_r+0x184>
 200eb2c:	1880020c 	andi	r2,r3,8
 200eb30:	1000541e 	bne	r2,zero,200ec84 <__srefill_r+0x19c>
 200eb34:	8080030b 	ldhu	r2,12(r16)
 200eb38:	10800114 	ori	r2,r2,4
 200eb3c:	8080030d 	sth	r2,12(r16)
 200eb40:	80800417 	ldw	r2,16(r16)
 200eb44:	10004526 	beq	r2,zero,200ec5c <__srefill_r+0x174>
 200eb48:	8080030b 	ldhu	r2,12(r16)
 200eb4c:	108000cc 	andi	r2,r2,3
 200eb50:	1000361e 	bne	r2,zero,200ec2c <__srefill_r+0x144>
 200eb54:	81800417 	ldw	r6,16(r16)
 200eb58:	80c00817 	ldw	r3,32(r16)
 200eb5c:	81400717 	ldw	r5,28(r16)
 200eb60:	81c00517 	ldw	r7,20(r16)
 200eb64:	8809883a 	mov	r4,r17
 200eb68:	81800015 	stw	r6,0(r16)
 200eb6c:	183ee83a 	callr	r3
 200eb70:	80c0030b 	ldhu	r3,12(r16)
 200eb74:	1009883a 	mov	r4,r2
 200eb78:	80800115 	stw	r2,4(r16)
 200eb7c:	00b7ffc4 	movi	r2,-8193
 200eb80:	1884703a 	and	r2,r3,r2
 200eb84:	8080030d 	sth	r2,12(r16)
 200eb88:	0100230e 	bge	zero,r4,200ec18 <__srefill_r+0x130>
 200eb8c:	0009883a 	mov	r4,zero
 200eb90:	2005883a 	mov	r2,r4
 200eb94:	dfc00217 	ldw	ra,8(sp)
 200eb98:	dc400117 	ldw	r17,4(sp)
 200eb9c:	dc000017 	ldw	r16,0(sp)
 200eba0:	dec00304 	addi	sp,sp,12
 200eba4:	f800283a 	ret
 200eba8:	81400c17 	ldw	r5,48(r16)
 200ebac:	283fe426 	beq	r5,zero,200eb40 <__srefill_r+0x58>
 200ebb0:	80801004 	addi	r2,r16,64
 200ebb4:	28800226 	beq	r5,r2,200ebc0 <__srefill_r+0xd8>
 200ebb8:	8809883a 	mov	r4,r17
 200ebbc:	200c5500 	call	200c550 <_free_r>
 200ebc0:	80800f17 	ldw	r2,60(r16)
 200ebc4:	80000c15 	stw	zero,48(r16)
 200ebc8:	80800115 	stw	r2,4(r16)
 200ebcc:	103fdc26 	beq	r2,zero,200eb40 <__srefill_r+0x58>
 200ebd0:	80800e17 	ldw	r2,56(r16)
 200ebd4:	0009883a 	mov	r4,zero
 200ebd8:	80800015 	stw	r2,0(r16)
 200ebdc:	2005883a 	mov	r2,r4
 200ebe0:	dfc00217 	ldw	ra,8(sp)
 200ebe4:	dc400117 	ldw	r17,4(sp)
 200ebe8:	dc000017 	ldw	r16,0(sp)
 200ebec:	dec00304 	addi	sp,sp,12
 200ebf0:	f800283a 	ret
 200ebf4:	013fffc4 	movi	r4,-1
 200ebf8:	2005883a 	mov	r2,r4
 200ebfc:	dfc00217 	ldw	ra,8(sp)
 200ec00:	dc400117 	ldw	r17,4(sp)
 200ec04:	dc000017 	ldw	r16,0(sp)
 200ec08:	dec00304 	addi	sp,sp,12
 200ec0c:	f800283a 	ret
 200ec10:	200bf900 	call	200bf90 <__sinit>
 200ec14:	003fbd06 	br	200eb0c <__srefill_r+0x24>
 200ec18:	20000b1e 	bne	r4,zero,200ec48 <__srefill_r+0x160>
 200ec1c:	10800814 	ori	r2,r2,32
 200ec20:	013fffc4 	movi	r4,-1
 200ec24:	8080030d 	sth	r2,12(r16)
 200ec28:	003fd906 	br	200eb90 <__srefill_r+0xa8>
 200ec2c:	008080b4 	movhi	r2,514
 200ec30:	108c1804 	addi	r2,r2,12384
 200ec34:	11000017 	ldw	r4,0(r2)
 200ec38:	01408074 	movhi	r5,513
 200ec3c:	297b2b04 	addi	r5,r5,-4948
 200ec40:	200cdc80 	call	200cdc8 <_fwalk>
 200ec44:	003fc306 	br	200eb54 <__srefill_r+0x6c>
 200ec48:	10801014 	ori	r2,r2,64
 200ec4c:	013fffc4 	movi	r4,-1
 200ec50:	8080030d 	sth	r2,12(r16)
 200ec54:	80000115 	stw	zero,4(r16)
 200ec58:	003fcd06 	br	200eb90 <__srefill_r+0xa8>
 200ec5c:	8809883a 	mov	r4,r17
 200ec60:	800b883a 	mov	r5,r16
 200ec64:	200cf700 	call	200cf70 <__smakebuf_r>
 200ec68:	003fb706 	br	200eb48 <__srefill_r+0x60>
 200ec6c:	18c01014 	ori	r3,r3,64
 200ec70:	00800244 	movi	r2,9
 200ec74:	013fffc4 	movi	r4,-1
 200ec78:	88800015 	stw	r2,0(r17)
 200ec7c:	80c0030d 	sth	r3,12(r16)
 200ec80:	003fc306 	br	200eb90 <__srefill_r+0xa8>
 200ec84:	8809883a 	mov	r4,r17
 200ec88:	800b883a 	mov	r5,r16
 200ec8c:	200bcf80 	call	200bcf8 <_fflush_r>
 200ec90:	103fd81e 	bne	r2,zero,200ebf4 <__srefill_r+0x10c>
 200ec94:	8080030b 	ldhu	r2,12(r16)
 200ec98:	80000215 	stw	zero,8(r16)
 200ec9c:	80000615 	stw	zero,24(r16)
 200eca0:	10bffdcc 	andi	r2,r2,65527
 200eca4:	8080030d 	sth	r2,12(r16)
 200eca8:	003fa206 	br	200eb34 <__srefill_r+0x4c>

0200ecac <lflush>:
 200ecac:	20c0030b 	ldhu	r3,12(r4)
 200ecb0:	01400244 	movi	r5,9
 200ecb4:	0005883a 	mov	r2,zero
 200ecb8:	18c0024c 	andi	r3,r3,9
 200ecbc:	19400126 	beq	r3,r5,200ecc4 <lflush+0x18>
 200ecc0:	f800283a 	ret
 200ecc4:	200bef41 	jmpi	200bef4 <fflush>

0200ecc8 <__isinfd>:
 200ecc8:	200d883a 	mov	r6,r4
 200eccc:	0109c83a 	sub	r4,zero,r4
 200ecd0:	2188b03a 	or	r4,r4,r6
 200ecd4:	2008d7fa 	srli	r4,r4,31
 200ecd8:	00a00034 	movhi	r2,32768
 200ecdc:	10bfffc4 	addi	r2,r2,-1
 200ece0:	1144703a 	and	r2,r2,r5
 200ece4:	2088b03a 	or	r4,r4,r2
 200ece8:	009ffc34 	movhi	r2,32752
 200ecec:	1105c83a 	sub	r2,r2,r4
 200ecf0:	0087c83a 	sub	r3,zero,r2
 200ecf4:	10c4b03a 	or	r2,r2,r3
 200ecf8:	1004d7fa 	srli	r2,r2,31
 200ecfc:	00c00044 	movi	r3,1
 200ed00:	1885c83a 	sub	r2,r3,r2
 200ed04:	f800283a 	ret

0200ed08 <__sccl>:
 200ed08:	28c00003 	ldbu	r3,0(r5)
 200ed0c:	00801784 	movi	r2,94
 200ed10:	2a000044 	addi	r8,r5,1
 200ed14:	18802526 	beq	r3,r2,200edac <__sccl+0xa4>
 200ed18:	180f883a 	mov	r7,r3
 200ed1c:	0013883a 	mov	r9,zero
 200ed20:	000d883a 	mov	r6,zero
 200ed24:	0007883a 	mov	r3,zero
 200ed28:	01404004 	movi	r5,256
 200ed2c:	1905883a 	add	r2,r3,r4
 200ed30:	18c00044 	addi	r3,r3,1
 200ed34:	11800005 	stb	r6,0(r2)
 200ed38:	197ffc1e 	bne	r3,r5,200ed2c <__sccl+0x24>
 200ed3c:	38000c26 	beq	r7,zero,200ed70 <__sccl+0x68>
 200ed40:	00800044 	movi	r2,1
 200ed44:	124dc83a 	sub	r6,r2,r9
 200ed48:	3905883a 	add	r2,r7,r4
 200ed4c:	11800005 	stb	r6,0(r2)
 200ed50:	41400044 	addi	r5,r8,1
 200ed54:	02400b44 	movi	r9,45
 200ed58:	02801744 	movi	r10,93
 200ed5c:	28bfffc3 	ldbu	r2,-1(r5)
 200ed60:	2811883a 	mov	r8,r5
 200ed64:	12400726 	beq	r2,r9,200ed84 <__sccl+0x7c>
 200ed68:	12800226 	beq	r2,r10,200ed74 <__sccl+0x6c>
 200ed6c:	1000031e 	bne	r2,zero,200ed7c <__sccl+0x74>
 200ed70:	423fffc4 	addi	r8,r8,-1
 200ed74:	4005883a 	mov	r2,r8
 200ed78:	f800283a 	ret
 200ed7c:	100f883a 	mov	r7,r2
 200ed80:	003ff106 	br	200ed48 <__sccl+0x40>
 200ed84:	28c00003 	ldbu	r3,0(r5)
 200ed88:	1a800d26 	beq	r3,r10,200edc0 <__sccl+0xb8>
 200ed8c:	19c00c16 	blt	r3,r7,200edc0 <__sccl+0xb8>
 200ed90:	21c5883a 	add	r2,r4,r7
 200ed94:	39c00044 	addi	r7,r7,1
 200ed98:	11800045 	stb	r6,1(r2)
 200ed9c:	10800044 	addi	r2,r2,1
 200eda0:	38fffc16 	blt	r7,r3,200ed94 <__sccl+0x8c>
 200eda4:	29400084 	addi	r5,r5,2
 200eda8:	003fec06 	br	200ed5c <__sccl+0x54>
 200edac:	29c00043 	ldbu	r7,1(r5)
 200edb0:	02400044 	movi	r9,1
 200edb4:	2a000084 	addi	r8,r5,2
 200edb8:	480d883a 	mov	r6,r9
 200edbc:	003fd906 	br	200ed24 <__sccl+0x1c>
 200edc0:	01c00b44 	movi	r7,45
 200edc4:	003fe006 	br	200ed48 <__sccl+0x40>

0200edc8 <nanf>:
 200edc8:	009ff034 	movhi	r2,32704
 200edcc:	f800283a 	ret

0200edd0 <sprintf>:
 200edd0:	deffe504 	addi	sp,sp,-108
 200edd4:	2013883a 	mov	r9,r4
 200edd8:	dfc01815 	stw	ra,96(sp)
 200eddc:	d9801915 	stw	r6,100(sp)
 200ede0:	d9c01a15 	stw	r7,104(sp)
 200ede4:	d8801904 	addi	r2,sp,100
 200ede8:	d8800015 	stw	r2,0(sp)
 200edec:	008080b4 	movhi	r2,514
 200edf0:	108c1704 	addi	r2,r2,12380
 200edf4:	11000017 	ldw	r4,0(r2)
 200edf8:	d9c00017 	ldw	r7,0(sp)
 200edfc:	00808204 	movi	r2,520
 200ee00:	00e00034 	movhi	r3,32768
 200ee04:	18ffffc4 	addi	r3,r3,-1
 200ee08:	280d883a 	mov	r6,r5
 200ee0c:	d880040d 	sth	r2,16(sp)
 200ee10:	d9400104 	addi	r5,sp,4
 200ee14:	00bfffc4 	movi	r2,-1
 200ee18:	d8c00615 	stw	r3,24(sp)
 200ee1c:	d8c00315 	stw	r3,12(sp)
 200ee20:	da400515 	stw	r9,20(sp)
 200ee24:	d880048d 	sth	r2,18(sp)
 200ee28:	da400115 	stw	r9,4(sp)
 200ee2c:	2006da00 	call	2006da0 <___vfprintf_internal_r>
 200ee30:	d8c00117 	ldw	r3,4(sp)
 200ee34:	18000005 	stb	zero,0(r3)
 200ee38:	dfc01817 	ldw	ra,96(sp)
 200ee3c:	dec01b04 	addi	sp,sp,108
 200ee40:	f800283a 	ret

0200ee44 <_sprintf_r>:
 200ee44:	deffe604 	addi	sp,sp,-104
 200ee48:	2813883a 	mov	r9,r5
 200ee4c:	dfc01815 	stw	ra,96(sp)
 200ee50:	d9c01915 	stw	r7,100(sp)
 200ee54:	d8801904 	addi	r2,sp,100
 200ee58:	d8800015 	stw	r2,0(sp)
 200ee5c:	100f883a 	mov	r7,r2
 200ee60:	00808204 	movi	r2,520
 200ee64:	00e00034 	movhi	r3,32768
 200ee68:	18ffffc4 	addi	r3,r3,-1
 200ee6c:	d880040d 	sth	r2,16(sp)
 200ee70:	d9400104 	addi	r5,sp,4
 200ee74:	00bfffc4 	movi	r2,-1
 200ee78:	d8c00615 	stw	r3,24(sp)
 200ee7c:	d8c00315 	stw	r3,12(sp)
 200ee80:	da400515 	stw	r9,20(sp)
 200ee84:	d880048d 	sth	r2,18(sp)
 200ee88:	da400115 	stw	r9,4(sp)
 200ee8c:	2006da00 	call	2006da0 <___vfprintf_internal_r>
 200ee90:	d8c00117 	ldw	r3,4(sp)
 200ee94:	18000005 	stb	zero,0(r3)
 200ee98:	dfc01817 	ldw	ra,96(sp)
 200ee9c:	dec01a04 	addi	sp,sp,104
 200eea0:	f800283a 	ret

0200eea4 <__sclose>:
 200eea4:	2940038f 	ldh	r5,14(r5)
 200eea8:	201159c1 	jmpi	201159c <_close_r>

0200eeac <__sseek>:
 200eeac:	defffe04 	addi	sp,sp,-8
 200eeb0:	dc000015 	stw	r16,0(sp)
 200eeb4:	2821883a 	mov	r16,r5
 200eeb8:	2940038f 	ldh	r5,14(r5)
 200eebc:	dfc00115 	stw	ra,4(sp)
 200eec0:	201239c0 	call	201239c <_lseek_r>
 200eec4:	1007883a 	mov	r3,r2
 200eec8:	00bfffc4 	movi	r2,-1
 200eecc:	18800926 	beq	r3,r2,200eef4 <__sseek+0x48>
 200eed0:	8080030b 	ldhu	r2,12(r16)
 200eed4:	80c01415 	stw	r3,80(r16)
 200eed8:	10840014 	ori	r2,r2,4096
 200eedc:	8080030d 	sth	r2,12(r16)
 200eee0:	1805883a 	mov	r2,r3
 200eee4:	dfc00117 	ldw	ra,4(sp)
 200eee8:	dc000017 	ldw	r16,0(sp)
 200eeec:	dec00204 	addi	sp,sp,8
 200eef0:	f800283a 	ret
 200eef4:	8080030b 	ldhu	r2,12(r16)
 200eef8:	10bbffcc 	andi	r2,r2,61439
 200eefc:	8080030d 	sth	r2,12(r16)
 200ef00:	1805883a 	mov	r2,r3
 200ef04:	dfc00117 	ldw	ra,4(sp)
 200ef08:	dc000017 	ldw	r16,0(sp)
 200ef0c:	dec00204 	addi	sp,sp,8
 200ef10:	f800283a 	ret

0200ef14 <__swrite>:
 200ef14:	2880030b 	ldhu	r2,12(r5)
 200ef18:	defffb04 	addi	sp,sp,-20
 200ef1c:	dcc00315 	stw	r19,12(sp)
 200ef20:	1080400c 	andi	r2,r2,256
 200ef24:	dc800215 	stw	r18,8(sp)
 200ef28:	dc400115 	stw	r17,4(sp)
 200ef2c:	dc000015 	stw	r16,0(sp)
 200ef30:	3027883a 	mov	r19,r6
 200ef34:	3825883a 	mov	r18,r7
 200ef38:	dfc00415 	stw	ra,16(sp)
 200ef3c:	2821883a 	mov	r16,r5
 200ef40:	000d883a 	mov	r6,zero
 200ef44:	01c00084 	movi	r7,2
 200ef48:	2023883a 	mov	r17,r4
 200ef4c:	10000226 	beq	r2,zero,200ef58 <__swrite+0x44>
 200ef50:	2940038f 	ldh	r5,14(r5)
 200ef54:	201239c0 	call	201239c <_lseek_r>
 200ef58:	8080030b 	ldhu	r2,12(r16)
 200ef5c:	8140038f 	ldh	r5,14(r16)
 200ef60:	8809883a 	mov	r4,r17
 200ef64:	10bbffcc 	andi	r2,r2,61439
 200ef68:	980d883a 	mov	r6,r19
 200ef6c:	900f883a 	mov	r7,r18
 200ef70:	8080030d 	sth	r2,12(r16)
 200ef74:	dfc00417 	ldw	ra,16(sp)
 200ef78:	dcc00317 	ldw	r19,12(sp)
 200ef7c:	dc800217 	ldw	r18,8(sp)
 200ef80:	dc400117 	ldw	r17,4(sp)
 200ef84:	dc000017 	ldw	r16,0(sp)
 200ef88:	dec00504 	addi	sp,sp,20
 200ef8c:	20114701 	jmpi	2011470 <_write_r>

0200ef90 <__sread>:
 200ef90:	defffe04 	addi	sp,sp,-8
 200ef94:	dc000015 	stw	r16,0(sp)
 200ef98:	2821883a 	mov	r16,r5
 200ef9c:	2940038f 	ldh	r5,14(r5)
 200efa0:	dfc00115 	stw	ra,4(sp)
 200efa4:	20124140 	call	2012414 <_read_r>
 200efa8:	1007883a 	mov	r3,r2
 200efac:	10000816 	blt	r2,zero,200efd0 <__sread+0x40>
 200efb0:	80801417 	ldw	r2,80(r16)
 200efb4:	10c5883a 	add	r2,r2,r3
 200efb8:	80801415 	stw	r2,80(r16)
 200efbc:	1805883a 	mov	r2,r3
 200efc0:	dfc00117 	ldw	ra,4(sp)
 200efc4:	dc000017 	ldw	r16,0(sp)
 200efc8:	dec00204 	addi	sp,sp,8
 200efcc:	f800283a 	ret
 200efd0:	8080030b 	ldhu	r2,12(r16)
 200efd4:	10bbffcc 	andi	r2,r2,61439
 200efd8:	8080030d 	sth	r2,12(r16)
 200efdc:	1805883a 	mov	r2,r3
 200efe0:	dfc00117 	ldw	ra,4(sp)
 200efe4:	dc000017 	ldw	r16,0(sp)
 200efe8:	dec00204 	addi	sp,sp,8
 200efec:	f800283a 	ret

0200eff0 <strcmp>:
 200eff0:	2144b03a 	or	r2,r4,r5
 200eff4:	108000cc 	andi	r2,r2,3
 200eff8:	10001d1e 	bne	r2,zero,200f070 <strcmp+0x80>
 200effc:	200f883a 	mov	r7,r4
 200f000:	28800017 	ldw	r2,0(r5)
 200f004:	21000017 	ldw	r4,0(r4)
 200f008:	280d883a 	mov	r6,r5
 200f00c:	2080161e 	bne	r4,r2,200f068 <strcmp+0x78>
 200f010:	023fbff4 	movhi	r8,65279
 200f014:	423fbfc4 	addi	r8,r8,-257
 200f018:	2207883a 	add	r3,r4,r8
 200f01c:	01602074 	movhi	r5,32897
 200f020:	29602004 	addi	r5,r5,-32640
 200f024:	1946703a 	and	r3,r3,r5
 200f028:	0104303a 	nor	r2,zero,r4
 200f02c:	10c4703a 	and	r2,r2,r3
 200f030:	10001c1e 	bne	r2,zero,200f0a4 <strcmp+0xb4>
 200f034:	4013883a 	mov	r9,r8
 200f038:	2811883a 	mov	r8,r5
 200f03c:	00000106 	br	200f044 <strcmp+0x54>
 200f040:	1800181e 	bne	r3,zero,200f0a4 <strcmp+0xb4>
 200f044:	39c00104 	addi	r7,r7,4
 200f048:	39000017 	ldw	r4,0(r7)
 200f04c:	31800104 	addi	r6,r6,4
 200f050:	31400017 	ldw	r5,0(r6)
 200f054:	2245883a 	add	r2,r4,r9
 200f058:	1204703a 	and	r2,r2,r8
 200f05c:	0106303a 	nor	r3,zero,r4
 200f060:	1886703a 	and	r3,r3,r2
 200f064:	217ff626 	beq	r4,r5,200f040 <strcmp+0x50>
 200f068:	3809883a 	mov	r4,r7
 200f06c:	300b883a 	mov	r5,r6
 200f070:	20c00007 	ldb	r3,0(r4)
 200f074:	1800051e 	bne	r3,zero,200f08c <strcmp+0x9c>
 200f078:	00000606 	br	200f094 <strcmp+0xa4>
 200f07c:	21000044 	addi	r4,r4,1
 200f080:	20c00007 	ldb	r3,0(r4)
 200f084:	29400044 	addi	r5,r5,1
 200f088:	18000226 	beq	r3,zero,200f094 <strcmp+0xa4>
 200f08c:	28800007 	ldb	r2,0(r5)
 200f090:	18bffa26 	beq	r3,r2,200f07c <strcmp+0x8c>
 200f094:	20c00003 	ldbu	r3,0(r4)
 200f098:	28800003 	ldbu	r2,0(r5)
 200f09c:	1885c83a 	sub	r2,r3,r2
 200f0a0:	f800283a 	ret
 200f0a4:	0005883a 	mov	r2,zero
 200f0a8:	f800283a 	ret

0200f0ac <match>:
 200f0ac:	21800017 	ldw	r6,0(r4)
 200f0b0:	01c01004 	movi	r7,64
 200f0b4:	02001684 	movi	r8,90
 200f0b8:	28800007 	ldb	r2,0(r5)
 200f0bc:	29400044 	addi	r5,r5,1
 200f0c0:	10000826 	beq	r2,zero,200f0e4 <match+0x38>
 200f0c4:	31800044 	addi	r6,r6,1
 200f0c8:	30c00007 	ldb	r3,0(r6)
 200f0cc:	38c0020e 	bge	r7,r3,200f0d8 <match+0x2c>
 200f0d0:	40c00116 	blt	r8,r3,200f0d8 <match+0x2c>
 200f0d4:	18c00804 	addi	r3,r3,32
 200f0d8:	18bff726 	beq	r3,r2,200f0b8 <match+0xc>
 200f0dc:	0005883a 	mov	r2,zero
 200f0e0:	f800283a 	ret
 200f0e4:	30800044 	addi	r2,r6,1
 200f0e8:	20800015 	stw	r2,0(r4)
 200f0ec:	00800044 	movi	r2,1
 200f0f0:	f800283a 	ret

0200f0f4 <_strtod_r>:
 200f0f4:	deffde04 	addi	sp,sp,-136
 200f0f8:	df002015 	stw	fp,128(sp)
 200f0fc:	dd401d15 	stw	r21,116(sp)
 200f100:	dc401915 	stw	r17,100(sp)
 200f104:	dfc02115 	stw	ra,132(sp)
 200f108:	ddc01f15 	stw	r23,124(sp)
 200f10c:	dd801e15 	stw	r22,120(sp)
 200f110:	dd001c15 	stw	r20,112(sp)
 200f114:	dcc01b15 	stw	r19,108(sp)
 200f118:	dc801a15 	stw	r18,104(sp)
 200f11c:	dc001815 	stw	r16,96(sp)
 200f120:	2823883a 	mov	r17,r5
 200f124:	202b883a 	mov	r21,r4
 200f128:	d9801515 	stw	r6,84(sp)
 200f12c:	d8000915 	stw	zero,36(sp)
 200f130:	d8000a15 	stw	zero,40(sp)
 200f134:	d9400415 	stw	r5,16(sp)
 200f138:	df000904 	addi	fp,sp,36
 200f13c:	da000417 	ldw	r8,16(sp)
 200f140:	00800b44 	movi	r2,45
 200f144:	40c00003 	ldbu	r3,0(r8)
 200f148:	10c03536 	bltu	r2,r3,200f220 <_strtod_r+0x12c>
 200f14c:	18c5883a 	add	r2,r3,r3
 200f150:	1085883a 	add	r2,r2,r2
 200f154:	00c08074 	movhi	r3,513
 200f158:	18fc5a04 	addi	r3,r3,-3736
 200f15c:	10c5883a 	add	r2,r2,r3
 200f160:	11000017 	ldw	r4,0(r2)
 200f164:	2000683a 	jmp	r4
 200f168:	0200f35c 	xori	r8,zero,973
 200f16c:	0200f220 	cmpeqi	r8,zero,968
 200f170:	0200f220 	cmpeqi	r8,zero,968
 200f174:	0200f220 	cmpeqi	r8,zero,968
 200f178:	0200f220 	cmpeqi	r8,zero,968
 200f17c:	0200f220 	cmpeqi	r8,zero,968
 200f180:	0200f220 	cmpeqi	r8,zero,968
 200f184:	0200f220 	cmpeqi	r8,zero,968
 200f188:	0200f220 	cmpeqi	r8,zero,968
 200f18c:	0200f674 	movhi	r8,985
 200f190:	0200f674 	movhi	r8,985
 200f194:	0200f674 	movhi	r8,985
 200f198:	0200f674 	movhi	r8,985
 200f19c:	0200f674 	movhi	r8,985
 200f1a0:	0200f220 	cmpeqi	r8,zero,968
 200f1a4:	0200f220 	cmpeqi	r8,zero,968
 200f1a8:	0200f220 	cmpeqi	r8,zero,968
 200f1ac:	0200f220 	cmpeqi	r8,zero,968
 200f1b0:	0200f220 	cmpeqi	r8,zero,968
 200f1b4:	0200f220 	cmpeqi	r8,zero,968
 200f1b8:	0200f220 	cmpeqi	r8,zero,968
 200f1bc:	0200f220 	cmpeqi	r8,zero,968
 200f1c0:	0200f220 	cmpeqi	r8,zero,968
 200f1c4:	0200f220 	cmpeqi	r8,zero,968
 200f1c8:	0200f220 	cmpeqi	r8,zero,968
 200f1cc:	0200f220 	cmpeqi	r8,zero,968
 200f1d0:	0200f220 	cmpeqi	r8,zero,968
 200f1d4:	0200f220 	cmpeqi	r8,zero,968
 200f1d8:	0200f220 	cmpeqi	r8,zero,968
 200f1dc:	0200f220 	cmpeqi	r8,zero,968
 200f1e0:	0200f220 	cmpeqi	r8,zero,968
 200f1e4:	0200f220 	cmpeqi	r8,zero,968
 200f1e8:	0200f674 	movhi	r8,985
 200f1ec:	0200f220 	cmpeqi	r8,zero,968
 200f1f0:	0200f220 	cmpeqi	r8,zero,968
 200f1f4:	0200f220 	cmpeqi	r8,zero,968
 200f1f8:	0200f220 	cmpeqi	r8,zero,968
 200f1fc:	0200f220 	cmpeqi	r8,zero,968
 200f200:	0200f220 	cmpeqi	r8,zero,968
 200f204:	0200f220 	cmpeqi	r8,zero,968
 200f208:	0200f220 	cmpeqi	r8,zero,968
 200f20c:	0200f220 	cmpeqi	r8,zero,968
 200f210:	0200f220 	cmpeqi	r8,zero,968
 200f214:	0200f654 	movui	r8,985
 200f218:	0200f220 	cmpeqi	r8,zero,968
 200f21c:	0200f680 	call	200f68 <OSCtxSw_SWITCH_PC+0x200f28>
 200f220:	d8001115 	stw	zero,68(sp)
 200f224:	40c00007 	ldb	r3,0(r8)
 200f228:	00800c04 	movi	r2,48
 200f22c:	1880d026 	beq	r3,r2,200f570 <_strtod_r+0x47c>
 200f230:	001f883a 	mov	r15,zero
 200f234:	41000007 	ldb	r4,0(r8)
 200f238:	00c00bc4 	movi	r3,47
 200f23c:	402d883a 	mov	r22,r8
 200f240:	1903470e 	bge	r3,r4,200ff60 <_strtod_r+0xe6c>
 200f244:	00800e44 	movi	r2,57
 200f248:	11034516 	blt	r2,r4,200ff60 <_strtod_r+0xe6c>
 200f24c:	180f883a 	mov	r7,r3
 200f250:	1013883a 	mov	r9,r2
 200f254:	4007883a 	mov	r3,r8
 200f258:	000d883a 	mov	r6,zero
 200f25c:	0029883a 	mov	r20,zero
 200f260:	0021883a 	mov	r16,zero
 200f264:	01400204 	movi	r5,8
 200f268:	028003c4 	movi	r10,15
 200f26c:	29803116 	blt	r5,r6,200f334 <_strtod_r+0x240>
 200f270:	a08002a4 	muli	r2,r20,10
 200f274:	1105883a 	add	r2,r2,r4
 200f278:	153ff404 	addi	r20,r2,-48
 200f27c:	1a000044 	addi	r8,r3,1
 200f280:	da000415 	stw	r8,16(sp)
 200f284:	41000007 	ldb	r4,0(r8)
 200f288:	31800044 	addi	r6,r6,1
 200f28c:	4007883a 	mov	r3,r8
 200f290:	3900010e 	bge	r7,r4,200f298 <_strtod_r+0x1a4>
 200f294:	493ff50e 	bge	r9,r4,200f26c <_strtod_r+0x178>
 200f298:	00800b84 	movi	r2,46
 200f29c:	2080c126 	beq	r4,r2,200f5a4 <_strtod_r+0x4b0>
 200f2a0:	3027883a 	mov	r19,r6
 200f2a4:	0025883a 	mov	r18,zero
 200f2a8:	0015883a 	mov	r10,zero
 200f2ac:	000f883a 	mov	r7,zero
 200f2b0:	00801944 	movi	r2,101
 200f2b4:	20802426 	beq	r4,r2,200f348 <_strtod_r+0x254>
 200f2b8:	00801144 	movi	r2,69
 200f2bc:	20802226 	beq	r4,r2,200f348 <_strtod_r+0x254>
 200f2c0:	9816c03a 	cmpne	r11,r19,zero
 200f2c4:	000b883a 	mov	r5,zero
 200f2c8:	5800631e 	bne	r11,zero,200f458 <_strtod_r+0x364>
 200f2cc:	3800c126 	beq	r7,zero,200f5d4 <_strtod_r+0x4e0>
 200f2d0:	d8c01517 	ldw	r3,84(sp)
 200f2d4:	18000226 	beq	r3,zero,200f2e0 <_strtod_r+0x1ec>
 200f2d8:	d8800417 	ldw	r2,16(sp)
 200f2dc:	18800015 	stw	r2,0(r3)
 200f2e0:	d9001117 	ldw	r4,68(sp)
 200f2e4:	2005003a 	cmpeq	r2,r4,zero
 200f2e8:	10001f1e 	bne	r2,zero,200f368 <_strtod_r+0x274>
 200f2ec:	e0800017 	ldw	r2,0(fp)
 200f2f0:	e0c00117 	ldw	r3,4(fp)
 200f2f4:	1009883a 	mov	r4,r2
 200f2f8:	1960003c 	xorhi	r5,r3,32768
 200f2fc:	2005883a 	mov	r2,r4
 200f300:	2807883a 	mov	r3,r5
 200f304:	dfc02117 	ldw	ra,132(sp)
 200f308:	df002017 	ldw	fp,128(sp)
 200f30c:	ddc01f17 	ldw	r23,124(sp)
 200f310:	dd801e17 	ldw	r22,120(sp)
 200f314:	dd401d17 	ldw	r21,116(sp)
 200f318:	dd001c17 	ldw	r20,112(sp)
 200f31c:	dcc01b17 	ldw	r19,108(sp)
 200f320:	dc801a17 	ldw	r18,104(sp)
 200f324:	dc401917 	ldw	r17,100(sp)
 200f328:	dc001817 	ldw	r16,96(sp)
 200f32c:	dec02204 	addi	sp,sp,136
 200f330:	f800283a 	ret
 200f334:	51bfd116 	blt	r10,r6,200f27c <_strtod_r+0x188>
 200f338:	808002a4 	muli	r2,r16,10
 200f33c:	1105883a 	add	r2,r2,r4
 200f340:	143ff404 	addi	r16,r2,-48
 200f344:	003fcd06 	br	200f27c <_strtod_r+0x188>
 200f348:	9816c03a 	cmpne	r11,r19,zero
 200f34c:	5800091e 	bne	r11,zero,200f374 <_strtod_r+0x280>
 200f350:	3800081e 	bne	r7,zero,200f374 <_strtod_r+0x280>
 200f354:	7805003a 	cmpeq	r2,r15,zero
 200f358:	10000626 	beq	r2,zero,200f374 <_strtod_r+0x280>
 200f35c:	d8001115 	stw	zero,68(sp)
 200f360:	dc400415 	stw	r17,16(sp)
 200f364:	003fda06 	br	200f2d0 <_strtod_r+0x1dc>
 200f368:	e1000017 	ldw	r4,0(fp)
 200f36c:	e1400117 	ldw	r5,4(fp)
 200f370:	003fe206 	br	200f2fc <_strtod_r+0x208>
 200f374:	dc400417 	ldw	r17,16(sp)
 200f378:	00800ac4 	movi	r2,43
 200f37c:	8a000044 	addi	r8,r17,1
 200f380:	da000415 	stw	r8,16(sp)
 200f384:	88c00047 	ldb	r3,1(r17)
 200f388:	4009883a 	mov	r4,r8
 200f38c:	1880bf26 	beq	r3,r2,200f68c <_strtod_r+0x598>
 200f390:	00800b44 	movi	r2,45
 200f394:	18834526 	beq	r3,r2,20100ac <_strtod_r+0xfb8>
 200f398:	1809883a 	mov	r4,r3
 200f39c:	20fff404 	addi	r3,r4,-48
 200f3a0:	00800244 	movi	r2,9
 200f3a4:	001d883a 	mov	r14,zero
 200f3a8:	10c0bf36 	bltu	r2,r3,200f6a8 <_strtod_r+0x5b4>
 200f3ac:	00800c04 	movi	r2,48
 200f3b0:	2080061e 	bne	r4,r2,200f3cc <_strtod_r+0x2d8>
 200f3b4:	da000417 	ldw	r8,16(sp)
 200f3b8:	2005883a 	mov	r2,r4
 200f3bc:	42000044 	addi	r8,r8,1
 200f3c0:	da000415 	stw	r8,16(sp)
 200f3c4:	41000007 	ldb	r4,0(r8)
 200f3c8:	20bffc26 	beq	r4,r2,200f3bc <_strtod_r+0x2c8>
 200f3cc:	20fff3c4 	addi	r3,r4,-49
 200f3d0:	00800204 	movi	r2,8
 200f3d4:	10ffbb36 	bltu	r2,r3,200f2c4 <_strtod_r+0x1d0>
 200f3d8:	da000417 	ldw	r8,16(sp)
 200f3dc:	227ff404 	addi	r9,r4,-48
 200f3e0:	03000bc4 	movi	r12,47
 200f3e4:	4007883a 	mov	r3,r8
 200f3e8:	42000044 	addi	r8,r8,1
 200f3ec:	da000415 	stw	r8,16(sp)
 200f3f0:	41000007 	ldb	r4,0(r8)
 200f3f4:	61000d0e 	bge	r12,r4,200f42c <_strtod_r+0x338>
 200f3f8:	00800e44 	movi	r2,57
 200f3fc:	11000b16 	blt	r2,r4,200f42c <_strtod_r+0x338>
 200f400:	601b883a 	mov	r13,r12
 200f404:	1019883a 	mov	r12,r2
 200f408:	00000106 	br	200f410 <_strtod_r+0x31c>
 200f40c:	61000716 	blt	r12,r4,200f42c <_strtod_r+0x338>
 200f410:	488002a4 	muli	r2,r9,10
 200f414:	42000044 	addi	r8,r8,1
 200f418:	da000415 	stw	r8,16(sp)
 200f41c:	2085883a 	add	r2,r4,r2
 200f420:	41000007 	ldb	r4,0(r8)
 200f424:	127ff404 	addi	r9,r2,-48
 200f428:	693ff816 	blt	r13,r4,200f40c <_strtod_r+0x318>
 200f42c:	40c7c83a 	sub	r3,r8,r3
 200f430:	00800204 	movi	r2,8
 200f434:	10c2e416 	blt	r2,r3,200ffc8 <_strtod_r+0xed4>
 200f438:	009387c4 	movi	r2,19999
 200f43c:	480b883a 	mov	r5,r9
 200f440:	1240010e 	bge	r2,r9,200f448 <_strtod_r+0x354>
 200f444:	100b883a 	mov	r5,r2
 200f448:	7005003a 	cmpeq	r2,r14,zero
 200f44c:	103f9e1e 	bne	r2,zero,200f2c8 <_strtod_r+0x1d4>
 200f450:	014bc83a 	sub	r5,zero,r5
 200f454:	583f9d26 	beq	r11,zero,200f2cc <_strtod_r+0x1d8>
 200f458:	2a8bc83a 	sub	r5,r5,r10
 200f45c:	d9400f15 	stw	r5,60(sp)
 200f460:	30007a1e 	bne	r6,zero,200f64c <_strtod_r+0x558>
 200f464:	dcc01215 	stw	r19,72(sp)
 200f468:	00800404 	movi	r2,16
 200f46c:	9825883a 	mov	r18,r19
 200f470:	14c0010e 	bge	r2,r19,200f478 <_strtod_r+0x384>
 200f474:	1025883a 	mov	r18,r2
 200f478:	a009883a 	mov	r4,r20
 200f47c:	20134440 	call	2013444 <__floatunsidf>
 200f480:	100f883a 	mov	r7,r2
 200f484:	e0800015 	stw	r2,0(fp)
 200f488:	00800244 	movi	r2,9
 200f48c:	e0c00115 	stw	r3,4(fp)
 200f490:	1480160e 	bge	r2,r18,200f4ec <_strtod_r+0x3f8>
 200f494:	900c90fa 	slli	r6,r18,3
 200f498:	010080b4 	movhi	r4,514
 200f49c:	21041d04 	addi	r4,r4,4212
 200f4a0:	180b883a 	mov	r5,r3
 200f4a4:	310d883a 	add	r6,r6,r4
 200f4a8:	30ffef17 	ldw	r3,-68(r6)
 200f4ac:	30bfee17 	ldw	r2,-72(r6)
 200f4b0:	3809883a 	mov	r4,r7
 200f4b4:	180f883a 	mov	r7,r3
 200f4b8:	100d883a 	mov	r6,r2
 200f4bc:	2004fd00 	call	2004fd0 <__muldf3>
 200f4c0:	8009883a 	mov	r4,r16
 200f4c4:	1823883a 	mov	r17,r3
 200f4c8:	1021883a 	mov	r16,r2
 200f4cc:	20134440 	call	2013444 <__floatunsidf>
 200f4d0:	880b883a 	mov	r5,r17
 200f4d4:	180f883a 	mov	r7,r3
 200f4d8:	8009883a 	mov	r4,r16
 200f4dc:	100d883a 	mov	r6,r2
 200f4e0:	2004f5c0 	call	2004f5c <__adddf3>
 200f4e4:	e0c00115 	stw	r3,4(fp)
 200f4e8:	e0800015 	stw	r2,0(fp)
 200f4ec:	010003c4 	movi	r4,15
 200f4f0:	24c09816 	blt	r4,r19,200f754 <_strtod_r+0x660>
 200f4f4:	d9800f17 	ldw	r6,60(sp)
 200f4f8:	303f7526 	beq	r6,zero,200f2d0 <_strtod_r+0x1dc>
 200f4fc:	0183be0e 	bge	zero,r6,20103f8 <_strtod_r+0x1304>
 200f500:	00800584 	movi	r2,22
 200f504:	1182b20e 	bge	r2,r6,200ffd0 <_strtod_r+0xedc>
 200f508:	d8c00f17 	ldw	r3,60(sp)
 200f50c:	24e3c83a 	sub	r17,r4,r19
 200f510:	88800584 	addi	r2,r17,22
 200f514:	10c08f16 	blt	r2,r3,200f754 <_strtod_r+0x660>
 200f518:	880890fa 	slli	r4,r17,3
 200f51c:	040080b4 	movhi	r16,514
 200f520:	84041d04 	addi	r16,r16,4212
 200f524:	e0800017 	ldw	r2,0(fp)
 200f528:	2409883a 	add	r4,r4,r16
 200f52c:	22000017 	ldw	r8,0(r4)
 200f530:	22400117 	ldw	r9,4(r4)
 200f534:	e0c00117 	ldw	r3,4(fp)
 200f538:	1009883a 	mov	r4,r2
 200f53c:	480f883a 	mov	r7,r9
 200f540:	180b883a 	mov	r5,r3
 200f544:	400d883a 	mov	r6,r8
 200f548:	2004fd00 	call	2004fd0 <__muldf3>
 200f54c:	d9000f17 	ldw	r4,60(sp)
 200f550:	180b883a 	mov	r5,r3
 200f554:	2455c83a 	sub	r10,r4,r17
 200f558:	501490fa 	slli	r10,r10,3
 200f55c:	1009883a 	mov	r4,r2
 200f560:	5415883a 	add	r10,r10,r16
 200f564:	52000017 	ldw	r8,0(r10)
 200f568:	52400117 	ldw	r9,4(r10)
 200f56c:	0002a206 	br	200fff8 <_strtod_r+0xf04>
 200f570:	40c00047 	ldb	r3,1(r8)
 200f574:	00801604 	movi	r2,88
 200f578:	18804e26 	beq	r3,r2,200f6b4 <_strtod_r+0x5c0>
 200f57c:	00801e04 	movi	r2,120
 200f580:	18804c26 	beq	r3,r2,200f6b4 <_strtod_r+0x5c0>
 200f584:	42000044 	addi	r8,r8,1
 200f588:	da000415 	stw	r8,16(sp)
 200f58c:	40c00007 	ldb	r3,0(r8)
 200f590:	00800c04 	movi	r2,48
 200f594:	18bffb26 	beq	r3,r2,200f584 <_strtod_r+0x490>
 200f598:	183f4d26 	beq	r3,zero,200f2d0 <_strtod_r+0x1dc>
 200f59c:	03c00044 	movi	r15,1
 200f5a0:	003f2406 	br	200f234 <_strtod_r+0x140>
 200f5a4:	42000044 	addi	r8,r8,1
 200f5a8:	da000415 	stw	r8,16(sp)
 200f5ac:	19000047 	ldb	r4,1(r3)
 200f5b0:	3000b726 	beq	r6,zero,200f890 <_strtod_r+0x79c>
 200f5b4:	3027883a 	mov	r19,r6
 200f5b8:	0015883a 	mov	r10,zero
 200f5bc:	000f883a 	mov	r7,zero
 200f5c0:	227ff404 	addi	r9,r4,-48
 200f5c4:	00800244 	movi	r2,9
 200f5c8:	1242592e 	bgeu	r2,r9,200ff30 <_strtod_r+0xe3c>
 200f5cc:	04800044 	movi	r18,1
 200f5d0:	003f3706 	br	200f2b0 <_strtod_r+0x1bc>
 200f5d4:	7804c03a 	cmpne	r2,r15,zero
 200f5d8:	103f3d1e 	bne	r2,zero,200f2d0 <_strtod_r+0x1dc>
 200f5dc:	9004c03a 	cmpne	r2,r18,zero
 200f5e0:	103f5e1e 	bne	r2,zero,200f35c <_strtod_r+0x268>
 200f5e4:	00801384 	movi	r2,78
 200f5e8:	2083a226 	beq	r4,r2,2010474 <_strtod_r+0x1380>
 200f5ec:	11039d16 	blt	r2,r4,2010464 <_strtod_r+0x1370>
 200f5f0:	00801244 	movi	r2,73
 200f5f4:	20bf591e 	bne	r4,r2,200f35c <_strtod_r+0x268>
 200f5f8:	dc000404 	addi	r16,sp,16
 200f5fc:	8009883a 	mov	r4,r16
 200f600:	014080b4 	movhi	r5,514
 200f604:	29446604 	addi	r5,r5,4504
 200f608:	200f0ac0 	call	200f0ac <match>
 200f60c:	103f5326 	beq	r2,zero,200f35c <_strtod_r+0x268>
 200f610:	d8800417 	ldw	r2,16(sp)
 200f614:	8009883a 	mov	r4,r16
 200f618:	014080b4 	movhi	r5,514
 200f61c:	29446704 	addi	r5,r5,4508
 200f620:	123fffc4 	addi	r8,r2,-1
 200f624:	da000415 	stw	r8,16(sp)
 200f628:	200f0ac0 	call	200f0ac <match>
 200f62c:	1000031e 	bne	r2,zero,200f63c <_strtod_r+0x548>
 200f630:	d8800417 	ldw	r2,16(sp)
 200f634:	12000044 	addi	r8,r2,1
 200f638:	da000415 	stw	r8,16(sp)
 200f63c:	019ffc34 	movhi	r6,32752
 200f640:	e1800115 	stw	r6,4(fp)
 200f644:	e0000015 	stw	zero,0(fp)
 200f648:	003f2106 	br	200f2d0 <_strtod_r+0x1dc>
 200f64c:	d9801215 	stw	r6,72(sp)
 200f650:	003f8506 	br	200f468 <_strtod_r+0x374>
 200f654:	d8001115 	stw	zero,68(sp)
 200f658:	42000044 	addi	r8,r8,1
 200f65c:	da000415 	stw	r8,16(sp)
 200f660:	40800007 	ldb	r2,0(r8)
 200f664:	103eef1e 	bne	r2,zero,200f224 <_strtod_r+0x130>
 200f668:	d8001115 	stw	zero,68(sp)
 200f66c:	dc400415 	stw	r17,16(sp)
 200f670:	003f1706 	br	200f2d0 <_strtod_r+0x1dc>
 200f674:	42000044 	addi	r8,r8,1
 200f678:	da000415 	stw	r8,16(sp)
 200f67c:	003eaf06 	br	200f13c <_strtod_r+0x48>
 200f680:	00800044 	movi	r2,1
 200f684:	d8801115 	stw	r2,68(sp)
 200f688:	003ff306 	br	200f658 <_strtod_r+0x564>
 200f68c:	001d883a 	mov	r14,zero
 200f690:	42000044 	addi	r8,r8,1
 200f694:	da000415 	stw	r8,16(sp)
 200f698:	21000047 	ldb	r4,1(r4)
 200f69c:	00800244 	movi	r2,9
 200f6a0:	20fff404 	addi	r3,r4,-48
 200f6a4:	10ff412e 	bgeu	r2,r3,200f3ac <_strtod_r+0x2b8>
 200f6a8:	000b883a 	mov	r5,zero
 200f6ac:	dc400415 	stw	r17,16(sp)
 200f6b0:	003f0506 	br	200f2c8 <_strtod_r+0x1d4>
 200f6b4:	d8c01117 	ldw	r3,68(sp)
 200f6b8:	048080b4 	movhi	r18,514
 200f6bc:	94875a04 	addi	r18,r18,7528
 200f6c0:	d8800504 	addi	r2,sp,20
 200f6c4:	a809883a 	mov	r4,r21
 200f6c8:	d9400404 	addi	r5,sp,16
 200f6cc:	900d883a 	mov	r6,r18
 200f6d0:	d9c00604 	addi	r7,sp,24
 200f6d4:	d8800015 	stw	r2,0(sp)
 200f6d8:	d8c00115 	stw	r3,4(sp)
 200f6dc:	20118e00 	call	20118e0 <__gethex>
 200f6e0:	140001cc 	andi	r16,r2,7
 200f6e4:	1027883a 	mov	r19,r2
 200f6e8:	803ef926 	beq	r16,zero,200f2d0 <_strtod_r+0x1dc>
 200f6ec:	05000184 	movi	r20,6
 200f6f0:	853f1a26 	beq	r16,r20,200f35c <_strtod_r+0x268>
 200f6f4:	d9800517 	ldw	r6,20(sp)
 200f6f8:	30000626 	beq	r6,zero,200f714 <_strtod_r+0x620>
 200f6fc:	91400017 	ldw	r5,0(r18)
 200f700:	d9000d04 	addi	r4,sp,52
 200f704:	200d9a00 	call	200d9a0 <__copybits>
 200f708:	d9400517 	ldw	r5,20(sp)
 200f70c:	a809883a 	mov	r4,r21
 200f710:	200d5000 	call	200d500 <_Bfree>
 200f714:	d9400617 	ldw	r5,24(sp)
 200f718:	a4024136 	bltu	r20,r16,2010020 <_strtod_r+0xf2c>
 200f71c:	8405883a 	add	r2,r16,r16
 200f720:	1085883a 	add	r2,r2,r2
 200f724:	00c08074 	movhi	r3,513
 200f728:	18fdce04 	addi	r3,r3,-2248
 200f72c:	10c5883a 	add	r2,r2,r3
 200f730:	11000017 	ldw	r4,0(r2)
 200f734:	2000683a 	jmp	r4
 200f738:	02010060 	cmpeqi	r8,zero,1025
 200f73c:	0201006c 	andhi	r8,zero,1025
 200f740:	02010010 	cmplti	r8,zero,1024
 200f744:	02010038 	rdprs	r8,zero,1024
 200f748:	02010048 	cmpgei	r8,zero,1025
 200f74c:	0201006c 	andhi	r8,zero,1025
 200f750:	02010060 	cmpeqi	r8,zero,1025
 200f754:	d8c00f17 	ldw	r3,60(sp)
 200f758:	9c85c83a 	sub	r2,r19,r18
 200f75c:	18a1883a 	add	r16,r3,r2
 200f760:	0402d00e 	bge	zero,r16,20102a4 <_strtod_r+0x11b0>
 200f764:	814003cc 	andi	r5,r16,15
 200f768:	28000f26 	beq	r5,zero,200f7a8 <_strtod_r+0x6b4>
 200f76c:	280a90fa 	slli	r5,r5,3
 200f770:	010080b4 	movhi	r4,514
 200f774:	21041d04 	addi	r4,r4,4212
 200f778:	e0800017 	ldw	r2,0(fp)
 200f77c:	290b883a 	add	r5,r5,r4
 200f780:	2a000017 	ldw	r8,0(r5)
 200f784:	e0c00117 	ldw	r3,4(fp)
 200f788:	2a400117 	ldw	r9,4(r5)
 200f78c:	1009883a 	mov	r4,r2
 200f790:	180b883a 	mov	r5,r3
 200f794:	480f883a 	mov	r7,r9
 200f798:	400d883a 	mov	r6,r8
 200f79c:	2004fd00 	call	2004fd0 <__muldf3>
 200f7a0:	e0c00115 	stw	r3,4(fp)
 200f7a4:	e0800015 	stw	r2,0(fp)
 200f7a8:	00bffc04 	movi	r2,-16
 200f7ac:	808c703a 	and	r6,r16,r2
 200f7b0:	30005b26 	beq	r6,zero,200f920 <_strtod_r+0x82c>
 200f7b4:	00804d04 	movi	r2,308
 200f7b8:	1181fd16 	blt	r2,r6,200ffb0 <_strtod_r+0xebc>
 200f7bc:	3021d13a 	srai	r16,r6,4
 200f7c0:	00800044 	movi	r2,1
 200f7c4:	1403610e 	bge	r2,r16,201054c <_strtod_r+0x1458>
 200f7c8:	102f883a 	mov	r23,r2
 200f7cc:	0025883a 	mov	r18,zero
 200f7d0:	044080b4 	movhi	r17,514
 200f7d4:	8c444f04 	addi	r17,r17,4412
 200f7d8:	8080004c 	andi	r2,r16,1
 200f7dc:	1005003a 	cmpeq	r2,r2,zero
 200f7e0:	1000091e 	bne	r2,zero,200f808 <_strtod_r+0x714>
 200f7e4:	e0800017 	ldw	r2,0(fp)
 200f7e8:	e0c00117 	ldw	r3,4(fp)
 200f7ec:	89800017 	ldw	r6,0(r17)
 200f7f0:	89c00117 	ldw	r7,4(r17)
 200f7f4:	180b883a 	mov	r5,r3
 200f7f8:	1009883a 	mov	r4,r2
 200f7fc:	2004fd00 	call	2004fd0 <__muldf3>
 200f800:	e0c00115 	stw	r3,4(fp)
 200f804:	e0800015 	stw	r2,0(fp)
 200f808:	8021d07a 	srai	r16,r16,1
 200f80c:	94800044 	addi	r18,r18,1
 200f810:	8c400204 	addi	r17,r17,8
 200f814:	bc3ff016 	blt	r23,r16,200f7d8 <_strtod_r+0x6e4>
 200f818:	900e90fa 	slli	r7,r18,3
 200f81c:	018080b4 	movhi	r6,514
 200f820:	31844f04 	addi	r6,r6,4412
 200f824:	e2000117 	ldw	r8,4(fp)
 200f828:	398f883a 	add	r7,r7,r6
 200f82c:	38800017 	ldw	r2,0(r7)
 200f830:	38c00117 	ldw	r3,4(r7)
 200f834:	e1000017 	ldw	r4,0(fp)
 200f838:	01bf2c34 	movhi	r6,64688
 200f83c:	418d883a 	add	r6,r8,r6
 200f840:	300b883a 	mov	r5,r6
 200f844:	180f883a 	mov	r7,r3
 200f848:	100d883a 	mov	r6,r2
 200f84c:	2004fd00 	call	2004fd0 <__muldf3>
 200f850:	1009883a 	mov	r4,r2
 200f854:	180b883a 	mov	r5,r3
 200f858:	199ffc2c 	andhi	r6,r3,32752
 200f85c:	009f2834 	movhi	r2,31904
 200f860:	e1000015 	stw	r4,0(fp)
 200f864:	e1400115 	stw	r5,4(fp)
 200f868:	1181d136 	bltu	r2,r6,200ffb0 <_strtod_r+0xebc>
 200f86c:	009f2434 	movhi	r2,31888
 200f870:	1183202e 	bgeu	r2,r6,20104f4 <_strtod_r+0x1400>
 200f874:	d8001415 	stw	zero,80(sp)
 200f878:	019ffc34 	movhi	r6,32752
 200f87c:	31bfffc4 	addi	r6,r6,-1
 200f880:	01ffffc4 	movi	r7,-1
 200f884:	e1800115 	stw	r6,4(fp)
 200f888:	e1c00015 	stw	r7,0(fp)
 200f88c:	00002506 	br	200f924 <_strtod_r+0x830>
 200f890:	00800c04 	movi	r2,48
 200f894:	2083151e 	bne	r4,r2,20104ec <_strtod_r+0x13f8>
 200f898:	2005883a 	mov	r2,r4
 200f89c:	000f883a 	mov	r7,zero
 200f8a0:	42000044 	addi	r8,r8,1
 200f8a4:	da000415 	stw	r8,16(sp)
 200f8a8:	41000007 	ldb	r4,0(r8)
 200f8ac:	39c00044 	addi	r7,r7,1
 200f8b0:	20bffb26 	beq	r4,r2,200f8a0 <_strtod_r+0x7ac>
 200f8b4:	20fff3c4 	addi	r3,r4,-49
 200f8b8:	00800204 	movi	r2,8
 200f8bc:	10c1b836 	bltu	r2,r3,200ffa0 <_strtod_r+0xeac>
 200f8c0:	dd800417 	ldw	r22,16(sp)
 200f8c4:	3815883a 	mov	r10,r7
 200f8c8:	227ff404 	addi	r9,r4,-48
 200f8cc:	b011883a 	mov	r8,r22
 200f8d0:	0027883a 	mov	r19,zero
 200f8d4:	01c00044 	movi	r7,1
 200f8d8:	4801fe26 	beq	r9,zero,20100d4 <_strtod_r+0xfe0>
 200f8dc:	00800044 	movi	r2,1
 200f8e0:	51d5883a 	add	r10,r10,r7
 200f8e4:	11c31f0e 	bge	r2,r7,2010564 <_strtod_r+0x1470>
 200f8e8:	1009883a 	mov	r4,r2
 200f8ec:	9807883a 	mov	r3,r19
 200f8f0:	02c00204 	movi	r11,8
 200f8f4:	03000404 	movi	r12,16
 200f8f8:	00000306 	br	200f908 <_strtod_r+0x814>
 200f8fc:	a50002a4 	muli	r20,r20,10
 200f900:	21000044 	addi	r4,r4,1
 200f904:	21c1eb26 	beq	r4,r7,20100b4 <_strtod_r+0xfc0>
 200f908:	18c00044 	addi	r3,r3,1
 200f90c:	18bfffc4 	addi	r2,r3,-1
 200f910:	58bffa0e 	bge	r11,r2,200f8fc <_strtod_r+0x808>
 200f914:	60fffa16 	blt	r12,r3,200f900 <_strtod_r+0x80c>
 200f918:	840002a4 	muli	r16,r16,10
 200f91c:	003ff806 	br	200f900 <_strtod_r+0x80c>
 200f920:	d8001415 	stw	zero,80(sp)
 200f924:	d9801217 	ldw	r6,72(sp)
 200f928:	a809883a 	mov	r4,r21
 200f92c:	b00b883a 	mov	r5,r22
 200f930:	980f883a 	mov	r7,r19
 200f934:	dd000015 	stw	r20,0(sp)
 200f938:	200e3d40 	call	200e3d4 <__s2b>
 200f93c:	d9800f17 	ldw	r6,60(sp)
 200f940:	11000304 	addi	r4,r2,12
 200f944:	d8801015 	stw	r2,64(sp)
 200f948:	300c803a 	cmplt	r6,r6,zero
 200f94c:	d9001715 	stw	r4,92(sp)
 200f950:	d9801615 	stw	r6,88(sp)
 200f954:	d8801017 	ldw	r2,64(sp)
 200f958:	a809883a 	mov	r4,r21
 200f95c:	11400117 	ldw	r5,4(r2)
 200f960:	200da800 	call	200da80 <_Balloc>
 200f964:	d8c01017 	ldw	r3,64(sp)
 200f968:	d9401717 	ldw	r5,92(sp)
 200f96c:	11000304 	addi	r4,r2,12
 200f970:	19800417 	ldw	r6,16(r3)
 200f974:	102f883a 	mov	r23,r2
 200f978:	318d883a 	add	r6,r6,r6
 200f97c:	318d883a 	add	r6,r6,r6
 200f980:	31800204 	addi	r6,r6,8
 200f984:	200d2e80 	call	200d2e8 <memcpy>
 200f988:	e2000017 	ldw	r8,0(fp)
 200f98c:	e2400117 	ldw	r9,4(fp)
 200f990:	d9800304 	addi	r6,sp,12
 200f994:	400b883a 	mov	r5,r8
 200f998:	a809883a 	mov	r4,r21
 200f99c:	d9c00204 	addi	r7,sp,8
 200f9a0:	d9800015 	stw	r6,0(sp)
 200f9a4:	480d883a 	mov	r6,r9
 200f9a8:	200db3c0 	call	200db3c <__d2b>
 200f9ac:	a809883a 	mov	r4,r21
 200f9b0:	01400044 	movi	r5,1
 200f9b4:	d8800515 	stw	r2,20(sp)
 200f9b8:	200e1780 	call	200e178 <__i2b>
 200f9bc:	102d883a 	mov	r22,r2
 200f9c0:	d8801617 	ldw	r2,88(sp)
 200f9c4:	1001051e 	bne	r2,zero,200fddc <_strtod_r+0xce8>
 200f9c8:	dd000f17 	ldw	r20,60(sp)
 200f9cc:	000f883a 	mov	r7,zero
 200f9d0:	0013883a 	mov	r9,zero
 200f9d4:	a011883a 	mov	r8,r20
 200f9d8:	d8800217 	ldw	r2,8(sp)
 200f9dc:	1000fd16 	blt	r2,zero,200fdd4 <_strtod_r+0xce0>
 200f9e0:	388f883a 	add	r7,r7,r2
 200f9e4:	d9801417 	ldw	r6,80(sp)
 200f9e8:	d9400317 	ldw	r5,12(sp)
 200f9ec:	00ff0084 	movi	r3,-1022
 200f9f0:	1189c83a 	sub	r4,r2,r6
 200f9f4:	2145883a 	add	r2,r4,r5
 200f9f8:	10bfffc4 	addi	r2,r2,-1
 200f9fc:	10c09f0e 	bge	r2,r3,200fc7c <_strtod_r+0xb88>
 200fa00:	21810cc4 	addi	r6,r4,1075
 200fa04:	d8c01417 	ldw	r3,80(sp)
 200fa08:	4185883a 	add	r2,r8,r6
 200fa0c:	39a1883a 	add	r16,r7,r6
 200fa10:	18a5883a 	add	r18,r3,r2
 200fa14:	3807883a 	mov	r3,r7
 200fa18:	81c0010e 	bge	r16,r7,200fa20 <_strtod_r+0x92c>
 200fa1c:	8007883a 	mov	r3,r16
 200fa20:	9005883a 	mov	r2,r18
 200fa24:	1c80010e 	bge	r3,r18,200fa2c <_strtod_r+0x938>
 200fa28:	1805883a 	mov	r2,r3
 200fa2c:	0080e70e 	bge	zero,r2,200fdcc <_strtod_r+0xcd8>
 200fa30:	38a7c83a 	sub	r19,r7,r2
 200fa34:	80a1c83a 	sub	r16,r16,r2
 200fa38:	90a5c83a 	sub	r18,r18,r2
 200fa3c:	02400e0e 	bge	zero,r9,200fa78 <_strtod_r+0x984>
 200fa40:	480d883a 	mov	r6,r9
 200fa44:	b00b883a 	mov	r5,r22
 200fa48:	a809883a 	mov	r4,r21
 200fa4c:	200e2b40 	call	200e2b4 <__pow5mult>
 200fa50:	d9800517 	ldw	r6,20(sp)
 200fa54:	a809883a 	mov	r4,r21
 200fa58:	100b883a 	mov	r5,r2
 200fa5c:	102d883a 	mov	r22,r2
 200fa60:	200df900 	call	200df90 <__multiply>
 200fa64:	d9400517 	ldw	r5,20(sp)
 200fa68:	1023883a 	mov	r17,r2
 200fa6c:	a809883a 	mov	r4,r21
 200fa70:	200d5000 	call	200d500 <_Bfree>
 200fa74:	dc400515 	stw	r17,20(sp)
 200fa78:	0400050e 	bge	zero,r16,200fa90 <_strtod_r+0x99c>
 200fa7c:	d9400517 	ldw	r5,20(sp)
 200fa80:	800d883a 	mov	r6,r16
 200fa84:	a809883a 	mov	r4,r21
 200fa88:	200de440 	call	200de44 <__lshift>
 200fa8c:	d8800515 	stw	r2,20(sp)
 200fa90:	a000741e 	bne	r20,zero,200fc64 <_strtod_r+0xb70>
 200fa94:	0480050e 	bge	zero,r18,200faac <_strtod_r+0x9b8>
 200fa98:	b80b883a 	mov	r5,r23
 200fa9c:	900d883a 	mov	r6,r18
 200faa0:	a809883a 	mov	r4,r21
 200faa4:	200de440 	call	200de44 <__lshift>
 200faa8:	102f883a 	mov	r23,r2
 200faac:	04c0050e 	bge	zero,r19,200fac4 <_strtod_r+0x9d0>
 200fab0:	b00b883a 	mov	r5,r22
 200fab4:	980d883a 	mov	r6,r19
 200fab8:	a809883a 	mov	r4,r21
 200fabc:	200de440 	call	200de44 <__lshift>
 200fac0:	102d883a 	mov	r22,r2
 200fac4:	d9400517 	ldw	r5,20(sp)
 200fac8:	a809883a 	mov	r4,r21
 200facc:	b80d883a 	mov	r6,r23
 200fad0:	200dcb80 	call	200dcb8 <__mdiff>
 200fad4:	11000317 	ldw	r4,12(r2)
 200fad8:	b00b883a 	mov	r5,r22
 200fadc:	10000315 	stw	zero,12(r2)
 200fae0:	d9001315 	stw	r4,76(sp)
 200fae4:	1009883a 	mov	r4,r2
 200fae8:	1029883a 	mov	r20,r2
 200faec:	200d65c0 	call	200d65c <__mcmp>
 200faf0:	10017c16 	blt	r2,zero,20100e4 <_strtod_r+0xff0>
 200faf4:	1001af26 	beq	r2,zero,20101b4 <_strtod_r+0x10c0>
 200faf8:	a009883a 	mov	r4,r20
 200fafc:	b00b883a 	mov	r5,r22
 200fb00:	200d85c0 	call	200d85c <__ratio>
 200fb04:	0011883a 	mov	r8,zero
 200fb08:	02500034 	movhi	r9,16384
 200fb0c:	480f883a 	mov	r7,r9
 200fb10:	1009883a 	mov	r4,r2
 200fb14:	180b883a 	mov	r5,r3
 200fb18:	400d883a 	mov	r6,r8
 200fb1c:	1021883a 	mov	r16,r2
 200fb20:	1823883a 	mov	r17,r3
 200fb24:	20133bc0 	call	20133bc <__ledf2>
 200fb28:	00805716 	blt	zero,r2,200fc88 <_strtod_r+0xb94>
 200fb2c:	d9801317 	ldw	r6,76(sp)
 200fb30:	3025003a 	cmpeq	r18,r6,zero
 200fb34:	90008b1e 	bne	r18,zero,200fd64 <_strtod_r+0xc70>
 200fb38:	008ffc34 	movhi	r2,16368
 200fb3c:	0021883a 	mov	r16,zero
 200fb40:	1023883a 	mov	r17,r2
 200fb44:	d8000715 	stw	zero,28(sp)
 200fb48:	d8800815 	stw	r2,32(sp)
 200fb4c:	e1c00117 	ldw	r7,4(fp)
 200fb50:	009ff834 	movhi	r2,32736
 200fb54:	3cdffc2c 	andhi	r19,r7,32752
 200fb58:	98805e26 	beq	r19,r2,200fcd4 <_strtod_r+0xbe0>
 200fb5c:	d8801417 	ldw	r2,80(sp)
 200fb60:	10001b26 	beq	r2,zero,200fbd0 <_strtod_r+0xadc>
 200fb64:	0081a834 	movhi	r2,1696
 200fb68:	14c01936 	bltu	r2,r19,200fbd0 <_strtod_r+0xadc>
 200fb6c:	00bff034 	movhi	r2,65472
 200fb70:	00d07834 	movhi	r3,16864
 200fb74:	18ffffc4 	addi	r3,r3,-1
 200fb78:	180f883a 	mov	r7,r3
 200fb7c:	8009883a 	mov	r4,r16
 200fb80:	880b883a 	mov	r5,r17
 200fb84:	100d883a 	mov	r6,r2
 200fb88:	20133bc0 	call	20133bc <__ledf2>
 200fb8c:	00800b16 	blt	zero,r2,200fbbc <_strtod_r+0xac8>
 200fb90:	880b883a 	mov	r5,r17
 200fb94:	8009883a 	mov	r4,r16
 200fb98:	201248c0 	call	201248c <__fixunsdfsi>
 200fb9c:	1000df1e 	bne	r2,zero,200ff1c <_strtod_r+0xe28>
 200fba0:	0021883a 	mov	r16,zero
 200fba4:	044ffc34 	movhi	r17,16368
 200fba8:	9000d91e 	bne	r18,zero,200ff10 <_strtod_r+0xe1c>
 200fbac:	8005883a 	mov	r2,r16
 200fbb0:	8807883a 	mov	r3,r17
 200fbb4:	d8c00815 	stw	r3,32(sp)
 200fbb8:	d8800715 	stw	r2,28(sp)
 200fbbc:	d8800817 	ldw	r2,32(sp)
 200fbc0:	00c1ac34 	movhi	r3,1712
 200fbc4:	14c5c83a 	sub	r2,r2,r19
 200fbc8:	10c5883a 	add	r2,r2,r3
 200fbcc:	d8800815 	stw	r2,32(sp)
 200fbd0:	e0800017 	ldw	r2,0(fp)
 200fbd4:	e0c00117 	ldw	r3,4(fp)
 200fbd8:	1009883a 	mov	r4,r2
 200fbdc:	180b883a 	mov	r5,r3
 200fbe0:	200d6bc0 	call	200d6bc <__ulp>
 200fbe4:	d9800717 	ldw	r6,28(sp)
 200fbe8:	d9c00817 	ldw	r7,32(sp)
 200fbec:	180b883a 	mov	r5,r3
 200fbf0:	1009883a 	mov	r4,r2
 200fbf4:	2004fd00 	call	2004fd0 <__muldf3>
 200fbf8:	e2000017 	ldw	r8,0(fp)
 200fbfc:	e2400117 	ldw	r9,4(fp)
 200fc00:	180b883a 	mov	r5,r3
 200fc04:	1009883a 	mov	r4,r2
 200fc08:	480f883a 	mov	r7,r9
 200fc0c:	400d883a 	mov	r6,r8
 200fc10:	2004f5c0 	call	2004f5c <__adddf3>
 200fc14:	e0c00115 	stw	r3,4(fp)
 200fc18:	e0800015 	stw	r2,0(fp)
 200fc1c:	d8c01417 	ldw	r3,80(sp)
 200fc20:	e4800117 	ldw	r18,4(fp)
 200fc24:	1800021e 	bne	r3,zero,200fc30 <_strtod_r+0xb3c>
 200fc28:	909ffc2c 	andhi	r2,r18,32752
 200fc2c:	98807b26 	beq	r19,r2,200fe1c <_strtod_r+0xd28>
 200fc30:	d9400517 	ldw	r5,20(sp)
 200fc34:	a809883a 	mov	r4,r21
 200fc38:	200d5000 	call	200d500 <_Bfree>
 200fc3c:	a809883a 	mov	r4,r21
 200fc40:	b80b883a 	mov	r5,r23
 200fc44:	200d5000 	call	200d500 <_Bfree>
 200fc48:	a809883a 	mov	r4,r21
 200fc4c:	b00b883a 	mov	r5,r22
 200fc50:	200d5000 	call	200d500 <_Bfree>
 200fc54:	a809883a 	mov	r4,r21
 200fc58:	a00b883a 	mov	r5,r20
 200fc5c:	200d5000 	call	200d500 <_Bfree>
 200fc60:	003f3c06 	br	200f954 <_strtod_r+0x860>
 200fc64:	b80b883a 	mov	r5,r23
 200fc68:	a00d883a 	mov	r6,r20
 200fc6c:	a809883a 	mov	r4,r21
 200fc70:	200e2b40 	call	200e2b4 <__pow5mult>
 200fc74:	102f883a 	mov	r23,r2
 200fc78:	003f8606 	br	200fa94 <_strtod_r+0x9a0>
 200fc7c:	00800d84 	movi	r2,54
 200fc80:	114dc83a 	sub	r6,r2,r5
 200fc84:	003f5f06 	br	200fa04 <_strtod_r+0x910>
 200fc88:	0005883a 	mov	r2,zero
 200fc8c:	00cff834 	movhi	r3,16352
 200fc90:	880b883a 	mov	r5,r17
 200fc94:	8009883a 	mov	r4,r16
 200fc98:	100d883a 	mov	r6,r2
 200fc9c:	180f883a 	mov	r7,r3
 200fca0:	2004fd00 	call	2004fd0 <__muldf3>
 200fca4:	d9801317 	ldw	r6,76(sp)
 200fca8:	1021883a 	mov	r16,r2
 200fcac:	1823883a 	mov	r17,r3
 200fcb0:	3025003a 	cmpeq	r18,r6,zero
 200fcb4:	90000126 	beq	r18,zero,200fcbc <_strtod_r+0xbc8>
 200fcb8:	18e0003c 	xorhi	r3,r3,32768
 200fcbc:	d8800715 	stw	r2,28(sp)
 200fcc0:	d8c00815 	stw	r3,32(sp)
 200fcc4:	e1c00117 	ldw	r7,4(fp)
 200fcc8:	009ff834 	movhi	r2,32736
 200fccc:	3cdffc2c 	andhi	r19,r7,32752
 200fcd0:	98bfa21e 	bne	r19,r2,200fb5c <_strtod_r+0xa68>
 200fcd4:	e1000017 	ldw	r4,0(fp)
 200fcd8:	01bf2c34 	movhi	r6,64688
 200fcdc:	398d883a 	add	r6,r7,r6
 200fce0:	d9000b15 	stw	r4,44(sp)
 200fce4:	d9c00c15 	stw	r7,48(sp)
 200fce8:	300b883a 	mov	r5,r6
 200fcec:	e1800115 	stw	r6,4(fp)
 200fcf0:	200d6bc0 	call	200d6bc <__ulp>
 200fcf4:	d9800717 	ldw	r6,28(sp)
 200fcf8:	d9c00817 	ldw	r7,32(sp)
 200fcfc:	180b883a 	mov	r5,r3
 200fd00:	1009883a 	mov	r4,r2
 200fd04:	2004fd00 	call	2004fd0 <__muldf3>
 200fd08:	e2000017 	ldw	r8,0(fp)
 200fd0c:	e2400117 	ldw	r9,4(fp)
 200fd10:	180b883a 	mov	r5,r3
 200fd14:	1009883a 	mov	r4,r2
 200fd18:	480f883a 	mov	r7,r9
 200fd1c:	400d883a 	mov	r6,r8
 200fd20:	2004f5c0 	call	2004f5c <__adddf3>
 200fd24:	1009883a 	mov	r4,r2
 200fd28:	180b883a 	mov	r5,r3
 200fd2c:	009f2834 	movhi	r2,31904
 200fd30:	10bfffc4 	addi	r2,r2,-1
 200fd34:	18dffc2c 	andhi	r3,r3,32752
 200fd38:	e1000015 	stw	r4,0(fp)
 200fd3c:	e1400115 	stw	r5,4(fp)
 200fd40:	10c06f2e 	bgeu	r2,r3,200ff00 <_strtod_r+0xe0c>
 200fd44:	d8800c17 	ldw	r2,48(sp)
 200fd48:	011ffc34 	movhi	r4,32752
 200fd4c:	213fffc4 	addi	r4,r4,-1
 200fd50:	11007a26 	beq	r2,r4,200ff3c <_strtod_r+0xe48>
 200fd54:	01ffffc4 	movi	r7,-1
 200fd58:	e1000115 	stw	r4,4(fp)
 200fd5c:	e1c00015 	stw	r7,0(fp)
 200fd60:	003fb306 	br	200fc30 <_strtod_r+0xb3c>
 200fd64:	e0c00017 	ldw	r3,0(fp)
 200fd68:	1800221e 	bne	r3,zero,200fdf4 <_strtod_r+0xd00>
 200fd6c:	e0800117 	ldw	r2,4(fp)
 200fd70:	00c00434 	movhi	r3,16
 200fd74:	18ffffc4 	addi	r3,r3,-1
 200fd78:	10c4703a 	and	r2,r2,r3
 200fd7c:	1000211e 	bne	r2,zero,200fe04 <_strtod_r+0xd10>
 200fd80:	0005883a 	mov	r2,zero
 200fd84:	00cffc34 	movhi	r3,16368
 200fd88:	180f883a 	mov	r7,r3
 200fd8c:	8009883a 	mov	r4,r16
 200fd90:	880b883a 	mov	r5,r17
 200fd94:	100d883a 	mov	r6,r2
 200fd98:	20056740 	call	2005674 <__ltdf2>
 200fd9c:	10013c16 	blt	r2,zero,2010290 <_strtod_r+0x119c>
 200fda0:	0005883a 	mov	r2,zero
 200fda4:	00cff834 	movhi	r3,16352
 200fda8:	880b883a 	mov	r5,r17
 200fdac:	8009883a 	mov	r4,r16
 200fdb0:	180f883a 	mov	r7,r3
 200fdb4:	100d883a 	mov	r6,r2
 200fdb8:	2004fd00 	call	2004fd0 <__muldf3>
 200fdbc:	1823883a 	mov	r17,r3
 200fdc0:	1021883a 	mov	r16,r2
 200fdc4:	18e0003c 	xorhi	r3,r3,32768
 200fdc8:	003fbc06 	br	200fcbc <_strtod_r+0xbc8>
 200fdcc:	3827883a 	mov	r19,r7
 200fdd0:	003f1a06 	br	200fa3c <_strtod_r+0x948>
 200fdd4:	4091c83a 	sub	r8,r8,r2
 200fdd8:	003f0206 	br	200f9e4 <_strtod_r+0x8f0>
 200fddc:	d8c00f17 	ldw	r3,60(sp)
 200fde0:	0011883a 	mov	r8,zero
 200fde4:	0029883a 	mov	r20,zero
 200fde8:	00d3c83a 	sub	r9,zero,r3
 200fdec:	480f883a 	mov	r7,r9
 200fdf0:	003ef906 	br	200f9d8 <_strtod_r+0x8e4>
 200fdf4:	00800044 	movi	r2,1
 200fdf8:	1880021e 	bne	r3,r2,200fe04 <_strtod_r+0xd10>
 200fdfc:	e0800117 	ldw	r2,4(fp)
 200fe00:	1000a526 	beq	r2,zero,2010098 <_strtod_r+0xfa4>
 200fe04:	00affc34 	movhi	r2,49136
 200fe08:	0021883a 	mov	r16,zero
 200fe0c:	044ffc34 	movhi	r17,16368
 200fe10:	d8800815 	stw	r2,32(sp)
 200fe14:	d8000715 	stw	zero,28(sp)
 200fe18:	003f4c06 	br	200fb4c <_strtod_r+0xa58>
 200fe1c:	880b883a 	mov	r5,r17
 200fe20:	8009883a 	mov	r4,r16
 200fe24:	20057f40 	call	20057f4 <__fixdfsi>
 200fe28:	1009883a 	mov	r4,r2
 200fe2c:	20056fc0 	call	20056fc <__floatsidf>
 200fe30:	880b883a 	mov	r5,r17
 200fe34:	8009883a 	mov	r4,r16
 200fe38:	100d883a 	mov	r6,r2
 200fe3c:	180f883a 	mov	r7,r3
 200fe40:	2004edc0 	call	2004edc <__subdf3>
 200fe44:	d9001317 	ldw	r4,76(sp)
 200fe48:	100b883a 	mov	r5,r2
 200fe4c:	180d883a 	mov	r6,r3
 200fe50:	1021883a 	mov	r16,r2
 200fe54:	1823883a 	mov	r17,r3
 200fe58:	2000061e 	bne	r4,zero,200fe74 <_strtod_r+0xd80>
 200fe5c:	e0800017 	ldw	r2,0(fp)
 200fe60:	1000041e 	bne	r2,zero,200fe74 <_strtod_r+0xd80>
 200fe64:	00c00434 	movhi	r3,16
 200fe68:	18ffffc4 	addi	r3,r3,-1
 200fe6c:	90c4703a 	and	r2,r18,r3
 200fe70:	10004026 	beq	r2,zero,200ff74 <_strtod_r+0xe80>
 200fe74:	00a52834 	movhi	r2,38048
 200fe78:	108d6544 	addi	r2,r2,13717
 200fe7c:	00cff834 	movhi	r3,16352
 200fe80:	18ffffc4 	addi	r3,r3,-1
 200fe84:	180f883a 	mov	r7,r3
 200fe88:	8009883a 	mov	r4,r16
 200fe8c:	880b883a 	mov	r5,r17
 200fe90:	100d883a 	mov	r6,r2
 200fe94:	20056740 	call	2005674 <__ltdf2>
 200fe98:	10000916 	blt	r2,zero,200fec0 <_strtod_r+0xdcc>
 200fe9c:	008d6c34 	movhi	r2,13744
 200fea0:	10b94d44 	addi	r2,r2,-6859
 200fea4:	00cff834 	movhi	r3,16352
 200fea8:	880b883a 	mov	r5,r17
 200feac:	180f883a 	mov	r7,r3
 200feb0:	8009883a 	mov	r4,r16
 200feb4:	100d883a 	mov	r6,r2
 200feb8:	20055ec0 	call	20055ec <__gtdf2>
 200febc:	00bf5c0e 	bge	zero,r2,200fc30 <_strtod_r+0xb3c>
 200fec0:	d9400517 	ldw	r5,20(sp)
 200fec4:	a809883a 	mov	r4,r21
 200fec8:	200d5000 	call	200d500 <_Bfree>
 200fecc:	a809883a 	mov	r4,r21
 200fed0:	b80b883a 	mov	r5,r23
 200fed4:	200d5000 	call	200d500 <_Bfree>
 200fed8:	a809883a 	mov	r4,r21
 200fedc:	b00b883a 	mov	r5,r22
 200fee0:	200d5000 	call	200d500 <_Bfree>
 200fee4:	d9401017 	ldw	r5,64(sp)
 200fee8:	a809883a 	mov	r4,r21
 200feec:	200d5000 	call	200d500 <_Bfree>
 200fef0:	a809883a 	mov	r4,r21
 200fef4:	a00b883a 	mov	r5,r20
 200fef8:	200d5000 	call	200d500 <_Bfree>
 200fefc:	003cf406 	br	200f2d0 <_strtod_r+0x1dc>
 200ff00:	0080d434 	movhi	r2,848
 200ff04:	288d883a 	add	r6,r5,r2
 200ff08:	e1800115 	stw	r6,4(fp)
 200ff0c:	003f4306 	br	200fc1c <_strtod_r+0xb28>
 200ff10:	8005883a 	mov	r2,r16
 200ff14:	88e0003c 	xorhi	r3,r17,32768
 200ff18:	003f2606 	br	200fbb4 <_strtod_r+0xac0>
 200ff1c:	1009883a 	mov	r4,r2
 200ff20:	20134440 	call	2013444 <__floatunsidf>
 200ff24:	1021883a 	mov	r16,r2
 200ff28:	1823883a 	mov	r17,r3
 200ff2c:	003f1e06 	br	200fba8 <_strtod_r+0xab4>
 200ff30:	da000417 	ldw	r8,16(sp)
 200ff34:	39c00044 	addi	r7,r7,1
 200ff38:	003e6706 	br	200f8d8 <_strtod_r+0x7e4>
 200ff3c:	d8c00b17 	ldw	r3,44(sp)
 200ff40:	00bfffc4 	movi	r2,-1
 200ff44:	18bf831e 	bne	r3,r2,200fd54 <_strtod_r+0xc60>
 200ff48:	00c00884 	movi	r3,34
 200ff4c:	a8c00015 	stw	r3,0(r21)
 200ff50:	009ffc34 	movhi	r2,32752
 200ff54:	e0800115 	stw	r2,4(fp)
 200ff58:	e0000015 	stw	zero,0(fp)
 200ff5c:	003fd806 	br	200fec0 <_strtod_r+0xdcc>
 200ff60:	4007883a 	mov	r3,r8
 200ff64:	000d883a 	mov	r6,zero
 200ff68:	0029883a 	mov	r20,zero
 200ff6c:	0021883a 	mov	r16,zero
 200ff70:	003cc906 	br	200f298 <_strtod_r+0x1a4>
 200ff74:	00a52834 	movhi	r2,38048
 200ff78:	108d6544 	addi	r2,r2,13717
 200ff7c:	00cff434 	movhi	r3,16336
 200ff80:	18ffffc4 	addi	r3,r3,-1
 200ff84:	2809883a 	mov	r4,r5
 200ff88:	180f883a 	mov	r7,r3
 200ff8c:	300b883a 	mov	r5,r6
 200ff90:	100d883a 	mov	r6,r2
 200ff94:	20056740 	call	2005674 <__ltdf2>
 200ff98:	103f250e 	bge	r2,zero,200fc30 <_strtod_r+0xb3c>
 200ff9c:	003fc806 	br	200fec0 <_strtod_r+0xdcc>
 200ffa0:	0027883a 	mov	r19,zero
 200ffa4:	04800044 	movi	r18,1
 200ffa8:	0015883a 	mov	r10,zero
 200ffac:	003cc006 	br	200f2b0 <_strtod_r+0x1bc>
 200ffb0:	00800884 	movi	r2,34
 200ffb4:	a8800015 	stw	r2,0(r21)
 200ffb8:	019ffc34 	movhi	r6,32752
 200ffbc:	e1800115 	stw	r6,4(fp)
 200ffc0:	e0000015 	stw	zero,0(fp)
 200ffc4:	003cc206 	br	200f2d0 <_strtod_r+0x1dc>
 200ffc8:	015387c4 	movi	r5,19999
 200ffcc:	003d1e06 	br	200f448 <_strtod_r+0x354>
 200ffd0:	300a90fa 	slli	r5,r6,3
 200ffd4:	e0800017 	ldw	r2,0(fp)
 200ffd8:	e0c00117 	ldw	r3,4(fp)
 200ffdc:	010080b4 	movhi	r4,514
 200ffe0:	21041d04 	addi	r4,r4,4212
 200ffe4:	290b883a 	add	r5,r5,r4
 200ffe8:	2a000017 	ldw	r8,0(r5)
 200ffec:	2a400117 	ldw	r9,4(r5)
 200fff0:	1009883a 	mov	r4,r2
 200fff4:	180b883a 	mov	r5,r3
 200fff8:	480f883a 	mov	r7,r9
 200fffc:	400d883a 	mov	r6,r8
 2010000:	2004fd00 	call	2004fd0 <__muldf3>
 2010004:	e0c00115 	stw	r3,4(fp)
 2010008:	e0800015 	stw	r2,0(fp)
 201000c:	003cb006 	br	200f2d0 <_strtod_r+0x1dc>
 2010010:	d8800d17 	ldw	r2,52(sp)
 2010014:	e0800015 	stw	r2,0(fp)
 2010018:	d8c00e17 	ldw	r3,56(sp)
 201001c:	e0c00115 	stw	r3,4(fp)
 2010020:	9880020c 	andi	r2,r19,8
 2010024:	103caa26 	beq	r2,zero,200f2d0 <_strtod_r+0x1dc>
 2010028:	e0800117 	ldw	r2,4(fp)
 201002c:	10a00034 	orhi	r2,r2,32768
 2010030:	e0800115 	stw	r2,4(fp)
 2010034:	003ca606 	br	200f2d0 <_strtod_r+0x1dc>
 2010038:	009ffc34 	movhi	r2,32752
 201003c:	e0800115 	stw	r2,4(fp)
 2010040:	e0000015 	stw	zero,0(fp)
 2010044:	003ff606 	br	2010020 <_strtod_r+0xf2c>
 2010048:	00a00034 	movhi	r2,32768
 201004c:	10bfffc4 	addi	r2,r2,-1
 2010050:	00ffffc4 	movi	r3,-1
 2010054:	e0800115 	stw	r2,4(fp)
 2010058:	e0c00015 	stw	r3,0(fp)
 201005c:	003ff006 	br	2010020 <_strtod_r+0xf2c>
 2010060:	e0000115 	stw	zero,4(fp)
 2010064:	e0000015 	stw	zero,0(fp)
 2010068:	003fed06 	br	2010020 <_strtod_r+0xf2c>
 201006c:	d8800e17 	ldw	r2,56(sp)
 2010070:	29010cc4 	addi	r4,r5,1075
 2010074:	00fffc34 	movhi	r3,65520
 2010078:	18ffffc4 	addi	r3,r3,-1
 201007c:	2008953a 	slli	r4,r4,20
 2010080:	10c4703a 	and	r2,r2,r3
 2010084:	d8c00d17 	ldw	r3,52(sp)
 2010088:	1104b03a 	or	r2,r2,r4
 201008c:	e0800115 	stw	r2,4(fp)
 2010090:	e0c00015 	stw	r3,0(fp)
 2010094:	003fe206 	br	2010020 <_strtod_r+0xf2c>
 2010098:	00800884 	movi	r2,34
 201009c:	a8800015 	stw	r2,0(r21)
 20100a0:	e0000015 	stw	zero,0(fp)
 20100a4:	e0000115 	stw	zero,4(fp)
 20100a8:	003f8506 	br	200fec0 <_strtod_r+0xdcc>
 20100ac:	03800044 	movi	r14,1
 20100b0:	003d7706 	br	200f690 <_strtod_r+0x59c>
 20100b4:	99c5883a 	add	r2,r19,r7
 20100b8:	11ffffc4 	addi	r7,r2,-1
 20100bc:	00800204 	movi	r2,8
 20100c0:	3cc00044 	addi	r19,r7,1
 20100c4:	11c0df16 	blt	r2,r7,2010444 <_strtod_r+0x1350>
 20100c8:	a08002a4 	muli	r2,r20,10
 20100cc:	000f883a 	mov	r7,zero
 20100d0:	1269883a 	add	r20,r2,r9
 20100d4:	42000044 	addi	r8,r8,1
 20100d8:	da000415 	stw	r8,16(sp)
 20100dc:	41000007 	ldb	r4,0(r8)
 20100e0:	003d3706 	br	200f5c0 <_strtod_r+0x4cc>
 20100e4:	d9801317 	ldw	r6,76(sp)
 20100e8:	3000511e 	bne	r6,zero,2010230 <_strtod_r+0x113c>
 20100ec:	e0800017 	ldw	r2,0(fp)
 20100f0:	1000d81e 	bne	r2,zero,2010454 <_strtod_r+0x1360>
 20100f4:	e0c00117 	ldw	r3,4(fp)
 20100f8:	01000434 	movhi	r4,16
 20100fc:	213fffc4 	addi	r4,r4,-1
 2010100:	1904703a 	and	r2,r3,r4
 2010104:	1000b01e 	bne	r2,zero,20103c8 <_strtod_r+0x12d4>
 2010108:	18dffc2c 	andhi	r3,r3,32752
 201010c:	0081ac34 	movhi	r2,1712
 2010110:	10c1102e 	bgeu	r2,r3,2010554 <_strtod_r+0x1460>
 2010114:	a0800517 	ldw	r2,20(r20)
 2010118:	1000031e 	bne	r2,zero,2010128 <_strtod_r+0x1034>
 201011c:	a0c00417 	ldw	r3,16(r20)
 2010120:	00800044 	movi	r2,1
 2010124:	10c0420e 	bge	r2,r3,2010230 <_strtod_r+0x113c>
 2010128:	a00b883a 	mov	r5,r20
 201012c:	a809883a 	mov	r4,r21
 2010130:	01800044 	movi	r6,1
 2010134:	200de440 	call	200de44 <__lshift>
 2010138:	1009883a 	mov	r4,r2
 201013c:	b00b883a 	mov	r5,r22
 2010140:	1029883a 	mov	r20,r2
 2010144:	200d65c0 	call	200d65c <__mcmp>
 2010148:	0080c20e 	bge	zero,r2,2010454 <_strtod_r+0x1360>
 201014c:	e1800117 	ldw	r6,4(fp)
 2010150:	d9001417 	ldw	r4,80(sp)
 2010154:	2013003a 	cmpeq	r9,r4,zero
 2010158:	4800ef1e 	bne	r9,zero,2010518 <_strtod_r+0x1424>
 201015c:	30dffc2c 	andhi	r3,r6,32752
 2010160:	0081ac34 	movhi	r2,1712
 2010164:	10c0ec36 	bltu	r2,r3,2010518 <_strtod_r+0x1424>
 2010168:	0080dc34 	movhi	r2,880
 201016c:	10ffca2e 	bgeu	r2,r3,2010098 <_strtod_r+0xfa4>
 2010170:	e0800017 	ldw	r2,0(fp)
 2010174:	e0c00117 	ldw	r3,4(fp)
 2010178:	020e5434 	movhi	r8,14672
 201017c:	000d883a 	mov	r6,zero
 2010180:	400f883a 	mov	r7,r8
 2010184:	180b883a 	mov	r5,r3
 2010188:	1009883a 	mov	r4,r2
 201018c:	da000c15 	stw	r8,48(sp)
 2010190:	d8000b15 	stw	zero,44(sp)
 2010194:	2004fd00 	call	2004fd0 <__muldf3>
 2010198:	e0800015 	stw	r2,0(fp)
 201019c:	e0c00115 	stw	r3,4(fp)
 20101a0:	183f471e 	bne	r3,zero,200fec0 <_strtod_r+0xdcc>
 20101a4:	103f461e 	bne	r2,zero,200fec0 <_strtod_r+0xdcc>
 20101a8:	00800884 	movi	r2,34
 20101ac:	a8800015 	stw	r2,0(r21)
 20101b0:	003f4306 	br	200fec0 <_strtod_r+0xdcc>
 20101b4:	d8801317 	ldw	r2,76(sp)
 20101b8:	1025003a 	cmpeq	r18,r2,zero
 20101bc:	9000861e 	bne	r18,zero,20103d8 <_strtod_r+0x12e4>
 20101c0:	e1400117 	ldw	r5,4(fp)
 20101c4:	00c00434 	movhi	r3,16
 20101c8:	18ffffc4 	addi	r3,r3,-1
 20101cc:	28c4703a 	and	r2,r5,r3
 20101d0:	10c01b26 	beq	r2,r3,2010240 <_strtod_r+0x114c>
 20101d4:	e1c00017 	ldw	r7,0(fp)
 20101d8:	3880004c 	andi	r2,r7,1
 20101dc:	1005003a 	cmpeq	r2,r2,zero
 20101e0:	1000791e 	bne	r2,zero,20103c8 <_strtod_r+0x12d4>
 20101e4:	9000b126 	beq	r18,zero,20104ac <_strtod_r+0x13b8>
 20101e8:	e4400117 	ldw	r17,4(fp)
 20101ec:	3809883a 	mov	r4,r7
 20101f0:	3821883a 	mov	r16,r7
 20101f4:	880b883a 	mov	r5,r17
 20101f8:	200d6bc0 	call	200d6bc <__ulp>
 20101fc:	180f883a 	mov	r7,r3
 2010200:	880b883a 	mov	r5,r17
 2010204:	8009883a 	mov	r4,r16
 2010208:	100d883a 	mov	r6,r2
 201020c:	2004edc0 	call	2004edc <__subdf3>
 2010210:	1009883a 	mov	r4,r2
 2010214:	000d883a 	mov	r6,zero
 2010218:	000f883a 	mov	r7,zero
 201021c:	180b883a 	mov	r5,r3
 2010220:	e0800015 	stw	r2,0(fp)
 2010224:	e0c00115 	stw	r3,4(fp)
 2010228:	20132ac0 	call	20132ac <__nedf2>
 201022c:	103f9a26 	beq	r2,zero,2010098 <_strtod_r+0xfa4>
 2010230:	d9001417 	ldw	r4,80(sp)
 2010234:	2013003a 	cmpeq	r9,r4,zero
 2010238:	483f211e 	bne	r9,zero,200fec0 <_strtod_r+0xdcc>
 201023c:	003fcc06 	br	2010170 <_strtod_r+0x107c>
 2010240:	d9001417 	ldw	r4,80(sp)
 2010244:	e1c00017 	ldw	r7,0(fp)
 2010248:	2013003a 	cmpeq	r9,r4,zero
 201024c:	4800bd1e 	bne	r9,zero,2010544 <_strtod_r+0x1450>
 2010250:	28dffc2c 	andhi	r3,r5,32752
 2010254:	0081a834 	movhi	r2,1696
 2010258:	10c0ba36 	bltu	r2,r3,2010544 <_strtod_r+0x1450>
 201025c:	1804d53a 	srli	r2,r3,20
 2010260:	00c01ac4 	movi	r3,107
 2010264:	013fffc4 	movi	r4,-1
 2010268:	1887c83a 	sub	r3,r3,r2
 201026c:	20c4983a 	sll	r2,r4,r3
 2010270:	11ffd91e 	bne	r2,r7,20101d8 <_strtod_r+0x10e4>
 2010274:	28dffc2c 	andhi	r3,r5,32752
 2010278:	00800434 	movhi	r2,16
 201027c:	188d883a 	add	r6,r3,r2
 2010280:	e1800115 	stw	r6,4(fp)
 2010284:	e0000015 	stw	zero,0(fp)
 2010288:	483f0d1e 	bne	r9,zero,200fec0 <_strtod_r+0xdcc>
 201028c:	003fb806 	br	2010170 <_strtod_r+0x107c>
 2010290:	0021883a 	mov	r16,zero
 2010294:	0005883a 	mov	r2,zero
 2010298:	044ff834 	movhi	r17,16352
 201029c:	00eff834 	movhi	r3,49120
 20102a0:	003e8606 	br	200fcbc <_strtod_r+0xbc8>
 20102a4:	803d9e26 	beq	r16,zero,200f920 <_strtod_r+0x82c>
 20102a8:	0421c83a 	sub	r16,zero,r16
 20102ac:	814003cc 	andi	r5,r16,15
 20102b0:	28000f26 	beq	r5,zero,20102f0 <_strtod_r+0x11fc>
 20102b4:	280a90fa 	slli	r5,r5,3
 20102b8:	010080b4 	movhi	r4,514
 20102bc:	21041d04 	addi	r4,r4,4212
 20102c0:	e0800017 	ldw	r2,0(fp)
 20102c4:	290b883a 	add	r5,r5,r4
 20102c8:	2a000017 	ldw	r8,0(r5)
 20102cc:	e0c00117 	ldw	r3,4(fp)
 20102d0:	2a400117 	ldw	r9,4(r5)
 20102d4:	1009883a 	mov	r4,r2
 20102d8:	180b883a 	mov	r5,r3
 20102dc:	480f883a 	mov	r7,r9
 20102e0:	400d883a 	mov	r6,r8
 20102e4:	20053940 	call	2005394 <__divdf3>
 20102e8:	e0c00115 	stw	r3,4(fp)
 20102ec:	e0800015 	stw	r2,0(fp)
 20102f0:	8021d13a 	srai	r16,r16,4
 20102f4:	803d8a26 	beq	r16,zero,200f920 <_strtod_r+0x82c>
 20102f8:	008007c4 	movi	r2,31
 20102fc:	14002d16 	blt	r2,r16,20103b4 <_strtod_r+0x12c0>
 2010300:	8080040c 	andi	r2,r16,16
 2010304:	10009926 	beq	r2,zero,201056c <_strtod_r+0x1478>
 2010308:	00801a84 	movi	r2,106
 201030c:	d8801415 	stw	r2,80(sp)
 2010310:	0400110e 	bge	zero,r16,2010358 <_strtod_r+0x1264>
 2010314:	044080b4 	movhi	r17,514
 2010318:	8c446a04 	addi	r17,r17,4520
 201031c:	8080004c 	andi	r2,r16,1
 2010320:	1005003a 	cmpeq	r2,r2,zero
 2010324:	1000091e 	bne	r2,zero,201034c <_strtod_r+0x1258>
 2010328:	e0800017 	ldw	r2,0(fp)
 201032c:	e0c00117 	ldw	r3,4(fp)
 2010330:	89800017 	ldw	r6,0(r17)
 2010334:	89c00117 	ldw	r7,4(r17)
 2010338:	180b883a 	mov	r5,r3
 201033c:	1009883a 	mov	r4,r2
 2010340:	2004fd00 	call	2004fd0 <__muldf3>
 2010344:	e0c00115 	stw	r3,4(fp)
 2010348:	e0800015 	stw	r2,0(fp)
 201034c:	8021d07a 	srai	r16,r16,1
 2010350:	8c400204 	addi	r17,r17,8
 2010354:	043ff116 	blt	zero,r16,201031c <_strtod_r+0x1228>
 2010358:	d8c01417 	ldw	r3,80(sp)
 201035c:	18000d26 	beq	r3,zero,2010394 <_strtod_r+0x12a0>
 2010360:	e1000117 	ldw	r4,4(fp)
 2010364:	00c01ac4 	movi	r3,107
 2010368:	209ffc2c 	andhi	r2,r4,32752
 201036c:	1004d53a 	srli	r2,r2,20
 2010370:	1887c83a 	sub	r3,r3,r2
 2010374:	00c0070e 	bge	zero,r3,2010394 <_strtod_r+0x12a0>
 2010378:	008007c4 	movi	r2,31
 201037c:	10c0900e 	bge	r2,r3,20105c0 <_strtod_r+0x14cc>
 2010380:	00800d04 	movi	r2,52
 2010384:	e0000015 	stw	zero,0(fp)
 2010388:	10c0870e 	bge	r2,r3,20105a8 <_strtod_r+0x14b4>
 201038c:	0180dc34 	movhi	r6,880
 2010390:	e1800115 	stw	r6,4(fp)
 2010394:	e0800017 	ldw	r2,0(fp)
 2010398:	e0c00117 	ldw	r3,4(fp)
 201039c:	000d883a 	mov	r6,zero
 20103a0:	000f883a 	mov	r7,zero
 20103a4:	180b883a 	mov	r5,r3
 20103a8:	1009883a 	mov	r4,r2
 20103ac:	20132ac0 	call	20132ac <__nedf2>
 20103b0:	103d5c1e 	bne	r2,zero,200f924 <_strtod_r+0x830>
 20103b4:	00800884 	movi	r2,34
 20103b8:	a8800015 	stw	r2,0(r21)
 20103bc:	e0000015 	stw	zero,0(fp)
 20103c0:	e0000115 	stw	zero,4(fp)
 20103c4:	003bc206 	br	200f2d0 <_strtod_r+0x1dc>
 20103c8:	d8801417 	ldw	r2,80(sp)
 20103cc:	1013003a 	cmpeq	r9,r2,zero
 20103d0:	483ebb1e 	bne	r9,zero,200fec0 <_strtod_r+0xdcc>
 20103d4:	003f6606 	br	2010170 <_strtod_r+0x107c>
 20103d8:	e1800117 	ldw	r6,4(fp)
 20103dc:	00c00434 	movhi	r3,16
 20103e0:	18ffffc4 	addi	r3,r3,-1
 20103e4:	30c4703a 	and	r2,r6,r3
 20103e8:	103f7a1e 	bne	r2,zero,20101d4 <_strtod_r+0x10e0>
 20103ec:	e1c00017 	ldw	r7,0(fp)
 20103f0:	383f791e 	bne	r7,zero,20101d8 <_strtod_r+0x10e4>
 20103f4:	003f5606 	br	2010150 <_strtod_r+0x105c>
 20103f8:	d9800f17 	ldw	r6,60(sp)
 20103fc:	00bffa84 	movi	r2,-22
 2010400:	30bcd416 	blt	r6,r2,200f754 <_strtod_r+0x660>
 2010404:	317ffe24 	muli	r5,r6,-8
 2010408:	010080b4 	movhi	r4,514
 201040c:	21041d04 	addi	r4,r4,4212
 2010410:	e0800017 	ldw	r2,0(fp)
 2010414:	290b883a 	add	r5,r5,r4
 2010418:	2a000017 	ldw	r8,0(r5)
 201041c:	e0c00117 	ldw	r3,4(fp)
 2010420:	2a400117 	ldw	r9,4(r5)
 2010424:	1009883a 	mov	r4,r2
 2010428:	180b883a 	mov	r5,r3
 201042c:	480f883a 	mov	r7,r9
 2010430:	400d883a 	mov	r6,r8
 2010434:	20053940 	call	2005394 <__divdf3>
 2010438:	e0c00115 	stw	r3,4(fp)
 201043c:	e0800015 	stw	r2,0(fp)
 2010440:	003ba306 	br	200f2d0 <_strtod_r+0x1dc>
 2010444:	00800404 	movi	r2,16
 2010448:	14c02f0e 	bge	r2,r19,2010508 <_strtod_r+0x1414>
 201044c:	000f883a 	mov	r7,zero
 2010450:	003f2006 	br	20100d4 <_strtod_r+0xfe0>
 2010454:	d9801417 	ldw	r6,80(sp)
 2010458:	3013003a 	cmpeq	r9,r6,zero
 201045c:	483e981e 	bne	r9,zero,200fec0 <_strtod_r+0xdcc>
 2010460:	003f4306 	br	2010170 <_strtod_r+0x107c>
 2010464:	00801a44 	movi	r2,105
 2010468:	20bc6326 	beq	r4,r2,200f5f8 <_strtod_r+0x504>
 201046c:	00801b84 	movi	r2,110
 2010470:	20bbba1e 	bne	r4,r2,200f35c <_strtod_r+0x268>
 2010474:	dc000404 	addi	r16,sp,16
 2010478:	8009883a 	mov	r4,r16
 201047c:	014080b4 	movhi	r5,514
 2010480:	29446904 	addi	r5,r5,4516
 2010484:	200f0ac0 	call	200f0ac <match>
 2010488:	103bb426 	beq	r2,zero,200f35c <_strtod_r+0x268>
 201048c:	d8800417 	ldw	r2,16(sp)
 2010490:	00c00a04 	movi	r3,40
 2010494:	11000007 	ldb	r4,0(r2)
 2010498:	20c03626 	beq	r4,r3,2010574 <_strtod_r+0x1480>
 201049c:	01bffe34 	movhi	r6,65528
 20104a0:	e1800115 	stw	r6,4(fp)
 20104a4:	e0000015 	stw	zero,0(fp)
 20104a8:	003b8906 	br	200f2d0 <_strtod_r+0x1dc>
 20104ac:	e4400117 	ldw	r17,4(fp)
 20104b0:	3809883a 	mov	r4,r7
 20104b4:	3821883a 	mov	r16,r7
 20104b8:	880b883a 	mov	r5,r17
 20104bc:	200d6bc0 	call	200d6bc <__ulp>
 20104c0:	100d883a 	mov	r6,r2
 20104c4:	880b883a 	mov	r5,r17
 20104c8:	180f883a 	mov	r7,r3
 20104cc:	8009883a 	mov	r4,r16
 20104d0:	2004f5c0 	call	2004f5c <__adddf3>
 20104d4:	d9801417 	ldw	r6,80(sp)
 20104d8:	e0c00115 	stw	r3,4(fp)
 20104dc:	e0800015 	stw	r2,0(fp)
 20104e0:	3013003a 	cmpeq	r9,r6,zero
 20104e4:	483e761e 	bne	r9,zero,200fec0 <_strtod_r+0xdcc>
 20104e8:	003f2106 	br	2010170 <_strtod_r+0x107c>
 20104ec:	000f883a 	mov	r7,zero
 20104f0:	003cf006 	br	200f8b4 <_strtod_r+0x7c0>
 20104f4:	0080d434 	movhi	r2,848
 20104f8:	188d883a 	add	r6,r3,r2
 20104fc:	d8001415 	stw	zero,80(sp)
 2010500:	e1800115 	stw	r6,4(fp)
 2010504:	003d0706 	br	200f924 <_strtod_r+0x830>
 2010508:	808002a4 	muli	r2,r16,10
 201050c:	000f883a 	mov	r7,zero
 2010510:	1261883a 	add	r16,r2,r9
 2010514:	003eef06 	br	20100d4 <_strtod_r+0xfe0>
 2010518:	309ffc2c 	andhi	r2,r6,32752
 201051c:	00fffc34 	movhi	r3,65520
 2010520:	10c5883a 	add	r2,r2,r3
 2010524:	00c00434 	movhi	r3,16
 2010528:	18ffffc4 	addi	r3,r3,-1
 201052c:	10ccb03a 	or	r6,r2,r3
 2010530:	01ffffc4 	movi	r7,-1
 2010534:	e1800115 	stw	r6,4(fp)
 2010538:	e1c00015 	stw	r7,0(fp)
 201053c:	483e601e 	bne	r9,zero,200fec0 <_strtod_r+0xdcc>
 2010540:	003f0b06 	br	2010170 <_strtod_r+0x107c>
 2010544:	00bfffc4 	movi	r2,-1
 2010548:	003f4906 	br	2010270 <_strtod_r+0x117c>
 201054c:	0025883a 	mov	r18,zero
 2010550:	003cb106 	br	200f818 <_strtod_r+0x724>
 2010554:	d8c01417 	ldw	r3,80(sp)
 2010558:	1813003a 	cmpeq	r9,r3,zero
 201055c:	483e581e 	bne	r9,zero,200fec0 <_strtod_r+0xdcc>
 2010560:	003f0306 	br	2010170 <_strtod_r+0x107c>
 2010564:	980f883a 	mov	r7,r19
 2010568:	003ed406 	br	20100bc <_strtod_r+0xfc8>
 201056c:	d8001415 	stw	zero,80(sp)
 2010570:	003f6706 	br	2010310 <_strtod_r+0x121c>
 2010574:	8009883a 	mov	r4,r16
 2010578:	014080b4 	movhi	r5,514
 201057c:	29475504 	addi	r5,r5,7508
 2010580:	d9800d04 	addi	r6,sp,52
 2010584:	20120e40 	call	20120e4 <__hexnan>
 2010588:	00c00144 	movi	r3,5
 201058c:	10ffc31e 	bne	r2,r3,201049c <_strtod_r+0x13a8>
 2010590:	d8800e17 	ldw	r2,56(sp)
 2010594:	d9c00d17 	ldw	r7,52(sp)
 2010598:	119ffc34 	orhi	r6,r2,32752
 201059c:	e1800115 	stw	r6,4(fp)
 20105a0:	e1c00015 	stw	r7,0(fp)
 20105a4:	003b4a06 	br	200f2d0 <_strtod_r+0x1dc>
 20105a8:	18fff804 	addi	r3,r3,-32
 20105ac:	00bfffc4 	movi	r2,-1
 20105b0:	10c4983a 	sll	r2,r2,r3
 20105b4:	208c703a 	and	r6,r4,r2
 20105b8:	e1800115 	stw	r6,4(fp)
 20105bc:	003f7506 	br	2010394 <_strtod_r+0x12a0>
 20105c0:	00bfffc4 	movi	r2,-1
 20105c4:	10c4983a 	sll	r2,r2,r3
 20105c8:	e0c00017 	ldw	r3,0(fp)
 20105cc:	188e703a 	and	r7,r3,r2
 20105d0:	e1c00015 	stw	r7,0(fp)
 20105d4:	003f6f06 	br	2010394 <_strtod_r+0x12a0>

020105d8 <strtof>:
 20105d8:	defffa04 	addi	sp,sp,-24
 20105dc:	dd000415 	stw	r20,16(sp)
 20105e0:	050080b4 	movhi	r20,514
 20105e4:	a50c1704 	addi	r20,r20,12380
 20105e8:	2007883a 	mov	r3,r4
 20105ec:	a1000017 	ldw	r4,0(r20)
 20105f0:	280d883a 	mov	r6,r5
 20105f4:	180b883a 	mov	r5,r3
 20105f8:	dfc00515 	stw	ra,20(sp)
 20105fc:	dcc00315 	stw	r19,12(sp)
 2010600:	dc800215 	stw	r18,8(sp)
 2010604:	dc400115 	stw	r17,4(sp)
 2010608:	dc000015 	stw	r16,0(sp)
 201060c:	200f0f40 	call	200f0f4 <_strtod_r>
 2010610:	180b883a 	mov	r5,r3
 2010614:	1009883a 	mov	r4,r2
 2010618:	1823883a 	mov	r17,r3
 201061c:	1021883a 	mov	r16,r2
 2010620:	20059040 	call	2005904 <__truncdfsf2>
 2010624:	1009883a 	mov	r4,r2
 2010628:	000b883a 	mov	r5,zero
 201062c:	1025883a 	mov	r18,r2
 2010630:	1027883a 	mov	r19,r2
 2010634:	20130bc0 	call	20130bc <__nesf2>
 2010638:	000d883a 	mov	r6,zero
 201063c:	000f883a 	mov	r7,zero
 2010640:	8009883a 	mov	r4,r16
 2010644:	880b883a 	mov	r5,r17
 2010648:	10000e1e 	bne	r2,zero,2010684 <strtof+0xac>
 201064c:	20132ac0 	call	20132ac <__nedf2>
 2010650:	10000c26 	beq	r2,zero,2010684 <strtof+0xac>
 2010654:	a0c00017 	ldw	r3,0(r20)
 2010658:	00800884 	movi	r2,34
 201065c:	18800015 	stw	r2,0(r3)
 2010660:	9805883a 	mov	r2,r19
 2010664:	dfc00517 	ldw	ra,20(sp)
 2010668:	dd000417 	ldw	r20,16(sp)
 201066c:	dcc00317 	ldw	r19,12(sp)
 2010670:	dc800217 	ldw	r18,8(sp)
 2010674:	dc400117 	ldw	r17,4(sp)
 2010678:	dc000017 	ldw	r16,0(sp)
 201067c:	dec00604 	addi	sp,sp,24
 2010680:	f800283a 	ret
 2010684:	9009883a 	mov	r4,r18
 2010688:	015fe034 	movhi	r5,32640
 201068c:	297fffc4 	addi	r5,r5,-1
 2010690:	20131340 	call	2013134 <__gtsf2>
 2010694:	00ffffc4 	movi	r3,-1
 2010698:	011ffc34 	movhi	r4,32752
 201069c:	213fffc4 	addi	r4,r4,-1
 20106a0:	200f883a 	mov	r7,r4
 20106a4:	180d883a 	mov	r6,r3
 20106a8:	8009883a 	mov	r4,r16
 20106ac:	880b883a 	mov	r5,r17
 20106b0:	00800f16 	blt	zero,r2,20106f0 <strtof+0x118>
 20106b4:	9009883a 	mov	r4,r18
 20106b8:	017fe034 	movhi	r5,65408
 20106bc:	297fffc4 	addi	r5,r5,-1
 20106c0:	20131ac0 	call	20131ac <__ltsf2>
 20106c4:	023fffc4 	movi	r8,-1
 20106c8:	027ffc34 	movhi	r9,65520
 20106cc:	4a7fffc4 	addi	r9,r9,-1
 20106d0:	880b883a 	mov	r5,r17
 20106d4:	480f883a 	mov	r7,r9
 20106d8:	8009883a 	mov	r4,r16
 20106dc:	400d883a 	mov	r6,r8
 20106e0:	103fdf0e 	bge	r2,zero,2010660 <strtof+0x88>
 20106e4:	20056740 	call	2005674 <__ltdf2>
 20106e8:	103fda0e 	bge	r2,zero,2010654 <strtof+0x7c>
 20106ec:	003fdc06 	br	2010660 <strtof+0x88>
 20106f0:	20055ec0 	call	20055ec <__gtdf2>
 20106f4:	00bfd70e 	bge	zero,r2,2010654 <strtof+0x7c>
 20106f8:	003fee06 	br	20106b4 <strtof+0xdc>

020106fc <strtod>:
 20106fc:	018080b4 	movhi	r6,514
 2010700:	318c1704 	addi	r6,r6,12380
 2010704:	2007883a 	mov	r3,r4
 2010708:	31000017 	ldw	r4,0(r6)
 201070c:	280d883a 	mov	r6,r5
 2010710:	180b883a 	mov	r5,r3
 2010714:	200f0f41 	jmpi	200f0f4 <_strtod_r>

02010718 <_strtol_r>:
 2010718:	defff304 	addi	sp,sp,-52
 201071c:	008080b4 	movhi	r2,514
 2010720:	108c1b04 	addi	r2,r2,12396
 2010724:	dcc00615 	stw	r19,24(sp)
 2010728:	14c00017 	ldw	r19,0(r2)
 201072c:	ddc00a15 	stw	r23,40(sp)
 2010730:	dc000315 	stw	r16,12(sp)
 2010734:	dfc00c15 	stw	ra,48(sp)
 2010738:	df000b15 	stw	fp,44(sp)
 201073c:	dd800915 	stw	r22,36(sp)
 2010740:	dd400815 	stw	r21,32(sp)
 2010744:	dd000715 	stw	r20,28(sp)
 2010748:	dc800515 	stw	r18,20(sp)
 201074c:	dc400415 	stw	r17,16(sp)
 2010750:	282f883a 	mov	r23,r5
 2010754:	d9000015 	stw	r4,0(sp)
 2010758:	d9800115 	stw	r6,4(sp)
 201075c:	2821883a 	mov	r16,r5
 2010760:	84400007 	ldb	r17,0(r16)
 2010764:	84000044 	addi	r16,r16,1
 2010768:	9c47883a 	add	r3,r19,r17
 201076c:	18800003 	ldbu	r2,0(r3)
 2010770:	1080020c 	andi	r2,r2,8
 2010774:	103ffa1e 	bne	r2,zero,2010760 <_strtol_r+0x48>
 2010778:	00800b44 	movi	r2,45
 201077c:	88805c26 	beq	r17,r2,20108f0 <_strtol_r+0x1d8>
 2010780:	00800ac4 	movi	r2,43
 2010784:	88805726 	beq	r17,r2,20108e4 <_strtol_r+0x1cc>
 2010788:	0039883a 	mov	fp,zero
 201078c:	3807003a 	cmpeq	r3,r7,zero
 2010790:	1800431e 	bne	r3,zero,20108a0 <_strtol_r+0x188>
 2010794:	00800404 	movi	r2,16
 2010798:	38804126 	beq	r7,r2,20108a0 <_strtol_r+0x188>
 201079c:	3829883a 	mov	r20,r7
 20107a0:	e02cc03a 	cmpne	r22,fp,zero
 20107a4:	b0004b1e 	bne	r22,zero,20108d4 <_strtol_r+0x1bc>
 20107a8:	04a00034 	movhi	r18,32768
 20107ac:	94bfffc4 	addi	r18,r18,-1
 20107b0:	9009883a 	mov	r4,r18
 20107b4:	a00b883a 	mov	r5,r20
 20107b8:	d9c00215 	stw	r7,8(sp)
 20107bc:	2005abc0 	call	2005abc <__umodsi3>
 20107c0:	9009883a 	mov	r4,r18
 20107c4:	a00b883a 	mov	r5,r20
 20107c8:	102b883a 	mov	r21,r2
 20107cc:	2005ab40 	call	2005ab4 <__udivsi3>
 20107d0:	1011883a 	mov	r8,r2
 20107d4:	9c45883a 	add	r2,r19,r17
 20107d8:	11000003 	ldbu	r4,0(r2)
 20107dc:	000b883a 	mov	r5,zero
 20107e0:	000d883a 	mov	r6,zero
 20107e4:	20c0010c 	andi	r3,r4,4
 20107e8:	d9c00217 	ldw	r7,8(sp)
 20107ec:	18000e26 	beq	r3,zero,2010828 <_strtol_r+0x110>
 20107f0:	88fff404 	addi	r3,r17,-48
 20107f4:	19c0140e 	bge	r3,r7,2010848 <_strtol_r+0x130>
 20107f8:	30003116 	blt	r6,zero,20108c0 <_strtol_r+0x1a8>
 20107fc:	41403036 	bltu	r8,r5,20108c0 <_strtol_r+0x1a8>
 2010800:	2a002e26 	beq	r5,r8,20108bc <_strtol_r+0x1a4>
 2010804:	2d05383a 	mul	r2,r5,r20
 2010808:	01800044 	movi	r6,1
 201080c:	10cb883a 	add	r5,r2,r3
 2010810:	84400007 	ldb	r17,0(r16)
 2010814:	84000044 	addi	r16,r16,1
 2010818:	9c45883a 	add	r2,r19,r17
 201081c:	11000003 	ldbu	r4,0(r2)
 2010820:	20c0010c 	andi	r3,r4,4
 2010824:	183ff21e 	bne	r3,zero,20107f0 <_strtol_r+0xd8>
 2010828:	208000cc 	andi	r2,r4,3
 201082c:	10000626 	beq	r2,zero,2010848 <_strtol_r+0x130>
 2010830:	2080004c 	andi	r2,r4,1
 2010834:	1005003a 	cmpeq	r2,r2,zero
 2010838:	1000231e 	bne	r2,zero,20108c8 <_strtol_r+0x1b0>
 201083c:	00800dc4 	movi	r2,55
 2010840:	8887c83a 	sub	r3,r17,r2
 2010844:	19ffec16 	blt	r3,r7,20107f8 <_strtol_r+0xe0>
 2010848:	30002d16 	blt	r6,zero,2010900 <_strtol_r+0x1e8>
 201084c:	b000231e 	bne	r22,zero,20108dc <_strtol_r+0x1c4>
 2010850:	2807883a 	mov	r3,r5
 2010854:	d8800117 	ldw	r2,4(sp)
 2010858:	10000426 	beq	r2,zero,201086c <_strtol_r+0x154>
 201085c:	30000126 	beq	r6,zero,2010864 <_strtol_r+0x14c>
 2010860:	85ffffc4 	addi	r23,r16,-1
 2010864:	d9000117 	ldw	r4,4(sp)
 2010868:	25c00015 	stw	r23,0(r4)
 201086c:	1805883a 	mov	r2,r3
 2010870:	dfc00c17 	ldw	ra,48(sp)
 2010874:	df000b17 	ldw	fp,44(sp)
 2010878:	ddc00a17 	ldw	r23,40(sp)
 201087c:	dd800917 	ldw	r22,36(sp)
 2010880:	dd400817 	ldw	r21,32(sp)
 2010884:	dd000717 	ldw	r20,28(sp)
 2010888:	dcc00617 	ldw	r19,24(sp)
 201088c:	dc800517 	ldw	r18,20(sp)
 2010890:	dc400417 	ldw	r17,16(sp)
 2010894:	dc000317 	ldw	r16,12(sp)
 2010898:	dec00d04 	addi	sp,sp,52
 201089c:	f800283a 	ret
 20108a0:	00800c04 	movi	r2,48
 20108a4:	88801d26 	beq	r17,r2,201091c <_strtol_r+0x204>
 20108a8:	183fbc26 	beq	r3,zero,201079c <_strtol_r+0x84>
 20108ac:	00800c04 	movi	r2,48
 20108b0:	88802726 	beq	r17,r2,2010950 <_strtol_r+0x238>
 20108b4:	01c00284 	movi	r7,10
 20108b8:	003fb806 	br	201079c <_strtol_r+0x84>
 20108bc:	a8ffd10e 	bge	r21,r3,2010804 <_strtol_r+0xec>
 20108c0:	01bfffc4 	movi	r6,-1
 20108c4:	003fd206 	br	2010810 <_strtol_r+0xf8>
 20108c8:	008015c4 	movi	r2,87
 20108cc:	8887c83a 	sub	r3,r17,r2
 20108d0:	003fdc06 	br	2010844 <_strtol_r+0x12c>
 20108d4:	04a00034 	movhi	r18,32768
 20108d8:	003fb506 	br	20107b0 <_strtol_r+0x98>
 20108dc:	0147c83a 	sub	r3,zero,r5
 20108e0:	003fdc06 	br	2010854 <_strtol_r+0x13c>
 20108e4:	84400007 	ldb	r17,0(r16)
 20108e8:	84000044 	addi	r16,r16,1
 20108ec:	003fa606 	br	2010788 <_strtol_r+0x70>
 20108f0:	84400007 	ldb	r17,0(r16)
 20108f4:	07000044 	movi	fp,1
 20108f8:	84000044 	addi	r16,r16,1
 20108fc:	003fa306 	br	201078c <_strtol_r+0x74>
 2010900:	e005003a 	cmpeq	r2,fp,zero
 2010904:	10000f1e 	bne	r2,zero,2010944 <_strtol_r+0x22c>
 2010908:	00e00034 	movhi	r3,32768
 201090c:	d9000017 	ldw	r4,0(sp)
 2010910:	00800884 	movi	r2,34
 2010914:	20800015 	stw	r2,0(r4)
 2010918:	003fce06 	br	2010854 <_strtol_r+0x13c>
 201091c:	81000007 	ldb	r4,0(r16)
 2010920:	00801e04 	movi	r2,120
 2010924:	20800226 	beq	r4,r2,2010930 <_strtol_r+0x218>
 2010928:	00801604 	movi	r2,88
 201092c:	20bfde1e 	bne	r4,r2,20108a8 <_strtol_r+0x190>
 2010930:	84400047 	ldb	r17,1(r16)
 2010934:	01c00404 	movi	r7,16
 2010938:	84000084 	addi	r16,r16,2
 201093c:	3829883a 	mov	r20,r7
 2010940:	003f9706 	br	20107a0 <_strtol_r+0x88>
 2010944:	00e00034 	movhi	r3,32768
 2010948:	18ffffc4 	addi	r3,r3,-1
 201094c:	003fef06 	br	201090c <_strtol_r+0x1f4>
 2010950:	01c00204 	movi	r7,8
 2010954:	3829883a 	mov	r20,r7
 2010958:	003f9106 	br	20107a0 <_strtol_r+0x88>

0201095c <strtol>:
 201095c:	008080b4 	movhi	r2,514
 2010960:	108c1704 	addi	r2,r2,12380
 2010964:	2013883a 	mov	r9,r4
 2010968:	11000017 	ldw	r4,0(r2)
 201096c:	2805883a 	mov	r2,r5
 2010970:	300f883a 	mov	r7,r6
 2010974:	480b883a 	mov	r5,r9
 2010978:	100d883a 	mov	r6,r2
 201097c:	20107181 	jmpi	2010718 <_strtol_r>

02010980 <_strtoll_r>:
 2010980:	defff004 	addi	sp,sp,-64
 2010984:	008080b4 	movhi	r2,514
 2010988:	108c1b04 	addi	r2,r2,12396
 201098c:	df000e15 	stw	fp,56(sp)
 2010990:	17000017 	ldw	fp,0(r2)
 2010994:	ddc00d15 	stw	r23,52(sp)
 2010998:	dd000a15 	stw	r20,40(sp)
 201099c:	dfc00f15 	stw	ra,60(sp)
 20109a0:	dd800c15 	stw	r22,48(sp)
 20109a4:	dd400b15 	stw	r21,44(sp)
 20109a8:	dcc00915 	stw	r19,36(sp)
 20109ac:	dc800815 	stw	r18,32(sp)
 20109b0:	dc400715 	stw	r17,28(sp)
 20109b4:	dc000615 	stw	r16,24(sp)
 20109b8:	d9400315 	stw	r5,12(sp)
 20109bc:	d9000215 	stw	r4,8(sp)
 20109c0:	d9800415 	stw	r6,16(sp)
 20109c4:	382f883a 	mov	r23,r7
 20109c8:	2829883a 	mov	r20,r5
 20109cc:	a4c00007 	ldb	r19,0(r20)
 20109d0:	a5000044 	addi	r20,r20,1
 20109d4:	e4c7883a 	add	r3,fp,r19
 20109d8:	18800003 	ldbu	r2,0(r3)
 20109dc:	1080020c 	andi	r2,r2,8
 20109e0:	103ffa1e 	bne	r2,zero,20109cc <_strtoll_r+0x4c>
 20109e4:	00800b44 	movi	r2,45
 20109e8:	98808826 	beq	r19,r2,2010c0c <_strtoll_r+0x28c>
 20109ec:	00800ac4 	movi	r2,43
 20109f0:	98808326 	beq	r19,r2,2010c00 <_strtoll_r+0x280>
 20109f4:	d8000115 	stw	zero,4(sp)
 20109f8:	b807003a 	cmpeq	r3,r23,zero
 20109fc:	18005f1e 	bne	r3,zero,2010b7c <_strtoll_r+0x1fc>
 2010a00:	00800404 	movi	r2,16
 2010a04:	b8805d26 	beq	r23,r2,2010b7c <_strtoll_r+0x1fc>
 2010a08:	b82dd7fa 	srai	r22,r23,31
 2010a0c:	b82b883a 	mov	r21,r23
 2010a10:	d8c00117 	ldw	r3,4(sp)
 2010a14:	1806c03a 	cmpne	r3,r3,zero
 2010a18:	d8c00515 	stw	r3,20(sp)
 2010a1c:	1800631e 	bne	r3,zero,2010bac <_strtoll_r+0x22c>
 2010a20:	043fffc4 	movi	r16,-1
 2010a24:	04600034 	movhi	r17,32768
 2010a28:	8c7fffc4 	addi	r17,r17,-1
 2010a2c:	880b883a 	mov	r5,r17
 2010a30:	8009883a 	mov	r4,r16
 2010a34:	a80d883a 	mov	r6,r21
 2010a38:	b00f883a 	mov	r7,r22
 2010a3c:	2012b0c0 	call	2012b0c <__umoddi3>
 2010a40:	880b883a 	mov	r5,r17
 2010a44:	8009883a 	mov	r4,r16
 2010a48:	b00f883a 	mov	r7,r22
 2010a4c:	a80d883a 	mov	r6,r21
 2010a50:	d8800015 	stw	r2,0(sp)
 2010a54:	20125300 	call	2012530 <__udivdi3>
 2010a58:	1023883a 	mov	r17,r2
 2010a5c:	e4c5883a 	add	r2,fp,r19
 2010a60:	11000003 	ldbu	r4,0(r2)
 2010a64:	1825883a 	mov	r18,r3
 2010a68:	0015883a 	mov	r10,zero
 2010a6c:	20c0010c 	andi	r3,r4,4
 2010a70:	0017883a 	mov	r11,zero
 2010a74:	000f883a 	mov	r7,zero
 2010a78:	18001a26 	beq	r3,zero,2010ae4 <_strtoll_r+0x164>
 2010a7c:	9c3ff404 	addi	r16,r19,-48
 2010a80:	85c0200e 	bge	r16,r23,2010b04 <_strtoll_r+0x184>
 2010a84:	38003b16 	blt	r7,zero,2010b74 <_strtoll_r+0x1f4>
 2010a88:	92c03a36 	bltu	r18,r11,2010b74 <_strtoll_r+0x1f4>
 2010a8c:	5c803826 	beq	r11,r18,2010b70 <_strtoll_r+0x1f0>
 2010a90:	54404c26 	beq	r10,r17,2010bc4 <_strtoll_r+0x244>
 2010a94:	580b883a 	mov	r5,r11
 2010a98:	5009883a 	mov	r4,r10
 2010a9c:	a80d883a 	mov	r6,r21
 2010aa0:	b00f883a 	mov	r7,r22
 2010aa4:	2005ac40 	call	2005ac4 <__muldi3>
 2010aa8:	8013d7fa 	srai	r9,r16,31
 2010aac:	100d883a 	mov	r6,r2
 2010ab0:	1405883a 	add	r2,r2,r16
 2010ab4:	118d803a 	cmpltu	r6,r2,r6
 2010ab8:	1a47883a 	add	r3,r3,r9
 2010abc:	30cd883a 	add	r6,r6,r3
 2010ac0:	1015883a 	mov	r10,r2
 2010ac4:	3017883a 	mov	r11,r6
 2010ac8:	01c00044 	movi	r7,1
 2010acc:	a4c00007 	ldb	r19,0(r20)
 2010ad0:	a5000044 	addi	r20,r20,1
 2010ad4:	e4c5883a 	add	r2,fp,r19
 2010ad8:	11000003 	ldbu	r4,0(r2)
 2010adc:	20c0010c 	andi	r3,r4,4
 2010ae0:	183fe61e 	bne	r3,zero,2010a7c <_strtoll_r+0xfc>
 2010ae4:	208000cc 	andi	r2,r4,3
 2010ae8:	10000626 	beq	r2,zero,2010b04 <_strtoll_r+0x184>
 2010aec:	2080004c 	andi	r2,r4,1
 2010af0:	1005003a 	cmpeq	r2,r2,zero
 2010af4:	1000301e 	bne	r2,zero,2010bb8 <_strtoll_r+0x238>
 2010af8:	02000dc4 	movi	r8,55
 2010afc:	9a21c83a 	sub	r16,r19,r8
 2010b00:	85ffe016 	blt	r16,r23,2010a84 <_strtoll_r+0x104>
 2010b04:	38004616 	blt	r7,zero,2010c20 <_strtoll_r+0x2a0>
 2010b08:	d8800517 	ldw	r2,20(sp)
 2010b0c:	1000341e 	bne	r2,zero,2010be0 <_strtoll_r+0x260>
 2010b10:	500b883a 	mov	r5,r10
 2010b14:	580d883a 	mov	r6,r11
 2010b18:	d8c00417 	ldw	r3,16(sp)
 2010b1c:	18000626 	beq	r3,zero,2010b38 <_strtoll_r+0x1b8>
 2010b20:	38000226 	beq	r7,zero,2010b2c <_strtoll_r+0x1ac>
 2010b24:	a53fffc4 	addi	r20,r20,-1
 2010b28:	dd000315 	stw	r20,12(sp)
 2010b2c:	d8c00317 	ldw	r3,12(sp)
 2010b30:	d8800417 	ldw	r2,16(sp)
 2010b34:	10c00015 	stw	r3,0(r2)
 2010b38:	2805883a 	mov	r2,r5
 2010b3c:	3007883a 	mov	r3,r6
 2010b40:	dfc00f17 	ldw	ra,60(sp)
 2010b44:	df000e17 	ldw	fp,56(sp)
 2010b48:	ddc00d17 	ldw	r23,52(sp)
 2010b4c:	dd800c17 	ldw	r22,48(sp)
 2010b50:	dd400b17 	ldw	r21,44(sp)
 2010b54:	dd000a17 	ldw	r20,40(sp)
 2010b58:	dcc00917 	ldw	r19,36(sp)
 2010b5c:	dc800817 	ldw	r18,32(sp)
 2010b60:	dc400717 	ldw	r17,28(sp)
 2010b64:	dc000617 	ldw	r16,24(sp)
 2010b68:	dec01004 	addi	sp,sp,64
 2010b6c:	f800283a 	ret
 2010b70:	8abfc72e 	bgeu	r17,r10,2010a90 <_strtoll_r+0x110>
 2010b74:	01ffffc4 	movi	r7,-1
 2010b78:	003fd406 	br	2010acc <_strtoll_r+0x14c>
 2010b7c:	00800c04 	movi	r2,48
 2010b80:	98803226 	beq	r19,r2,2010c4c <_strtoll_r+0x2cc>
 2010b84:	183fa026 	beq	r3,zero,2010a08 <_strtoll_r+0x88>
 2010b88:	00800c04 	movi	r2,48
 2010b8c:	98803e26 	beq	r19,r2,2010c88 <_strtoll_r+0x308>
 2010b90:	d8c00117 	ldw	r3,4(sp)
 2010b94:	05c00284 	movi	r23,10
 2010b98:	b82b883a 	mov	r21,r23
 2010b9c:	1806c03a 	cmpne	r3,r3,zero
 2010ba0:	002d883a 	mov	r22,zero
 2010ba4:	d8c00515 	stw	r3,20(sp)
 2010ba8:	183f9d26 	beq	r3,zero,2010a20 <_strtoll_r+0xa0>
 2010bac:	0021883a 	mov	r16,zero
 2010bb0:	04600034 	movhi	r17,32768
 2010bb4:	003f9d06 	br	2010a2c <_strtoll_r+0xac>
 2010bb8:	020015c4 	movi	r8,87
 2010bbc:	9a21c83a 	sub	r16,r19,r8
 2010bc0:	003fcf06 	br	2010b00 <_strtoll_r+0x180>
 2010bc4:	5cbfb31e 	bne	r11,r18,2010a94 <_strtoll_r+0x114>
 2010bc8:	d8800017 	ldw	r2,0(sp)
 2010bcc:	143fb10e 	bge	r2,r16,2010a94 <_strtoll_r+0x114>
 2010bd0:	8815883a 	mov	r10,r17
 2010bd4:	9017883a 	mov	r11,r18
 2010bd8:	01ffffc4 	movi	r7,-1
 2010bdc:	003fbb06 	br	2010acc <_strtoll_r+0x14c>
 2010be0:	0009883a 	mov	r4,zero
 2010be4:	2285c83a 	sub	r2,r4,r10
 2010be8:	2089803a 	cmpltu	r4,r4,r2
 2010bec:	02c7c83a 	sub	r3,zero,r11
 2010bf0:	1909c83a 	sub	r4,r3,r4
 2010bf4:	100b883a 	mov	r5,r2
 2010bf8:	200d883a 	mov	r6,r4
 2010bfc:	003fc606 	br	2010b18 <_strtoll_r+0x198>
 2010c00:	a4c00007 	ldb	r19,0(r20)
 2010c04:	a5000044 	addi	r20,r20,1
 2010c08:	003f7a06 	br	20109f4 <_strtoll_r+0x74>
 2010c0c:	a4c00007 	ldb	r19,0(r20)
 2010c10:	00800044 	movi	r2,1
 2010c14:	a5000044 	addi	r20,r20,1
 2010c18:	d8800115 	stw	r2,4(sp)
 2010c1c:	003f7606 	br	20109f8 <_strtoll_r+0x78>
 2010c20:	d8c00117 	ldw	r3,4(sp)
 2010c24:	1805003a 	cmpeq	r2,r3,zero
 2010c28:	1000131e 	bne	r2,zero,2010c78 <_strtoll_r+0x2f8>
 2010c2c:	0005883a 	mov	r2,zero
 2010c30:	00e00034 	movhi	r3,32768
 2010c34:	100b883a 	mov	r5,r2
 2010c38:	180d883a 	mov	r6,r3
 2010c3c:	d8c00217 	ldw	r3,8(sp)
 2010c40:	00800884 	movi	r2,34
 2010c44:	18800015 	stw	r2,0(r3)
 2010c48:	003fb306 	br	2010b18 <_strtoll_r+0x198>
 2010c4c:	a1000007 	ldb	r4,0(r20)
 2010c50:	00801e04 	movi	r2,120
 2010c54:	20800226 	beq	r4,r2,2010c60 <_strtoll_r+0x2e0>
 2010c58:	00801604 	movi	r2,88
 2010c5c:	20bfc91e 	bne	r4,r2,2010b84 <_strtoll_r+0x204>
 2010c60:	a4c00047 	ldb	r19,1(r20)
 2010c64:	05c00404 	movi	r23,16
 2010c68:	b82b883a 	mov	r21,r23
 2010c6c:	a5000084 	addi	r20,r20,2
 2010c70:	002d883a 	mov	r22,zero
 2010c74:	003f6606 	br	2010a10 <_strtoll_r+0x90>
 2010c78:	017fffc4 	movi	r5,-1
 2010c7c:	01a00034 	movhi	r6,32768
 2010c80:	31bfffc4 	addi	r6,r6,-1
 2010c84:	003fed06 	br	2010c3c <_strtoll_r+0x2bc>
 2010c88:	05c00204 	movi	r23,8
 2010c8c:	b82b883a 	mov	r21,r23
 2010c90:	002d883a 	mov	r22,zero
 2010c94:	003f5e06 	br	2010a10 <_strtoll_r+0x90>

02010c98 <_strtoul_r>:
 2010c98:	defff604 	addi	sp,sp,-40
 2010c9c:	008080b4 	movhi	r2,514
 2010ca0:	108c1b04 	addi	r2,r2,12396
 2010ca4:	dd000415 	stw	r20,16(sp)
 2010ca8:	15000017 	ldw	r20,0(r2)
 2010cac:	ddc00715 	stw	r23,28(sp)
 2010cb0:	dd800615 	stw	r22,24(sp)
 2010cb4:	dd400515 	stw	r21,20(sp)
 2010cb8:	dc800215 	stw	r18,8(sp)
 2010cbc:	dc000015 	stw	r16,0(sp)
 2010cc0:	dfc00915 	stw	ra,36(sp)
 2010cc4:	df000815 	stw	fp,32(sp)
 2010cc8:	dcc00315 	stw	r19,12(sp)
 2010ccc:	dc400115 	stw	r17,4(sp)
 2010cd0:	282b883a 	mov	r21,r5
 2010cd4:	202f883a 	mov	r23,r4
 2010cd8:	302d883a 	mov	r22,r6
 2010cdc:	3825883a 	mov	r18,r7
 2010ce0:	2821883a 	mov	r16,r5
 2010ce4:	84400007 	ldb	r17,0(r16)
 2010ce8:	84000044 	addi	r16,r16,1
 2010cec:	a447883a 	add	r3,r20,r17
 2010cf0:	18800003 	ldbu	r2,0(r3)
 2010cf4:	1080020c 	andi	r2,r2,8
 2010cf8:	103ffa1e 	bne	r2,zero,2010ce4 <_strtoul_r+0x4c>
 2010cfc:	00800b44 	movi	r2,45
 2010d00:	88805626 	beq	r17,r2,2010e5c <_strtoul_r+0x1c4>
 2010d04:	00800ac4 	movi	r2,43
 2010d08:	88805126 	beq	r17,r2,2010e50 <_strtoul_r+0x1b8>
 2010d0c:	0039883a 	mov	fp,zero
 2010d10:	9007003a 	cmpeq	r3,r18,zero
 2010d14:	18003b1e 	bne	r3,zero,2010e04 <_strtoul_r+0x16c>
 2010d18:	00800404 	movi	r2,16
 2010d1c:	90803926 	beq	r18,r2,2010e04 <_strtoul_r+0x16c>
 2010d20:	013fffc4 	movi	r4,-1
 2010d24:	900b883a 	mov	r5,r18
 2010d28:	2005ab40 	call	2005ab4 <__udivsi3>
 2010d2c:	013fffc4 	movi	r4,-1
 2010d30:	900b883a 	mov	r5,r18
 2010d34:	1027883a 	mov	r19,r2
 2010d38:	2005abc0 	call	2005abc <__umodsi3>
 2010d3c:	1011883a 	mov	r8,r2
 2010d40:	900f883a 	mov	r7,r18
 2010d44:	a445883a 	add	r2,r20,r17
 2010d48:	11000003 	ldbu	r4,0(r2)
 2010d4c:	000b883a 	mov	r5,zero
 2010d50:	000d883a 	mov	r6,zero
 2010d54:	20c0010c 	andi	r3,r4,4
 2010d58:	18000e26 	beq	r3,zero,2010d94 <_strtoul_r+0xfc>
 2010d5c:	88fff404 	addi	r3,r17,-48
 2010d60:	1c80140e 	bge	r3,r18,2010db4 <_strtoul_r+0x11c>
 2010d64:	30003316 	blt	r6,zero,2010e34 <_strtoul_r+0x19c>
 2010d68:	99403236 	bltu	r19,r5,2010e34 <_strtoul_r+0x19c>
 2010d6c:	2cc03026 	beq	r5,r19,2010e30 <_strtoul_r+0x198>
 2010d70:	29c5383a 	mul	r2,r5,r7
 2010d74:	01800044 	movi	r6,1
 2010d78:	10cb883a 	add	r5,r2,r3
 2010d7c:	84400007 	ldb	r17,0(r16)
 2010d80:	84000044 	addi	r16,r16,1
 2010d84:	a445883a 	add	r2,r20,r17
 2010d88:	11000003 	ldbu	r4,0(r2)
 2010d8c:	20c0010c 	andi	r3,r4,4
 2010d90:	183ff21e 	bne	r3,zero,2010d5c <_strtoul_r+0xc4>
 2010d94:	208000cc 	andi	r2,r4,3
 2010d98:	10000626 	beq	r2,zero,2010db4 <_strtoul_r+0x11c>
 2010d9c:	2080004c 	andi	r2,r4,1
 2010da0:	1005003a 	cmpeq	r2,r2,zero
 2010da4:	1000251e 	bne	r2,zero,2010e3c <_strtoul_r+0x1a4>
 2010da8:	00800dc4 	movi	r2,55
 2010dac:	8887c83a 	sub	r3,r17,r2
 2010db0:	1cbfec16 	blt	r3,r18,2010d64 <_strtoul_r+0xcc>
 2010db4:	3000400e 	bge	r6,zero,2010eb8 <_strtoul_r+0x220>
 2010db8:	00800884 	movi	r2,34
 2010dbc:	017fffc4 	movi	r5,-1
 2010dc0:	b8800015 	stw	r2,0(r23)
 2010dc4:	b0000226 	beq	r22,zero,2010dd0 <_strtoul_r+0x138>
 2010dc8:	30001f1e 	bne	r6,zero,2010e48 <_strtoul_r+0x1b0>
 2010dcc:	b5400015 	stw	r21,0(r22)
 2010dd0:	2805883a 	mov	r2,r5
 2010dd4:	dfc00917 	ldw	ra,36(sp)
 2010dd8:	df000817 	ldw	fp,32(sp)
 2010ddc:	ddc00717 	ldw	r23,28(sp)
 2010de0:	dd800617 	ldw	r22,24(sp)
 2010de4:	dd400517 	ldw	r21,20(sp)
 2010de8:	dd000417 	ldw	r20,16(sp)
 2010dec:	dcc00317 	ldw	r19,12(sp)
 2010df0:	dc800217 	ldw	r18,8(sp)
 2010df4:	dc400117 	ldw	r17,4(sp)
 2010df8:	dc000017 	ldw	r16,0(sp)
 2010dfc:	dec00a04 	addi	sp,sp,40
 2010e00:	f800283a 	ret
 2010e04:	00800c04 	movi	r2,48
 2010e08:	88801826 	beq	r17,r2,2010e6c <_strtoul_r+0x1d4>
 2010e0c:	183fc426 	beq	r3,zero,2010d20 <_strtoul_r+0x88>
 2010e10:	00800c04 	movi	r2,48
 2010e14:	88802226 	beq	r17,r2,2010ea0 <_strtoul_r+0x208>
 2010e18:	04800284 	movi	r18,10
 2010e1c:	900f883a 	mov	r7,r18
 2010e20:	04c666b4 	movhi	r19,6554
 2010e24:	9ce66644 	addi	r19,r19,-26215
 2010e28:	02000144 	movi	r8,5
 2010e2c:	003fc506 	br	2010d44 <_strtoul_r+0xac>
 2010e30:	40ffcf0e 	bge	r8,r3,2010d70 <_strtoul_r+0xd8>
 2010e34:	01bfffc4 	movi	r6,-1
 2010e38:	003fd006 	br	2010d7c <_strtoul_r+0xe4>
 2010e3c:	008015c4 	movi	r2,87
 2010e40:	8887c83a 	sub	r3,r17,r2
 2010e44:	003fda06 	br	2010db0 <_strtoul_r+0x118>
 2010e48:	857fffc4 	addi	r21,r16,-1
 2010e4c:	003fdf06 	br	2010dcc <_strtoul_r+0x134>
 2010e50:	84400007 	ldb	r17,0(r16)
 2010e54:	84000044 	addi	r16,r16,1
 2010e58:	003fac06 	br	2010d0c <_strtoul_r+0x74>
 2010e5c:	84400007 	ldb	r17,0(r16)
 2010e60:	07000044 	movi	fp,1
 2010e64:	84000044 	addi	r16,r16,1
 2010e68:	003fa906 	br	2010d10 <_strtoul_r+0x78>
 2010e6c:	81000007 	ldb	r4,0(r16)
 2010e70:	00801e04 	movi	r2,120
 2010e74:	20800226 	beq	r4,r2,2010e80 <_strtoul_r+0x1e8>
 2010e78:	00801604 	movi	r2,88
 2010e7c:	20bfe31e 	bne	r4,r2,2010e0c <_strtoul_r+0x174>
 2010e80:	84400047 	ldb	r17,1(r16)
 2010e84:	04800404 	movi	r18,16
 2010e88:	84000084 	addi	r16,r16,2
 2010e8c:	900f883a 	mov	r7,r18
 2010e90:	04c40034 	movhi	r19,4096
 2010e94:	9cffffc4 	addi	r19,r19,-1
 2010e98:	020003c4 	movi	r8,15
 2010e9c:	003fa906 	br	2010d44 <_strtoul_r+0xac>
 2010ea0:	04800204 	movi	r18,8
 2010ea4:	900f883a 	mov	r7,r18
 2010ea8:	04c80034 	movhi	r19,8192
 2010eac:	9cffffc4 	addi	r19,r19,-1
 2010eb0:	020001c4 	movi	r8,7
 2010eb4:	003fa306 	br	2010d44 <_strtoul_r+0xac>
 2010eb8:	e005003a 	cmpeq	r2,fp,zero
 2010ebc:	103fc11e 	bne	r2,zero,2010dc4 <_strtoul_r+0x12c>
 2010ec0:	014bc83a 	sub	r5,zero,r5
 2010ec4:	003fbf06 	br	2010dc4 <_strtoul_r+0x12c>

02010ec8 <strtoul>:
 2010ec8:	008080b4 	movhi	r2,514
 2010ecc:	108c1704 	addi	r2,r2,12380
 2010ed0:	2013883a 	mov	r9,r4
 2010ed4:	11000017 	ldw	r4,0(r2)
 2010ed8:	2805883a 	mov	r2,r5
 2010edc:	300f883a 	mov	r7,r6
 2010ee0:	480b883a 	mov	r5,r9
 2010ee4:	100d883a 	mov	r6,r2
 2010ee8:	2010c981 	jmpi	2010c98 <_strtoul_r>

02010eec <_strtoull_r>:
 2010eec:	defff104 	addi	sp,sp,-60
 2010ef0:	008080b4 	movhi	r2,514
 2010ef4:	108c1b04 	addi	r2,r2,12396
 2010ef8:	df000d15 	stw	fp,52(sp)
 2010efc:	17000017 	ldw	fp,0(r2)
 2010f00:	ddc00c15 	stw	r23,48(sp)
 2010f04:	dcc00815 	stw	r19,32(sp)
 2010f08:	dfc00e15 	stw	ra,56(sp)
 2010f0c:	dd800b15 	stw	r22,44(sp)
 2010f10:	dd400a15 	stw	r21,40(sp)
 2010f14:	dd000915 	stw	r20,36(sp)
 2010f18:	dc800715 	stw	r18,28(sp)
 2010f1c:	dc400615 	stw	r17,24(sp)
 2010f20:	dc000515 	stw	r16,20(sp)
 2010f24:	d9400215 	stw	r5,8(sp)
 2010f28:	d9000115 	stw	r4,4(sp)
 2010f2c:	d9800315 	stw	r6,12(sp)
 2010f30:	382f883a 	mov	r23,r7
 2010f34:	2827883a 	mov	r19,r5
 2010f38:	9d000007 	ldb	r20,0(r19)
 2010f3c:	9cc00044 	addi	r19,r19,1
 2010f40:	e507883a 	add	r3,fp,r20
 2010f44:	18800003 	ldbu	r2,0(r3)
 2010f48:	1080020c 	andi	r2,r2,8
 2010f4c:	103ffa1e 	bne	r2,zero,2010f38 <_strtoull_r+0x4c>
 2010f50:	00800b44 	movi	r2,45
 2010f54:	a0807a26 	beq	r20,r2,2011140 <_strtoull_r+0x254>
 2010f58:	00800ac4 	movi	r2,43
 2010f5c:	a0807526 	beq	r20,r2,2011134 <_strtoull_r+0x248>
 2010f60:	d8000015 	stw	zero,0(sp)
 2010f64:	b807003a 	cmpeq	r3,r23,zero
 2010f68:	18005a1e 	bne	r3,zero,20110d4 <_strtoull_r+0x1e8>
 2010f6c:	00800404 	movi	r2,16
 2010f70:	b8805826 	beq	r23,r2,20110d4 <_strtoull_r+0x1e8>
 2010f74:	b82dd7fa 	srai	r22,r23,31
 2010f78:	043fffc4 	movi	r16,-1
 2010f7c:	8009883a 	mov	r4,r16
 2010f80:	800b883a 	mov	r5,r16
 2010f84:	b80d883a 	mov	r6,r23
 2010f88:	b00f883a 	mov	r7,r22
 2010f8c:	20125300 	call	2012530 <__udivdi3>
 2010f90:	8009883a 	mov	r4,r16
 2010f94:	800b883a 	mov	r5,r16
 2010f98:	b80d883a 	mov	r6,r23
 2010f9c:	b00f883a 	mov	r7,r22
 2010fa0:	1023883a 	mov	r17,r2
 2010fa4:	1825883a 	mov	r18,r3
 2010fa8:	2012b0c0 	call	2012b0c <__umoddi3>
 2010fac:	b82b883a 	mov	r21,r23
 2010fb0:	1019883a 	mov	r12,r2
 2010fb4:	e505883a 	add	r2,fp,r20
 2010fb8:	11000003 	ldbu	r4,0(r2)
 2010fbc:	0015883a 	mov	r10,zero
 2010fc0:	0017883a 	mov	r11,zero
 2010fc4:	20c0010c 	andi	r3,r4,4
 2010fc8:	000d883a 	mov	r6,zero
 2010fcc:	18001c26 	beq	r3,zero,2011040 <_strtoull_r+0x154>
 2010fd0:	a43ff404 	addi	r16,r20,-48
 2010fd4:	85c0220e 	bge	r16,r23,2011060 <_strtoull_r+0x174>
 2010fd8:	30003c16 	blt	r6,zero,20110cc <_strtoull_r+0x1e0>
 2010fdc:	92c03b36 	bltu	r18,r11,20110cc <_strtoull_r+0x1e0>
 2010fe0:	5c803926 	beq	r11,r18,20110c8 <_strtoull_r+0x1dc>
 2010fe4:	54404c26 	beq	r10,r17,2011118 <_strtoull_r+0x22c>
 2010fe8:	580b883a 	mov	r5,r11
 2010fec:	5009883a 	mov	r4,r10
 2010ff0:	a80d883a 	mov	r6,r21
 2010ff4:	b00f883a 	mov	r7,r22
 2010ff8:	db000415 	stw	r12,16(sp)
 2010ffc:	2005ac40 	call	2005ac4 <__muldi3>
 2011000:	8013d7fa 	srai	r9,r16,31
 2011004:	100d883a 	mov	r6,r2
 2011008:	1405883a 	add	r2,r2,r16
 201100c:	118d803a 	cmpltu	r6,r2,r6
 2011010:	1a47883a 	add	r3,r3,r9
 2011014:	db000417 	ldw	r12,16(sp)
 2011018:	30cd883a 	add	r6,r6,r3
 201101c:	3017883a 	mov	r11,r6
 2011020:	1015883a 	mov	r10,r2
 2011024:	01800044 	movi	r6,1
 2011028:	9d000007 	ldb	r20,0(r19)
 201102c:	9cc00044 	addi	r19,r19,1
 2011030:	e505883a 	add	r2,fp,r20
 2011034:	11000003 	ldbu	r4,0(r2)
 2011038:	20c0010c 	andi	r3,r4,4
 201103c:	183fe41e 	bne	r3,zero,2010fd0 <_strtoull_r+0xe4>
 2011040:	208000cc 	andi	r2,r4,3
 2011044:	10000626 	beq	r2,zero,2011060 <_strtoull_r+0x174>
 2011048:	2080004c 	andi	r2,r4,1
 201104c:	1005003a 	cmpeq	r2,r2,zero
 2011050:	10002e1e 	bne	r2,zero,201110c <_strtoull_r+0x220>
 2011054:	02000dc4 	movi	r8,55
 2011058:	a221c83a 	sub	r16,r20,r8
 201105c:	85ffde16 	blt	r16,r23,2010fd8 <_strtoull_r+0xec>
 2011060:	3000530e 	bge	r6,zero,20111b0 <_strtoull_r+0x2c4>
 2011064:	d8c00117 	ldw	r3,4(sp)
 2011068:	02bfffc4 	movi	r10,-1
 201106c:	00800884 	movi	r2,34
 2011070:	5017883a 	mov	r11,r10
 2011074:	18800015 	stw	r2,0(r3)
 2011078:	d8800317 	ldw	r2,12(sp)
 201107c:	10000426 	beq	r2,zero,2011090 <_strtoull_r+0x1a4>
 2011080:	3000291e 	bne	r6,zero,2011128 <_strtoull_r+0x23c>
 2011084:	d8800217 	ldw	r2,8(sp)
 2011088:	d8c00317 	ldw	r3,12(sp)
 201108c:	18800015 	stw	r2,0(r3)
 2011090:	5005883a 	mov	r2,r10
 2011094:	5807883a 	mov	r3,r11
 2011098:	dfc00e17 	ldw	ra,56(sp)
 201109c:	df000d17 	ldw	fp,52(sp)
 20110a0:	ddc00c17 	ldw	r23,48(sp)
 20110a4:	dd800b17 	ldw	r22,44(sp)
 20110a8:	dd400a17 	ldw	r21,40(sp)
 20110ac:	dd000917 	ldw	r20,36(sp)
 20110b0:	dcc00817 	ldw	r19,32(sp)
 20110b4:	dc800717 	ldw	r18,28(sp)
 20110b8:	dc400617 	ldw	r17,24(sp)
 20110bc:	dc000517 	ldw	r16,20(sp)
 20110c0:	dec00f04 	addi	sp,sp,60
 20110c4:	f800283a 	ret
 20110c8:	8abfc62e 	bgeu	r17,r10,2010fe4 <_strtoull_r+0xf8>
 20110cc:	01bfffc4 	movi	r6,-1
 20110d0:	003fd506 	br	2011028 <_strtoull_r+0x13c>
 20110d4:	00800c04 	movi	r2,48
 20110d8:	a0801e26 	beq	r20,r2,2011154 <_strtoull_r+0x268>
 20110dc:	183fa526 	beq	r3,zero,2010f74 <_strtoull_r+0x88>
 20110e0:	00800c04 	movi	r2,48
 20110e4:	a0802a26 	beq	r20,r2,2011190 <_strtoull_r+0x2a4>
 20110e8:	05c00284 	movi	r23,10
 20110ec:	b82b883a 	mov	r21,r23
 20110f0:	046666b4 	movhi	r17,39322
 20110f4:	8c666644 	addi	r17,r17,-26215
 20110f8:	002d883a 	mov	r22,zero
 20110fc:	048666b4 	movhi	r18,6554
 2011100:	94a66644 	addi	r18,r18,-26215
 2011104:	03000144 	movi	r12,5
 2011108:	003faa06 	br	2010fb4 <_strtoull_r+0xc8>
 201110c:	020015c4 	movi	r8,87
 2011110:	a221c83a 	sub	r16,r20,r8
 2011114:	003fd106 	br	201105c <_strtoull_r+0x170>
 2011118:	5cbfb31e 	bne	r11,r18,2010fe8 <_strtoull_r+0xfc>
 201111c:	643fb20e 	bge	r12,r16,2010fe8 <_strtoull_r+0xfc>
 2011120:	01bfffc4 	movi	r6,-1
 2011124:	003fc006 	br	2011028 <_strtoull_r+0x13c>
 2011128:	9cffffc4 	addi	r19,r19,-1
 201112c:	dcc00215 	stw	r19,8(sp)
 2011130:	003fd406 	br	2011084 <_strtoull_r+0x198>
 2011134:	9d000007 	ldb	r20,0(r19)
 2011138:	9cc00044 	addi	r19,r19,1
 201113c:	003f8806 	br	2010f60 <_strtoull_r+0x74>
 2011140:	9d000007 	ldb	r20,0(r19)
 2011144:	00800044 	movi	r2,1
 2011148:	9cc00044 	addi	r19,r19,1
 201114c:	d8800015 	stw	r2,0(sp)
 2011150:	003f8406 	br	2010f64 <_strtoull_r+0x78>
 2011154:	99000007 	ldb	r4,0(r19)
 2011158:	00801e04 	movi	r2,120
 201115c:	20800226 	beq	r4,r2,2011168 <_strtoull_r+0x27c>
 2011160:	00801604 	movi	r2,88
 2011164:	20bfdd1e 	bne	r4,r2,20110dc <_strtoull_r+0x1f0>
 2011168:	9d000047 	ldb	r20,1(r19)
 201116c:	05c00404 	movi	r23,16
 2011170:	b82b883a 	mov	r21,r23
 2011174:	047fffc4 	movi	r17,-1
 2011178:	9cc00084 	addi	r19,r19,2
 201117c:	002d883a 	mov	r22,zero
 2011180:	04840034 	movhi	r18,4096
 2011184:	94bfffc4 	addi	r18,r18,-1
 2011188:	030003c4 	movi	r12,15
 201118c:	003f8906 	br	2010fb4 <_strtoull_r+0xc8>
 2011190:	05c00204 	movi	r23,8
 2011194:	b82b883a 	mov	r21,r23
 2011198:	047fffc4 	movi	r17,-1
 201119c:	002d883a 	mov	r22,zero
 20111a0:	04880034 	movhi	r18,8192
 20111a4:	94bfffc4 	addi	r18,r18,-1
 20111a8:	030001c4 	movi	r12,7
 20111ac:	003f8106 	br	2010fb4 <_strtoull_r+0xc8>
 20111b0:	d8c00017 	ldw	r3,0(sp)
 20111b4:	1805003a 	cmpeq	r2,r3,zero
 20111b8:	103faf1e 	bne	r2,zero,2011078 <_strtoull_r+0x18c>
 20111bc:	0009883a 	mov	r4,zero
 20111c0:	2285c83a 	sub	r2,r4,r10
 20111c4:	02c7c83a 	sub	r3,zero,r11
 20111c8:	2089803a 	cmpltu	r4,r4,r2
 20111cc:	1909c83a 	sub	r4,r3,r4
 20111d0:	1015883a 	mov	r10,r2
 20111d4:	2017883a 	mov	r11,r4
 20111d8:	003fa706 	br	2011078 <_strtoull_r+0x18c>

020111dc <__submore>:
 20111dc:	defffa04 	addi	sp,sp,-24
 20111e0:	28c00c17 	ldw	r3,48(r5)
 20111e4:	dc800215 	stw	r18,8(sp)
 20111e8:	2825883a 	mov	r18,r5
 20111ec:	dc000015 	stw	r16,0(sp)
 20111f0:	90801004 	addi	r2,r18,64
 20111f4:	04010004 	movi	r16,1024
 20111f8:	dfc00515 	stw	ra,20(sp)
 20111fc:	dd000415 	stw	r20,16(sp)
 2011200:	dcc00315 	stw	r19,12(sp)
 2011204:	dc400115 	stw	r17,4(sp)
 2011208:	800b883a 	mov	r5,r16
 201120c:	18801b26 	beq	r3,r2,201127c <__submore+0xa0>
 2011210:	94400d17 	ldw	r17,52(r18)
 2011214:	180b883a 	mov	r5,r3
 2011218:	8c69883a 	add	r20,r17,r17
 201121c:	a00d883a 	mov	r6,r20
 2011220:	200e4f40 	call	200e4f4 <_realloc_r>
 2011224:	1467883a 	add	r19,r2,r17
 2011228:	1021883a 	mov	r16,r2
 201122c:	880d883a 	mov	r6,r17
 2011230:	9809883a 	mov	r4,r19
 2011234:	100b883a 	mov	r5,r2
 2011238:	10000e26 	beq	r2,zero,2011274 <__submore+0x98>
 201123c:	200d2e80 	call	200d2e8 <memcpy>
 2011240:	000d883a 	mov	r6,zero
 2011244:	95000d15 	stw	r20,52(r18)
 2011248:	94c00015 	stw	r19,0(r18)
 201124c:	94000c15 	stw	r16,48(r18)
 2011250:	3005883a 	mov	r2,r6
 2011254:	dfc00517 	ldw	ra,20(sp)
 2011258:	dd000417 	ldw	r20,16(sp)
 201125c:	dcc00317 	ldw	r19,12(sp)
 2011260:	dc800217 	ldw	r18,8(sp)
 2011264:	dc400117 	ldw	r17,4(sp)
 2011268:	dc000017 	ldw	r16,0(sp)
 201126c:	dec00604 	addi	sp,sp,24
 2011270:	f800283a 	ret
 2011274:	01bfffc4 	movi	r6,-1
 2011278:	003ff506 	br	2011250 <__submore+0x74>
 201127c:	200637c0 	call	200637c <_malloc_r>
 2011280:	1009883a 	mov	r4,r2
 2011284:	1140ff44 	addi	r5,r2,1021
 2011288:	000d883a 	mov	r6,zero
 201128c:	103ff926 	beq	r2,zero,2011274 <__submore+0x98>
 2011290:	90801083 	ldbu	r2,66(r18)
 2011294:	94000d15 	stw	r16,52(r18)
 2011298:	91000c15 	stw	r4,48(r18)
 201129c:	28800085 	stb	r2,2(r5)
 20112a0:	90c01043 	ldbu	r3,65(r18)
 20112a4:	28c00045 	stb	r3,1(r5)
 20112a8:	90801003 	ldbu	r2,64(r18)
 20112ac:	2080ff45 	stb	r2,1021(r4)
 20112b0:	91400015 	stw	r5,0(r18)
 20112b4:	003fe606 	br	2011250 <__submore+0x74>

020112b8 <_ungetc_r>:
 20112b8:	defffc04 	addi	sp,sp,-16
 20112bc:	00bfffc4 	movi	r2,-1
 20112c0:	dc400215 	stw	r17,8(sp)
 20112c4:	dc000115 	stw	r16,4(sp)
 20112c8:	dfc00315 	stw	ra,12(sp)
 20112cc:	2821883a 	mov	r16,r5
 20112d0:	2023883a 	mov	r17,r4
 20112d4:	28801826 	beq	r5,r2,2011338 <_ungetc_r+0x80>
 20112d8:	20000226 	beq	r4,zero,20112e4 <_ungetc_r+0x2c>
 20112dc:	20800e17 	ldw	r2,56(r4)
 20112e0:	10001b26 	beq	r2,zero,2011350 <_ungetc_r+0x98>
 20112e4:	3100030b 	ldhu	r4,12(r6)
 20112e8:	00bff7c4 	movi	r2,-33
 20112ec:	2084703a 	and	r2,r4,r2
 20112f0:	117fffcc 	andi	r5,r2,65535
 20112f4:	28c0010c 	andi	r3,r5,4
 20112f8:	1009883a 	mov	r4,r2
 20112fc:	3080030d 	sth	r2,12(r6)
 2011300:	18003526 	beq	r3,zero,20113d8 <_ungetc_r+0x120>
 2011304:	30800c17 	ldw	r2,48(r6)
 2011308:	84003fcc 	andi	r16,r16,255
 201130c:	10001426 	beq	r2,zero,2011360 <_ungetc_r+0xa8>
 2011310:	30c00117 	ldw	r3,4(r6)
 2011314:	30800d17 	ldw	r2,52(r6)
 2011318:	1880380e 	bge	r3,r2,20113fc <_ungetc_r+0x144>
 201131c:	30c00017 	ldw	r3,0(r6)
 2011320:	19ffffc4 	addi	r7,r3,-1
 2011324:	31c00015 	stw	r7,0(r6)
 2011328:	1c3fffc5 	stb	r16,-1(r3)
 201132c:	30800117 	ldw	r2,4(r6)
 2011330:	10800044 	addi	r2,r2,1
 2011334:	30800115 	stw	r2,4(r6)
 2011338:	8005883a 	mov	r2,r16
 201133c:	dfc00317 	ldw	ra,12(sp)
 2011340:	dc400217 	ldw	r17,8(sp)
 2011344:	dc000117 	ldw	r16,4(sp)
 2011348:	dec00404 	addi	sp,sp,16
 201134c:	f800283a 	ret
 2011350:	d9800015 	stw	r6,0(sp)
 2011354:	200bf900 	call	200bf90 <__sinit>
 2011358:	d9800017 	ldw	r6,0(sp)
 201135c:	003fe106 	br	20112e4 <_ungetc_r+0x2c>
 2011360:	30800417 	ldw	r2,16(r6)
 2011364:	10002326 	beq	r2,zero,20113f4 <_ungetc_r+0x13c>
 2011368:	31c00017 	ldw	r7,0(r6)
 201136c:	11c0022e 	bgeu	r2,r7,2011378 <_ungetc_r+0xc0>
 2011370:	38bfffc3 	ldbu	r2,-1(r7)
 2011374:	80801226 	beq	r16,r2,20113c0 <_ungetc_r+0x108>
 2011378:	30c00117 	ldw	r3,4(r6)
 201137c:	00800044 	movi	r2,1
 2011380:	30800115 	stw	r2,4(r6)
 2011384:	008000c4 	movi	r2,3
 2011388:	31001004 	addi	r4,r6,64
 201138c:	31401084 	addi	r5,r6,66
 2011390:	30800d15 	stw	r2,52(r6)
 2011394:	8005883a 	mov	r2,r16
 2011398:	30c00f15 	stw	r3,60(r6)
 201139c:	31c00e15 	stw	r7,56(r6)
 20113a0:	31000c15 	stw	r4,48(r6)
 20113a4:	31400015 	stw	r5,0(r6)
 20113a8:	34001085 	stb	r16,66(r6)
 20113ac:	dfc00317 	ldw	ra,12(sp)
 20113b0:	dc400217 	ldw	r17,8(sp)
 20113b4:	dc000117 	ldw	r16,4(sp)
 20113b8:	dec00404 	addi	sp,sp,16
 20113bc:	f800283a 	ret
 20113c0:	30800117 	ldw	r2,4(r6)
 20113c4:	39ffffc4 	addi	r7,r7,-1
 20113c8:	31c00015 	stw	r7,0(r6)
 20113cc:	10800044 	addi	r2,r2,1
 20113d0:	30800115 	stw	r2,4(r6)
 20113d4:	003fd806 	br	2011338 <_ungetc_r+0x80>
 20113d8:	2880040c 	andi	r2,r5,16
 20113dc:	10000d26 	beq	r2,zero,2011414 <_ungetc_r+0x15c>
 20113e0:	2880020c 	andi	r2,r5,8
 20113e4:	10000d1e 	bne	r2,zero,201141c <_ungetc_r+0x164>
 20113e8:	20800114 	ori	r2,r4,4
 20113ec:	3080030d 	sth	r2,12(r6)
 20113f0:	003fc406 	br	2011304 <_ungetc_r+0x4c>
 20113f4:	31c00017 	ldw	r7,0(r6)
 20113f8:	003fdf06 	br	2011378 <_ungetc_r+0xc0>
 20113fc:	300b883a 	mov	r5,r6
 2011400:	8809883a 	mov	r4,r17
 2011404:	d9800015 	stw	r6,0(sp)
 2011408:	20111dc0 	call	20111dc <__submore>
 201140c:	d9800017 	ldw	r6,0(sp)
 2011410:	103fc226 	beq	r2,zero,201131c <_ungetc_r+0x64>
 2011414:	043fffc4 	movi	r16,-1
 2011418:	003fc706 	br	2011338 <_ungetc_r+0x80>
 201141c:	300b883a 	mov	r5,r6
 2011420:	8809883a 	mov	r4,r17
 2011424:	d9800015 	stw	r6,0(sp)
 2011428:	200bcf80 	call	200bcf8 <_fflush_r>
 201142c:	d9800017 	ldw	r6,0(sp)
 2011430:	103ff81e 	bne	r2,zero,2011414 <_ungetc_r+0x15c>
 2011434:	3100030b 	ldhu	r4,12(r6)
 2011438:	00bffdc4 	movi	r2,-9
 201143c:	30000215 	stw	zero,8(r6)
 2011440:	2084703a 	and	r2,r4,r2
 2011444:	1009883a 	mov	r4,r2
 2011448:	3080030d 	sth	r2,12(r6)
 201144c:	30000615 	stw	zero,24(r6)
 2011450:	003fe506 	br	20113e8 <_ungetc_r+0x130>

02011454 <ungetc>:
 2011454:	018080b4 	movhi	r6,514
 2011458:	318c1704 	addi	r6,r6,12380
 201145c:	2007883a 	mov	r3,r4
 2011460:	31000017 	ldw	r4,0(r6)
 2011464:	280d883a 	mov	r6,r5
 2011468:	180b883a 	mov	r5,r3
 201146c:	20112b81 	jmpi	20112b8 <_ungetc_r>

02011470 <_write_r>:
 2011470:	defffd04 	addi	sp,sp,-12
 2011474:	dc000015 	stw	r16,0(sp)
 2011478:	040080b4 	movhi	r16,514
 201147c:	8413c804 	addi	r16,r16,20256
 2011480:	dc400115 	stw	r17,4(sp)
 2011484:	80000015 	stw	zero,0(r16)
 2011488:	2023883a 	mov	r17,r4
 201148c:	2809883a 	mov	r4,r5
 2011490:	300b883a 	mov	r5,r6
 2011494:	380d883a 	mov	r6,r7
 2011498:	dfc00215 	stw	ra,8(sp)
 201149c:	20146080 	call	2014608 <write>
 20114a0:	1007883a 	mov	r3,r2
 20114a4:	00bfffc4 	movi	r2,-1
 20114a8:	18800626 	beq	r3,r2,20114c4 <_write_r+0x54>
 20114ac:	1805883a 	mov	r2,r3
 20114b0:	dfc00217 	ldw	ra,8(sp)
 20114b4:	dc400117 	ldw	r17,4(sp)
 20114b8:	dc000017 	ldw	r16,0(sp)
 20114bc:	dec00304 	addi	sp,sp,12
 20114c0:	f800283a 	ret
 20114c4:	80800017 	ldw	r2,0(r16)
 20114c8:	103ff826 	beq	r2,zero,20114ac <_write_r+0x3c>
 20114cc:	88800015 	stw	r2,0(r17)
 20114d0:	1805883a 	mov	r2,r3
 20114d4:	dfc00217 	ldw	ra,8(sp)
 20114d8:	dc400117 	ldw	r17,4(sp)
 20114dc:	dc000017 	ldw	r16,0(sp)
 20114e0:	dec00304 	addi	sp,sp,12
 20114e4:	f800283a 	ret

020114e8 <_calloc_r>:
 20114e8:	298b383a 	mul	r5,r5,r6
 20114ec:	defffe04 	addi	sp,sp,-8
 20114f0:	dc000015 	stw	r16,0(sp)
 20114f4:	dfc00115 	stw	ra,4(sp)
 20114f8:	200637c0 	call	200637c <_malloc_r>
 20114fc:	1021883a 	mov	r16,r2
 2011500:	01c00904 	movi	r7,36
 2011504:	10000d26 	beq	r2,zero,201153c <_calloc_r+0x54>
 2011508:	10ffff17 	ldw	r3,-4(r2)
 201150c:	1009883a 	mov	r4,r2
 2011510:	00bfff04 	movi	r2,-4
 2011514:	1886703a 	and	r3,r3,r2
 2011518:	1887883a 	add	r3,r3,r2
 201151c:	180d883a 	mov	r6,r3
 2011520:	000b883a 	mov	r5,zero
 2011524:	38c01736 	bltu	r7,r3,2011584 <_calloc_r+0x9c>
 2011528:	008004c4 	movi	r2,19
 201152c:	10c00836 	bltu	r2,r3,2011550 <_calloc_r+0x68>
 2011530:	20000215 	stw	zero,8(r4)
 2011534:	20000015 	stw	zero,0(r4)
 2011538:	20000115 	stw	zero,4(r4)
 201153c:	8005883a 	mov	r2,r16
 2011540:	dfc00117 	ldw	ra,4(sp)
 2011544:	dc000017 	ldw	r16,0(sp)
 2011548:	dec00204 	addi	sp,sp,8
 201154c:	f800283a 	ret
 2011550:	008006c4 	movi	r2,27
 2011554:	80000015 	stw	zero,0(r16)
 2011558:	80000115 	stw	zero,4(r16)
 201155c:	81000204 	addi	r4,r16,8
 2011560:	10fff32e 	bgeu	r2,r3,2011530 <_calloc_r+0x48>
 2011564:	80000215 	stw	zero,8(r16)
 2011568:	80000315 	stw	zero,12(r16)
 201156c:	81000404 	addi	r4,r16,16
 2011570:	19ffef1e 	bne	r3,r7,2011530 <_calloc_r+0x48>
 2011574:	81000604 	addi	r4,r16,24
 2011578:	80000415 	stw	zero,16(r16)
 201157c:	80000515 	stw	zero,20(r16)
 2011580:	003feb06 	br	2011530 <_calloc_r+0x48>
 2011584:	200d4680 	call	200d468 <memset>
 2011588:	8005883a 	mov	r2,r16
 201158c:	dfc00117 	ldw	ra,4(sp)
 2011590:	dc000017 	ldw	r16,0(sp)
 2011594:	dec00204 	addi	sp,sp,8
 2011598:	f800283a 	ret

0201159c <_close_r>:
 201159c:	defffd04 	addi	sp,sp,-12
 20115a0:	dc000015 	stw	r16,0(sp)
 20115a4:	040080b4 	movhi	r16,514
 20115a8:	8413c804 	addi	r16,r16,20256
 20115ac:	dc400115 	stw	r17,4(sp)
 20115b0:	80000015 	stw	zero,0(r16)
 20115b4:	2023883a 	mov	r17,r4
 20115b8:	2809883a 	mov	r4,r5
 20115bc:	dfc00215 	stw	ra,8(sp)
 20115c0:	20136800 	call	2013680 <close>
 20115c4:	1007883a 	mov	r3,r2
 20115c8:	00bfffc4 	movi	r2,-1
 20115cc:	18800626 	beq	r3,r2,20115e8 <_close_r+0x4c>
 20115d0:	1805883a 	mov	r2,r3
 20115d4:	dfc00217 	ldw	ra,8(sp)
 20115d8:	dc400117 	ldw	r17,4(sp)
 20115dc:	dc000017 	ldw	r16,0(sp)
 20115e0:	dec00304 	addi	sp,sp,12
 20115e4:	f800283a 	ret
 20115e8:	80800017 	ldw	r2,0(r16)
 20115ec:	103ff826 	beq	r2,zero,20115d0 <_close_r+0x34>
 20115f0:	88800015 	stw	r2,0(r17)
 20115f4:	1805883a 	mov	r2,r3
 20115f8:	dfc00217 	ldw	ra,8(sp)
 20115fc:	dc400117 	ldw	r17,4(sp)
 2011600:	dc000017 	ldw	r16,0(sp)
 2011604:	dec00304 	addi	sp,sp,12
 2011608:	f800283a 	ret

0201160c <_fclose_r>:
 201160c:	defffc04 	addi	sp,sp,-16
 2011610:	dc400115 	stw	r17,4(sp)
 2011614:	dc000015 	stw	r16,0(sp)
 2011618:	dfc00315 	stw	ra,12(sp)
 201161c:	dc800215 	stw	r18,8(sp)
 2011620:	2821883a 	mov	r16,r5
 2011624:	2023883a 	mov	r17,r4
 2011628:	28002926 	beq	r5,zero,20116d0 <_fclose_r+0xc4>
 201162c:	200bf800 	call	200bf80 <__sfp_lock_acquire>
 2011630:	88000226 	beq	r17,zero,201163c <_fclose_r+0x30>
 2011634:	88800e17 	ldw	r2,56(r17)
 2011638:	10002d26 	beq	r2,zero,20116f0 <_fclose_r+0xe4>
 201163c:	8080030f 	ldh	r2,12(r16)
 2011640:	10002226 	beq	r2,zero,20116cc <_fclose_r+0xc0>
 2011644:	8809883a 	mov	r4,r17
 2011648:	800b883a 	mov	r5,r16
 201164c:	200bcf80 	call	200bcf8 <_fflush_r>
 2011650:	1025883a 	mov	r18,r2
 2011654:	80800b17 	ldw	r2,44(r16)
 2011658:	10000426 	beq	r2,zero,201166c <_fclose_r+0x60>
 201165c:	81400717 	ldw	r5,28(r16)
 2011660:	8809883a 	mov	r4,r17
 2011664:	103ee83a 	callr	r2
 2011668:	10002a16 	blt	r2,zero,2011714 <_fclose_r+0x108>
 201166c:	8080030b 	ldhu	r2,12(r16)
 2011670:	1080200c 	andi	r2,r2,128
 2011674:	1000231e 	bne	r2,zero,2011704 <_fclose_r+0xf8>
 2011678:	81400c17 	ldw	r5,48(r16)
 201167c:	28000526 	beq	r5,zero,2011694 <_fclose_r+0x88>
 2011680:	80801004 	addi	r2,r16,64
 2011684:	28800226 	beq	r5,r2,2011690 <_fclose_r+0x84>
 2011688:	8809883a 	mov	r4,r17
 201168c:	200c5500 	call	200c550 <_free_r>
 2011690:	80000c15 	stw	zero,48(r16)
 2011694:	81401117 	ldw	r5,68(r16)
 2011698:	28000326 	beq	r5,zero,20116a8 <_fclose_r+0x9c>
 201169c:	8809883a 	mov	r4,r17
 20116a0:	200c5500 	call	200c550 <_free_r>
 20116a4:	80001115 	stw	zero,68(r16)
 20116a8:	8000030d 	sth	zero,12(r16)
 20116ac:	200bf840 	call	200bf84 <__sfp_lock_release>
 20116b0:	9005883a 	mov	r2,r18
 20116b4:	dfc00317 	ldw	ra,12(sp)
 20116b8:	dc800217 	ldw	r18,8(sp)
 20116bc:	dc400117 	ldw	r17,4(sp)
 20116c0:	dc000017 	ldw	r16,0(sp)
 20116c4:	dec00404 	addi	sp,sp,16
 20116c8:	f800283a 	ret
 20116cc:	200bf840 	call	200bf84 <__sfp_lock_release>
 20116d0:	0025883a 	mov	r18,zero
 20116d4:	9005883a 	mov	r2,r18
 20116d8:	dfc00317 	ldw	ra,12(sp)
 20116dc:	dc800217 	ldw	r18,8(sp)
 20116e0:	dc400117 	ldw	r17,4(sp)
 20116e4:	dc000017 	ldw	r16,0(sp)
 20116e8:	dec00404 	addi	sp,sp,16
 20116ec:	f800283a 	ret
 20116f0:	8809883a 	mov	r4,r17
 20116f4:	200bf900 	call	200bf90 <__sinit>
 20116f8:	8080030f 	ldh	r2,12(r16)
 20116fc:	103fd11e 	bne	r2,zero,2011644 <_fclose_r+0x38>
 2011700:	003ff206 	br	20116cc <_fclose_r+0xc0>
 2011704:	81400417 	ldw	r5,16(r16)
 2011708:	8809883a 	mov	r4,r17
 201170c:	200c5500 	call	200c550 <_free_r>
 2011710:	003fd906 	br	2011678 <_fclose_r+0x6c>
 2011714:	04bfffc4 	movi	r18,-1
 2011718:	003fd406 	br	201166c <_fclose_r+0x60>

0201171c <fclose>:
 201171c:	008080b4 	movhi	r2,514
 2011720:	108c1704 	addi	r2,r2,12380
 2011724:	200b883a 	mov	r5,r4
 2011728:	11000017 	ldw	r4,0(r2)
 201172c:	201160c1 	jmpi	201160c <_fclose_r>

02011730 <_fstat_r>:
 2011730:	defffd04 	addi	sp,sp,-12
 2011734:	dc000015 	stw	r16,0(sp)
 2011738:	040080b4 	movhi	r16,514
 201173c:	8413c804 	addi	r16,r16,20256
 2011740:	dc400115 	stw	r17,4(sp)
 2011744:	80000015 	stw	zero,0(r16)
 2011748:	2023883a 	mov	r17,r4
 201174c:	2809883a 	mov	r4,r5
 2011750:	300b883a 	mov	r5,r6
 2011754:	dfc00215 	stw	ra,8(sp)
 2011758:	20139940 	call	2013994 <fstat>
 201175c:	1007883a 	mov	r3,r2
 2011760:	00bfffc4 	movi	r2,-1
 2011764:	18800626 	beq	r3,r2,2011780 <_fstat_r+0x50>
 2011768:	1805883a 	mov	r2,r3
 201176c:	dfc00217 	ldw	ra,8(sp)
 2011770:	dc400117 	ldw	r17,4(sp)
 2011774:	dc000017 	ldw	r16,0(sp)
 2011778:	dec00304 	addi	sp,sp,12
 201177c:	f800283a 	ret
 2011780:	80800017 	ldw	r2,0(r16)
 2011784:	103ff826 	beq	r2,zero,2011768 <_fstat_r+0x38>
 2011788:	88800015 	stw	r2,0(r17)
 201178c:	1805883a 	mov	r2,r3
 2011790:	dfc00217 	ldw	ra,8(sp)
 2011794:	dc400117 	ldw	r17,4(sp)
 2011798:	dc000017 	ldw	r16,0(sp)
 201179c:	dec00304 	addi	sp,sp,12
 20117a0:	f800283a 	ret

020117a4 <htinit>:
 20117a4:	28800003 	ldbu	r2,0(r5)
 20117a8:	10000626 	beq	r2,zero,20117c4 <htinit+0x20>
 20117ac:	1105883a 	add	r2,r2,r4
 20117b0:	11800005 	stb	r6,0(r2)
 20117b4:	28800043 	ldbu	r2,1(r5)
 20117b8:	31800044 	addi	r6,r6,1
 20117bc:	29400044 	addi	r5,r5,1
 20117c0:	103ffa1e 	bne	r2,zero,20117ac <htinit+0x8>
 20117c4:	f800283a 	ret

020117c8 <__hexdig_init>:
 20117c8:	defffd04 	addi	sp,sp,-12
 20117cc:	dc400015 	stw	r17,0(sp)
 20117d0:	044080b4 	movhi	r17,514
 20117d4:	8c540104 	addi	r17,r17,20484
 20117d8:	dcc00115 	stw	r19,4(sp)
 20117dc:	8809883a 	mov	r4,r17
 20117e0:	04c00684 	movi	r19,26
 20117e4:	014080b4 	movhi	r5,514
 20117e8:	29447404 	addi	r5,r5,4560
 20117ec:	01800404 	movi	r6,16
 20117f0:	dfc00215 	stw	ra,8(sp)
 20117f4:	20117a40 	call	20117a4 <htinit>
 20117f8:	980d883a 	mov	r6,r19
 20117fc:	8809883a 	mov	r4,r17
 2011800:	014080b4 	movhi	r5,514
 2011804:	29447704 	addi	r5,r5,4572
 2011808:	20117a40 	call	20117a4 <htinit>
 201180c:	8809883a 	mov	r4,r17
 2011810:	980d883a 	mov	r6,r19
 2011814:	014080b4 	movhi	r5,514
 2011818:	29447904 	addi	r5,r5,4580
 201181c:	dfc00217 	ldw	ra,8(sp)
 2011820:	dcc00117 	ldw	r19,4(sp)
 2011824:	dc400017 	ldw	r17,0(sp)
 2011828:	dec00304 	addi	sp,sp,12
 201182c:	20117a41 	jmpi	20117a4 <htinit>

02011830 <rshift>:
 2011830:	2807d17a 	srai	r3,r5,5
 2011834:	20800417 	ldw	r2,16(r4)
 2011838:	22400504 	addi	r9,r4,20
 201183c:	480f883a 	mov	r7,r9
 2011840:	1880190e 	bge	r3,r2,20118a8 <rshift+0x78>
 2011844:	1085883a 	add	r2,r2,r2
 2011848:	18c7883a 	add	r3,r3,r3
 201184c:	1085883a 	add	r2,r2,r2
 2011850:	18c7883a 	add	r3,r3,r3
 2011854:	294007cc 	andi	r5,r5,31
 2011858:	4891883a 	add	r8,r9,r2
 201185c:	48cd883a 	add	r6,r9,r3
 2011860:	28001726 	beq	r5,zero,20118c0 <rshift+0x90>
 2011864:	30c00017 	ldw	r3,0(r6)
 2011868:	00800804 	movi	r2,32
 201186c:	31800104 	addi	r6,r6,4
 2011870:	1155c83a 	sub	r10,r2,r5
 2011874:	1946d83a 	srl	r3,r3,r5
 2011878:	3200092e 	bgeu	r6,r8,20118a0 <rshift+0x70>
 201187c:	30800017 	ldw	r2,0(r6)
 2011880:	1284983a 	sll	r2,r2,r10
 2011884:	10c4b03a 	or	r2,r2,r3
 2011888:	38800015 	stw	r2,0(r7)
 201188c:	30c00017 	ldw	r3,0(r6)
 2011890:	31800104 	addi	r6,r6,4
 2011894:	39c00104 	addi	r7,r7,4
 2011898:	1946d83a 	srl	r3,r3,r5
 201189c:	323ff736 	bltu	r6,r8,201187c <rshift+0x4c>
 20118a0:	38c00015 	stw	r3,0(r7)
 20118a4:	18000c1e 	bne	r3,zero,20118d8 <rshift+0xa8>
 20118a8:	3a45c83a 	sub	r2,r7,r9
 20118ac:	1005d0ba 	srai	r2,r2,2
 20118b0:	20800415 	stw	r2,16(r4)
 20118b4:	1000011e 	bne	r2,zero,20118bc <rshift+0x8c>
 20118b8:	20000515 	stw	zero,20(r4)
 20118bc:	f800283a 	ret
 20118c0:	323ff92e 	bgeu	r6,r8,20118a8 <rshift+0x78>
 20118c4:	30800017 	ldw	r2,0(r6)
 20118c8:	31800104 	addi	r6,r6,4
 20118cc:	38800015 	stw	r2,0(r7)
 20118d0:	39c00104 	addi	r7,r7,4
 20118d4:	003ffa06 	br	20118c0 <rshift+0x90>
 20118d8:	39c00104 	addi	r7,r7,4
 20118dc:	003ff206 	br	20118a8 <rshift+0x78>

020118e0 <__gethex>:
 20118e0:	defff304 	addi	sp,sp,-52
 20118e4:	dd400815 	stw	r21,32(sp)
 20118e8:	dd000715 	stw	r20,28(sp)
 20118ec:	dcc00615 	stw	r19,24(sp)
 20118f0:	dc400415 	stw	r17,16(sp)
 20118f4:	dfc00c15 	stw	ra,48(sp)
 20118f8:	df000b15 	stw	fp,44(sp)
 20118fc:	ddc00a15 	stw	r23,40(sp)
 2011900:	dd800915 	stw	r22,36(sp)
 2011904:	dc800515 	stw	r18,20(sp)
 2011908:	dc000315 	stw	r16,12(sp)
 201190c:	044080b4 	movhi	r17,514
 2011910:	8c540104 	addi	r17,r17,20484
 2011914:	88800c03 	ldbu	r2,48(r17)
 2011918:	202b883a 	mov	r21,r4
 201191c:	2827883a 	mov	r19,r5
 2011920:	3029883a 	mov	r20,r6
 2011924:	d9c00115 	stw	r7,4(sp)
 2011928:	10006e26 	beq	r2,zero,2011ae4 <__gethex+0x204>
 201192c:	99800017 	ldw	r6,0(r19)
 2011930:	00800c04 	movi	r2,48
 2011934:	31000083 	ldbu	r4,2(r6)
 2011938:	30c00084 	addi	r3,r6,2
 201193c:	20806f1e 	bne	r4,r2,2011afc <__gethex+0x21c>
 2011940:	200b883a 	mov	r5,r4
 2011944:	3007883a 	mov	r3,r6
 2011948:	188000c3 	ldbu	r2,3(r3)
 201194c:	18c00044 	addi	r3,r3,1
 2011950:	1009883a 	mov	r4,r2
 2011954:	117ffc26 	beq	r2,r5,2011948 <__gethex+0x68>
 2011958:	1997c83a 	sub	r11,r3,r6
 201195c:	19400084 	addi	r5,r3,2
 2011960:	2445883a 	add	r2,r4,r17
 2011964:	10c00003 	ldbu	r3,0(r2)
 2011968:	18002d26 	beq	r3,zero,2011a20 <__gethex+0x140>
 201196c:	29000003 	ldbu	r4,0(r5)
 2011970:	2825883a 	mov	r18,r5
 2011974:	000d883a 	mov	r6,zero
 2011978:	0013883a 	mov	r9,zero
 201197c:	21003fcc 	andi	r4,r4,255
 2011980:	2445883a 	add	r2,r4,r17
 2011984:	10c00003 	ldbu	r3,0(r2)
 2011988:	18000526 	beq	r3,zero,20119a0 <__gethex+0xc0>
 201198c:	29400044 	addi	r5,r5,1
 2011990:	29000003 	ldbu	r4,0(r5)
 2011994:	2445883a 	add	r2,r4,r17
 2011998:	10c00003 	ldbu	r3,0(r2)
 201199c:	183ffb1e 	bne	r3,zero,201198c <__gethex+0xac>
 20119a0:	00800b84 	movi	r2,46
 20119a4:	20805826 	beq	r4,r2,2011b08 <__gethex+0x228>
 20119a8:	30007a26 	beq	r6,zero,2011b94 <__gethex+0x2b4>
 20119ac:	2985c83a 	sub	r2,r5,r6
 20119b0:	1085883a 	add	r2,r2,r2
 20119b4:	1085883a 	add	r2,r2,r2
 20119b8:	00adc83a 	sub	r22,zero,r2
 20119bc:	2821883a 	mov	r16,r5
 20119c0:	80c00003 	ldbu	r3,0(r16)
 20119c4:	00801404 	movi	r2,80
 20119c8:	18801e26 	beq	r3,r2,2011a44 <__gethex+0x164>
 20119cc:	00801c04 	movi	r2,112
 20119d0:	18801c26 	beq	r3,r2,2011a44 <__gethex+0x164>
 20119d4:	800d883a 	mov	r6,r16
 20119d8:	4805003a 	cmpeq	r2,r9,zero
 20119dc:	99800015 	stw	r6,0(r19)
 20119e0:	1000861e 	bne	r2,zero,2011bfc <__gethex+0x31c>
 20119e4:	58003d26 	beq	r11,zero,2011adc <__gethex+0x1fc>
 20119e8:	0025883a 	mov	r18,zero
 20119ec:	9005883a 	mov	r2,r18
 20119f0:	dfc00c17 	ldw	ra,48(sp)
 20119f4:	df000b17 	ldw	fp,44(sp)
 20119f8:	ddc00a17 	ldw	r23,40(sp)
 20119fc:	dd800917 	ldw	r22,36(sp)
 2011a00:	dd400817 	ldw	r21,32(sp)
 2011a04:	dd000717 	ldw	r20,28(sp)
 2011a08:	dcc00617 	ldw	r19,24(sp)
 2011a0c:	dc800517 	ldw	r18,20(sp)
 2011a10:	dc400417 	ldw	r17,16(sp)
 2011a14:	dc000317 	ldw	r16,12(sp)
 2011a18:	dec00d04 	addi	sp,sp,52
 2011a1c:	f800283a 	ret
 2011a20:	00800b84 	movi	r2,46
 2011a24:	20804a26 	beq	r4,r2,2011b50 <__gethex+0x270>
 2011a28:	2821883a 	mov	r16,r5
 2011a2c:	80c00003 	ldbu	r3,0(r16)
 2011a30:	00801404 	movi	r2,80
 2011a34:	2825883a 	mov	r18,r5
 2011a38:	02400044 	movi	r9,1
 2011a3c:	002d883a 	mov	r22,zero
 2011a40:	18bfe21e 	bne	r3,r2,20119cc <__gethex+0xec>
 2011a44:	80c00043 	ldbu	r3,1(r16)
 2011a48:	00800ac4 	movi	r2,43
 2011a4c:	81000044 	addi	r4,r16,1
 2011a50:	18804a26 	beq	r3,r2,2011b7c <__gethex+0x29c>
 2011a54:	00800b44 	movi	r2,45
 2011a58:	18804c26 	beq	r3,r2,2011b8c <__gethex+0x2ac>
 2011a5c:	0015883a 	mov	r10,zero
 2011a60:	1c45883a 	add	r2,r3,r17
 2011a64:	10800003 	ldbu	r2,0(r2)
 2011a68:	103fda26 	beq	r2,zero,20119d4 <__gethex+0xf4>
 2011a6c:	02000644 	movi	r8,25
 2011a70:	40bfd816 	blt	r8,r2,20119d4 <__gethex+0xf4>
 2011a74:	20c00043 	ldbu	r3,1(r4)
 2011a78:	11fffc04 	addi	r7,r2,-16
 2011a7c:	008080b4 	movhi	r2,514
 2011a80:	10940104 	addi	r2,r2,20484
 2011a84:	1887883a 	add	r3,r3,r2
 2011a88:	18800003 	ldbu	r2,0(r3)
 2011a8c:	21800044 	addi	r6,r4,1
 2011a90:	10000d26 	beq	r2,zero,2011ac8 <__gethex+0x1e8>
 2011a94:	100b883a 	mov	r5,r2
 2011a98:	4080020e 	bge	r8,r2,2011aa4 <__gethex+0x1c4>
 2011a9c:	00000a06 	br	2011ac8 <__gethex+0x1e8>
 2011aa0:	41000916 	blt	r8,r4,2011ac8 <__gethex+0x1e8>
 2011aa4:	31800044 	addi	r6,r6,1
 2011aa8:	30800003 	ldbu	r2,0(r6)
 2011aac:	38c002a4 	muli	r3,r7,10
 2011ab0:	1445883a 	add	r2,r2,r17
 2011ab4:	11000003 	ldbu	r4,0(r2)
 2011ab8:	1947883a 	add	r3,r3,r5
 2011abc:	19fffc04 	addi	r7,r3,-16
 2011ac0:	200b883a 	mov	r5,r4
 2011ac4:	203ff61e 	bne	r4,zero,2011aa0 <__gethex+0x1c0>
 2011ac8:	5005003a 	cmpeq	r2,r10,zero
 2011acc:	1000011e 	bne	r2,zero,2011ad4 <__gethex+0x1f4>
 2011ad0:	01cfc83a 	sub	r7,zero,r7
 2011ad4:	b1ed883a 	add	r22,r22,r7
 2011ad8:	003fbf06 	br	20119d8 <__gethex+0xf8>
 2011adc:	04800184 	movi	r18,6
 2011ae0:	003fc206 	br	20119ec <__gethex+0x10c>
 2011ae4:	20117c80 	call	20117c8 <__hexdig_init>
 2011ae8:	99800017 	ldw	r6,0(r19)
 2011aec:	00800c04 	movi	r2,48
 2011af0:	31000083 	ldbu	r4,2(r6)
 2011af4:	30c00084 	addi	r3,r6,2
 2011af8:	20bf9126 	beq	r4,r2,2011940 <__gethex+0x60>
 2011afc:	180b883a 	mov	r5,r3
 2011b00:	0017883a 	mov	r11,zero
 2011b04:	003f9606 	br	2011960 <__gethex+0x80>
 2011b08:	303fa81e 	bne	r6,zero,20119ac <__gethex+0xcc>
 2011b0c:	29400044 	addi	r5,r5,1
 2011b10:	28800003 	ldbu	r2,0(r5)
 2011b14:	1445883a 	add	r2,r2,r17
 2011b18:	10c00003 	ldbu	r3,0(r2)
 2011b1c:	1800ad26 	beq	r3,zero,2011dd4 <__gethex+0x4f4>
 2011b20:	2809883a 	mov	r4,r5
 2011b24:	21000044 	addi	r4,r4,1
 2011b28:	20800003 	ldbu	r2,0(r4)
 2011b2c:	1445883a 	add	r2,r2,r17
 2011b30:	10c00003 	ldbu	r3,0(r2)
 2011b34:	183ffb1e 	bne	r3,zero,2011b24 <__gethex+0x244>
 2011b38:	2145c83a 	sub	r2,r4,r5
 2011b3c:	1085883a 	add	r2,r2,r2
 2011b40:	1085883a 	add	r2,r2,r2
 2011b44:	00adc83a 	sub	r22,zero,r2
 2011b48:	200b883a 	mov	r5,r4
 2011b4c:	003f9b06 	br	20119bc <__gethex+0xdc>
 2011b50:	29000043 	ldbu	r4,1(r5)
 2011b54:	008080b4 	movhi	r2,514
 2011b58:	10940104 	addi	r2,r2,20484
 2011b5c:	2c000044 	addi	r16,r5,1
 2011b60:	2085883a 	add	r2,r4,r2
 2011b64:	10c00003 	ldbu	r3,0(r2)
 2011b68:	18000d1e 	bne	r3,zero,2011ba0 <__gethex+0x2c0>
 2011b6c:	2825883a 	mov	r18,r5
 2011b70:	02400044 	movi	r9,1
 2011b74:	002d883a 	mov	r22,zero
 2011b78:	003f9106 	br	20119c0 <__gethex+0xe0>
 2011b7c:	0015883a 	mov	r10,zero
 2011b80:	21000044 	addi	r4,r4,1
 2011b84:	20c00003 	ldbu	r3,0(r4)
 2011b88:	003fb506 	br	2011a60 <__gethex+0x180>
 2011b8c:	02800044 	movi	r10,1
 2011b90:	003ffb06 	br	2011b80 <__gethex+0x2a0>
 2011b94:	2821883a 	mov	r16,r5
 2011b98:	002d883a 	mov	r22,zero
 2011b9c:	003f8806 	br	20119c0 <__gethex+0xe0>
 2011ba0:	00800c04 	movi	r2,48
 2011ba4:	20800e1e 	bne	r4,r2,2011be0 <__gethex+0x300>
 2011ba8:	2007883a 	mov	r3,r4
 2011bac:	800b883a 	mov	r5,r16
 2011bb0:	29400044 	addi	r5,r5,1
 2011bb4:	29000003 	ldbu	r4,0(r5)
 2011bb8:	20803fcc 	andi	r2,r4,255
 2011bbc:	10fffc26 	beq	r2,r3,2011bb0 <__gethex+0x2d0>
 2011bc0:	1445883a 	add	r2,r2,r17
 2011bc4:	10c00003 	ldbu	r3,0(r2)
 2011bc8:	1800071e 	bne	r3,zero,2011be8 <__gethex+0x308>
 2011bcc:	02c00044 	movi	r11,1
 2011bd0:	800d883a 	mov	r6,r16
 2011bd4:	2825883a 	mov	r18,r5
 2011bd8:	5813883a 	mov	r9,r11
 2011bdc:	003f6706 	br	201197c <__gethex+0x9c>
 2011be0:	81000003 	ldbu	r4,0(r16)
 2011be4:	800b883a 	mov	r5,r16
 2011be8:	800d883a 	mov	r6,r16
 2011bec:	2825883a 	mov	r18,r5
 2011bf0:	02c00044 	movi	r11,1
 2011bf4:	0013883a 	mov	r9,zero
 2011bf8:	003f6006 	br	201197c <__gethex+0x9c>
 2011bfc:	8485c83a 	sub	r2,r16,r18
 2011c00:	10bfffc4 	addi	r2,r2,-1
 2011c04:	00c001c4 	movi	r3,7
 2011c08:	1880700e 	bge	r3,r2,2011dcc <__gethex+0x4ec>
 2011c0c:	000b883a 	mov	r5,zero
 2011c10:	1005d07a 	srai	r2,r2,1
 2011c14:	29400044 	addi	r5,r5,1
 2011c18:	18bffd16 	blt	r3,r2,2011c10 <__gethex+0x330>
 2011c1c:	a809883a 	mov	r4,r21
 2011c20:	200da800 	call	200da80 <_Balloc>
 2011c24:	1027883a 	mov	r19,r2
 2011c28:	10800504 	addi	r2,r2,20
 2011c2c:	d8800215 	stw	r2,8(sp)
 2011c30:	9400522e 	bgeu	r18,r16,2011d7c <__gethex+0x49c>
 2011c34:	da000217 	ldw	r8,8(sp)
 2011c38:	800b883a 	mov	r5,r16
 2011c3c:	000f883a 	mov	r7,zero
 2011c40:	0009883a 	mov	r4,zero
 2011c44:	02400b84 	movi	r9,46
 2011c48:	02800804 	movi	r10,32
 2011c4c:	297fffc4 	addi	r5,r5,-1
 2011c50:	28c00003 	ldbu	r3,0(r5)
 2011c54:	1a400826 	beq	r3,r9,2011c78 <__gethex+0x398>
 2011c58:	380d883a 	mov	r6,r7
 2011c5c:	3a802726 	beq	r7,r10,2011cfc <__gethex+0x41c>
 2011c60:	39c00104 	addi	r7,r7,4
 2011c64:	1c47883a 	add	r3,r3,r17
 2011c68:	18800003 	ldbu	r2,0(r3)
 2011c6c:	108003cc 	andi	r2,r2,15
 2011c70:	1184983a 	sll	r2,r2,r6
 2011c74:	2088b03a 	or	r4,r4,r2
 2011c78:	917ff436 	bltu	r18,r5,2011c4c <__gethex+0x36c>
 2011c7c:	d8c00217 	ldw	r3,8(sp)
 2011c80:	40800104 	addi	r2,r8,4
 2011c84:	41000015 	stw	r4,0(r8)
 2011c88:	10c5c83a 	sub	r2,r2,r3
 2011c8c:	1021d0ba 	srai	r16,r2,2
 2011c90:	9c000415 	stw	r16,16(r19)
 2011c94:	200d5280 	call	200d528 <__hi0bits>
 2011c98:	8006917a 	slli	r3,r16,5
 2011c9c:	a5c00017 	ldw	r23,0(r20)
 2011ca0:	1885c83a 	sub	r2,r3,r2
 2011ca4:	b8801c16 	blt	r23,r2,2011d18 <__gethex+0x438>
 2011ca8:	15c00a16 	blt	r2,r23,2011cd4 <__gethex+0x3f4>
 2011cac:	0039883a 	mov	fp,zero
 2011cb0:	a0800217 	ldw	r2,8(r20)
 2011cb4:	1580340e 	bge	r2,r22,2011d88 <__gethex+0x4a8>
 2011cb8:	a809883a 	mov	r4,r21
 2011cbc:	980b883a 	mov	r5,r19
 2011cc0:	200d5000 	call	200d500 <_Bfree>
 2011cc4:	d8c00d17 	ldw	r3,52(sp)
 2011cc8:	048028c4 	movi	r18,163
 2011ccc:	18000015 	stw	zero,0(r3)
 2011cd0:	003f4606 	br	20119ec <__gethex+0x10c>
 2011cd4:	b8a1c83a 	sub	r16,r23,r2
 2011cd8:	980b883a 	mov	r5,r19
 2011cdc:	a809883a 	mov	r4,r21
 2011ce0:	800d883a 	mov	r6,r16
 2011ce4:	200de440 	call	200de44 <__lshift>
 2011ce8:	1027883a 	mov	r19,r2
 2011cec:	b42dc83a 	sub	r22,r22,r16
 2011cf0:	10800504 	addi	r2,r2,20
 2011cf4:	d8800215 	stw	r2,8(sp)
 2011cf8:	003fec06 	br	2011cac <__gethex+0x3cc>
 2011cfc:	41000015 	stw	r4,0(r8)
 2011d00:	28c00003 	ldbu	r3,0(r5)
 2011d04:	01c00104 	movi	r7,4
 2011d08:	000d883a 	mov	r6,zero
 2011d0c:	41d1883a 	add	r8,r8,r7
 2011d10:	0009883a 	mov	r4,zero
 2011d14:	003fd306 	br	2011c64 <__gethex+0x384>
 2011d18:	15e1c83a 	sub	r16,r2,r23
 2011d1c:	9809883a 	mov	r4,r19
 2011d20:	800b883a 	mov	r5,r16
 2011d24:	200d9f80 	call	200d9f8 <__any_on>
 2011d28:	1000061e 	bne	r2,zero,2011d44 <__gethex+0x464>
 2011d2c:	0039883a 	mov	fp,zero
 2011d30:	9809883a 	mov	r4,r19
 2011d34:	800b883a 	mov	r5,r16
 2011d38:	20118300 	call	2011830 <rshift>
 2011d3c:	b42d883a 	add	r22,r22,r16
 2011d40:	003fdb06 	br	2011cb0 <__gethex+0x3d0>
 2011d44:	817fffc4 	addi	r5,r16,-1
 2011d48:	2805d17a 	srai	r2,r5,5
 2011d4c:	d8c00217 	ldw	r3,8(sp)
 2011d50:	290007cc 	andi	r4,r5,31
 2011d54:	1085883a 	add	r2,r2,r2
 2011d58:	1085883a 	add	r2,r2,r2
 2011d5c:	01800044 	movi	r6,1
 2011d60:	10c5883a 	add	r2,r2,r3
 2011d64:	3108983a 	sll	r4,r6,r4
 2011d68:	10c00017 	ldw	r3,0(r2)
 2011d6c:	20c8703a 	and	r4,r4,r3
 2011d70:	20001a1e 	bne	r4,zero,2011ddc <__gethex+0x4fc>
 2011d74:	3039883a 	mov	fp,r6
 2011d78:	003fed06 	br	2011d30 <__gethex+0x450>
 2011d7c:	1011883a 	mov	r8,r2
 2011d80:	0009883a 	mov	r4,zero
 2011d84:	003fbd06 	br	2011c7c <__gethex+0x39c>
 2011d88:	a1000117 	ldw	r4,4(r20)
 2011d8c:	b1001a16 	blt	r22,r4,2011df8 <__gethex+0x518>
 2011d90:	04800044 	movi	r18,1
 2011d94:	e0000826 	beq	fp,zero,2011db8 <__gethex+0x4d8>
 2011d98:	a1000317 	ldw	r4,12(r20)
 2011d9c:	00800084 	movi	r2,2
 2011da0:	20809426 	beq	r4,r2,2011ff4 <__gethex+0x714>
 2011da4:	008000c4 	movi	r2,3
 2011da8:	20805826 	beq	r4,r2,2011f0c <__gethex+0x62c>
 2011dac:	00800044 	movi	r2,1
 2011db0:	20803f26 	beq	r4,r2,2011eb0 <__gethex+0x5d0>
 2011db4:	94800414 	ori	r18,r18,16
 2011db8:	d8800d17 	ldw	r2,52(sp)
 2011dbc:	d8c00117 	ldw	r3,4(sp)
 2011dc0:	14c00015 	stw	r19,0(r2)
 2011dc4:	1d800015 	stw	r22,0(r3)
 2011dc8:	003f0806 	br	20119ec <__gethex+0x10c>
 2011dcc:	000b883a 	mov	r5,zero
 2011dd0:	003f9206 	br	2011c1c <__gethex+0x33c>
 2011dd4:	002d883a 	mov	r22,zero
 2011dd8:	003ef806 	br	20119bc <__gethex+0xdc>
 2011ddc:	3140160e 	bge	r6,r5,2011e38 <__gethex+0x558>
 2011de0:	9809883a 	mov	r4,r19
 2011de4:	817fff84 	addi	r5,r16,-2
 2011de8:	200d9f80 	call	200d9f8 <__any_on>
 2011dec:	10001226 	beq	r2,zero,2011e38 <__gethex+0x558>
 2011df0:	070000c4 	movi	fp,3
 2011df4:	003fce06 	br	2011d30 <__gethex+0x450>
 2011df8:	25a3c83a 	sub	r17,r4,r22
 2011dfc:	8dc01016 	blt	r17,r23,2011e40 <__gethex+0x560>
 2011e00:	a0c00317 	ldw	r3,12(r20)
 2011e04:	00800084 	movi	r2,2
 2011e08:	18809326 	beq	r3,r2,2012058 <__gethex+0x778>
 2011e0c:	008000c4 	movi	r2,3
 2011e10:	18808e26 	beq	r3,r2,201204c <__gethex+0x76c>
 2011e14:	00800044 	movi	r2,1
 2011e18:	18807b26 	beq	r3,r2,2012008 <__gethex+0x728>
 2011e1c:	a809883a 	mov	r4,r21
 2011e20:	980b883a 	mov	r5,r19
 2011e24:	200d5000 	call	200d500 <_Bfree>
 2011e28:	d8c00d17 	ldw	r3,52(sp)
 2011e2c:	04801404 	movi	r18,80
 2011e30:	18000015 	stw	zero,0(r3)
 2011e34:	003eed06 	br	20119ec <__gethex+0x10c>
 2011e38:	07000084 	movi	fp,2
 2011e3c:	003fbc06 	br	2011d30 <__gethex+0x450>
 2011e40:	8c3fffc4 	addi	r16,r17,-1
 2011e44:	e0001426 	beq	fp,zero,2011e98 <__gethex+0x5b8>
 2011e48:	07000044 	movi	fp,1
 2011e4c:	8005d17a 	srai	r2,r16,5
 2011e50:	d8c00217 	ldw	r3,8(sp)
 2011e54:	814007cc 	andi	r5,r16,31
 2011e58:	1085883a 	add	r2,r2,r2
 2011e5c:	1085883a 	add	r2,r2,r2
 2011e60:	10c5883a 	add	r2,r2,r3
 2011e64:	00c00044 	movi	r3,1
 2011e68:	1946983a 	sll	r3,r3,r5
 2011e6c:	11000017 	ldw	r4,0(r2)
 2011e70:	1906703a 	and	r3,r3,r4
 2011e74:	18000126 	beq	r3,zero,2011e7c <__gethex+0x59c>
 2011e78:	e7000094 	ori	fp,fp,2
 2011e7c:	880b883a 	mov	r5,r17
 2011e80:	9809883a 	mov	r4,r19
 2011e84:	20118300 	call	2011830 <rshift>
 2011e88:	a5800117 	ldw	r22,4(r20)
 2011e8c:	bc6fc83a 	sub	r23,r23,r17
 2011e90:	04800084 	movi	r18,2
 2011e94:	003fbf06 	br	2011d94 <__gethex+0x4b4>
 2011e98:	043fec0e 	bge	zero,r16,2011e4c <__gethex+0x56c>
 2011e9c:	9809883a 	mov	r4,r19
 2011ea0:	800b883a 	mov	r5,r16
 2011ea4:	200d9f80 	call	200d9f8 <__any_on>
 2011ea8:	1039883a 	mov	fp,r2
 2011eac:	003fe706 	br	2011e4c <__gethex+0x56c>
 2011eb0:	e080008c 	andi	r2,fp,2
 2011eb4:	103fbf26 	beq	r2,zero,2011db4 <__gethex+0x4d4>
 2011eb8:	d8c00217 	ldw	r3,8(sp)
 2011ebc:	18800017 	ldw	r2,0(r3)
 2011ec0:	e084b03a 	or	r2,fp,r2
 2011ec4:	1104703a 	and	r2,r2,r4
 2011ec8:	103fba26 	beq	r2,zero,2011db4 <__gethex+0x4d4>
 2011ecc:	9c000417 	ldw	r16,16(r19)
 2011ed0:	d8c00217 	ldw	r3,8(sp)
 2011ed4:	017fffc4 	movi	r5,-1
 2011ed8:	8405883a 	add	r2,r16,r16
 2011edc:	10b9883a 	add	fp,r2,r2
 2011ee0:	1f09883a 	add	r4,r3,fp
 2011ee4:	dc000015 	stw	r16,0(sp)
 2011ee8:	00000306 	br	2011ef8 <__gethex+0x618>
 2011eec:	18000015 	stw	zero,0(r3)
 2011ef0:	18c00104 	addi	r3,r3,4
 2011ef4:	1900082e 	bgeu	r3,r4,2011f18 <__gethex+0x638>
 2011ef8:	18800017 	ldw	r2,0(r3)
 2011efc:	117ffb26 	beq	r2,r5,2011eec <__gethex+0x60c>
 2011f00:	10800044 	addi	r2,r2,1
 2011f04:	18800015 	stw	r2,0(r3)
 2011f08:	00001f06 	br	2011f88 <__gethex+0x6a8>
 2011f0c:	d8800e17 	ldw	r2,56(sp)
 2011f10:	103fa826 	beq	r2,zero,2011db4 <__gethex+0x4d4>
 2011f14:	003fed06 	br	2011ecc <__gethex+0x5ec>
 2011f18:	98800217 	ldw	r2,8(r19)
 2011f1c:	80801316 	blt	r16,r2,2011f6c <__gethex+0x68c>
 2011f20:	99400117 	ldw	r5,4(r19)
 2011f24:	a809883a 	mov	r4,r21
 2011f28:	29400044 	addi	r5,r5,1
 2011f2c:	200da800 	call	200da80 <_Balloc>
 2011f30:	99800417 	ldw	r6,16(r19)
 2011f34:	99400304 	addi	r5,r19,12
 2011f38:	11000304 	addi	r4,r2,12
 2011f3c:	318d883a 	add	r6,r6,r6
 2011f40:	318d883a 	add	r6,r6,r6
 2011f44:	31800204 	addi	r6,r6,8
 2011f48:	1023883a 	mov	r17,r2
 2011f4c:	200d2e80 	call	200d2e8 <memcpy>
 2011f50:	980b883a 	mov	r5,r19
 2011f54:	a809883a 	mov	r4,r21
 2011f58:	200d5000 	call	200d500 <_Bfree>
 2011f5c:	8c000417 	ldw	r16,16(r17)
 2011f60:	88800504 	addi	r2,r17,20
 2011f64:	8827883a 	mov	r19,r17
 2011f68:	d8800215 	stw	r2,8(sp)
 2011f6c:	8405883a 	add	r2,r16,r16
 2011f70:	1085883a 	add	r2,r2,r2
 2011f74:	14c5883a 	add	r2,r2,r19
 2011f78:	84000044 	addi	r16,r16,1
 2011f7c:	00c00044 	movi	r3,1
 2011f80:	10c00515 	stw	r3,20(r2)
 2011f84:	9c000415 	stw	r16,16(r19)
 2011f88:	00800084 	movi	r2,2
 2011f8c:	90801426 	beq	r18,r2,2011fe0 <__gethex+0x700>
 2011f90:	d8800017 	ldw	r2,0(sp)
 2011f94:	14000b16 	blt	r2,r16,2011fc4 <__gethex+0x6e4>
 2011f98:	bc0007cc 	andi	r16,r23,31
 2011f9c:	8000021e 	bne	r16,zero,2011fa8 <__gethex+0x6c8>
 2011fa0:	94800814 	ori	r18,r18,32
 2011fa4:	003f8406 	br	2011db8 <__gethex+0x4d8>
 2011fa8:	d8c00217 	ldw	r3,8(sp)
 2011fac:	1f05883a 	add	r2,r3,fp
 2011fb0:	113fff17 	ldw	r4,-4(r2)
 2011fb4:	200d5280 	call	200d528 <__hi0bits>
 2011fb8:	00c00804 	movi	r3,32
 2011fbc:	1c07c83a 	sub	r3,r3,r16
 2011fc0:	10fff70e 	bge	r2,r3,2011fa0 <__gethex+0x6c0>
 2011fc4:	9809883a 	mov	r4,r19
 2011fc8:	01400044 	movi	r5,1
 2011fcc:	20118300 	call	2011830 <rshift>
 2011fd0:	a0800217 	ldw	r2,8(r20)
 2011fd4:	b5800044 	addi	r22,r22,1
 2011fd8:	15bf3716 	blt	r2,r22,2011cb8 <__gethex+0x3d8>
 2011fdc:	003ff006 	br	2011fa0 <__gethex+0x6c0>
 2011fe0:	a0800017 	ldw	r2,0(r20)
 2011fe4:	10bfffc4 	addi	r2,r2,-1
 2011fe8:	b8801e26 	beq	r23,r2,2012064 <__gethex+0x784>
 2011fec:	04800884 	movi	r18,34
 2011ff0:	003f7106 	br	2011db8 <__gethex+0x4d8>
 2011ff4:	d8c00e17 	ldw	r3,56(sp)
 2011ff8:	00800044 	movi	r2,1
 2011ffc:	10c5c83a 	sub	r2,r2,r3
 2012000:	103f6c26 	beq	r2,zero,2011db4 <__gethex+0x4d4>
 2012004:	003fb106 	br	2011ecc <__gethex+0x5ec>
 2012008:	bc7f841e 	bne	r23,r17,2011e1c <__gethex+0x53c>
 201200c:	1dc0050e 	bge	r3,r23,2012024 <__gethex+0x744>
 2012010:	b8cbc83a 	sub	r5,r23,r3
 2012014:	9809883a 	mov	r4,r19
 2012018:	200d9f80 	call	200d9f8 <__any_on>
 201201c:	103f7f26 	beq	r2,zero,2011e1c <__gethex+0x53c>
 2012020:	a1000117 	ldw	r4,4(r20)
 2012024:	d8800117 	ldw	r2,4(sp)
 2012028:	d8c00217 	ldw	r3,8(sp)
 201202c:	04000044 	movi	r16,1
 2012030:	11000015 	stw	r4,0(r2)
 2012034:	d8800d17 	ldw	r2,52(sp)
 2012038:	04801884 	movi	r18,98
 201203c:	1c000015 	stw	r16,0(r3)
 2012040:	14c00015 	stw	r19,0(r2)
 2012044:	9c000415 	stw	r16,16(r19)
 2012048:	003e6806 	br	20119ec <__gethex+0x10c>
 201204c:	d8c00e17 	ldw	r3,56(sp)
 2012050:	183f7226 	beq	r3,zero,2011e1c <__gethex+0x53c>
 2012054:	003ff306 	br	2012024 <__gethex+0x744>
 2012058:	d8800e17 	ldw	r2,56(sp)
 201205c:	103ff126 	beq	r2,zero,2012024 <__gethex+0x744>
 2012060:	003f6e06 	br	2011e1c <__gethex+0x53c>
 2012064:	b805d17a 	srai	r2,r23,5
 2012068:	d8c00217 	ldw	r3,8(sp)
 201206c:	b94007cc 	andi	r5,r23,31
 2012070:	1085883a 	add	r2,r2,r2
 2012074:	1085883a 	add	r2,r2,r2
 2012078:	10c5883a 	add	r2,r2,r3
 201207c:	00c00044 	movi	r3,1
 2012080:	1946983a 	sll	r3,r3,r5
 2012084:	11000017 	ldw	r4,0(r2)
 2012088:	1906703a 	and	r3,r3,r4
 201208c:	183fd726 	beq	r3,zero,2011fec <__gethex+0x70c>
 2012090:	04800844 	movi	r18,33
 2012094:	003f4806 	br	2011db8 <__gethex+0x4d8>

02012098 <L_shift>:
 2012098:	00800204 	movi	r2,8
 201209c:	1185c83a 	sub	r2,r2,r6
 20120a0:	1085883a 	add	r2,r2,r2
 20120a4:	21c00017 	ldw	r7,0(r4)
 20120a8:	1093883a 	add	r9,r2,r2
 20120ac:	00800804 	movi	r2,32
 20120b0:	200d883a 	mov	r6,r4
 20120b4:	1251c83a 	sub	r8,r2,r9
 20120b8:	31800104 	addi	r6,r6,4
 20120bc:	3805883a 	mov	r2,r7
 20120c0:	31c00017 	ldw	r7,0(r6)
 20120c4:	3a08983a 	sll	r4,r7,r8
 20120c8:	3a46d83a 	srl	r3,r7,r9
 20120cc:	1104b03a 	or	r2,r2,r4
 20120d0:	180f883a 	mov	r7,r3
 20120d4:	30bfff15 	stw	r2,-4(r6)
 20120d8:	30c00015 	stw	r3,0(r6)
 20120dc:	317ff636 	bltu	r6,r5,20120b8 <L_shift+0x20>
 20120e0:	f800283a 	ret

020120e4 <__hexnan>:
 20120e4:	defff404 	addi	sp,sp,-48
 20120e8:	dd800815 	stw	r22,32(sp)
 20120ec:	058080b4 	movhi	r22,514
 20120f0:	b5940104 	addi	r22,r22,20484
 20120f4:	b0800c03 	ldbu	r2,48(r22)
 20120f8:	dcc00515 	stw	r19,20(sp)
 20120fc:	dc000215 	stw	r16,8(sp)
 2012100:	dfc00b15 	stw	ra,44(sp)
 2012104:	df000a15 	stw	fp,40(sp)
 2012108:	ddc00915 	stw	r23,36(sp)
 201210c:	dd400715 	stw	r21,28(sp)
 2012110:	dd000615 	stw	r20,24(sp)
 2012114:	dc800415 	stw	r18,16(sp)
 2012118:	dc400315 	stw	r17,12(sp)
 201211c:	d9000115 	stw	r4,4(sp)
 2012120:	2821883a 	mov	r16,r5
 2012124:	3027883a 	mov	r19,r6
 2012128:	10007426 	beq	r2,zero,20122fc <__hexnan+0x218>
 201212c:	80c00017 	ldw	r3,0(r16)
 2012130:	1805d17a 	srai	r2,r3,5
 2012134:	18c007cc 	andi	r3,r3,31
 2012138:	1839003a 	cmpeq	fp,r3,zero
 201213c:	1085883a 	add	r2,r2,r2
 2012140:	1085883a 	add	r2,r2,r2
 2012144:	d8c00015 	stw	r3,0(sp)
 2012148:	14c5883a 	add	r2,r2,r19
 201214c:	e000011e 	bne	fp,zero,2012154 <__hexnan+0x70>
 2012150:	10800104 	addi	r2,r2,4
 2012154:	d8c00117 	ldw	r3,4(sp)
 2012158:	153fff04 	addi	r20,r2,-4
 201215c:	a021883a 	mov	r16,r20
 2012160:	1c400017 	ldw	r17,0(r3)
 2012164:	a02b883a 	mov	r21,r20
 2012168:	0025883a 	mov	r18,zero
 201216c:	002f883a 	mov	r23,zero
 2012170:	000d883a 	mov	r6,zero
 2012174:	103fff15 	stw	zero,-4(r2)
 2012178:	8c400044 	addi	r17,r17,1
 201217c:	89000003 	ldbu	r4,0(r17)
 2012180:	20000e26 	beq	r4,zero,20121bc <__hexnan+0xd8>
 2012184:	2585883a 	add	r2,r4,r22
 2012188:	10c00003 	ldbu	r3,0(r2)
 201218c:	18002e1e 	bne	r3,zero,2012248 <__hexnan+0x164>
 2012190:	00800804 	movi	r2,32
 2012194:	11005536 	bltu	r2,r4,20122ec <__hexnan+0x208>
 2012198:	bcbff70e 	bge	r23,r18,2012178 <__hexnan+0x94>
 201219c:	8540022e 	bgeu	r16,r21,20121a8 <__hexnan+0xc4>
 20121a0:	008001c4 	movi	r2,7
 20121a4:	11803c0e 	bge	r2,r6,2012298 <__hexnan+0x1b4>
 20121a8:	9c003536 	bltu	r19,r16,2012280 <__hexnan+0x19c>
 20121ac:	8c400044 	addi	r17,r17,1
 20121b0:	89000003 	ldbu	r4,0(r17)
 20121b4:	01800204 	movi	r6,8
 20121b8:	203ff21e 	bne	r4,zero,2012184 <__hexnan+0xa0>
 20121bc:	90004d26 	beq	r18,zero,20122f4 <__hexnan+0x210>
 20121c0:	85404336 	bltu	r16,r21,20122d0 <__hexnan+0x1ec>
 20121c4:	9c00382e 	bgeu	r19,r16,20122a8 <__hexnan+0x1c4>
 20121c8:	9807883a 	mov	r3,r19
 20121cc:	80800017 	ldw	r2,0(r16)
 20121d0:	84000104 	addi	r16,r16,4
 20121d4:	18800015 	stw	r2,0(r3)
 20121d8:	18c00104 	addi	r3,r3,4
 20121dc:	a43ffb2e 	bgeu	r20,r16,20121cc <__hexnan+0xe8>
 20121e0:	18000015 	stw	zero,0(r3)
 20121e4:	18c00104 	addi	r3,r3,4
 20121e8:	a0fffd2e 	bgeu	r20,r3,20121e0 <__hexnan+0xfc>
 20121ec:	a0800017 	ldw	r2,0(r20)
 20121f0:	1000071e 	bne	r2,zero,2012210 <__hexnan+0x12c>
 20121f4:	9d004326 	beq	r19,r20,2012304 <__hexnan+0x220>
 20121f8:	a007883a 	mov	r3,r20
 20121fc:	00000106 	br	2012204 <__hexnan+0x120>
 2012200:	98c04026 	beq	r19,r3,2012304 <__hexnan+0x220>
 2012204:	18ffff04 	addi	r3,r3,-4
 2012208:	18800017 	ldw	r2,0(r3)
 201220c:	103ffc26 	beq	r2,zero,2012200 <__hexnan+0x11c>
 2012210:	00c00144 	movi	r3,5
 2012214:	1805883a 	mov	r2,r3
 2012218:	dfc00b17 	ldw	ra,44(sp)
 201221c:	df000a17 	ldw	fp,40(sp)
 2012220:	ddc00917 	ldw	r23,36(sp)
 2012224:	dd800817 	ldw	r22,32(sp)
 2012228:	dd400717 	ldw	r21,28(sp)
 201222c:	dd000617 	ldw	r20,24(sp)
 2012230:	dcc00517 	ldw	r19,20(sp)
 2012234:	dc800417 	ldw	r18,16(sp)
 2012238:	dc400317 	ldw	r17,12(sp)
 201223c:	dc000217 	ldw	r16,8(sp)
 2012240:	dec00c04 	addi	sp,sp,48
 2012244:	f800283a 	ret
 2012248:	31800044 	addi	r6,r6,1
 201224c:	00800204 	movi	r2,8
 2012250:	94800044 	addi	r18,r18,1
 2012254:	1180040e 	bge	r2,r6,2012268 <__hexnan+0x184>
 2012258:	9c3fc72e 	bgeu	r19,r16,2012178 <__hexnan+0x94>
 201225c:	843fff04 	addi	r16,r16,-4
 2012260:	80000015 	stw	zero,0(r16)
 2012264:	01800044 	movi	r6,1
 2012268:	80800017 	ldw	r2,0(r16)
 201226c:	18c003cc 	andi	r3,r3,15
 2012270:	1004913a 	slli	r2,r2,4
 2012274:	10c4b03a 	or	r2,r2,r3
 2012278:	80800015 	stw	r2,0(r16)
 201227c:	003fbe06 	br	2012178 <__hexnan+0x94>
 2012280:	843fff04 	addi	r16,r16,-4
 2012284:	802b883a 	mov	r21,r16
 2012288:	902f883a 	mov	r23,r18
 201228c:	000d883a 	mov	r6,zero
 2012290:	80000015 	stw	zero,0(r16)
 2012294:	003fb806 	br	2012178 <__hexnan+0x94>
 2012298:	8009883a 	mov	r4,r16
 201229c:	a80b883a 	mov	r5,r21
 20122a0:	20120980 	call	2012098 <L_shift>
 20122a4:	003fc006 	br	20121a8 <__hexnan+0xc4>
 20122a8:	e03fd01e 	bne	fp,zero,20121ec <__hexnan+0x108>
 20122ac:	d8c00017 	ldw	r3,0(sp)
 20122b0:	00800804 	movi	r2,32
 20122b4:	10c5c83a 	sub	r2,r2,r3
 20122b8:	00ffffc4 	movi	r3,-1
 20122bc:	1886d83a 	srl	r3,r3,r2
 20122c0:	a0800017 	ldw	r2,0(r20)
 20122c4:	10c4703a 	and	r2,r2,r3
 20122c8:	a0800015 	stw	r2,0(r20)
 20122cc:	003fc806 	br	20121f0 <__hexnan+0x10c>
 20122d0:	008001c4 	movi	r2,7
 20122d4:	11bfbb16 	blt	r2,r6,20121c4 <__hexnan+0xe0>
 20122d8:	a80b883a 	mov	r5,r21
 20122dc:	8009883a 	mov	r4,r16
 20122e0:	20120980 	call	2012098 <L_shift>
 20122e4:	9c3ff02e 	bgeu	r19,r16,20122a8 <__hexnan+0x1c4>
 20122e8:	003fb706 	br	20121c8 <__hexnan+0xe4>
 20122ec:	00800a44 	movi	r2,41
 20122f0:	20800826 	beq	r4,r2,2012314 <__hexnan+0x230>
 20122f4:	00c00104 	movi	r3,4
 20122f8:	003fc606 	br	2012214 <__hexnan+0x130>
 20122fc:	20117c80 	call	20117c8 <__hexdig_init>
 2012300:	003f8a06 	br	201212c <__hexnan+0x48>
 2012304:	00800044 	movi	r2,1
 2012308:	00c00144 	movi	r3,5
 201230c:	98800015 	stw	r2,0(r19)
 2012310:	003fc006 	br	2012214 <__hexnan+0x130>
 2012314:	903ff726 	beq	r18,zero,20122f4 <__hexnan+0x210>
 2012318:	d8c00117 	ldw	r3,4(sp)
 201231c:	88800044 	addi	r2,r17,1
 2012320:	18800015 	stw	r2,0(r3)
 2012324:	857fa72e 	bgeu	r16,r21,20121c4 <__hexnan+0xe0>
 2012328:	003fe906 	br	20122d0 <__hexnan+0x1ec>

0201232c <_isatty_r>:
 201232c:	defffd04 	addi	sp,sp,-12
 2012330:	dc000015 	stw	r16,0(sp)
 2012334:	040080b4 	movhi	r16,514
 2012338:	8413c804 	addi	r16,r16,20256
 201233c:	dc400115 	stw	r17,4(sp)
 2012340:	80000015 	stw	zero,0(r16)
 2012344:	2023883a 	mov	r17,r4
 2012348:	2809883a 	mov	r4,r5
 201234c:	dfc00215 	stw	ra,8(sp)
 2012350:	2013c880 	call	2013c88 <isatty>
 2012354:	1007883a 	mov	r3,r2
 2012358:	00bfffc4 	movi	r2,-1
 201235c:	18800626 	beq	r3,r2,2012378 <_isatty_r+0x4c>
 2012360:	1805883a 	mov	r2,r3
 2012364:	dfc00217 	ldw	ra,8(sp)
 2012368:	dc400117 	ldw	r17,4(sp)
 201236c:	dc000017 	ldw	r16,0(sp)
 2012370:	dec00304 	addi	sp,sp,12
 2012374:	f800283a 	ret
 2012378:	80800017 	ldw	r2,0(r16)
 201237c:	103ff826 	beq	r2,zero,2012360 <_isatty_r+0x34>
 2012380:	88800015 	stw	r2,0(r17)
 2012384:	1805883a 	mov	r2,r3
 2012388:	dfc00217 	ldw	ra,8(sp)
 201238c:	dc400117 	ldw	r17,4(sp)
 2012390:	dc000017 	ldw	r16,0(sp)
 2012394:	dec00304 	addi	sp,sp,12
 2012398:	f800283a 	ret

0201239c <_lseek_r>:
 201239c:	defffd04 	addi	sp,sp,-12
 20123a0:	dc000015 	stw	r16,0(sp)
 20123a4:	040080b4 	movhi	r16,514
 20123a8:	8413c804 	addi	r16,r16,20256
 20123ac:	dc400115 	stw	r17,4(sp)
 20123b0:	80000015 	stw	zero,0(r16)
 20123b4:	2023883a 	mov	r17,r4
 20123b8:	2809883a 	mov	r4,r5
 20123bc:	300b883a 	mov	r5,r6
 20123c0:	380d883a 	mov	r6,r7
 20123c4:	dfc00215 	stw	ra,8(sp)
 20123c8:	2013e940 	call	2013e94 <lseek>
 20123cc:	1007883a 	mov	r3,r2
 20123d0:	00bfffc4 	movi	r2,-1
 20123d4:	18800626 	beq	r3,r2,20123f0 <_lseek_r+0x54>
 20123d8:	1805883a 	mov	r2,r3
 20123dc:	dfc00217 	ldw	ra,8(sp)
 20123e0:	dc400117 	ldw	r17,4(sp)
 20123e4:	dc000017 	ldw	r16,0(sp)
 20123e8:	dec00304 	addi	sp,sp,12
 20123ec:	f800283a 	ret
 20123f0:	80800017 	ldw	r2,0(r16)
 20123f4:	103ff826 	beq	r2,zero,20123d8 <_lseek_r+0x3c>
 20123f8:	88800015 	stw	r2,0(r17)
 20123fc:	1805883a 	mov	r2,r3
 2012400:	dfc00217 	ldw	ra,8(sp)
 2012404:	dc400117 	ldw	r17,4(sp)
 2012408:	dc000017 	ldw	r16,0(sp)
 201240c:	dec00304 	addi	sp,sp,12
 2012410:	f800283a 	ret

02012414 <_read_r>:
 2012414:	defffd04 	addi	sp,sp,-12
 2012418:	dc000015 	stw	r16,0(sp)
 201241c:	040080b4 	movhi	r16,514
 2012420:	8413c804 	addi	r16,r16,20256
 2012424:	dc400115 	stw	r17,4(sp)
 2012428:	80000015 	stw	zero,0(r16)
 201242c:	2023883a 	mov	r17,r4
 2012430:	2809883a 	mov	r4,r5
 2012434:	300b883a 	mov	r5,r6
 2012438:	380d883a 	mov	r6,r7
 201243c:	dfc00215 	stw	ra,8(sp)
 2012440:	20140ac0 	call	20140ac <read>
 2012444:	1007883a 	mov	r3,r2
 2012448:	00bfffc4 	movi	r2,-1
 201244c:	18800626 	beq	r3,r2,2012468 <_read_r+0x54>
 2012450:	1805883a 	mov	r2,r3
 2012454:	dfc00217 	ldw	ra,8(sp)
 2012458:	dc400117 	ldw	r17,4(sp)
 201245c:	dc000017 	ldw	r16,0(sp)
 2012460:	dec00304 	addi	sp,sp,12
 2012464:	f800283a 	ret
 2012468:	80800017 	ldw	r2,0(r16)
 201246c:	103ff826 	beq	r2,zero,2012450 <_read_r+0x3c>
 2012470:	88800015 	stw	r2,0(r17)
 2012474:	1805883a 	mov	r2,r3
 2012478:	dfc00217 	ldw	ra,8(sp)
 201247c:	dc400117 	ldw	r17,4(sp)
 2012480:	dc000017 	ldw	r16,0(sp)
 2012484:	dec00304 	addi	sp,sp,12
 2012488:	f800283a 	ret

0201248c <__fixunsdfsi>:
 201248c:	defffb04 	addi	sp,sp,-20
 2012490:	dc400115 	stw	r17,4(sp)
 2012494:	dc000015 	stw	r16,0(sp)
 2012498:	04507834 	movhi	r17,16864
 201249c:	0021883a 	mov	r16,zero
 20124a0:	800d883a 	mov	r6,r16
 20124a4:	880f883a 	mov	r7,r17
 20124a8:	dcc00315 	stw	r19,12(sp)
 20124ac:	dc800215 	stw	r18,8(sp)
 20124b0:	2827883a 	mov	r19,r5
 20124b4:	2025883a 	mov	r18,r4
 20124b8:	dfc00415 	stw	ra,16(sp)
 20124bc:	20133340 	call	2013334 <__gedf2>
 20124c0:	000d883a 	mov	r6,zero
 20124c4:	880f883a 	mov	r7,r17
 20124c8:	980b883a 	mov	r5,r19
 20124cc:	9009883a 	mov	r4,r18
 20124d0:	10000d16 	blt	r2,zero,2012508 <__fixunsdfsi+0x7c>
 20124d4:	2004edc0 	call	2004edc <__subdf3>
 20124d8:	180b883a 	mov	r5,r3
 20124dc:	1009883a 	mov	r4,r2
 20124e0:	20057f40 	call	20057f4 <__fixdfsi>
 20124e4:	00e00034 	movhi	r3,32768
 20124e8:	10c5883a 	add	r2,r2,r3
 20124ec:	dfc00417 	ldw	ra,16(sp)
 20124f0:	dcc00317 	ldw	r19,12(sp)
 20124f4:	dc800217 	ldw	r18,8(sp)
 20124f8:	dc400117 	ldw	r17,4(sp)
 20124fc:	dc000017 	ldw	r16,0(sp)
 2012500:	dec00504 	addi	sp,sp,20
 2012504:	f800283a 	ret
 2012508:	980b883a 	mov	r5,r19
 201250c:	9009883a 	mov	r4,r18
 2012510:	20057f40 	call	20057f4 <__fixdfsi>
 2012514:	dfc00417 	ldw	ra,16(sp)
 2012518:	dcc00317 	ldw	r19,12(sp)
 201251c:	dc800217 	ldw	r18,8(sp)
 2012520:	dc400117 	ldw	r17,4(sp)
 2012524:	dc000017 	ldw	r16,0(sp)
 2012528:	dec00504 	addi	sp,sp,20
 201252c:	f800283a 	ret

02012530 <__udivdi3>:
 2012530:	defff004 	addi	sp,sp,-64
 2012534:	2005883a 	mov	r2,r4
 2012538:	3011883a 	mov	r8,r6
 201253c:	df000e15 	stw	fp,56(sp)
 2012540:	dd000a15 	stw	r20,40(sp)
 2012544:	dc000615 	stw	r16,24(sp)
 2012548:	dfc00f15 	stw	ra,60(sp)
 201254c:	ddc00d15 	stw	r23,52(sp)
 2012550:	dd800c15 	stw	r22,48(sp)
 2012554:	dd400b15 	stw	r21,44(sp)
 2012558:	dcc00915 	stw	r19,36(sp)
 201255c:	dc800815 	stw	r18,32(sp)
 2012560:	dc400715 	stw	r17,28(sp)
 2012564:	4021883a 	mov	r16,r8
 2012568:	1039883a 	mov	fp,r2
 201256c:	2829883a 	mov	r20,r5
 2012570:	38003b1e 	bne	r7,zero,2012660 <__udivdi3+0x130>
 2012574:	2a005c36 	bltu	r5,r8,20126e8 <__udivdi3+0x1b8>
 2012578:	4000a626 	beq	r8,zero,2012814 <__udivdi3+0x2e4>
 201257c:	00bfffd4 	movui	r2,65535
 2012580:	14009e36 	bltu	r2,r16,20127fc <__udivdi3+0x2cc>
 2012584:	00803fc4 	movi	r2,255
 2012588:	14013d36 	bltu	r2,r16,2012a80 <__udivdi3+0x550>
 201258c:	000b883a 	mov	r5,zero
 2012590:	0005883a 	mov	r2,zero
 2012594:	8084d83a 	srl	r2,r16,r2
 2012598:	010080b4 	movhi	r4,514
 201259c:	2102fc04 	addi	r4,r4,3056
 20125a0:	01800804 	movi	r6,32
 20125a4:	1105883a 	add	r2,r2,r4
 20125a8:	10c00003 	ldbu	r3,0(r2)
 20125ac:	28c7883a 	add	r3,r5,r3
 20125b0:	30edc83a 	sub	r22,r6,r3
 20125b4:	b000ee1e 	bne	r22,zero,2012970 <__udivdi3+0x440>
 20125b8:	802ad43a 	srli	r21,r16,16
 20125bc:	00800044 	movi	r2,1
 20125c0:	a423c83a 	sub	r17,r20,r16
 20125c4:	85ffffcc 	andi	r23,r16,65535
 20125c8:	d8800315 	stw	r2,12(sp)
 20125cc:	8809883a 	mov	r4,r17
 20125d0:	a80b883a 	mov	r5,r21
 20125d4:	2005ab40 	call	2005ab4 <__udivsi3>
 20125d8:	8809883a 	mov	r4,r17
 20125dc:	a80b883a 	mov	r5,r21
 20125e0:	102d883a 	mov	r22,r2
 20125e4:	2005abc0 	call	2005abc <__umodsi3>
 20125e8:	1004943a 	slli	r2,r2,16
 20125ec:	e006d43a 	srli	r3,fp,16
 20125f0:	bda3383a 	mul	r17,r23,r22
 20125f4:	10c4b03a 	or	r2,r2,r3
 20125f8:	1440042e 	bgeu	r2,r17,201260c <__udivdi3+0xdc>
 20125fc:	1405883a 	add	r2,r2,r16
 2012600:	b5bfffc4 	addi	r22,r22,-1
 2012604:	14000136 	bltu	r2,r16,201260c <__udivdi3+0xdc>
 2012608:	14413d36 	bltu	r2,r17,2012b00 <__udivdi3+0x5d0>
 201260c:	1463c83a 	sub	r17,r2,r17
 2012610:	8809883a 	mov	r4,r17
 2012614:	a80b883a 	mov	r5,r21
 2012618:	2005ab40 	call	2005ab4 <__udivsi3>
 201261c:	8809883a 	mov	r4,r17
 2012620:	a80b883a 	mov	r5,r21
 2012624:	1029883a 	mov	r20,r2
 2012628:	2005abc0 	call	2005abc <__umodsi3>
 201262c:	1004943a 	slli	r2,r2,16
 2012630:	bd09383a 	mul	r4,r23,r20
 2012634:	e0ffffcc 	andi	r3,fp,65535
 2012638:	10c4b03a 	or	r2,r2,r3
 201263c:	1100042e 	bgeu	r2,r4,2012650 <__udivdi3+0x120>
 2012640:	8085883a 	add	r2,r16,r2
 2012644:	a53fffc4 	addi	r20,r20,-1
 2012648:	14000136 	bltu	r2,r16,2012650 <__udivdi3+0x120>
 201264c:	11012036 	bltu	r2,r4,2012ad0 <__udivdi3+0x5a0>
 2012650:	b004943a 	slli	r2,r22,16
 2012654:	d9000317 	ldw	r4,12(sp)
 2012658:	a084b03a 	or	r2,r20,r2
 201265c:	00001506 	br	20126b4 <__udivdi3+0x184>
 2012660:	380d883a 	mov	r6,r7
 2012664:	29c06236 	bltu	r5,r7,20127f0 <__udivdi3+0x2c0>
 2012668:	00bfffd4 	movui	r2,65535
 201266c:	11c05a36 	bltu	r2,r7,20127d8 <__udivdi3+0x2a8>
 2012670:	00803fc4 	movi	r2,255
 2012674:	11c0fc36 	bltu	r2,r7,2012a68 <__udivdi3+0x538>
 2012678:	000b883a 	mov	r5,zero
 201267c:	0005883a 	mov	r2,zero
 2012680:	3084d83a 	srl	r2,r6,r2
 2012684:	010080b4 	movhi	r4,514
 2012688:	2102fc04 	addi	r4,r4,3056
 201268c:	01c00804 	movi	r7,32
 2012690:	1105883a 	add	r2,r2,r4
 2012694:	10c00003 	ldbu	r3,0(r2)
 2012698:	28c7883a 	add	r3,r5,r3
 201269c:	38efc83a 	sub	r23,r7,r3
 20126a0:	b800691e 	bne	r23,zero,2012848 <__udivdi3+0x318>
 20126a4:	35000136 	bltu	r6,r20,20126ac <__udivdi3+0x17c>
 20126a8:	e4005136 	bltu	fp,r16,20127f0 <__udivdi3+0x2c0>
 20126ac:	00800044 	movi	r2,1
 20126b0:	0009883a 	mov	r4,zero
 20126b4:	2007883a 	mov	r3,r4
 20126b8:	dfc00f17 	ldw	ra,60(sp)
 20126bc:	df000e17 	ldw	fp,56(sp)
 20126c0:	ddc00d17 	ldw	r23,52(sp)
 20126c4:	dd800c17 	ldw	r22,48(sp)
 20126c8:	dd400b17 	ldw	r21,44(sp)
 20126cc:	dd000a17 	ldw	r20,40(sp)
 20126d0:	dcc00917 	ldw	r19,36(sp)
 20126d4:	dc800817 	ldw	r18,32(sp)
 20126d8:	dc400717 	ldw	r17,28(sp)
 20126dc:	dc000617 	ldw	r16,24(sp)
 20126e0:	dec01004 	addi	sp,sp,64
 20126e4:	f800283a 	ret
 20126e8:	00bfffd4 	movui	r2,65535
 20126ec:	12005036 	bltu	r2,r8,2012830 <__udivdi3+0x300>
 20126f0:	00803fc4 	movi	r2,255
 20126f4:	1200e836 	bltu	r2,r8,2012a98 <__udivdi3+0x568>
 20126f8:	000b883a 	mov	r5,zero
 20126fc:	0005883a 	mov	r2,zero
 2012700:	8084d83a 	srl	r2,r16,r2
 2012704:	010080b4 	movhi	r4,514
 2012708:	2102fc04 	addi	r4,r4,3056
 201270c:	01800804 	movi	r6,32
 2012710:	1105883a 	add	r2,r2,r4
 2012714:	10c00003 	ldbu	r3,0(r2)
 2012718:	28c7883a 	add	r3,r5,r3
 201271c:	30cbc83a 	sub	r5,r6,r3
 2012720:	28000626 	beq	r5,zero,201273c <__udivdi3+0x20c>
 2012724:	3145c83a 	sub	r2,r6,r5
 2012728:	e084d83a 	srl	r2,fp,r2
 201272c:	a146983a 	sll	r3,r20,r5
 2012730:	e178983a 	sll	fp,fp,r5
 2012734:	8160983a 	sll	r16,r16,r5
 2012738:	18a8b03a 	or	r20,r3,r2
 201273c:	802ad43a 	srli	r21,r16,16
 2012740:	a009883a 	mov	r4,r20
 2012744:	85ffffcc 	andi	r23,r16,65535
 2012748:	a80b883a 	mov	r5,r21
 201274c:	2005ab40 	call	2005ab4 <__udivsi3>
 2012750:	a009883a 	mov	r4,r20
 2012754:	a80b883a 	mov	r5,r21
 2012758:	102d883a 	mov	r22,r2
 201275c:	2005abc0 	call	2005abc <__umodsi3>
 2012760:	1004943a 	slli	r2,r2,16
 2012764:	e006d43a 	srli	r3,fp,16
 2012768:	bda3383a 	mul	r17,r23,r22
 201276c:	10c4b03a 	or	r2,r2,r3
 2012770:	1440042e 	bgeu	r2,r17,2012784 <__udivdi3+0x254>
 2012774:	1405883a 	add	r2,r2,r16
 2012778:	b5bfffc4 	addi	r22,r22,-1
 201277c:	14000136 	bltu	r2,r16,2012784 <__udivdi3+0x254>
 2012780:	1440d536 	bltu	r2,r17,2012ad8 <__udivdi3+0x5a8>
 2012784:	1463c83a 	sub	r17,r2,r17
 2012788:	8809883a 	mov	r4,r17
 201278c:	a80b883a 	mov	r5,r21
 2012790:	2005ab40 	call	2005ab4 <__udivsi3>
 2012794:	8809883a 	mov	r4,r17
 2012798:	a80b883a 	mov	r5,r21
 201279c:	1029883a 	mov	r20,r2
 20127a0:	2005abc0 	call	2005abc <__umodsi3>
 20127a4:	1004943a 	slli	r2,r2,16
 20127a8:	bd09383a 	mul	r4,r23,r20
 20127ac:	e0ffffcc 	andi	r3,fp,65535
 20127b0:	10c4b03a 	or	r2,r2,r3
 20127b4:	1100042e 	bgeu	r2,r4,20127c8 <__udivdi3+0x298>
 20127b8:	8085883a 	add	r2,r16,r2
 20127bc:	a53fffc4 	addi	r20,r20,-1
 20127c0:	14000136 	bltu	r2,r16,20127c8 <__udivdi3+0x298>
 20127c4:	1100c736 	bltu	r2,r4,2012ae4 <__udivdi3+0x5b4>
 20127c8:	b004943a 	slli	r2,r22,16
 20127cc:	0009883a 	mov	r4,zero
 20127d0:	a084b03a 	or	r2,r20,r2
 20127d4:	003fb706 	br	20126b4 <__udivdi3+0x184>
 20127d8:	00804034 	movhi	r2,256
 20127dc:	10bfffc4 	addi	r2,r2,-1
 20127e0:	11c0a436 	bltu	r2,r7,2012a74 <__udivdi3+0x544>
 20127e4:	01400404 	movi	r5,16
 20127e8:	2805883a 	mov	r2,r5
 20127ec:	003fa406 	br	2012680 <__udivdi3+0x150>
 20127f0:	0005883a 	mov	r2,zero
 20127f4:	0009883a 	mov	r4,zero
 20127f8:	003fae06 	br	20126b4 <__udivdi3+0x184>
 20127fc:	00804034 	movhi	r2,256
 2012800:	10bfffc4 	addi	r2,r2,-1
 2012804:	1400a136 	bltu	r2,r16,2012a8c <__udivdi3+0x55c>
 2012808:	01400404 	movi	r5,16
 201280c:	2805883a 	mov	r2,r5
 2012810:	003f6006 	br	2012594 <__udivdi3+0x64>
 2012814:	01000044 	movi	r4,1
 2012818:	000b883a 	mov	r5,zero
 201281c:	2005ab40 	call	2005ab4 <__udivsi3>
 2012820:	1021883a 	mov	r16,r2
 2012824:	00bfffd4 	movui	r2,65535
 2012828:	143ff436 	bltu	r2,r16,20127fc <__udivdi3+0x2cc>
 201282c:	003f5506 	br	2012584 <__udivdi3+0x54>
 2012830:	00804034 	movhi	r2,256
 2012834:	10bfffc4 	addi	r2,r2,-1
 2012838:	12009a36 	bltu	r2,r8,2012aa4 <__udivdi3+0x574>
 201283c:	01400404 	movi	r5,16
 2012840:	2805883a 	mov	r2,r5
 2012844:	003fae06 	br	2012700 <__udivdi3+0x1d0>
 2012848:	3dc5c83a 	sub	r2,r7,r23
 201284c:	35c8983a 	sll	r4,r6,r23
 2012850:	8086d83a 	srl	r3,r16,r2
 2012854:	a0a2d83a 	srl	r17,r20,r2
 2012858:	e084d83a 	srl	r2,fp,r2
 201285c:	20eab03a 	or	r21,r4,r3
 2012860:	a82cd43a 	srli	r22,r21,16
 2012864:	a5c6983a 	sll	r3,r20,r23
 2012868:	8809883a 	mov	r4,r17
 201286c:	b00b883a 	mov	r5,r22
 2012870:	1886b03a 	or	r3,r3,r2
 2012874:	d8c00215 	stw	r3,8(sp)
 2012878:	2005ab40 	call	2005ab4 <__udivsi3>
 201287c:	8809883a 	mov	r4,r17
 2012880:	b00b883a 	mov	r5,r22
 2012884:	1029883a 	mov	r20,r2
 2012888:	2005abc0 	call	2005abc <__umodsi3>
 201288c:	a8ffffcc 	andi	r3,r21,65535
 2012890:	d8c00515 	stw	r3,20(sp)
 2012894:	d9000217 	ldw	r4,8(sp)
 2012898:	d9400517 	ldw	r5,20(sp)
 201289c:	1004943a 	slli	r2,r2,16
 20128a0:	2006d43a 	srli	r3,r4,16
 20128a4:	85e0983a 	sll	r16,r16,r23
 20128a8:	2d23383a 	mul	r17,r5,r20
 20128ac:	10c4b03a 	or	r2,r2,r3
 20128b0:	dc000015 	stw	r16,0(sp)
 20128b4:	1440032e 	bgeu	r2,r17,20128c4 <__udivdi3+0x394>
 20128b8:	1545883a 	add	r2,r2,r21
 20128bc:	a53fffc4 	addi	r20,r20,-1
 20128c0:	15407f2e 	bgeu	r2,r21,2012ac0 <__udivdi3+0x590>
 20128c4:	1463c83a 	sub	r17,r2,r17
 20128c8:	8809883a 	mov	r4,r17
 20128cc:	b00b883a 	mov	r5,r22
 20128d0:	2005ab40 	call	2005ab4 <__udivsi3>
 20128d4:	8809883a 	mov	r4,r17
 20128d8:	b00b883a 	mov	r5,r22
 20128dc:	1021883a 	mov	r16,r2
 20128e0:	2005abc0 	call	2005abc <__umodsi3>
 20128e4:	d8c00517 	ldw	r3,20(sp)
 20128e8:	d9000217 	ldw	r4,8(sp)
 20128ec:	1004943a 	slli	r2,r2,16
 20128f0:	1c0f383a 	mul	r7,r3,r16
 20128f4:	20ffffcc 	andi	r3,r4,65535
 20128f8:	10e2b03a 	or	r17,r2,r3
 20128fc:	89c0032e 	bgeu	r17,r7,201290c <__udivdi3+0x3dc>
 2012900:	8d63883a 	add	r17,r17,r21
 2012904:	843fffc4 	addi	r16,r16,-1
 2012908:	8d40692e 	bgeu	r17,r21,2012ab0 <__udivdi3+0x580>
 201290c:	a008943a 	slli	r4,r20,16
 2012910:	d9400017 	ldw	r5,0(sp)
 2012914:	89e3c83a 	sub	r17,r17,r7
 2012918:	8110b03a 	or	r8,r16,r4
 201291c:	280cd43a 	srli	r6,r5,16
 2012920:	28ffffcc 	andi	r3,r5,65535
 2012924:	40bfffcc 	andi	r2,r8,65535
 2012928:	400ad43a 	srli	r5,r8,16
 201292c:	10d3383a 	mul	r9,r2,r3
 2012930:	1185383a 	mul	r2,r2,r6
 2012934:	28c7383a 	mul	r3,r5,r3
 2012938:	4808d43a 	srli	r4,r9,16
 201293c:	298b383a 	mul	r5,r5,r6
 2012940:	10c5883a 	add	r2,r2,r3
 2012944:	2089883a 	add	r4,r4,r2
 2012948:	20c0022e 	bgeu	r4,r3,2012954 <__udivdi3+0x424>
 201294c:	00800074 	movhi	r2,1
 2012950:	288b883a 	add	r5,r5,r2
 2012954:	2004d43a 	srli	r2,r4,16
 2012958:	288b883a 	add	r5,r5,r2
 201295c:	89403f36 	bltu	r17,r5,2012a5c <__udivdi3+0x52c>
 2012960:	89403926 	beq	r17,r5,2012a48 <__udivdi3+0x518>
 2012964:	4005883a 	mov	r2,r8
 2012968:	0009883a 	mov	r4,zero
 201296c:	003f5106 	br	20126b4 <__udivdi3+0x184>
 2012970:	85a0983a 	sll	r16,r16,r22
 2012974:	3585c83a 	sub	r2,r6,r22
 2012978:	a0a2d83a 	srl	r17,r20,r2
 201297c:	802ad43a 	srli	r21,r16,16
 2012980:	e084d83a 	srl	r2,fp,r2
 2012984:	a586983a 	sll	r3,r20,r22
 2012988:	8809883a 	mov	r4,r17
 201298c:	a80b883a 	mov	r5,r21
 2012990:	1886b03a 	or	r3,r3,r2
 2012994:	d8c00115 	stw	r3,4(sp)
 2012998:	2005ab40 	call	2005ab4 <__udivsi3>
 201299c:	8809883a 	mov	r4,r17
 20129a0:	a80b883a 	mov	r5,r21
 20129a4:	d8800415 	stw	r2,16(sp)
 20129a8:	2005abc0 	call	2005abc <__umodsi3>
 20129ac:	d9000117 	ldw	r4,4(sp)
 20129b0:	d9400417 	ldw	r5,16(sp)
 20129b4:	1004943a 	slli	r2,r2,16
 20129b8:	85ffffcc 	andi	r23,r16,65535
 20129bc:	2006d43a 	srli	r3,r4,16
 20129c0:	b963383a 	mul	r17,r23,r5
 20129c4:	10c4b03a 	or	r2,r2,r3
 20129c8:	1440042e 	bgeu	r2,r17,20129dc <__udivdi3+0x4ac>
 20129cc:	297fffc4 	addi	r5,r5,-1
 20129d0:	1405883a 	add	r2,r2,r16
 20129d4:	d9400415 	stw	r5,16(sp)
 20129d8:	1400442e 	bgeu	r2,r16,2012aec <__udivdi3+0x5bc>
 20129dc:	1463c83a 	sub	r17,r2,r17
 20129e0:	8809883a 	mov	r4,r17
 20129e4:	a80b883a 	mov	r5,r21
 20129e8:	2005ab40 	call	2005ab4 <__udivsi3>
 20129ec:	8809883a 	mov	r4,r17
 20129f0:	a80b883a 	mov	r5,r21
 20129f4:	1029883a 	mov	r20,r2
 20129f8:	2005abc0 	call	2005abc <__umodsi3>
 20129fc:	d9400117 	ldw	r5,4(sp)
 2012a00:	1004943a 	slli	r2,r2,16
 2012a04:	bd09383a 	mul	r4,r23,r20
 2012a08:	28ffffcc 	andi	r3,r5,65535
 2012a0c:	10c6b03a 	or	r3,r2,r3
 2012a10:	1900062e 	bgeu	r3,r4,2012a2c <__udivdi3+0x4fc>
 2012a14:	1c07883a 	add	r3,r3,r16
 2012a18:	a53fffc4 	addi	r20,r20,-1
 2012a1c:	1c000336 	bltu	r3,r16,2012a2c <__udivdi3+0x4fc>
 2012a20:	1900022e 	bgeu	r3,r4,2012a2c <__udivdi3+0x4fc>
 2012a24:	a53fffc4 	addi	r20,r20,-1
 2012a28:	1c07883a 	add	r3,r3,r16
 2012a2c:	d9400417 	ldw	r5,16(sp)
 2012a30:	e5b8983a 	sll	fp,fp,r22
 2012a34:	1923c83a 	sub	r17,r3,r4
 2012a38:	2804943a 	slli	r2,r5,16
 2012a3c:	a0a8b03a 	or	r20,r20,r2
 2012a40:	dd000315 	stw	r20,12(sp)
 2012a44:	003ee106 	br	20125cc <__udivdi3+0x9c>
 2012a48:	2004943a 	slli	r2,r4,16
 2012a4c:	e5c8983a 	sll	r4,fp,r23
 2012a50:	48ffffcc 	andi	r3,r9,65535
 2012a54:	10c5883a 	add	r2,r2,r3
 2012a58:	20bfc22e 	bgeu	r4,r2,2012964 <__udivdi3+0x434>
 2012a5c:	40bfffc4 	addi	r2,r8,-1
 2012a60:	0009883a 	mov	r4,zero
 2012a64:	003f1306 	br	20126b4 <__udivdi3+0x184>
 2012a68:	01400204 	movi	r5,8
 2012a6c:	2805883a 	mov	r2,r5
 2012a70:	003f0306 	br	2012680 <__udivdi3+0x150>
 2012a74:	01400604 	movi	r5,24
 2012a78:	2805883a 	mov	r2,r5
 2012a7c:	003f0006 	br	2012680 <__udivdi3+0x150>
 2012a80:	01400204 	movi	r5,8
 2012a84:	2805883a 	mov	r2,r5
 2012a88:	003ec206 	br	2012594 <__udivdi3+0x64>
 2012a8c:	01400604 	movi	r5,24
 2012a90:	2805883a 	mov	r2,r5
 2012a94:	003ebf06 	br	2012594 <__udivdi3+0x64>
 2012a98:	01400204 	movi	r5,8
 2012a9c:	2805883a 	mov	r2,r5
 2012aa0:	003f1706 	br	2012700 <__udivdi3+0x1d0>
 2012aa4:	01400604 	movi	r5,24
 2012aa8:	2805883a 	mov	r2,r5
 2012aac:	003f1406 	br	2012700 <__udivdi3+0x1d0>
 2012ab0:	89ff962e 	bgeu	r17,r7,201290c <__udivdi3+0x3dc>
 2012ab4:	8d63883a 	add	r17,r17,r21
 2012ab8:	843fffc4 	addi	r16,r16,-1
 2012abc:	003f9306 	br	201290c <__udivdi3+0x3dc>
 2012ac0:	147f802e 	bgeu	r2,r17,20128c4 <__udivdi3+0x394>
 2012ac4:	a53fffc4 	addi	r20,r20,-1
 2012ac8:	1545883a 	add	r2,r2,r21
 2012acc:	003f7d06 	br	20128c4 <__udivdi3+0x394>
 2012ad0:	a53fffc4 	addi	r20,r20,-1
 2012ad4:	003ede06 	br	2012650 <__udivdi3+0x120>
 2012ad8:	b5bfffc4 	addi	r22,r22,-1
 2012adc:	1405883a 	add	r2,r2,r16
 2012ae0:	003f2806 	br	2012784 <__udivdi3+0x254>
 2012ae4:	a53fffc4 	addi	r20,r20,-1
 2012ae8:	003f3706 	br	20127c8 <__udivdi3+0x298>
 2012aec:	147fbb2e 	bgeu	r2,r17,20129dc <__udivdi3+0x4ac>
 2012af0:	297fffc4 	addi	r5,r5,-1
 2012af4:	1405883a 	add	r2,r2,r16
 2012af8:	d9400415 	stw	r5,16(sp)
 2012afc:	003fb706 	br	20129dc <__udivdi3+0x4ac>
 2012b00:	b5bfffc4 	addi	r22,r22,-1
 2012b04:	1405883a 	add	r2,r2,r16
 2012b08:	003ec006 	br	201260c <__udivdi3+0xdc>

02012b0c <__umoddi3>:
 2012b0c:	defff104 	addi	sp,sp,-60
 2012b10:	dd800b15 	stw	r22,44(sp)
 2012b14:	dd000915 	stw	r20,36(sp)
 2012b18:	dc000515 	stw	r16,20(sp)
 2012b1c:	dfc00e15 	stw	ra,56(sp)
 2012b20:	df000d15 	stw	fp,52(sp)
 2012b24:	ddc00c15 	stw	r23,48(sp)
 2012b28:	dd400a15 	stw	r21,40(sp)
 2012b2c:	dcc00815 	stw	r19,32(sp)
 2012b30:	dc800715 	stw	r18,28(sp)
 2012b34:	dc400615 	stw	r17,24(sp)
 2012b38:	3021883a 	mov	r16,r6
 2012b3c:	202d883a 	mov	r22,r4
 2012b40:	2829883a 	mov	r20,r5
 2012b44:	38002b1e 	bne	r7,zero,2012bf4 <__umoddi3+0xe8>
 2012b48:	29805036 	bltu	r5,r6,2012c8c <__umoddi3+0x180>
 2012b4c:	30008a26 	beq	r6,zero,2012d78 <__umoddi3+0x26c>
 2012b50:	00bfffd4 	movui	r2,65535
 2012b54:	14008236 	bltu	r2,r16,2012d60 <__umoddi3+0x254>
 2012b58:	00803fc4 	movi	r2,255
 2012b5c:	14013636 	bltu	r2,r16,2013038 <__umoddi3+0x52c>
 2012b60:	000b883a 	mov	r5,zero
 2012b64:	0005883a 	mov	r2,zero
 2012b68:	8084d83a 	srl	r2,r16,r2
 2012b6c:	010080b4 	movhi	r4,514
 2012b70:	2102fc04 	addi	r4,r4,3056
 2012b74:	01800804 	movi	r6,32
 2012b78:	1105883a 	add	r2,r2,r4
 2012b7c:	10c00003 	ldbu	r3,0(r2)
 2012b80:	28c7883a 	add	r3,r5,r3
 2012b84:	30efc83a 	sub	r23,r6,r3
 2012b88:	b800941e 	bne	r23,zero,2012ddc <__umoddi3+0x2d0>
 2012b8c:	802ad43a 	srli	r21,r16,16
 2012b90:	a423c83a 	sub	r17,r20,r16
 2012b94:	0039883a 	mov	fp,zero
 2012b98:	853fffcc 	andi	r20,r16,65535
 2012b9c:	8809883a 	mov	r4,r17
 2012ba0:	a80b883a 	mov	r5,r21
 2012ba4:	2005ab40 	call	2005ab4 <__udivsi3>
 2012ba8:	8809883a 	mov	r4,r17
 2012bac:	a80b883a 	mov	r5,r21
 2012bb0:	a0a3383a 	mul	r17,r20,r2
 2012bb4:	2005abc0 	call	2005abc <__umodsi3>
 2012bb8:	1004943a 	slli	r2,r2,16
 2012bbc:	b006d43a 	srli	r3,r22,16
 2012bc0:	10c4b03a 	or	r2,r2,r3
 2012bc4:	1440032e 	bgeu	r2,r17,2012bd4 <__umoddi3+0xc8>
 2012bc8:	1405883a 	add	r2,r2,r16
 2012bcc:	14000136 	bltu	r2,r16,2012bd4 <__umoddi3+0xc8>
 2012bd0:	14413536 	bltu	r2,r17,20130a8 <__umoddi3+0x59c>
 2012bd4:	1463c83a 	sub	r17,r2,r17
 2012bd8:	8809883a 	mov	r4,r17
 2012bdc:	a80b883a 	mov	r5,r21
 2012be0:	2005ab40 	call	2005ab4 <__udivsi3>
 2012be4:	8809883a 	mov	r4,r17
 2012be8:	a0a3383a 	mul	r17,r20,r2
 2012bec:	a80b883a 	mov	r5,r21
 2012bf0:	00004d06 	br	2012d28 <__umoddi3+0x21c>
 2012bf4:	380d883a 	mov	r6,r7
 2012bf8:	29c0102e 	bgeu	r5,r7,2012c3c <__umoddi3+0x130>
 2012bfc:	2011883a 	mov	r8,r4
 2012c00:	2813883a 	mov	r9,r5
 2012c04:	4005883a 	mov	r2,r8
 2012c08:	4807883a 	mov	r3,r9
 2012c0c:	dfc00e17 	ldw	ra,56(sp)
 2012c10:	df000d17 	ldw	fp,52(sp)
 2012c14:	ddc00c17 	ldw	r23,48(sp)
 2012c18:	dd800b17 	ldw	r22,44(sp)
 2012c1c:	dd400a17 	ldw	r21,40(sp)
 2012c20:	dd000917 	ldw	r20,36(sp)
 2012c24:	dcc00817 	ldw	r19,32(sp)
 2012c28:	dc800717 	ldw	r18,28(sp)
 2012c2c:	dc400617 	ldw	r17,24(sp)
 2012c30:	dc000517 	ldw	r16,20(sp)
 2012c34:	dec00f04 	addi	sp,sp,60
 2012c38:	f800283a 	ret
 2012c3c:	00bfffd4 	movui	r2,65535
 2012c40:	11c05a36 	bltu	r2,r7,2012dac <__umoddi3+0x2a0>
 2012c44:	00803fc4 	movi	r2,255
 2012c48:	11c0fe36 	bltu	r2,r7,2013044 <__umoddi3+0x538>
 2012c4c:	000b883a 	mov	r5,zero
 2012c50:	0005883a 	mov	r2,zero
 2012c54:	3084d83a 	srl	r2,r6,r2
 2012c58:	010080b4 	movhi	r4,514
 2012c5c:	2102fc04 	addi	r4,r4,3056
 2012c60:	01c00804 	movi	r7,32
 2012c64:	1105883a 	add	r2,r2,r4
 2012c68:	10c00003 	ldbu	r3,0(r2)
 2012c6c:	28c7883a 	add	r3,r5,r3
 2012c70:	38ebc83a 	sub	r21,r7,r3
 2012c74:	a800851e 	bne	r21,zero,2012e8c <__umoddi3+0x380>
 2012c78:	35005236 	bltu	r6,r20,2012dc4 <__umoddi3+0x2b8>
 2012c7c:	b400512e 	bgeu	r22,r16,2012dc4 <__umoddi3+0x2b8>
 2012c80:	b011883a 	mov	r8,r22
 2012c84:	a013883a 	mov	r9,r20
 2012c88:	003fde06 	br	2012c04 <__umoddi3+0xf8>
 2012c8c:	00bfffd4 	movui	r2,65535
 2012c90:	11804036 	bltu	r2,r6,2012d94 <__umoddi3+0x288>
 2012c94:	00803fc4 	movi	r2,255
 2012c98:	1180ed36 	bltu	r2,r6,2013050 <__umoddi3+0x544>
 2012c9c:	000b883a 	mov	r5,zero
 2012ca0:	0005883a 	mov	r2,zero
 2012ca4:	8084d83a 	srl	r2,r16,r2
 2012ca8:	010080b4 	movhi	r4,514
 2012cac:	2102fc04 	addi	r4,r4,3056
 2012cb0:	01800804 	movi	r6,32
 2012cb4:	1105883a 	add	r2,r2,r4
 2012cb8:	10c00003 	ldbu	r3,0(r2)
 2012cbc:	28c7883a 	add	r3,r5,r3
 2012cc0:	30c7c83a 	sub	r3,r6,r3
 2012cc4:	1800bf1e 	bne	r3,zero,2012fc4 <__umoddi3+0x4b8>
 2012cc8:	0039883a 	mov	fp,zero
 2012ccc:	802ad43a 	srli	r21,r16,16
 2012cd0:	a009883a 	mov	r4,r20
 2012cd4:	85ffffcc 	andi	r23,r16,65535
 2012cd8:	a80b883a 	mov	r5,r21
 2012cdc:	2005ab40 	call	2005ab4 <__udivsi3>
 2012ce0:	a009883a 	mov	r4,r20
 2012ce4:	a80b883a 	mov	r5,r21
 2012ce8:	b8a3383a 	mul	r17,r23,r2
 2012cec:	2005abc0 	call	2005abc <__umodsi3>
 2012cf0:	1004943a 	slli	r2,r2,16
 2012cf4:	b006d43a 	srli	r3,r22,16
 2012cf8:	10c4b03a 	or	r2,r2,r3
 2012cfc:	1440032e 	bgeu	r2,r17,2012d0c <__umoddi3+0x200>
 2012d00:	1405883a 	add	r2,r2,r16
 2012d04:	14000136 	bltu	r2,r16,2012d0c <__umoddi3+0x200>
 2012d08:	1440e536 	bltu	r2,r17,20130a0 <__umoddi3+0x594>
 2012d0c:	1463c83a 	sub	r17,r2,r17
 2012d10:	8809883a 	mov	r4,r17
 2012d14:	a80b883a 	mov	r5,r21
 2012d18:	2005ab40 	call	2005ab4 <__udivsi3>
 2012d1c:	8809883a 	mov	r4,r17
 2012d20:	b8a3383a 	mul	r17,r23,r2
 2012d24:	a80b883a 	mov	r5,r21
 2012d28:	2005abc0 	call	2005abc <__umodsi3>
 2012d2c:	1004943a 	slli	r2,r2,16
 2012d30:	b0ffffcc 	andi	r3,r22,65535
 2012d34:	10c4b03a 	or	r2,r2,r3
 2012d38:	1440042e 	bgeu	r2,r17,2012d4c <__umoddi3+0x240>
 2012d3c:	1405883a 	add	r2,r2,r16
 2012d40:	14000236 	bltu	r2,r16,2012d4c <__umoddi3+0x240>
 2012d44:	1440012e 	bgeu	r2,r17,2012d4c <__umoddi3+0x240>
 2012d48:	1405883a 	add	r2,r2,r16
 2012d4c:	1445c83a 	sub	r2,r2,r17
 2012d50:	1724d83a 	srl	r18,r2,fp
 2012d54:	0013883a 	mov	r9,zero
 2012d58:	9011883a 	mov	r8,r18
 2012d5c:	003fa906 	br	2012c04 <__umoddi3+0xf8>
 2012d60:	00804034 	movhi	r2,256
 2012d64:	10bfffc4 	addi	r2,r2,-1
 2012d68:	1400b036 	bltu	r2,r16,201302c <__umoddi3+0x520>
 2012d6c:	01400404 	movi	r5,16
 2012d70:	2805883a 	mov	r2,r5
 2012d74:	003f7c06 	br	2012b68 <__umoddi3+0x5c>
 2012d78:	01000044 	movi	r4,1
 2012d7c:	000b883a 	mov	r5,zero
 2012d80:	2005ab40 	call	2005ab4 <__udivsi3>
 2012d84:	1021883a 	mov	r16,r2
 2012d88:	00bfffd4 	movui	r2,65535
 2012d8c:	143ff436 	bltu	r2,r16,2012d60 <__umoddi3+0x254>
 2012d90:	003f7106 	br	2012b58 <__umoddi3+0x4c>
 2012d94:	00804034 	movhi	r2,256
 2012d98:	10bfffc4 	addi	r2,r2,-1
 2012d9c:	1180af36 	bltu	r2,r6,201305c <__umoddi3+0x550>
 2012da0:	01400404 	movi	r5,16
 2012da4:	2805883a 	mov	r2,r5
 2012da8:	003fbe06 	br	2012ca4 <__umoddi3+0x198>
 2012dac:	00804034 	movhi	r2,256
 2012db0:	10bfffc4 	addi	r2,r2,-1
 2012db4:	11c0ac36 	bltu	r2,r7,2013068 <__umoddi3+0x55c>
 2012db8:	01400404 	movi	r5,16
 2012dbc:	2805883a 	mov	r2,r5
 2012dc0:	003fa406 	br	2012c54 <__umoddi3+0x148>
 2012dc4:	b409c83a 	sub	r4,r22,r16
 2012dc8:	b105803a 	cmpltu	r2,r22,r4
 2012dcc:	a187c83a 	sub	r3,r20,r6
 2012dd0:	18a9c83a 	sub	r20,r3,r2
 2012dd4:	202d883a 	mov	r22,r4
 2012dd8:	003fa906 	br	2012c80 <__umoddi3+0x174>
 2012ddc:	85e0983a 	sll	r16,r16,r23
 2012de0:	35c5c83a 	sub	r2,r6,r23
 2012de4:	a0a2d83a 	srl	r17,r20,r2
 2012de8:	802ad43a 	srli	r21,r16,16
 2012dec:	b084d83a 	srl	r2,r22,r2
 2012df0:	a5c6983a 	sll	r3,r20,r23
 2012df4:	8809883a 	mov	r4,r17
 2012df8:	a80b883a 	mov	r5,r21
 2012dfc:	1886b03a 	or	r3,r3,r2
 2012e00:	d8c00115 	stw	r3,4(sp)
 2012e04:	853fffcc 	andi	r20,r16,65535
 2012e08:	2005ab40 	call	2005ab4 <__udivsi3>
 2012e0c:	8809883a 	mov	r4,r17
 2012e10:	a80b883a 	mov	r5,r21
 2012e14:	a0a3383a 	mul	r17,r20,r2
 2012e18:	2005abc0 	call	2005abc <__umodsi3>
 2012e1c:	d9000117 	ldw	r4,4(sp)
 2012e20:	1004943a 	slli	r2,r2,16
 2012e24:	b839883a 	mov	fp,r23
 2012e28:	2006d43a 	srli	r3,r4,16
 2012e2c:	10c4b03a 	or	r2,r2,r3
 2012e30:	1440022e 	bgeu	r2,r17,2012e3c <__umoddi3+0x330>
 2012e34:	1405883a 	add	r2,r2,r16
 2012e38:	1400962e 	bgeu	r2,r16,2013094 <__umoddi3+0x588>
 2012e3c:	1463c83a 	sub	r17,r2,r17
 2012e40:	8809883a 	mov	r4,r17
 2012e44:	a80b883a 	mov	r5,r21
 2012e48:	2005ab40 	call	2005ab4 <__udivsi3>
 2012e4c:	8809883a 	mov	r4,r17
 2012e50:	a80b883a 	mov	r5,r21
 2012e54:	a0a3383a 	mul	r17,r20,r2
 2012e58:	2005abc0 	call	2005abc <__umodsi3>
 2012e5c:	d9400117 	ldw	r5,4(sp)
 2012e60:	1004943a 	slli	r2,r2,16
 2012e64:	28ffffcc 	andi	r3,r5,65535
 2012e68:	10c4b03a 	or	r2,r2,r3
 2012e6c:	1440042e 	bgeu	r2,r17,2012e80 <__umoddi3+0x374>
 2012e70:	1405883a 	add	r2,r2,r16
 2012e74:	14000236 	bltu	r2,r16,2012e80 <__umoddi3+0x374>
 2012e78:	1440012e 	bgeu	r2,r17,2012e80 <__umoddi3+0x374>
 2012e7c:	1405883a 	add	r2,r2,r16
 2012e80:	b5ec983a 	sll	r22,r22,r23
 2012e84:	1463c83a 	sub	r17,r2,r17
 2012e88:	003f4406 	br	2012b9c <__umoddi3+0x90>
 2012e8c:	3d4fc83a 	sub	r7,r7,r21
 2012e90:	3546983a 	sll	r3,r6,r21
 2012e94:	81c4d83a 	srl	r2,r16,r7
 2012e98:	a1e2d83a 	srl	r17,r20,r7
 2012e9c:	a54c983a 	sll	r6,r20,r21
 2012ea0:	18aeb03a 	or	r23,r3,r2
 2012ea4:	b828d43a 	srli	r20,r23,16
 2012ea8:	b1c4d83a 	srl	r2,r22,r7
 2012eac:	8809883a 	mov	r4,r17
 2012eb0:	a00b883a 	mov	r5,r20
 2012eb4:	308cb03a 	or	r6,r6,r2
 2012eb8:	d9c00315 	stw	r7,12(sp)
 2012ebc:	d9800215 	stw	r6,8(sp)
 2012ec0:	2005ab40 	call	2005ab4 <__udivsi3>
 2012ec4:	8809883a 	mov	r4,r17
 2012ec8:	a00b883a 	mov	r5,r20
 2012ecc:	1039883a 	mov	fp,r2
 2012ed0:	2005abc0 	call	2005abc <__umodsi3>
 2012ed4:	b8ffffcc 	andi	r3,r23,65535
 2012ed8:	d8c00415 	stw	r3,16(sp)
 2012edc:	d9000217 	ldw	r4,8(sp)
 2012ee0:	d9400417 	ldw	r5,16(sp)
 2012ee4:	1004943a 	slli	r2,r2,16
 2012ee8:	2006d43a 	srli	r3,r4,16
 2012eec:	8560983a 	sll	r16,r16,r21
 2012ef0:	2f23383a 	mul	r17,r5,fp
 2012ef4:	10c4b03a 	or	r2,r2,r3
 2012ef8:	dc000015 	stw	r16,0(sp)
 2012efc:	b56c983a 	sll	r22,r22,r21
 2012f00:	1440032e 	bgeu	r2,r17,2012f10 <__umoddi3+0x404>
 2012f04:	15c5883a 	add	r2,r2,r23
 2012f08:	e73fffc4 	addi	fp,fp,-1
 2012f0c:	15c05d2e 	bgeu	r2,r23,2013084 <__umoddi3+0x578>
 2012f10:	1463c83a 	sub	r17,r2,r17
 2012f14:	8809883a 	mov	r4,r17
 2012f18:	a00b883a 	mov	r5,r20
 2012f1c:	2005ab40 	call	2005ab4 <__udivsi3>
 2012f20:	8809883a 	mov	r4,r17
 2012f24:	a00b883a 	mov	r5,r20
 2012f28:	1021883a 	mov	r16,r2
 2012f2c:	2005abc0 	call	2005abc <__umodsi3>
 2012f30:	d8c00417 	ldw	r3,16(sp)
 2012f34:	d9000217 	ldw	r4,8(sp)
 2012f38:	1004943a 	slli	r2,r2,16
 2012f3c:	1c23383a 	mul	r17,r3,r16
 2012f40:	20ffffcc 	andi	r3,r4,65535
 2012f44:	10ceb03a 	or	r7,r2,r3
 2012f48:	3c40032e 	bgeu	r7,r17,2012f58 <__umoddi3+0x44c>
 2012f4c:	3dcf883a 	add	r7,r7,r23
 2012f50:	843fffc4 	addi	r16,r16,-1
 2012f54:	3dc0472e 	bgeu	r7,r23,2013074 <__umoddi3+0x568>
 2012f58:	e004943a 	slli	r2,fp,16
 2012f5c:	d9400017 	ldw	r5,0(sp)
 2012f60:	3c4fc83a 	sub	r7,r7,r17
 2012f64:	8084b03a 	or	r2,r16,r2
 2012f68:	28ffffcc 	andi	r3,r5,65535
 2012f6c:	280cd43a 	srli	r6,r5,16
 2012f70:	100ad43a 	srli	r5,r2,16
 2012f74:	10bfffcc 	andi	r2,r2,65535
 2012f78:	10d1383a 	mul	r8,r2,r3
 2012f7c:	28c7383a 	mul	r3,r5,r3
 2012f80:	1185383a 	mul	r2,r2,r6
 2012f84:	4008d43a 	srli	r4,r8,16
 2012f88:	298b383a 	mul	r5,r5,r6
 2012f8c:	10c5883a 	add	r2,r2,r3
 2012f90:	2089883a 	add	r4,r4,r2
 2012f94:	20c0022e 	bgeu	r4,r3,2012fa0 <__umoddi3+0x494>
 2012f98:	00800074 	movhi	r2,1
 2012f9c:	288b883a 	add	r5,r5,r2
 2012fa0:	2004d43a 	srli	r2,r4,16
 2012fa4:	2008943a 	slli	r4,r4,16
 2012fa8:	40ffffcc 	andi	r3,r8,65535
 2012fac:	288b883a 	add	r5,r5,r2
 2012fb0:	20c9883a 	add	r4,r4,r3
 2012fb4:	39400b36 	bltu	r7,r5,2012fe4 <__umoddi3+0x4d8>
 2012fb8:	39403d26 	beq	r7,r5,20130b0 <__umoddi3+0x5a4>
 2012fbc:	394bc83a 	sub	r5,r7,r5
 2012fc0:	00000f06 	br	2013000 <__umoddi3+0x4f4>
 2012fc4:	30c5c83a 	sub	r2,r6,r3
 2012fc8:	1839883a 	mov	fp,r3
 2012fcc:	b084d83a 	srl	r2,r22,r2
 2012fd0:	a0c6983a 	sll	r3,r20,r3
 2012fd4:	8720983a 	sll	r16,r16,fp
 2012fd8:	b72c983a 	sll	r22,r22,fp
 2012fdc:	18a8b03a 	or	r20,r3,r2
 2012fe0:	003f3a06 	br	2012ccc <__umoddi3+0x1c0>
 2012fe4:	d8c00017 	ldw	r3,0(sp)
 2012fe8:	20c5c83a 	sub	r2,r4,r3
 2012fec:	2089803a 	cmpltu	r4,r4,r2
 2012ff0:	2dc7c83a 	sub	r3,r5,r23
 2012ff4:	1907c83a 	sub	r3,r3,r4
 2012ff8:	38cbc83a 	sub	r5,r7,r3
 2012ffc:	1009883a 	mov	r4,r2
 2013000:	b105c83a 	sub	r2,r22,r4
 2013004:	b087803a 	cmpltu	r3,r22,r2
 2013008:	28c7c83a 	sub	r3,r5,r3
 201300c:	d9400317 	ldw	r5,12(sp)
 2013010:	1544d83a 	srl	r2,r2,r21
 2013014:	1948983a 	sll	r4,r3,r5
 2013018:	1d46d83a 	srl	r3,r3,r21
 201301c:	20a4b03a 	or	r18,r4,r2
 2013020:	9011883a 	mov	r8,r18
 2013024:	1813883a 	mov	r9,r3
 2013028:	003ef606 	br	2012c04 <__umoddi3+0xf8>
 201302c:	01400604 	movi	r5,24
 2013030:	2805883a 	mov	r2,r5
 2013034:	003ecc06 	br	2012b68 <__umoddi3+0x5c>
 2013038:	01400204 	movi	r5,8
 201303c:	2805883a 	mov	r2,r5
 2013040:	003ec906 	br	2012b68 <__umoddi3+0x5c>
 2013044:	01400204 	movi	r5,8
 2013048:	2805883a 	mov	r2,r5
 201304c:	003f0106 	br	2012c54 <__umoddi3+0x148>
 2013050:	01400204 	movi	r5,8
 2013054:	2805883a 	mov	r2,r5
 2013058:	003f1206 	br	2012ca4 <__umoddi3+0x198>
 201305c:	01400604 	movi	r5,24
 2013060:	2805883a 	mov	r2,r5
 2013064:	003f0f06 	br	2012ca4 <__umoddi3+0x198>
 2013068:	01400604 	movi	r5,24
 201306c:	2805883a 	mov	r2,r5
 2013070:	003ef806 	br	2012c54 <__umoddi3+0x148>
 2013074:	3c7fb82e 	bgeu	r7,r17,2012f58 <__umoddi3+0x44c>
 2013078:	843fffc4 	addi	r16,r16,-1
 201307c:	3dcf883a 	add	r7,r7,r23
 2013080:	003fb506 	br	2012f58 <__umoddi3+0x44c>
 2013084:	147fa22e 	bgeu	r2,r17,2012f10 <__umoddi3+0x404>
 2013088:	e73fffc4 	addi	fp,fp,-1
 201308c:	15c5883a 	add	r2,r2,r23
 2013090:	003f9f06 	br	2012f10 <__umoddi3+0x404>
 2013094:	147f692e 	bgeu	r2,r17,2012e3c <__umoddi3+0x330>
 2013098:	1405883a 	add	r2,r2,r16
 201309c:	003f6706 	br	2012e3c <__umoddi3+0x330>
 20130a0:	1405883a 	add	r2,r2,r16
 20130a4:	003f1906 	br	2012d0c <__umoddi3+0x200>
 20130a8:	1405883a 	add	r2,r2,r16
 20130ac:	003ec906 	br	2012bd4 <__umoddi3+0xc8>
 20130b0:	b13fcc36 	bltu	r22,r4,2012fe4 <__umoddi3+0x4d8>
 20130b4:	000b883a 	mov	r5,zero
 20130b8:	003fd106 	br	2013000 <__umoddi3+0x4f4>

020130bc <__nesf2>:
 20130bc:	defff304 	addi	sp,sp,-52
 20130c0:	dc400b15 	stw	r17,44(sp)
 20130c4:	dc400204 	addi	r17,sp,8
 20130c8:	dc000a15 	stw	r16,40(sp)
 20130cc:	d9000015 	stw	r4,0(sp)
 20130d0:	d9400115 	stw	r5,4(sp)
 20130d4:	d809883a 	mov	r4,sp
 20130d8:	880b883a 	mov	r5,r17
 20130dc:	dc000604 	addi	r16,sp,24
 20130e0:	dfc00c15 	stw	ra,48(sp)
 20130e4:	2005d3c0 	call	2005d3c <__unpack_f>
 20130e8:	d9000104 	addi	r4,sp,4
 20130ec:	800b883a 	mov	r5,r16
 20130f0:	2005d3c0 	call	2005d3c <__unpack_f>
 20130f4:	d8800217 	ldw	r2,8(sp)
 20130f8:	00c00044 	movi	r3,1
 20130fc:	180d883a 	mov	r6,r3
 2013100:	1880062e 	bgeu	r3,r2,201311c <__nesf2+0x60>
 2013104:	d8800617 	ldw	r2,24(sp)
 2013108:	8809883a 	mov	r4,r17
 201310c:	800b883a 	mov	r5,r16
 2013110:	1880022e 	bgeu	r3,r2,201311c <__nesf2+0x60>
 2013114:	20135d80 	call	20135d8 <__fpcmp_parts_f>
 2013118:	100d883a 	mov	r6,r2
 201311c:	3005883a 	mov	r2,r6
 2013120:	dfc00c17 	ldw	ra,48(sp)
 2013124:	dc400b17 	ldw	r17,44(sp)
 2013128:	dc000a17 	ldw	r16,40(sp)
 201312c:	dec00d04 	addi	sp,sp,52
 2013130:	f800283a 	ret

02013134 <__gtsf2>:
 2013134:	defff304 	addi	sp,sp,-52
 2013138:	dc400b15 	stw	r17,44(sp)
 201313c:	dc400204 	addi	r17,sp,8
 2013140:	dc000a15 	stw	r16,40(sp)
 2013144:	d9000015 	stw	r4,0(sp)
 2013148:	d9400115 	stw	r5,4(sp)
 201314c:	d809883a 	mov	r4,sp
 2013150:	880b883a 	mov	r5,r17
 2013154:	dc000604 	addi	r16,sp,24
 2013158:	dfc00c15 	stw	ra,48(sp)
 201315c:	2005d3c0 	call	2005d3c <__unpack_f>
 2013160:	d9000104 	addi	r4,sp,4
 2013164:	800b883a 	mov	r5,r16
 2013168:	2005d3c0 	call	2005d3c <__unpack_f>
 201316c:	d8800217 	ldw	r2,8(sp)
 2013170:	00c00044 	movi	r3,1
 2013174:	01bfffc4 	movi	r6,-1
 2013178:	1880062e 	bgeu	r3,r2,2013194 <__gtsf2+0x60>
 201317c:	d8800617 	ldw	r2,24(sp)
 2013180:	8809883a 	mov	r4,r17
 2013184:	800b883a 	mov	r5,r16
 2013188:	1880022e 	bgeu	r3,r2,2013194 <__gtsf2+0x60>
 201318c:	20135d80 	call	20135d8 <__fpcmp_parts_f>
 2013190:	100d883a 	mov	r6,r2
 2013194:	3005883a 	mov	r2,r6
 2013198:	dfc00c17 	ldw	ra,48(sp)
 201319c:	dc400b17 	ldw	r17,44(sp)
 20131a0:	dc000a17 	ldw	r16,40(sp)
 20131a4:	dec00d04 	addi	sp,sp,52
 20131a8:	f800283a 	ret

020131ac <__ltsf2>:
 20131ac:	defff304 	addi	sp,sp,-52
 20131b0:	dc400b15 	stw	r17,44(sp)
 20131b4:	dc400204 	addi	r17,sp,8
 20131b8:	dc000a15 	stw	r16,40(sp)
 20131bc:	d9000015 	stw	r4,0(sp)
 20131c0:	d9400115 	stw	r5,4(sp)
 20131c4:	d809883a 	mov	r4,sp
 20131c8:	880b883a 	mov	r5,r17
 20131cc:	dc000604 	addi	r16,sp,24
 20131d0:	dfc00c15 	stw	ra,48(sp)
 20131d4:	2005d3c0 	call	2005d3c <__unpack_f>
 20131d8:	d9000104 	addi	r4,sp,4
 20131dc:	800b883a 	mov	r5,r16
 20131e0:	2005d3c0 	call	2005d3c <__unpack_f>
 20131e4:	d8800217 	ldw	r2,8(sp)
 20131e8:	00c00044 	movi	r3,1
 20131ec:	180d883a 	mov	r6,r3
 20131f0:	1880062e 	bgeu	r3,r2,201320c <__ltsf2+0x60>
 20131f4:	d8800617 	ldw	r2,24(sp)
 20131f8:	8809883a 	mov	r4,r17
 20131fc:	800b883a 	mov	r5,r16
 2013200:	1880022e 	bgeu	r3,r2,201320c <__ltsf2+0x60>
 2013204:	20135d80 	call	20135d8 <__fpcmp_parts_f>
 2013208:	100d883a 	mov	r6,r2
 201320c:	3005883a 	mov	r2,r6
 2013210:	dfc00c17 	ldw	ra,48(sp)
 2013214:	dc400b17 	ldw	r17,44(sp)
 2013218:	dc000a17 	ldw	r16,40(sp)
 201321c:	dec00d04 	addi	sp,sp,52
 2013220:	f800283a 	ret

02013224 <__eqdf2>:
 2013224:	deffef04 	addi	sp,sp,-68
 2013228:	dc400f15 	stw	r17,60(sp)
 201322c:	dc400404 	addi	r17,sp,16
 2013230:	2005883a 	mov	r2,r4
 2013234:	2807883a 	mov	r3,r5
 2013238:	dc000e15 	stw	r16,56(sp)
 201323c:	d809883a 	mov	r4,sp
 2013240:	880b883a 	mov	r5,r17
 2013244:	dc000904 	addi	r16,sp,36
 2013248:	d8c00115 	stw	r3,4(sp)
 201324c:	d8800015 	stw	r2,0(sp)
 2013250:	d9800215 	stw	r6,8(sp)
 2013254:	dfc01015 	stw	ra,64(sp)
 2013258:	d9c00315 	stw	r7,12(sp)
 201325c:	20061440 	call	2006144 <__unpack_d>
 2013260:	d9000204 	addi	r4,sp,8
 2013264:	800b883a 	mov	r5,r16
 2013268:	20061440 	call	2006144 <__unpack_d>
 201326c:	d8800417 	ldw	r2,16(sp)
 2013270:	00c00044 	movi	r3,1
 2013274:	180d883a 	mov	r6,r3
 2013278:	1880062e 	bgeu	r3,r2,2013294 <__eqdf2+0x70>
 201327c:	d8800917 	ldw	r2,36(sp)
 2013280:	8809883a 	mov	r4,r17
 2013284:	800b883a 	mov	r5,r16
 2013288:	1880022e 	bgeu	r3,r2,2013294 <__eqdf2+0x70>
 201328c:	200627c0 	call	200627c <__fpcmp_parts_d>
 2013290:	100d883a 	mov	r6,r2
 2013294:	3005883a 	mov	r2,r6
 2013298:	dfc01017 	ldw	ra,64(sp)
 201329c:	dc400f17 	ldw	r17,60(sp)
 20132a0:	dc000e17 	ldw	r16,56(sp)
 20132a4:	dec01104 	addi	sp,sp,68
 20132a8:	f800283a 	ret

020132ac <__nedf2>:
 20132ac:	deffef04 	addi	sp,sp,-68
 20132b0:	dc400f15 	stw	r17,60(sp)
 20132b4:	dc400404 	addi	r17,sp,16
 20132b8:	2005883a 	mov	r2,r4
 20132bc:	2807883a 	mov	r3,r5
 20132c0:	dc000e15 	stw	r16,56(sp)
 20132c4:	d809883a 	mov	r4,sp
 20132c8:	880b883a 	mov	r5,r17
 20132cc:	dc000904 	addi	r16,sp,36
 20132d0:	d8c00115 	stw	r3,4(sp)
 20132d4:	d8800015 	stw	r2,0(sp)
 20132d8:	d9800215 	stw	r6,8(sp)
 20132dc:	dfc01015 	stw	ra,64(sp)
 20132e0:	d9c00315 	stw	r7,12(sp)
 20132e4:	20061440 	call	2006144 <__unpack_d>
 20132e8:	d9000204 	addi	r4,sp,8
 20132ec:	800b883a 	mov	r5,r16
 20132f0:	20061440 	call	2006144 <__unpack_d>
 20132f4:	d8800417 	ldw	r2,16(sp)
 20132f8:	00c00044 	movi	r3,1
 20132fc:	180d883a 	mov	r6,r3
 2013300:	1880062e 	bgeu	r3,r2,201331c <__nedf2+0x70>
 2013304:	d8800917 	ldw	r2,36(sp)
 2013308:	8809883a 	mov	r4,r17
 201330c:	800b883a 	mov	r5,r16
 2013310:	1880022e 	bgeu	r3,r2,201331c <__nedf2+0x70>
 2013314:	200627c0 	call	200627c <__fpcmp_parts_d>
 2013318:	100d883a 	mov	r6,r2
 201331c:	3005883a 	mov	r2,r6
 2013320:	dfc01017 	ldw	ra,64(sp)
 2013324:	dc400f17 	ldw	r17,60(sp)
 2013328:	dc000e17 	ldw	r16,56(sp)
 201332c:	dec01104 	addi	sp,sp,68
 2013330:	f800283a 	ret

02013334 <__gedf2>:
 2013334:	deffef04 	addi	sp,sp,-68
 2013338:	dc400f15 	stw	r17,60(sp)
 201333c:	dc400404 	addi	r17,sp,16
 2013340:	2005883a 	mov	r2,r4
 2013344:	2807883a 	mov	r3,r5
 2013348:	dc000e15 	stw	r16,56(sp)
 201334c:	d809883a 	mov	r4,sp
 2013350:	880b883a 	mov	r5,r17
 2013354:	dc000904 	addi	r16,sp,36
 2013358:	d8c00115 	stw	r3,4(sp)
 201335c:	d8800015 	stw	r2,0(sp)
 2013360:	d9800215 	stw	r6,8(sp)
 2013364:	dfc01015 	stw	ra,64(sp)
 2013368:	d9c00315 	stw	r7,12(sp)
 201336c:	20061440 	call	2006144 <__unpack_d>
 2013370:	d9000204 	addi	r4,sp,8
 2013374:	800b883a 	mov	r5,r16
 2013378:	20061440 	call	2006144 <__unpack_d>
 201337c:	d8800417 	ldw	r2,16(sp)
 2013380:	00c00044 	movi	r3,1
 2013384:	01bfffc4 	movi	r6,-1
 2013388:	1880062e 	bgeu	r3,r2,20133a4 <__gedf2+0x70>
 201338c:	d8800917 	ldw	r2,36(sp)
 2013390:	8809883a 	mov	r4,r17
 2013394:	800b883a 	mov	r5,r16
 2013398:	1880022e 	bgeu	r3,r2,20133a4 <__gedf2+0x70>
 201339c:	200627c0 	call	200627c <__fpcmp_parts_d>
 20133a0:	100d883a 	mov	r6,r2
 20133a4:	3005883a 	mov	r2,r6
 20133a8:	dfc01017 	ldw	ra,64(sp)
 20133ac:	dc400f17 	ldw	r17,60(sp)
 20133b0:	dc000e17 	ldw	r16,56(sp)
 20133b4:	dec01104 	addi	sp,sp,68
 20133b8:	f800283a 	ret

020133bc <__ledf2>:
 20133bc:	deffef04 	addi	sp,sp,-68
 20133c0:	dc400f15 	stw	r17,60(sp)
 20133c4:	dc400404 	addi	r17,sp,16
 20133c8:	2005883a 	mov	r2,r4
 20133cc:	2807883a 	mov	r3,r5
 20133d0:	dc000e15 	stw	r16,56(sp)
 20133d4:	d809883a 	mov	r4,sp
 20133d8:	880b883a 	mov	r5,r17
 20133dc:	dc000904 	addi	r16,sp,36
 20133e0:	d8c00115 	stw	r3,4(sp)
 20133e4:	d8800015 	stw	r2,0(sp)
 20133e8:	d9800215 	stw	r6,8(sp)
 20133ec:	dfc01015 	stw	ra,64(sp)
 20133f0:	d9c00315 	stw	r7,12(sp)
 20133f4:	20061440 	call	2006144 <__unpack_d>
 20133f8:	d9000204 	addi	r4,sp,8
 20133fc:	800b883a 	mov	r5,r16
 2013400:	20061440 	call	2006144 <__unpack_d>
 2013404:	d8800417 	ldw	r2,16(sp)
 2013408:	00c00044 	movi	r3,1
 201340c:	180d883a 	mov	r6,r3
 2013410:	1880062e 	bgeu	r3,r2,201342c <__ledf2+0x70>
 2013414:	d8800917 	ldw	r2,36(sp)
 2013418:	8809883a 	mov	r4,r17
 201341c:	800b883a 	mov	r5,r16
 2013420:	1880022e 	bgeu	r3,r2,201342c <__ledf2+0x70>
 2013424:	200627c0 	call	200627c <__fpcmp_parts_d>
 2013428:	100d883a 	mov	r6,r2
 201342c:	3005883a 	mov	r2,r6
 2013430:	dfc01017 	ldw	ra,64(sp)
 2013434:	dc400f17 	ldw	r17,60(sp)
 2013438:	dc000e17 	ldw	r16,56(sp)
 201343c:	dec01104 	addi	sp,sp,68
 2013440:	f800283a 	ret

02013444 <__floatunsidf>:
 2013444:	defff204 	addi	sp,sp,-56
 2013448:	dfc00d15 	stw	ra,52(sp)
 201344c:	ddc00c15 	stw	r23,48(sp)
 2013450:	dd800b15 	stw	r22,44(sp)
 2013454:	dd400a15 	stw	r21,40(sp)
 2013458:	dd000915 	stw	r20,36(sp)
 201345c:	dcc00815 	stw	r19,32(sp)
 2013460:	dc800715 	stw	r18,28(sp)
 2013464:	dc400615 	stw	r17,24(sp)
 2013468:	dc000515 	stw	r16,20(sp)
 201346c:	d8000115 	stw	zero,4(sp)
 2013470:	20000f1e 	bne	r4,zero,20134b0 <__floatunsidf+0x6c>
 2013474:	00800084 	movi	r2,2
 2013478:	d8800015 	stw	r2,0(sp)
 201347c:	d809883a 	mov	r4,sp
 2013480:	2005e300 	call	2005e30 <__pack_d>
 2013484:	dfc00d17 	ldw	ra,52(sp)
 2013488:	ddc00c17 	ldw	r23,48(sp)
 201348c:	dd800b17 	ldw	r22,44(sp)
 2013490:	dd400a17 	ldw	r21,40(sp)
 2013494:	dd000917 	ldw	r20,36(sp)
 2013498:	dcc00817 	ldw	r19,32(sp)
 201349c:	dc800717 	ldw	r18,28(sp)
 20134a0:	dc400617 	ldw	r17,24(sp)
 20134a4:	dc000517 	ldw	r16,20(sp)
 20134a8:	dec00e04 	addi	sp,sp,56
 20134ac:	f800283a 	ret
 20134b0:	008000c4 	movi	r2,3
 20134b4:	00c00f04 	movi	r3,60
 20134b8:	002f883a 	mov	r23,zero
 20134bc:	202d883a 	mov	r22,r4
 20134c0:	d8800015 	stw	r2,0(sp)
 20134c4:	d8c00215 	stw	r3,8(sp)
 20134c8:	d9000315 	stw	r4,12(sp)
 20134cc:	ddc00415 	stw	r23,16(sp)
 20134d0:	2005b5c0 	call	2005b5c <__clzsi2>
 20134d4:	12400744 	addi	r9,r2,29
 20134d8:	48000b16 	blt	r9,zero,2013508 <__floatunsidf+0xc4>
 20134dc:	483fe726 	beq	r9,zero,201347c <__floatunsidf+0x38>
 20134e0:	10bfff44 	addi	r2,r2,-3
 20134e4:	10002e16 	blt	r2,zero,20135a0 <__floatunsidf+0x15c>
 20134e8:	b0a2983a 	sll	r17,r22,r2
 20134ec:	0021883a 	mov	r16,zero
 20134f0:	d8800217 	ldw	r2,8(sp)
 20134f4:	dc400415 	stw	r17,16(sp)
 20134f8:	dc000315 	stw	r16,12(sp)
 20134fc:	1245c83a 	sub	r2,r2,r9
 2013500:	d8800215 	stw	r2,8(sp)
 2013504:	003fdd06 	br	201347c <__floatunsidf+0x38>
 2013508:	0255c83a 	sub	r10,zero,r9
 201350c:	51bff804 	addi	r6,r10,-32
 2013510:	30001b16 	blt	r6,zero,2013580 <__floatunsidf+0x13c>
 2013514:	b9a8d83a 	srl	r20,r23,r6
 2013518:	002b883a 	mov	r21,zero
 201351c:	000f883a 	mov	r7,zero
 2013520:	01000044 	movi	r4,1
 2013524:	0011883a 	mov	r8,zero
 2013528:	30002516 	blt	r6,zero,20135c0 <__floatunsidf+0x17c>
 201352c:	21a6983a 	sll	r19,r4,r6
 2013530:	0025883a 	mov	r18,zero
 2013534:	00bfffc4 	movi	r2,-1
 2013538:	9089883a 	add	r4,r18,r2
 201353c:	988b883a 	add	r5,r19,r2
 2013540:	248d803a 	cmpltu	r6,r4,r18
 2013544:	314b883a 	add	r5,r6,r5
 2013548:	b104703a 	and	r2,r22,r4
 201354c:	b946703a 	and	r3,r23,r5
 2013550:	10c4b03a 	or	r2,r2,r3
 2013554:	10000226 	beq	r2,zero,2013560 <__floatunsidf+0x11c>
 2013558:	01c00044 	movi	r7,1
 201355c:	0011883a 	mov	r8,zero
 2013560:	d9000217 	ldw	r4,8(sp)
 2013564:	a1c4b03a 	or	r2,r20,r7
 2013568:	aa06b03a 	or	r3,r21,r8
 201356c:	2249c83a 	sub	r4,r4,r9
 2013570:	d8c00415 	stw	r3,16(sp)
 2013574:	d9000215 	stw	r4,8(sp)
 2013578:	d8800315 	stw	r2,12(sp)
 201357c:	003fbf06 	br	201347c <__floatunsidf+0x38>
 2013580:	bdc7883a 	add	r3,r23,r23
 2013584:	008007c4 	movi	r2,31
 2013588:	1285c83a 	sub	r2,r2,r10
 201358c:	1886983a 	sll	r3,r3,r2
 2013590:	b2a8d83a 	srl	r20,r22,r10
 2013594:	baaad83a 	srl	r21,r23,r10
 2013598:	1d28b03a 	or	r20,r3,r20
 201359c:	003fdf06 	br	201351c <__floatunsidf+0xd8>
 20135a0:	b006d07a 	srli	r3,r22,1
 20135a4:	008007c4 	movi	r2,31
 20135a8:	1245c83a 	sub	r2,r2,r9
 20135ac:	1886d83a 	srl	r3,r3,r2
 20135b0:	ba62983a 	sll	r17,r23,r9
 20135b4:	b260983a 	sll	r16,r22,r9
 20135b8:	1c62b03a 	or	r17,r3,r17
 20135bc:	003fcc06 	br	20134f0 <__floatunsidf+0xac>
 20135c0:	2006d07a 	srli	r3,r4,1
 20135c4:	008007c4 	movi	r2,31
 20135c8:	1285c83a 	sub	r2,r2,r10
 20135cc:	18a6d83a 	srl	r19,r3,r2
 20135d0:	22a4983a 	sll	r18,r4,r10
 20135d4:	003fd706 	br	2013534 <__floatunsidf+0xf0>

020135d8 <__fpcmp_parts_f>:
 20135d8:	21800017 	ldw	r6,0(r4)
 20135dc:	00c00044 	movi	r3,1
 20135e0:	19800a2e 	bgeu	r3,r6,201360c <__fpcmp_parts_f+0x34>
 20135e4:	28800017 	ldw	r2,0(r5)
 20135e8:	1880082e 	bgeu	r3,r2,201360c <__fpcmp_parts_f+0x34>
 20135ec:	00c00104 	movi	r3,4
 20135f0:	30c01e26 	beq	r6,r3,201366c <__fpcmp_parts_f+0x94>
 20135f4:	10c01a26 	beq	r2,r3,2013660 <__fpcmp_parts_f+0x88>
 20135f8:	00c00084 	movi	r3,2
 20135fc:	30c00526 	beq	r6,r3,2013614 <__fpcmp_parts_f+0x3c>
 2013600:	10c0071e 	bne	r2,r3,2013620 <__fpcmp_parts_f+0x48>
 2013604:	20800117 	ldw	r2,4(r4)
 2013608:	1000091e 	bne	r2,zero,2013630 <__fpcmp_parts_f+0x58>
 201360c:	00800044 	movi	r2,1
 2013610:	f800283a 	ret
 2013614:	10c0121e 	bne	r2,r3,2013660 <__fpcmp_parts_f+0x88>
 2013618:	0005883a 	mov	r2,zero
 201361c:	f800283a 	ret
 2013620:	20c00117 	ldw	r3,4(r4)
 2013624:	28800117 	ldw	r2,4(r5)
 2013628:	18800326 	beq	r3,r2,2013638 <__fpcmp_parts_f+0x60>
 201362c:	183ff726 	beq	r3,zero,201360c <__fpcmp_parts_f+0x34>
 2013630:	00bfffc4 	movi	r2,-1
 2013634:	f800283a 	ret
 2013638:	21800217 	ldw	r6,8(r4)
 201363c:	28800217 	ldw	r2,8(r5)
 2013640:	11bffa16 	blt	r2,r6,201362c <__fpcmp_parts_f+0x54>
 2013644:	30800416 	blt	r6,r2,2013658 <__fpcmp_parts_f+0x80>
 2013648:	21000317 	ldw	r4,12(r4)
 201364c:	29400317 	ldw	r5,12(r5)
 2013650:	293ff636 	bltu	r5,r4,201362c <__fpcmp_parts_f+0x54>
 2013654:	217ff02e 	bgeu	r4,r5,2013618 <__fpcmp_parts_f+0x40>
 2013658:	183fec1e 	bne	r3,zero,201360c <__fpcmp_parts_f+0x34>
 201365c:	003ff406 	br	2013630 <__fpcmp_parts_f+0x58>
 2013660:	28800117 	ldw	r2,4(r5)
 2013664:	103fe91e 	bne	r2,zero,201360c <__fpcmp_parts_f+0x34>
 2013668:	003ff106 	br	2013630 <__fpcmp_parts_f+0x58>
 201366c:	11bfe51e 	bne	r2,r6,2013604 <__fpcmp_parts_f+0x2c>
 2013670:	28c00117 	ldw	r3,4(r5)
 2013674:	20800117 	ldw	r2,4(r4)
 2013678:	1885c83a 	sub	r2,r3,r2
 201367c:	f800283a 	ret

02013680 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2013680:	defff804 	addi	sp,sp,-32
 2013684:	dfc00715 	stw	ra,28(sp)
 2013688:	df000615 	stw	fp,24(sp)
 201368c:	df000604 	addi	fp,sp,24
 2013690:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2013694:	e0bffc17 	ldw	r2,-16(fp)
 2013698:	1004803a 	cmplt	r2,r2,zero
 201369c:	1000081e 	bne	r2,zero,20136c0 <close+0x40>
 20136a0:	e0bffc17 	ldw	r2,-16(fp)
 20136a4:	10800324 	muli	r2,r2,12
 20136a8:	1007883a 	mov	r3,r2
 20136ac:	008080b4 	movhi	r2,514
 20136b0:	10876904 	addi	r2,r2,7588
 20136b4:	1887883a 	add	r3,r3,r2
 20136b8:	e0ffff15 	stw	r3,-4(fp)
 20136bc:	00000106 	br	20136c4 <close+0x44>
 20136c0:	e03fff15 	stw	zero,-4(fp)
 20136c4:	e0bfff17 	ldw	r2,-4(fp)
 20136c8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 20136cc:	e0bffb17 	ldw	r2,-20(fp)
 20136d0:	1005003a 	cmpeq	r2,r2,zero
 20136d4:	10001d1e 	bne	r2,zero,201374c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 20136d8:	e0bffb17 	ldw	r2,-20(fp)
 20136dc:	10800017 	ldw	r2,0(r2)
 20136e0:	10800417 	ldw	r2,16(r2)
 20136e4:	1005003a 	cmpeq	r2,r2,zero
 20136e8:	1000071e 	bne	r2,zero,2013708 <close+0x88>
 20136ec:	e0bffb17 	ldw	r2,-20(fp)
 20136f0:	10800017 	ldw	r2,0(r2)
 20136f4:	10800417 	ldw	r2,16(r2)
 20136f8:	e13ffb17 	ldw	r4,-20(fp)
 20136fc:	103ee83a 	callr	r2
 2013700:	e0bffe15 	stw	r2,-8(fp)
 2013704:	00000106 	br	201370c <close+0x8c>
 2013708:	e03ffe15 	stw	zero,-8(fp)
 201370c:	e0bffe17 	ldw	r2,-8(fp)
 2013710:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2013714:	e13ffc17 	ldw	r4,-16(fp)
 2013718:	201422c0 	call	201422c <alt_release_fd>
    if (rval < 0)
 201371c:	e0bffa17 	ldw	r2,-24(fp)
 2013720:	1004403a 	cmpge	r2,r2,zero
 2013724:	1000071e 	bne	r2,zero,2013744 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 2013728:	201377c0 	call	201377c <alt_get_errno>
 201372c:	e0fffa17 	ldw	r3,-24(fp)
 2013730:	00c7c83a 	sub	r3,zero,r3
 2013734:	10c00015 	stw	r3,0(r2)
      return -1;
 2013738:	00bfffc4 	movi	r2,-1
 201373c:	e0bffd15 	stw	r2,-12(fp)
 2013740:	00000806 	br	2013764 <close+0xe4>
    }
    return 0;
 2013744:	e03ffd15 	stw	zero,-12(fp)
 2013748:	00000606 	br	2013764 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 201374c:	201377c0 	call	201377c <alt_get_errno>
 2013750:	1007883a 	mov	r3,r2
 2013754:	00801444 	movi	r2,81
 2013758:	18800015 	stw	r2,0(r3)
    return -1;
 201375c:	00bfffc4 	movi	r2,-1
 2013760:	e0bffd15 	stw	r2,-12(fp)
 2013764:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 2013768:	e037883a 	mov	sp,fp
 201376c:	dfc00117 	ldw	ra,4(sp)
 2013770:	df000017 	ldw	fp,0(sp)
 2013774:	dec00204 	addi	sp,sp,8
 2013778:	f800283a 	ret

0201377c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201377c:	defffd04 	addi	sp,sp,-12
 2013780:	dfc00215 	stw	ra,8(sp)
 2013784:	df000115 	stw	fp,4(sp)
 2013788:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 201378c:	008080b4 	movhi	r2,514
 2013790:	108c2304 	addi	r2,r2,12428
 2013794:	10800017 	ldw	r2,0(r2)
 2013798:	1005003a 	cmpeq	r2,r2,zero
 201379c:	1000061e 	bne	r2,zero,20137b8 <alt_get_errno+0x3c>
 20137a0:	008080b4 	movhi	r2,514
 20137a4:	108c2304 	addi	r2,r2,12428
 20137a8:	10800017 	ldw	r2,0(r2)
 20137ac:	103ee83a 	callr	r2
 20137b0:	e0bfff15 	stw	r2,-4(fp)
 20137b4:	00000306 	br	20137c4 <alt_get_errno+0x48>
 20137b8:	008080b4 	movhi	r2,514
 20137bc:	1093c804 	addi	r2,r2,20256
 20137c0:	e0bfff15 	stw	r2,-4(fp)
 20137c4:	e0bfff17 	ldw	r2,-4(fp)
}
 20137c8:	e037883a 	mov	sp,fp
 20137cc:	dfc00117 	ldw	ra,4(sp)
 20137d0:	df000017 	ldw	fp,0(sp)
 20137d4:	dec00204 	addi	sp,sp,8
 20137d8:	f800283a 	ret

020137dc <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 20137dc:	defffb04 	addi	sp,sp,-20
 20137e0:	df000415 	stw	fp,16(sp)
 20137e4:	df000404 	addi	fp,sp,16
 20137e8:	e13ffe15 	stw	r4,-8(fp)
 20137ec:	e17fff15 	stw	r5,-4(fp)
  {
    len = NIOS2_DCACHE_SIZE;
  }
  #endif

  end = ((char*) start) + len; 
 20137f0:	e0fffe17 	ldw	r3,-8(fp)
 20137f4:	e0bfff17 	ldw	r2,-4(fp)
 20137f8:	1885883a 	add	r2,r3,r2
 20137fc:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 2013800:	e0bffe17 	ldw	r2,-8(fp)
 2013804:	e0bffd15 	stw	r2,-12(fp)
 2013808:	00000506 	br	2013820 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
 201380c:	e0bffd17 	ldw	r2,-12(fp)
 2013810:	1000001b 	flushda	0(r2)
  }
  #endif

  end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 2013814:	e0bffd17 	ldw	r2,-12(fp)
 2013818:	10800804 	addi	r2,r2,32
 201381c:	e0bffd15 	stw	r2,-12(fp)
 2013820:	e0fffd17 	ldw	r3,-12(fp)
 2013824:	e0bffc17 	ldw	r2,-16(fp)
 2013828:	18bff836 	bltu	r3,r2,201380c <alt_dcache_flush+0x30>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 201382c:	e0bffe17 	ldw	r2,-8(fp)
 2013830:	108007cc 	andi	r2,r2,31
 2013834:	1005003a 	cmpeq	r2,r2,zero
 2013838:	1000021e 	bne	r2,zero,2013844 <alt_dcache_flush+0x68>
  {
    ALT_FLUSH_DATA(i);
 201383c:	e0bffd17 	ldw	r2,-12(fp)
 2013840:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2013844:	e037883a 	mov	sp,fp
 2013848:	df000017 	ldw	fp,0(sp)
 201384c:	dec00104 	addi	sp,sp,4
 2013850:	f800283a 	ret

02013854 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2013854:	defffe04 	addi	sp,sp,-8
 2013858:	df000115 	stw	fp,4(sp)
 201385c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2013860:	e03fff15 	stw	zero,-4(fp)
 2013864:	00000506 	br	201387c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 2013868:	e0bfff17 	ldw	r2,-4(fp)
 201386c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2013870:	e0bfff17 	ldw	r2,-4(fp)
 2013874:	10800804 	addi	r2,r2,32
 2013878:	e0bfff15 	stw	r2,-4(fp)
 201387c:	e0bfff17 	ldw	r2,-4(fp)
 2013880:	10808030 	cmpltui	r2,r2,512
 2013884:	103ff81e 	bne	r2,zero,2013868 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2013888:	e037883a 	mov	sp,fp
 201388c:	df000017 	ldw	fp,0(sp)
 2013890:	dec00104 	addi	sp,sp,4
 2013894:	f800283a 	ret

02013898 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2013898:	defffc04 	addi	sp,sp,-16
 201389c:	df000315 	stw	fp,12(sp)
 20138a0:	df000304 	addi	fp,sp,12
 20138a4:	e13ffd15 	stw	r4,-12(fp)
 20138a8:	e17ffe15 	stw	r5,-8(fp)
 20138ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
 20138b0:	e0bfff17 	ldw	r2,-4(fp)
}
 20138b4:	e037883a 	mov	sp,fp
 20138b8:	df000017 	ldw	fp,0(sp)
 20138bc:	dec00104 	addi	sp,sp,4
 20138c0:	f800283a 	ret

020138c4 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 20138c4:	defffb04 	addi	sp,sp,-20
 20138c8:	dfc00415 	stw	ra,16(sp)
 20138cc:	df000315 	stw	fp,12(sp)
 20138d0:	df000304 	addi	fp,sp,12
 20138d4:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 20138d8:	e13ffe17 	ldw	r4,-8(fp)
 20138dc:	d1600e04 	addi	r5,gp,-32712
 20138e0:	201f1940 	call	201f194 <alt_find_dev>
 20138e4:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 20138e8:	e0bffd17 	ldw	r2,-12(fp)
 20138ec:	1005003a 	cmpeq	r2,r2,zero
 20138f0:	10000b1e 	bne	r2,zero,2013920 <alt_flash_open_dev+0x5c>
 20138f4:	e0bffd17 	ldw	r2,-12(fp)
 20138f8:	10800317 	ldw	r2,12(r2)
 20138fc:	1005003a 	cmpeq	r2,r2,zero
 2013900:	1000071e 	bne	r2,zero,2013920 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 2013904:	e0bffd17 	ldw	r2,-12(fp)
 2013908:	10800317 	ldw	r2,12(r2)
 201390c:	e13ffd17 	ldw	r4,-12(fp)
 2013910:	e17ffe17 	ldw	r5,-8(fp)
 2013914:	103ee83a 	callr	r2
 2013918:	e0bfff15 	stw	r2,-4(fp)
 201391c:	00000206 	br	2013928 <alt_flash_open_dev+0x64>
  }

  return dev;
 2013920:	e0bffd17 	ldw	r2,-12(fp)
 2013924:	e0bfff15 	stw	r2,-4(fp)
 2013928:	e0bfff17 	ldw	r2,-4(fp)
}
 201392c:	e037883a 	mov	sp,fp
 2013930:	dfc00117 	ldw	ra,4(sp)
 2013934:	df000017 	ldw	fp,0(sp)
 2013938:	dec00204 	addi	sp,sp,8
 201393c:	f800283a 	ret

02013940 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 2013940:	defffd04 	addi	sp,sp,-12
 2013944:	dfc00215 	stw	ra,8(sp)
 2013948:	df000115 	stw	fp,4(sp)
 201394c:	df000104 	addi	fp,sp,4
 2013950:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 2013954:	e0bfff17 	ldw	r2,-4(fp)
 2013958:	1005003a 	cmpeq	r2,r2,zero
 201395c:	1000081e 	bne	r2,zero,2013980 <alt_flash_close_dev+0x40>
 2013960:	e0bfff17 	ldw	r2,-4(fp)
 2013964:	10800417 	ldw	r2,16(r2)
 2013968:	1005003a 	cmpeq	r2,r2,zero
 201396c:	1000041e 	bne	r2,zero,2013980 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 2013970:	e0bfff17 	ldw	r2,-4(fp)
 2013974:	10800417 	ldw	r2,16(r2)
 2013978:	e13fff17 	ldw	r4,-4(fp)
 201397c:	103ee83a 	callr	r2
  }
  return;
}
 2013980:	e037883a 	mov	sp,fp
 2013984:	dfc00117 	ldw	ra,4(sp)
 2013988:	df000017 	ldw	fp,0(sp)
 201398c:	dec00204 	addi	sp,sp,8
 2013990:	f800283a 	ret

02013994 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2013994:	defff904 	addi	sp,sp,-28
 2013998:	dfc00615 	stw	ra,24(sp)
 201399c:	df000515 	stw	fp,20(sp)
 20139a0:	df000504 	addi	fp,sp,20
 20139a4:	e13ffc15 	stw	r4,-16(fp)
 20139a8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20139ac:	e0bffc17 	ldw	r2,-16(fp)
 20139b0:	1004803a 	cmplt	r2,r2,zero
 20139b4:	1000081e 	bne	r2,zero,20139d8 <fstat+0x44>
 20139b8:	e0bffc17 	ldw	r2,-16(fp)
 20139bc:	10800324 	muli	r2,r2,12
 20139c0:	1007883a 	mov	r3,r2
 20139c4:	008080b4 	movhi	r2,514
 20139c8:	10876904 	addi	r2,r2,7588
 20139cc:	1887883a 	add	r3,r3,r2
 20139d0:	e0ffff15 	stw	r3,-4(fp)
 20139d4:	00000106 	br	20139dc <fstat+0x48>
 20139d8:	e03fff15 	stw	zero,-4(fp)
 20139dc:	e0bfff17 	ldw	r2,-4(fp)
 20139e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20139e4:	e0bffb17 	ldw	r2,-20(fp)
 20139e8:	1005003a 	cmpeq	r2,r2,zero
 20139ec:	1000121e 	bne	r2,zero,2013a38 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 20139f0:	e0bffb17 	ldw	r2,-20(fp)
 20139f4:	10800017 	ldw	r2,0(r2)
 20139f8:	10800817 	ldw	r2,32(r2)
 20139fc:	1005003a 	cmpeq	r2,r2,zero
 2013a00:	1000081e 	bne	r2,zero,2013a24 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 2013a04:	e0bffb17 	ldw	r2,-20(fp)
 2013a08:	10800017 	ldw	r2,0(r2)
 2013a0c:	10800817 	ldw	r2,32(r2)
 2013a10:	e13ffb17 	ldw	r4,-20(fp)
 2013a14:	e17ffd17 	ldw	r5,-12(fp)
 2013a18:	103ee83a 	callr	r2
 2013a1c:	e0bffe15 	stw	r2,-8(fp)
 2013a20:	00000b06 	br	2013a50 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2013a24:	e0fffd17 	ldw	r3,-12(fp)
 2013a28:	00880004 	movi	r2,8192
 2013a2c:	18800115 	stw	r2,4(r3)
      return 0;
 2013a30:	e03ffe15 	stw	zero,-8(fp)
 2013a34:	00000606 	br	2013a50 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2013a38:	2013a680 	call	2013a68 <alt_get_errno>
 2013a3c:	1007883a 	mov	r3,r2
 2013a40:	00801444 	movi	r2,81
 2013a44:	18800015 	stw	r2,0(r3)
    return -1;
 2013a48:	00bfffc4 	movi	r2,-1
 2013a4c:	e0bffe15 	stw	r2,-8(fp)
 2013a50:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 2013a54:	e037883a 	mov	sp,fp
 2013a58:	dfc00117 	ldw	ra,4(sp)
 2013a5c:	df000017 	ldw	fp,0(sp)
 2013a60:	dec00204 	addi	sp,sp,8
 2013a64:	f800283a 	ret

02013a68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013a68:	defffd04 	addi	sp,sp,-12
 2013a6c:	dfc00215 	stw	ra,8(sp)
 2013a70:	df000115 	stw	fp,4(sp)
 2013a74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2013a78:	008080b4 	movhi	r2,514
 2013a7c:	108c2304 	addi	r2,r2,12428
 2013a80:	10800017 	ldw	r2,0(r2)
 2013a84:	1005003a 	cmpeq	r2,r2,zero
 2013a88:	1000061e 	bne	r2,zero,2013aa4 <alt_get_errno+0x3c>
 2013a8c:	008080b4 	movhi	r2,514
 2013a90:	108c2304 	addi	r2,r2,12428
 2013a94:	10800017 	ldw	r2,0(r2)
 2013a98:	103ee83a 	callr	r2
 2013a9c:	e0bfff15 	stw	r2,-4(fp)
 2013aa0:	00000306 	br	2013ab0 <alt_get_errno+0x48>
 2013aa4:	008080b4 	movhi	r2,514
 2013aa8:	1093c804 	addi	r2,r2,20256
 2013aac:	e0bfff15 	stw	r2,-4(fp)
 2013ab0:	e0bfff17 	ldw	r2,-4(fp)
}
 2013ab4:	e037883a 	mov	sp,fp
 2013ab8:	dfc00117 	ldw	ra,4(sp)
 2013abc:	df000017 	ldw	fp,0(sp)
 2013ac0:	dec00204 	addi	sp,sp,8
 2013ac4:	f800283a 	ret

02013ac8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 2013ac8:	deffef04 	addi	sp,sp,-68
 2013acc:	df001015 	stw	fp,64(sp)
 2013ad0:	df001004 	addi	fp,sp,64
 2013ad4:	e13ffc15 	stw	r4,-16(fp)
 2013ad8:	e17ffd15 	stw	r5,-12(fp)
 2013adc:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 2013ae0:	00bffa84 	movi	r2,-22
 2013ae4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2013ae8:	e0bffc17 	ldw	r2,-16(fp)
 2013aec:	10800828 	cmpgeui	r2,r2,32
 2013af0:	1000601e 	bne	r2,zero,2013c74 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013af4:	0005303a 	rdctl	r2,status
 2013af8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013afc:	e0fff917 	ldw	r3,-28(fp)
 2013b00:	00bfff84 	movi	r2,-2
 2013b04:	1884703a 	and	r2,r3,r2
 2013b08:	1001703a 	wrctl	status,r2
  
  return context;
 2013b0c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 2013b10:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 2013b14:	e0bffc17 	ldw	r2,-16(fp)
 2013b18:	00c080f4 	movhi	r3,515
 2013b1c:	18e0ca04 	addi	r3,r3,-31960
 2013b20:	100490fa 	slli	r2,r2,3
 2013b24:	10c7883a 	add	r3,r2,r3
 2013b28:	e0bffe17 	ldw	r2,-8(fp)
 2013b2c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 2013b30:	e0bffc17 	ldw	r2,-16(fp)
 2013b34:	00c080f4 	movhi	r3,515
 2013b38:	18e0ca04 	addi	r3,r3,-31960
 2013b3c:	100490fa 	slli	r2,r2,3
 2013b40:	10c5883a 	add	r2,r2,r3
 2013b44:	10c00104 	addi	r3,r2,4
 2013b48:	e0bffd17 	ldw	r2,-12(fp)
 2013b4c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 2013b50:	e0bffe17 	ldw	r2,-8(fp)
 2013b54:	1005003a 	cmpeq	r2,r2,zero
 2013b58:	1000201e 	bne	r2,zero,2013bdc <alt_irq_register+0x114>
 2013b5c:	e0bffc17 	ldw	r2,-16(fp)
 2013b60:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013b64:	0005303a 	rdctl	r2,status
 2013b68:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013b6c:	e0fff617 	ldw	r3,-40(fp)
 2013b70:	00bfff84 	movi	r2,-2
 2013b74:	1884703a 	and	r2,r3,r2
 2013b78:	1001703a 	wrctl	status,r2
  
  return context;
 2013b7c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2013b80:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 2013b84:	e0fff717 	ldw	r3,-36(fp)
 2013b88:	00800044 	movi	r2,1
 2013b8c:	10c4983a 	sll	r2,r2,r3
 2013b90:	1007883a 	mov	r3,r2
 2013b94:	008080b4 	movhi	r2,514
 2013b98:	1093cd04 	addi	r2,r2,20276
 2013b9c:	10800017 	ldw	r2,0(r2)
 2013ba0:	1886b03a 	or	r3,r3,r2
 2013ba4:	008080b4 	movhi	r2,514
 2013ba8:	1093cd04 	addi	r2,r2,20276
 2013bac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2013bb0:	008080b4 	movhi	r2,514
 2013bb4:	1093cd04 	addi	r2,r2,20276
 2013bb8:	10800017 	ldw	r2,0(r2)
 2013bbc:	100170fa 	wrctl	ienable,r2
 2013bc0:	e0bff817 	ldw	r2,-32(fp)
 2013bc4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013bc8:	e0bff517 	ldw	r2,-44(fp)
 2013bcc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2013bd0:	0005883a 	mov	r2,zero
 2013bd4:	e0bfff15 	stw	r2,-4(fp)
 2013bd8:	00002006 	br	2013c5c <alt_irq_register+0x194>
 2013bdc:	e0bffc17 	ldw	r2,-16(fp)
 2013be0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013be4:	0005303a 	rdctl	r2,status
 2013be8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013bec:	e0fff217 	ldw	r3,-56(fp)
 2013bf0:	00bfff84 	movi	r2,-2
 2013bf4:	1884703a 	and	r2,r3,r2
 2013bf8:	1001703a 	wrctl	status,r2
  
  return context;
 2013bfc:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2013c00:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 2013c04:	e0fff317 	ldw	r3,-52(fp)
 2013c08:	00800044 	movi	r2,1
 2013c0c:	10c4983a 	sll	r2,r2,r3
 2013c10:	0084303a 	nor	r2,zero,r2
 2013c14:	1007883a 	mov	r3,r2
 2013c18:	008080b4 	movhi	r2,514
 2013c1c:	1093cd04 	addi	r2,r2,20276
 2013c20:	10800017 	ldw	r2,0(r2)
 2013c24:	1886703a 	and	r3,r3,r2
 2013c28:	008080b4 	movhi	r2,514
 2013c2c:	1093cd04 	addi	r2,r2,20276
 2013c30:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2013c34:	008080b4 	movhi	r2,514
 2013c38:	1093cd04 	addi	r2,r2,20276
 2013c3c:	10800017 	ldw	r2,0(r2)
 2013c40:	100170fa 	wrctl	ienable,r2
 2013c44:	e0bff417 	ldw	r2,-48(fp)
 2013c48:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013c4c:	e0bff117 	ldw	r2,-60(fp)
 2013c50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2013c54:	0005883a 	mov	r2,zero
 2013c58:	e0bfff15 	stw	r2,-4(fp)
 2013c5c:	e0bfff17 	ldw	r2,-4(fp)
 2013c60:	e0bffb15 	stw	r2,-20(fp)
 2013c64:	e0bffa17 	ldw	r2,-24(fp)
 2013c68:	e0bff015 	stw	r2,-64(fp)
 2013c6c:	e0bff017 	ldw	r2,-64(fp)
 2013c70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 2013c74:	e0bffb17 	ldw	r2,-20(fp)
}
 2013c78:	e037883a 	mov	sp,fp
 2013c7c:	df000017 	ldw	fp,0(sp)
 2013c80:	dec00104 	addi	sp,sp,4
 2013c84:	f800283a 	ret

02013c88 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2013c88:	deffeb04 	addi	sp,sp,-84
 2013c8c:	dfc01415 	stw	ra,80(sp)
 2013c90:	df001315 	stw	fp,76(sp)
 2013c94:	df001304 	addi	fp,sp,76
 2013c98:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2013c9c:	e0bffd17 	ldw	r2,-12(fp)
 2013ca0:	1004803a 	cmplt	r2,r2,zero
 2013ca4:	1000081e 	bne	r2,zero,2013cc8 <isatty+0x40>
 2013ca8:	e0bffd17 	ldw	r2,-12(fp)
 2013cac:	10800324 	muli	r2,r2,12
 2013cb0:	1007883a 	mov	r3,r2
 2013cb4:	008080b4 	movhi	r2,514
 2013cb8:	10876904 	addi	r2,r2,7588
 2013cbc:	1887883a 	add	r3,r3,r2
 2013cc0:	e0ffff15 	stw	r3,-4(fp)
 2013cc4:	00000106 	br	2013ccc <isatty+0x44>
 2013cc8:	e03fff15 	stw	zero,-4(fp)
 2013ccc:	e0bfff17 	ldw	r2,-4(fp)
 2013cd0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 2013cd4:	e0bfed17 	ldw	r2,-76(fp)
 2013cd8:	1005003a 	cmpeq	r2,r2,zero
 2013cdc:	10000f1e 	bne	r2,zero,2013d1c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2013ce0:	e0bfed17 	ldw	r2,-76(fp)
 2013ce4:	10800017 	ldw	r2,0(r2)
 2013ce8:	10800817 	ldw	r2,32(r2)
 2013cec:	1004c03a 	cmpne	r2,r2,zero
 2013cf0:	1000031e 	bne	r2,zero,2013d00 <isatty+0x78>
    {
      return 1;
 2013cf4:	00800044 	movi	r2,1
 2013cf8:	e0bffe15 	stw	r2,-8(fp)
 2013cfc:	00000c06 	br	2013d30 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2013d00:	e17fee04 	addi	r5,fp,-72
 2013d04:	e13ffd17 	ldw	r4,-12(fp)
 2013d08:	20139940 	call	2013994 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2013d0c:	e0bfef17 	ldw	r2,-68(fp)
 2013d10:	10880020 	cmpeqi	r2,r2,8192
 2013d14:	e0bffe15 	stw	r2,-8(fp)
 2013d18:	00000506 	br	2013d30 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2013d1c:	2013d480 	call	2013d48 <alt_get_errno>
 2013d20:	1007883a 	mov	r3,r2
 2013d24:	00801444 	movi	r2,81
 2013d28:	18800015 	stw	r2,0(r3)
    return 0;
 2013d2c:	e03ffe15 	stw	zero,-8(fp)
 2013d30:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 2013d34:	e037883a 	mov	sp,fp
 2013d38:	dfc00117 	ldw	ra,4(sp)
 2013d3c:	df000017 	ldw	fp,0(sp)
 2013d40:	dec00204 	addi	sp,sp,8
 2013d44:	f800283a 	ret

02013d48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013d48:	defffd04 	addi	sp,sp,-12
 2013d4c:	dfc00215 	stw	ra,8(sp)
 2013d50:	df000115 	stw	fp,4(sp)
 2013d54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2013d58:	008080b4 	movhi	r2,514
 2013d5c:	108c2304 	addi	r2,r2,12428
 2013d60:	10800017 	ldw	r2,0(r2)
 2013d64:	1005003a 	cmpeq	r2,r2,zero
 2013d68:	1000061e 	bne	r2,zero,2013d84 <alt_get_errno+0x3c>
 2013d6c:	008080b4 	movhi	r2,514
 2013d70:	108c2304 	addi	r2,r2,12428
 2013d74:	10800017 	ldw	r2,0(r2)
 2013d78:	103ee83a 	callr	r2
 2013d7c:	e0bfff15 	stw	r2,-4(fp)
 2013d80:	00000306 	br	2013d90 <alt_get_errno+0x48>
 2013d84:	008080b4 	movhi	r2,514
 2013d88:	1093c804 	addi	r2,r2,20256
 2013d8c:	e0bfff15 	stw	r2,-4(fp)
 2013d90:	e0bfff17 	ldw	r2,-4(fp)
}
 2013d94:	e037883a 	mov	sp,fp
 2013d98:	dfc00117 	ldw	ra,4(sp)
 2013d9c:	df000017 	ldw	fp,0(sp)
 2013da0:	dec00204 	addi	sp,sp,8
 2013da4:	f800283a 	ret

02013da8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2013da8:	defffe04 	addi	sp,sp,-8
 2013dac:	dfc00115 	stw	ra,4(sp)
 2013db0:	df000015 	stw	fp,0(sp)
 2013db4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2013db8:	010080b4 	movhi	r4,514
 2013dbc:	210c4904 	addi	r4,r4,12580
 2013dc0:	014080b4 	movhi	r5,514
 2013dc4:	2944d204 	addi	r5,r5,4936
 2013dc8:	018080b4 	movhi	r6,514
 2013dcc:	318c4904 	addi	r6,r6,12580
 2013dd0:	2013e280 	call	2013e28 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2013dd4:	01008034 	movhi	r4,512
 2013dd8:	21000804 	addi	r4,r4,32
 2013ddc:	01408034 	movhi	r5,512
 2013de0:	29400804 	addi	r5,r5,32
 2013de4:	01808034 	movhi	r6,512
 2013de8:	31806f04 	addi	r6,r6,444
 2013dec:	2013e280 	call	2013e28 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2013df0:	010080b4 	movhi	r4,514
 2013df4:	2101c804 	addi	r4,r4,1824
 2013df8:	014080b4 	movhi	r5,514
 2013dfc:	2941c804 	addi	r5,r5,1824
 2013e00:	018080b4 	movhi	r6,514
 2013e04:	3184d204 	addi	r6,r6,4936
 2013e08:	2013e280 	call	2013e28 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2013e0c:	20138540 	call	2013854 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2013e10:	201f2280 	call	201f228 <alt_icache_flush_all>
}
 2013e14:	e037883a 	mov	sp,fp
 2013e18:	dfc00117 	ldw	ra,4(sp)
 2013e1c:	df000017 	ldw	fp,0(sp)
 2013e20:	dec00204 	addi	sp,sp,8
 2013e24:	f800283a 	ret

02013e28 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2013e28:	defffc04 	addi	sp,sp,-16
 2013e2c:	df000315 	stw	fp,12(sp)
 2013e30:	df000304 	addi	fp,sp,12
 2013e34:	e13ffd15 	stw	r4,-12(fp)
 2013e38:	e17ffe15 	stw	r5,-8(fp)
 2013e3c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2013e40:	e0fffe17 	ldw	r3,-8(fp)
 2013e44:	e0bffd17 	ldw	r2,-12(fp)
 2013e48:	18800e26 	beq	r3,r2,2013e84 <alt_load_section+0x5c>
  {
    while( to != end )
 2013e4c:	00000a06 	br	2013e78 <alt_load_section+0x50>
    {
      *to++ = *from++;
 2013e50:	e0bffd17 	ldw	r2,-12(fp)
 2013e54:	10c00017 	ldw	r3,0(r2)
 2013e58:	e0bffe17 	ldw	r2,-8(fp)
 2013e5c:	10c00015 	stw	r3,0(r2)
 2013e60:	e0bffe17 	ldw	r2,-8(fp)
 2013e64:	10800104 	addi	r2,r2,4
 2013e68:	e0bffe15 	stw	r2,-8(fp)
 2013e6c:	e0bffd17 	ldw	r2,-12(fp)
 2013e70:	10800104 	addi	r2,r2,4
 2013e74:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2013e78:	e0fffe17 	ldw	r3,-8(fp)
 2013e7c:	e0bfff17 	ldw	r2,-4(fp)
 2013e80:	18bff31e 	bne	r3,r2,2013e50 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2013e84:	e037883a 	mov	sp,fp
 2013e88:	df000017 	ldw	fp,0(sp)
 2013e8c:	dec00104 	addi	sp,sp,4
 2013e90:	f800283a 	ret

02013e94 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2013e94:	defff804 	addi	sp,sp,-32
 2013e98:	dfc00715 	stw	ra,28(sp)
 2013e9c:	df000615 	stw	fp,24(sp)
 2013ea0:	df000604 	addi	fp,sp,24
 2013ea4:	e13ffc15 	stw	r4,-16(fp)
 2013ea8:	e17ffd15 	stw	r5,-12(fp)
 2013eac:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2013eb0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2013eb4:	e0bffc17 	ldw	r2,-16(fp)
 2013eb8:	1004803a 	cmplt	r2,r2,zero
 2013ebc:	1000081e 	bne	r2,zero,2013ee0 <lseek+0x4c>
 2013ec0:	e0bffc17 	ldw	r2,-16(fp)
 2013ec4:	10800324 	muli	r2,r2,12
 2013ec8:	1007883a 	mov	r3,r2
 2013ecc:	008080b4 	movhi	r2,514
 2013ed0:	10876904 	addi	r2,r2,7588
 2013ed4:	1887883a 	add	r3,r3,r2
 2013ed8:	e0ffff15 	stw	r3,-4(fp)
 2013edc:	00000106 	br	2013ee4 <lseek+0x50>
 2013ee0:	e03fff15 	stw	zero,-4(fp)
 2013ee4:	e0bfff17 	ldw	r2,-4(fp)
 2013ee8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 2013eec:	e0bffb17 	ldw	r2,-20(fp)
 2013ef0:	1005003a 	cmpeq	r2,r2,zero
 2013ef4:	1000111e 	bne	r2,zero,2013f3c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2013ef8:	e0bffb17 	ldw	r2,-20(fp)
 2013efc:	10800017 	ldw	r2,0(r2)
 2013f00:	10800717 	ldw	r2,28(r2)
 2013f04:	1005003a 	cmpeq	r2,r2,zero
 2013f08:	1000091e 	bne	r2,zero,2013f30 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2013f0c:	e0bffb17 	ldw	r2,-20(fp)
 2013f10:	10800017 	ldw	r2,0(r2)
 2013f14:	10800717 	ldw	r2,28(r2)
 2013f18:	e13ffb17 	ldw	r4,-20(fp)
 2013f1c:	e17ffd17 	ldw	r5,-12(fp)
 2013f20:	e1bffe17 	ldw	r6,-8(fp)
 2013f24:	103ee83a 	callr	r2
 2013f28:	e0bffa15 	stw	r2,-24(fp)
 2013f2c:	00000506 	br	2013f44 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2013f30:	00bfde84 	movi	r2,-134
 2013f34:	e0bffa15 	stw	r2,-24(fp)
 2013f38:	00000206 	br	2013f44 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 2013f3c:	00bfebc4 	movi	r2,-81
 2013f40:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 2013f44:	e0bffa17 	ldw	r2,-24(fp)
 2013f48:	1004403a 	cmpge	r2,r2,zero
 2013f4c:	1000071e 	bne	r2,zero,2013f6c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 2013f50:	2013f840 	call	2013f84 <alt_get_errno>
 2013f54:	1007883a 	mov	r3,r2
 2013f58:	e0bffa17 	ldw	r2,-24(fp)
 2013f5c:	0085c83a 	sub	r2,zero,r2
 2013f60:	18800015 	stw	r2,0(r3)
    rc = -1;
 2013f64:	00bfffc4 	movi	r2,-1
 2013f68:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 2013f6c:	e0bffa17 	ldw	r2,-24(fp)
}
 2013f70:	e037883a 	mov	sp,fp
 2013f74:	dfc00117 	ldw	ra,4(sp)
 2013f78:	df000017 	ldw	fp,0(sp)
 2013f7c:	dec00204 	addi	sp,sp,8
 2013f80:	f800283a 	ret

02013f84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013f84:	defffd04 	addi	sp,sp,-12
 2013f88:	dfc00215 	stw	ra,8(sp)
 2013f8c:	df000115 	stw	fp,4(sp)
 2013f90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2013f94:	008080b4 	movhi	r2,514
 2013f98:	108c2304 	addi	r2,r2,12428
 2013f9c:	10800017 	ldw	r2,0(r2)
 2013fa0:	1005003a 	cmpeq	r2,r2,zero
 2013fa4:	1000061e 	bne	r2,zero,2013fc0 <alt_get_errno+0x3c>
 2013fa8:	008080b4 	movhi	r2,514
 2013fac:	108c2304 	addi	r2,r2,12428
 2013fb0:	10800017 	ldw	r2,0(r2)
 2013fb4:	103ee83a 	callr	r2
 2013fb8:	e0bfff15 	stw	r2,-4(fp)
 2013fbc:	00000306 	br	2013fcc <alt_get_errno+0x48>
 2013fc0:	008080b4 	movhi	r2,514
 2013fc4:	1093c804 	addi	r2,r2,20256
 2013fc8:	e0bfff15 	stw	r2,-4(fp)
 2013fcc:	e0bfff17 	ldw	r2,-4(fp)
}
 2013fd0:	e037883a 	mov	sp,fp
 2013fd4:	dfc00117 	ldw	ra,4(sp)
 2013fd8:	df000017 	ldw	fp,0(sp)
 2013fdc:	dec00204 	addi	sp,sp,8
 2013fe0:	f800283a 	ret

02013fe4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2013fe4:	defffb04 	addi	sp,sp,-20
 2013fe8:	dfc00415 	stw	ra,16(sp)
 2013fec:	df000315 	stw	fp,12(sp)
 2013ff0:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2013ff4:	0009883a 	mov	r4,zero
 2013ff8:	201cd340 	call	201cd34 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2013ffc:	20153900 	call	2015390 <OSInit>
 2014000:	01000044 	movi	r4,1
 2014004:	201a2540 	call	201a254 <OSSemCreate>
 2014008:	1007883a 	mov	r3,r2
 201400c:	008080b4 	movhi	r2,514
 2014010:	1093d404 	addi	r2,r2,20304
 2014014:	10c00015 	stw	r3,0(r2)
 2014018:	01000044 	movi	r4,1
 201401c:	201a2540 	call	201a254 <OSSemCreate>
 2014020:	1007883a 	mov	r3,r2
 2014024:	008080b4 	movhi	r2,514
 2014028:	1093d604 	addi	r2,r2,20312
 201402c:	10c00015 	stw	r3,0(r2)
 2014030:	008080b4 	movhi	r2,514
 2014034:	1093cc04 	addi	r2,r2,20272
 2014038:	e0bffd15 	stw	r2,-12(fp)
 201403c:	00800044 	movi	r2,1
 2014040:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 2014044:	e13ffe0b 	ldhu	r4,-8(fp)
 2014048:	201a2540 	call	201a254 <OSSemCreate>
 201404c:	1007883a 	mov	r3,r2
 2014050:	e0bffd17 	ldw	r2,-12(fp)
 2014054:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2014058:	201cd680 	call	201cd68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 201405c:	010080b4 	movhi	r4,514
 2014060:	21047e04 	addi	r4,r4,4600
 2014064:	014080b4 	movhi	r5,514
 2014068:	29447e04 	addi	r5,r5,4600
 201406c:	018080b4 	movhi	r6,514
 2014070:	31847e04 	addi	r6,r6,4600
 2014074:	201f5e80 	call	201f5e8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2014078:	201f0cc0 	call	201f0cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 201407c:	010080b4 	movhi	r4,514
 2014080:	213c4c04 	addi	r4,r4,-3792
 2014084:	20203080 	call	2020308 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2014088:	d127b817 	ldw	r4,-24864(gp)
 201408c:	d167b917 	ldw	r5,-24860(gp)
 2014090:	d1a7ba17 	ldw	r6,-24856(gp)
 2014094:	200324c0 	call	200324c <main>
 2014098:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 201409c:	01000044 	movi	r4,1
 20140a0:	20136800 	call	2013680 <close>
  exit (result);
 20140a4:	e13fff17 	ldw	r4,-4(fp)
 20140a8:	202031c0 	call	202031c <exit>

020140ac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 20140ac:	defff704 	addi	sp,sp,-36
 20140b0:	dfc00815 	stw	ra,32(sp)
 20140b4:	df000715 	stw	fp,28(sp)
 20140b8:	df000704 	addi	fp,sp,28
 20140bc:	e13ffb15 	stw	r4,-20(fp)
 20140c0:	e17ffc15 	stw	r5,-16(fp)
 20140c4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20140c8:	e0bffb17 	ldw	r2,-20(fp)
 20140cc:	1004803a 	cmplt	r2,r2,zero
 20140d0:	1000081e 	bne	r2,zero,20140f4 <read+0x48>
 20140d4:	e0bffb17 	ldw	r2,-20(fp)
 20140d8:	10800324 	muli	r2,r2,12
 20140dc:	1007883a 	mov	r3,r2
 20140e0:	008080b4 	movhi	r2,514
 20140e4:	10876904 	addi	r2,r2,7588
 20140e8:	1887883a 	add	r3,r3,r2
 20140ec:	e0ffff15 	stw	r3,-4(fp)
 20140f0:	00000106 	br	20140f8 <read+0x4c>
 20140f4:	e03fff15 	stw	zero,-4(fp)
 20140f8:	e0bfff17 	ldw	r2,-4(fp)
 20140fc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 2014100:	e0bffa17 	ldw	r2,-24(fp)
 2014104:	1005003a 	cmpeq	r2,r2,zero
 2014108:	1000241e 	bne	r2,zero,201419c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 201410c:	e0bffa17 	ldw	r2,-24(fp)
 2014110:	10800217 	ldw	r2,8(r2)
 2014114:	108000cc 	andi	r2,r2,3
 2014118:	10800060 	cmpeqi	r2,r2,1
 201411c:	10001a1e 	bne	r2,zero,2014188 <read+0xdc>
 2014120:	e0bffa17 	ldw	r2,-24(fp)
 2014124:	10800017 	ldw	r2,0(r2)
 2014128:	10800517 	ldw	r2,20(r2)
 201412c:	1005003a 	cmpeq	r2,r2,zero
 2014130:	1000151e 	bne	r2,zero,2014188 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2014134:	e0bffa17 	ldw	r2,-24(fp)
 2014138:	10800017 	ldw	r2,0(r2)
 201413c:	10800517 	ldw	r2,20(r2)
 2014140:	e17ffc17 	ldw	r5,-16(fp)
 2014144:	e1bffd17 	ldw	r6,-12(fp)
 2014148:	e13ffa17 	ldw	r4,-24(fp)
 201414c:	103ee83a 	callr	r2
 2014150:	e0bff915 	stw	r2,-28(fp)
 2014154:	e0bff917 	ldw	r2,-28(fp)
 2014158:	1004403a 	cmpge	r2,r2,zero
 201415c:	1000071e 	bne	r2,zero,201417c <read+0xd0>
        {
          ALT_ERRNO = -rval;
 2014160:	20141cc0 	call	20141cc <alt_get_errno>
 2014164:	e0fff917 	ldw	r3,-28(fp)
 2014168:	00c7c83a 	sub	r3,zero,r3
 201416c:	10c00015 	stw	r3,0(r2)
          return -1;
 2014170:	00bfffc4 	movi	r2,-1
 2014174:	e0bffe15 	stw	r2,-8(fp)
 2014178:	00000e06 	br	20141b4 <read+0x108>
        }
        return rval;
 201417c:	e0bff917 	ldw	r2,-28(fp)
 2014180:	e0bffe15 	stw	r2,-8(fp)
 2014184:	00000b06 	br	20141b4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2014188:	20141cc0 	call	20141cc <alt_get_errno>
 201418c:	1007883a 	mov	r3,r2
 2014190:	00800344 	movi	r2,13
 2014194:	18800015 	stw	r2,0(r3)
 2014198:	00000406 	br	20141ac <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 201419c:	20141cc0 	call	20141cc <alt_get_errno>
 20141a0:	1007883a 	mov	r3,r2
 20141a4:	00801444 	movi	r2,81
 20141a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 20141ac:	00bfffc4 	movi	r2,-1
 20141b0:	e0bffe15 	stw	r2,-8(fp)
 20141b4:	e0bffe17 	ldw	r2,-8(fp)
}
 20141b8:	e037883a 	mov	sp,fp
 20141bc:	dfc00117 	ldw	ra,4(sp)
 20141c0:	df000017 	ldw	fp,0(sp)
 20141c4:	dec00204 	addi	sp,sp,8
 20141c8:	f800283a 	ret

020141cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20141cc:	defffd04 	addi	sp,sp,-12
 20141d0:	dfc00215 	stw	ra,8(sp)
 20141d4:	df000115 	stw	fp,4(sp)
 20141d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20141dc:	008080b4 	movhi	r2,514
 20141e0:	108c2304 	addi	r2,r2,12428
 20141e4:	10800017 	ldw	r2,0(r2)
 20141e8:	1005003a 	cmpeq	r2,r2,zero
 20141ec:	1000061e 	bne	r2,zero,2014208 <alt_get_errno+0x3c>
 20141f0:	008080b4 	movhi	r2,514
 20141f4:	108c2304 	addi	r2,r2,12428
 20141f8:	10800017 	ldw	r2,0(r2)
 20141fc:	103ee83a 	callr	r2
 2014200:	e0bfff15 	stw	r2,-4(fp)
 2014204:	00000306 	br	2014214 <alt_get_errno+0x48>
 2014208:	008080b4 	movhi	r2,514
 201420c:	1093c804 	addi	r2,r2,20256
 2014210:	e0bfff15 	stw	r2,-4(fp)
 2014214:	e0bfff17 	ldw	r2,-4(fp)
}
 2014218:	e037883a 	mov	sp,fp
 201421c:	dfc00117 	ldw	ra,4(sp)
 2014220:	df000017 	ldw	fp,0(sp)
 2014224:	dec00204 	addi	sp,sp,8
 2014228:	f800283a 	ret

0201422c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 201422c:	defffe04 	addi	sp,sp,-8
 2014230:	df000115 	stw	fp,4(sp)
 2014234:	df000104 	addi	fp,sp,4
 2014238:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 201423c:	e0bfff17 	ldw	r2,-4(fp)
 2014240:	108000d0 	cmplti	r2,r2,3
 2014244:	10000d1e 	bne	r2,zero,201427c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2014248:	e0bfff17 	ldw	r2,-4(fp)
 201424c:	00c080b4 	movhi	r3,514
 2014250:	18c76904 	addi	r3,r3,7588
 2014254:	10800324 	muli	r2,r2,12
 2014258:	10c5883a 	add	r2,r2,r3
 201425c:	10800204 	addi	r2,r2,8
 2014260:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2014264:	e0bfff17 	ldw	r2,-4(fp)
 2014268:	00c080b4 	movhi	r3,514
 201426c:	18c76904 	addi	r3,r3,7588
 2014270:	10800324 	muli	r2,r2,12
 2014274:	10c5883a 	add	r2,r2,r3
 2014278:	10000015 	stw	zero,0(r2)
  }
}
 201427c:	e037883a 	mov	sp,fp
 2014280:	df000017 	ldw	fp,0(sp)
 2014284:	dec00104 	addi	sp,sp,4
 2014288:	f800283a 	ret

0201428c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 201428c:	defff804 	addi	sp,sp,-32
 2014290:	df000715 	stw	fp,28(sp)
 2014294:	df000704 	addi	fp,sp,28
 2014298:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201429c:	0005303a 	rdctl	r2,status
 20142a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20142a4:	e0fffb17 	ldw	r3,-20(fp)
 20142a8:	00bfff84 	movi	r2,-2
 20142ac:	1884703a 	and	r2,r3,r2
 20142b0:	1001703a 	wrctl	status,r2
  
  return context;
 20142b4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 20142b8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 20142bc:	d0a01117 	ldw	r2,-32700(gp)
 20142c0:	10c000c4 	addi	r3,r2,3
 20142c4:	00bfff04 	movi	r2,-4
 20142c8:	1884703a 	and	r2,r3,r2
 20142cc:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 20142d0:	d0e01117 	ldw	r3,-32700(gp)
 20142d4:	e0bffe17 	ldw	r2,-8(fp)
 20142d8:	1887883a 	add	r3,r3,r2
 20142dc:	00810034 	movhi	r2,1024
 20142e0:	10800004 	addi	r2,r2,0
 20142e4:	10c0072e 	bgeu	r2,r3,2014304 <sbrk+0x78>
 20142e8:	e0bffd17 	ldw	r2,-12(fp)
 20142ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20142f0:	e0bffa17 	ldw	r2,-24(fp)
 20142f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 20142f8:	00bfffc4 	movi	r2,-1
 20142fc:	e0bfff15 	stw	r2,-4(fp)
 2014300:	00000c06 	br	2014334 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 2014304:	d0a01117 	ldw	r2,-32700(gp)
 2014308:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 201430c:	d0e01117 	ldw	r3,-32700(gp)
 2014310:	e0bffe17 	ldw	r2,-8(fp)
 2014314:	1885883a 	add	r2,r3,r2
 2014318:	d0a01115 	stw	r2,-32700(gp)
 201431c:	e0bffd17 	ldw	r2,-12(fp)
 2014320:	e0bff915 	stw	r2,-28(fp)
 2014324:	e0bff917 	ldw	r2,-28(fp)
 2014328:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 201432c:	e0bffc17 	ldw	r2,-16(fp)
 2014330:	e0bfff15 	stw	r2,-4(fp)
 2014334:	e0bfff17 	ldw	r2,-4(fp)
} 
 2014338:	e037883a 	mov	sp,fp
 201433c:	df000017 	ldw	fp,0(sp)
 2014340:	dec00104 	addi	sp,sp,4
 2014344:	f800283a 	ret

02014348 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2014348:	defffa04 	addi	sp,sp,-24
 201434c:	df000515 	stw	fp,20(sp)
 2014350:	df000504 	addi	fp,sp,20
 2014354:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014358:	0005303a 	rdctl	r2,status
 201435c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014360:	e0fffd17 	ldw	r3,-12(fp)
 2014364:	00bfff84 	movi	r2,-2
 2014368:	1884703a 	and	r2,r3,r2
 201436c:	1001703a 	wrctl	status,r2
  
  return context;
 2014370:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2014374:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 2014378:	e0bfff17 	ldw	r2,-4(fp)
 201437c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2014380:	e0bffc17 	ldw	r2,-16(fp)
 2014384:	10c00017 	ldw	r3,0(r2)
 2014388:	e0bffc17 	ldw	r2,-16(fp)
 201438c:	10800117 	ldw	r2,4(r2)
 2014390:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2014394:	e0bffc17 	ldw	r2,-16(fp)
 2014398:	10c00117 	ldw	r3,4(r2)
 201439c:	e0bffc17 	ldw	r2,-16(fp)
 20143a0:	10800017 	ldw	r2,0(r2)
 20143a4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 20143a8:	e0fffc17 	ldw	r3,-16(fp)
 20143ac:	e0bffc17 	ldw	r2,-16(fp)
 20143b0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 20143b4:	e0fffc17 	ldw	r3,-16(fp)
 20143b8:	e0bffc17 	ldw	r2,-16(fp)
 20143bc:	18800015 	stw	r2,0(r3)
 20143c0:	e0bffe17 	ldw	r2,-8(fp)
 20143c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20143c8:	e0bffb17 	ldw	r2,-20(fp)
 20143cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 20143d0:	e037883a 	mov	sp,fp
 20143d4:	df000017 	ldw	fp,0(sp)
 20143d8:	dec00104 	addi	sp,sp,4
 20143dc:	f800283a 	ret

020143e0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 20143e0:	defffb04 	addi	sp,sp,-20
 20143e4:	dfc00415 	stw	ra,16(sp)
 20143e8:	df000315 	stw	fp,12(sp)
 20143ec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 20143f0:	d0a01217 	ldw	r2,-32696(gp)
 20143f4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 20143f8:	d0a7bc17 	ldw	r2,-24848(gp)
 20143fc:	10800044 	addi	r2,r2,1
 2014400:	d0a7bc15 	stw	r2,-24848(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2014404:	00003106 	br	20144cc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 2014408:	e0bffe17 	ldw	r2,-8(fp)
 201440c:	10800017 	ldw	r2,0(r2)
 2014410:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2014414:	e0bffe17 	ldw	r2,-8(fp)
 2014418:	10800403 	ldbu	r2,16(r2)
 201441c:	10803fcc 	andi	r2,r2,255
 2014420:	1005003a 	cmpeq	r2,r2,zero
 2014424:	1000051e 	bne	r2,zero,201443c <alt_tick+0x5c>
 2014428:	d0a7bc17 	ldw	r2,-24848(gp)
 201442c:	1004c03a 	cmpne	r2,r2,zero
 2014430:	1000021e 	bne	r2,zero,201443c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 2014434:	e0bffe17 	ldw	r2,-8(fp)
 2014438:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 201443c:	e0bffe17 	ldw	r2,-8(fp)
 2014440:	10c00217 	ldw	r3,8(r2)
 2014444:	d0a7bc17 	ldw	r2,-24848(gp)
 2014448:	10c01e36 	bltu	r2,r3,20144c4 <alt_tick+0xe4>
 201444c:	e0bffe17 	ldw	r2,-8(fp)
 2014450:	10800403 	ldbu	r2,16(r2)
 2014454:	10803fcc 	andi	r2,r2,255
 2014458:	1004c03a 	cmpne	r2,r2,zero
 201445c:	1000191e 	bne	r2,zero,20144c4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 2014460:	e0bffe17 	ldw	r2,-8(fp)
 2014464:	10c00317 	ldw	r3,12(r2)
 2014468:	e0bffe17 	ldw	r2,-8(fp)
 201446c:	11000517 	ldw	r4,20(r2)
 2014470:	183ee83a 	callr	r3
 2014474:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2014478:	e0bffd17 	ldw	r2,-12(fp)
 201447c:	1004c03a 	cmpne	r2,r2,zero
 2014480:	1000031e 	bne	r2,zero,2014490 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 2014484:	e13ffe17 	ldw	r4,-8(fp)
 2014488:	20143480 	call	2014348 <alt_alarm_stop>
 201448c:	00000d06 	br	20144c4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 2014490:	e0bffe17 	ldw	r2,-8(fp)
 2014494:	10c00217 	ldw	r3,8(r2)
 2014498:	e0bffd17 	ldw	r2,-12(fp)
 201449c:	1887883a 	add	r3,r3,r2
 20144a0:	e0bffe17 	ldw	r2,-8(fp)
 20144a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 20144a8:	e0bffe17 	ldw	r2,-8(fp)
 20144ac:	10c00217 	ldw	r3,8(r2)
 20144b0:	d0a7bc17 	ldw	r2,-24848(gp)
 20144b4:	1880032e 	bgeu	r3,r2,20144c4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 20144b8:	e0fffe17 	ldw	r3,-8(fp)
 20144bc:	00800044 	movi	r2,1
 20144c0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 20144c4:	e0bfff17 	ldw	r2,-4(fp)
 20144c8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20144cc:	d0e01204 	addi	r3,gp,-32696
 20144d0:	e0bffe17 	ldw	r2,-8(fp)
 20144d4:	10ffcc1e 	bne	r2,r3,2014408 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 20144d8:	20157ec0 	call	20157ec <OSTimeTick>
}
 20144dc:	e037883a 	mov	sp,fp
 20144e0:	dfc00117 	ldw	ra,4(sp)
 20144e4:	df000017 	ldw	fp,0(sp)
 20144e8:	dec00204 	addi	sp,sp,8
 20144ec:	f800283a 	ret

020144f0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 20144f0:	defff904 	addi	sp,sp,-28
 20144f4:	dfc00615 	stw	ra,24(sp)
 20144f8:	df000515 	stw	fp,20(sp)
 20144fc:	dc000415 	stw	r16,16(sp)
 2014500:	df000404 	addi	fp,sp,16
 2014504:	e13ffe15 	stw	r4,-8(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
 2014508:	008080b4 	movhi	r2,514
 201450c:	1093d744 	addi	r2,r2,20317
 2014510:	10800003 	ldbu	r2,0(r2)
 2014514:	10803fcc 	andi	r2,r2,255
 2014518:	1004c03a 	cmpne	r2,r2,zero
 201451c:	1000041e 	bne	r2,zero,2014530 <usleep+0x40>
  {
    return alt_busy_sleep (us);
 2014520:	e13ffe17 	ldw	r4,-8(fp)
 2014524:	201ee6c0 	call	201ee6c <alt_busy_sleep>
 2014528:	e0bfff15 	stw	r2,-4(fp)
 201452c:	00002f06 	br	20145ec <usleep+0xfc>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2014530:	008080b4 	movhi	r2,514
 2014534:	1093d104 	addi	r2,r2,20292
 2014538:	10800017 	ldw	r2,0(r2)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
 201453c:	e0bffc15 	stw	r2,-16(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
 2014540:	e13ffe17 	ldw	r4,-8(fp)
 2014544:	014003f4 	movhi	r5,15
 2014548:	29509004 	addi	r5,r5,16960
 201454c:	2005ab40 	call	2005ab4 <__udivsi3>
 2014550:	1007883a 	mov	r3,r2
 2014554:	e0bffc17 	ldw	r2,-16(fp)
 2014558:	18a1383a 	mul	r16,r3,r2
 201455c:	e13ffe17 	ldw	r4,-8(fp)
 2014560:	014003f4 	movhi	r5,15
 2014564:	29509004 	addi	r5,r5,16960
 2014568:	2005abc0 	call	2005abc <__umodsi3>
 201456c:	1007883a 	mov	r3,r2
 2014570:	e0bffc17 	ldw	r2,-16(fp)
 2014574:	1889383a 	mul	r4,r3,r2
 2014578:	014003f4 	movhi	r5,15
 201457c:	29509004 	addi	r5,r5,16960
 2014580:	2005ab40 	call	2005ab4 <__udivsi3>
 2014584:	8085883a 	add	r2,r16,r2
 2014588:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 201458c:	00000706 	br	20145ac <usleep+0xbc>
  {
    OSTimeDly(0xffff);
 2014590:	013fffd4 	movui	r4,65535
 2014594:	201c79c0 	call	201c79c <OSTimeDly>
    ticks -= 0xffff;
 2014598:	e0bffd17 	ldw	r2,-12(fp)
 201459c:	00fffff4 	movhi	r3,65535
 20145a0:	18c00044 	addi	r3,r3,1
 20145a4:	10c5883a 	add	r2,r2,r3
 20145a8:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 20145ac:	e0fffd17 	ldw	r3,-12(fp)
 20145b0:	00bfffd4 	movui	r2,65535
 20145b4:	10fff636 	bltu	r2,r3,2014590 <usleep+0xa0>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
 20145b8:	e0bffd17 	ldw	r2,-12(fp)
 20145bc:	113fffcc 	andi	r4,r2,65535
 20145c0:	201c79c0 	call	201c79c <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
 20145c4:	010003f4 	movhi	r4,15
 20145c8:	21109004 	addi	r4,r4,16960
 20145cc:	e17ffc17 	ldw	r5,-16(fp)
 20145d0:	2005ab40 	call	2005ab4 <__udivsi3>
 20145d4:	100b883a 	mov	r5,r2
 20145d8:	e13ffe17 	ldw	r4,-8(fp)
 20145dc:	2005abc0 	call	2005abc <__umodsi3>
 20145e0:	1009883a 	mov	r4,r2
 20145e4:	201ee6c0 	call	201ee6c <alt_busy_sleep>

  return 0;  
 20145e8:	e03fff15 	stw	zero,-4(fp)
 20145ec:	e0bfff17 	ldw	r2,-4(fp)
}
 20145f0:	e037883a 	mov	sp,fp
 20145f4:	dfc00217 	ldw	ra,8(sp)
 20145f8:	df000117 	ldw	fp,4(sp)
 20145fc:	dc000017 	ldw	r16,0(sp)
 2014600:	dec00304 	addi	sp,sp,12
 2014604:	f800283a 	ret

02014608 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2014608:	defff704 	addi	sp,sp,-36
 201460c:	dfc00815 	stw	ra,32(sp)
 2014610:	df000715 	stw	fp,28(sp)
 2014614:	df000704 	addi	fp,sp,28
 2014618:	e13ffb15 	stw	r4,-20(fp)
 201461c:	e17ffc15 	stw	r5,-16(fp)
 2014620:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2014624:	e0bffb17 	ldw	r2,-20(fp)
 2014628:	1004803a 	cmplt	r2,r2,zero
 201462c:	1000081e 	bne	r2,zero,2014650 <write+0x48>
 2014630:	e0bffb17 	ldw	r2,-20(fp)
 2014634:	10800324 	muli	r2,r2,12
 2014638:	1007883a 	mov	r3,r2
 201463c:	008080b4 	movhi	r2,514
 2014640:	10876904 	addi	r2,r2,7588
 2014644:	1887883a 	add	r3,r3,r2
 2014648:	e0ffff15 	stw	r3,-4(fp)
 201464c:	00000106 	br	2014654 <write+0x4c>
 2014650:	e03fff15 	stw	zero,-4(fp)
 2014654:	e0bfff17 	ldw	r2,-4(fp)
 2014658:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 201465c:	e0bffa17 	ldw	r2,-24(fp)
 2014660:	1005003a 	cmpeq	r2,r2,zero
 2014664:	1000241e 	bne	r2,zero,20146f8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2014668:	e0bffa17 	ldw	r2,-24(fp)
 201466c:	10800217 	ldw	r2,8(r2)
 2014670:	108000cc 	andi	r2,r2,3
 2014674:	1005003a 	cmpeq	r2,r2,zero
 2014678:	10001a1e 	bne	r2,zero,20146e4 <write+0xdc>
 201467c:	e0bffa17 	ldw	r2,-24(fp)
 2014680:	10800017 	ldw	r2,0(r2)
 2014684:	10800617 	ldw	r2,24(r2)
 2014688:	1005003a 	cmpeq	r2,r2,zero
 201468c:	1000151e 	bne	r2,zero,20146e4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2014690:	e0bffa17 	ldw	r2,-24(fp)
 2014694:	10800017 	ldw	r2,0(r2)
 2014698:	10800617 	ldw	r2,24(r2)
 201469c:	e17ffc17 	ldw	r5,-16(fp)
 20146a0:	e1bffd17 	ldw	r6,-12(fp)
 20146a4:	e13ffa17 	ldw	r4,-24(fp)
 20146a8:	103ee83a 	callr	r2
 20146ac:	e0bff915 	stw	r2,-28(fp)
 20146b0:	e0bff917 	ldw	r2,-28(fp)
 20146b4:	1004403a 	cmpge	r2,r2,zero
 20146b8:	1000071e 	bne	r2,zero,20146d8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 20146bc:	20147280 	call	2014728 <alt_get_errno>
 20146c0:	e0fff917 	ldw	r3,-28(fp)
 20146c4:	00c7c83a 	sub	r3,zero,r3
 20146c8:	10c00015 	stw	r3,0(r2)
        return -1;
 20146cc:	00bfffc4 	movi	r2,-1
 20146d0:	e0bffe15 	stw	r2,-8(fp)
 20146d4:	00000e06 	br	2014710 <write+0x108>
      }
      return rval;
 20146d8:	e0bff917 	ldw	r2,-28(fp)
 20146dc:	e0bffe15 	stw	r2,-8(fp)
 20146e0:	00000b06 	br	2014710 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 20146e4:	20147280 	call	2014728 <alt_get_errno>
 20146e8:	1007883a 	mov	r3,r2
 20146ec:	00800344 	movi	r2,13
 20146f0:	18800015 	stw	r2,0(r3)
 20146f4:	00000406 	br	2014708 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 20146f8:	20147280 	call	2014728 <alt_get_errno>
 20146fc:	1007883a 	mov	r3,r2
 2014700:	00801444 	movi	r2,81
 2014704:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2014708:	00bfffc4 	movi	r2,-1
 201470c:	e0bffe15 	stw	r2,-8(fp)
 2014710:	e0bffe17 	ldw	r2,-8(fp)
}
 2014714:	e037883a 	mov	sp,fp
 2014718:	dfc00117 	ldw	ra,4(sp)
 201471c:	df000017 	ldw	fp,0(sp)
 2014720:	dec00204 	addi	sp,sp,8
 2014724:	f800283a 	ret

02014728 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2014728:	defffd04 	addi	sp,sp,-12
 201472c:	dfc00215 	stw	ra,8(sp)
 2014730:	df000115 	stw	fp,4(sp)
 2014734:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2014738:	008080b4 	movhi	r2,514
 201473c:	108c2304 	addi	r2,r2,12428
 2014740:	10800017 	ldw	r2,0(r2)
 2014744:	1005003a 	cmpeq	r2,r2,zero
 2014748:	1000061e 	bne	r2,zero,2014764 <alt_get_errno+0x3c>
 201474c:	008080b4 	movhi	r2,514
 2014750:	108c2304 	addi	r2,r2,12428
 2014754:	10800017 	ldw	r2,0(r2)
 2014758:	103ee83a 	callr	r2
 201475c:	e0bfff15 	stw	r2,-4(fp)
 2014760:	00000306 	br	2014770 <alt_get_errno+0x48>
 2014764:	008080b4 	movhi	r2,514
 2014768:	1093c804 	addi	r2,r2,20256
 201476c:	e0bfff15 	stw	r2,-4(fp)
 2014770:	e0bfff17 	ldw	r2,-4(fp)
}
 2014774:	e037883a 	mov	sp,fp
 2014778:	dfc00117 	ldw	ra,4(sp)
 201477c:	df000017 	ldw	fp,0(sp)
 2014780:	dec00204 	addi	sp,sp,8
 2014784:	f800283a 	ret

02014788 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 2014788:	deffdf04 	addi	sp,sp,-132
 201478c:	dfc02015 	stw	ra,128(sp)
 2014790:	df001f15 	stw	fp,124(sp)
 2014794:	df001f04 	addi	fp,sp,124
 2014798:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 201479c:	e17fe204 	addi	r5,fp,-120
 20147a0:	01003fc4 	movi	r4,255
 20147a4:	201c5dc0 	call	201c5dc <OSTaskQuery>
 20147a8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 20147ac:	e0bffe83 	ldbu	r2,-6(fp)
 20147b0:	10803fcc 	andi	r2,r2,255
 20147b4:	1004c03a 	cmpne	r2,r2,zero
 20147b8:	1000191e 	bne	r2,zero,2014820 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 20147bc:	e0bfee83 	ldbu	r2,-70(fp)
 20147c0:	10803fcc 	andi	r2,r2,255
 20147c4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 20147c8:	d127be17 	ldw	r4,-24840(gp)
 20147cc:	e17ffd04 	addi	r5,fp,-12
 20147d0:	201ab280 	call	201ab28 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 20147d4:	e0bffe43 	ldbu	r2,-7(fp)
 20147d8:	10803fcc 	andi	r2,r2,255
 20147dc:	1005003a 	cmpeq	r2,r2,zero
 20147e0:	1000071e 	bne	r2,zero,2014800 <__env_lock+0x78>
 20147e4:	d0e01417 	ldw	r3,-32688(gp)
 20147e8:	e0bfe117 	ldw	r2,-124(fp)
 20147ec:	10c0041e 	bne	r2,r3,2014800 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 20147f0:	d0a7bd17 	ldw	r2,-24844(gp)
 20147f4:	10800044 	addi	r2,r2,1
 20147f8:	d0a7bd15 	stw	r2,-24844(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 20147fc:	00000806 	br	2014820 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 2014800:	d127be17 	ldw	r4,-24840(gp)
 2014804:	e1bffe84 	addi	r6,fp,-6
 2014808:	000b883a 	mov	r5,zero
 201480c:	201a6080 	call	201a608 <OSSemPend>
    locks  = 1;
 2014810:	00800044 	movi	r2,1
 2014814:	d0a7bd15 	stw	r2,-24844(gp)
    lockid = id;
 2014818:	e0bfe117 	ldw	r2,-124(fp)
 201481c:	d0a01415 	stw	r2,-32688(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2014820:	e037883a 	mov	sp,fp
 2014824:	dfc00117 	ldw	ra,4(sp)
 2014828:	df000017 	ldw	fp,0(sp)
 201482c:	dec00204 	addi	sp,sp,8
 2014830:	f800283a 	ret

02014834 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 2014834:	defffd04 	addi	sp,sp,-12
 2014838:	dfc00215 	stw	ra,8(sp)
 201483c:	df000115 	stw	fp,4(sp)
 2014840:	df000104 	addi	fp,sp,4
 2014844:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 2014848:	d0a7bd17 	ldw	r2,-24844(gp)
 201484c:	1005003a 	cmpeq	r2,r2,zero
 2014850:	10000a1e 	bne	r2,zero,201487c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 2014854:	d0a7bd17 	ldw	r2,-24844(gp)
 2014858:	10bfffc4 	addi	r2,r2,-1
 201485c:	d0a7bd15 	stw	r2,-24844(gp)
 2014860:	d0a7bd17 	ldw	r2,-24844(gp)
 2014864:	1004c03a 	cmpne	r2,r2,zero
 2014868:	1000041e 	bne	r2,zero,201487c <__env_unlock+0x48>
  {
    lockid = -1;
 201486c:	00bfffc4 	movi	r2,-1
 2014870:	d0a01415 	stw	r2,-32688(gp)
    OSSemPost( alt_envsem );
 2014874:	d127be17 	ldw	r4,-24840(gp)
 2014878:	201aa000 	call	201aa00 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 201487c:	e037883a 	mov	sp,fp
 2014880:	dfc00117 	ldw	ra,4(sp)
 2014884:	df000017 	ldw	fp,0(sp)
 2014888:	dec00204 	addi	sp,sp,8
 201488c:	f800283a 	ret

02014890 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 2014890:	deffdb04 	addi	sp,sp,-148
 2014894:	dfc02415 	stw	ra,144(sp)
 2014898:	df002315 	stw	fp,140(sp)
 201489c:	df002304 	addi	fp,sp,140
 20148a0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20148a4:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 20148a8:	008080b4 	movhi	r2,514
 20148ac:	1093d744 	addi	r2,r2,20317
 20148b0:	10800003 	ldbu	r2,0(r2)
 20148b4:	10803fcc 	andi	r2,r2,255
 20148b8:	10800058 	cmpnei	r2,r2,1
 20148bc:	1000311e 	bne	r2,zero,2014984 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 20148c0:	e17fe204 	addi	r5,fp,-120
 20148c4:	01003fc4 	movi	r4,255
 20148c8:	201c5dc0 	call	201c5dc <OSTaskQuery>
 20148cc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 20148d0:	e0bffe83 	ldbu	r2,-6(fp)
 20148d4:	10803fcc 	andi	r2,r2,255
 20148d8:	1004c03a 	cmpne	r2,r2,zero
 20148dc:	1000291e 	bne	r2,zero,2014984 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 20148e0:	e0bfee83 	ldbu	r2,-70(fp)
 20148e4:	10803fcc 	andi	r2,r2,255
 20148e8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 20148ec:	d127c017 	ldw	r4,-24832(gp)
 20148f0:	e17ffd04 	addi	r5,fp,-12
 20148f4:	201ab280 	call	201ab28 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20148f8:	0005303a 	rdctl	r2,status
 20148fc:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014900:	e0ffdf17 	ldw	r3,-132(fp)
 2014904:	00bfff84 	movi	r2,-2
 2014908:	1884703a 	and	r2,r3,r2
 201490c:	1001703a 	wrctl	status,r2
  
  return context;
 2014910:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 2014914:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 2014918:	e0bffd0b 	ldhu	r2,-12(fp)
 201491c:	10bfffcc 	andi	r2,r2,65535
 2014920:	1004c03a 	cmpne	r2,r2,zero
 2014924:	10000b1e 	bne	r2,zero,2014954 <__malloc_lock+0xc4>
 2014928:	d0e01517 	ldw	r3,-32684(gp)
 201492c:	e0bfe117 	ldw	r2,-124(fp)
 2014930:	10c0081e 	bne	r2,r3,2014954 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 2014934:	d0a7bf17 	ldw	r2,-24836(gp)
 2014938:	10800044 	addi	r2,r2,1
 201493c:	d0a7bf15 	stw	r2,-24836(gp)
 2014940:	e0bfe017 	ldw	r2,-128(fp)
 2014944:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014948:	e0bfde17 	ldw	r2,-136(fp)
 201494c:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 2014950:	00000c06 	br	2014984 <__malloc_lock+0xf4>
 2014954:	e0bfe017 	ldw	r2,-128(fp)
 2014958:	e0bfdd15 	stw	r2,-140(fp)
 201495c:	e0bfdd17 	ldw	r2,-140(fp)
 2014960:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 2014964:	d127c017 	ldw	r4,-24832(gp)
 2014968:	e1bffe84 	addi	r6,fp,-6
 201496c:	000b883a 	mov	r5,zero
 2014970:	201a6080 	call	201a608 <OSSemPend>
    locks  = 1;
 2014974:	00800044 	movi	r2,1
 2014978:	d0a7bf15 	stw	r2,-24836(gp)
    lockid = id;
 201497c:	e0bfe117 	ldw	r2,-124(fp)
 2014980:	d0a01515 	stw	r2,-32684(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2014984:	e037883a 	mov	sp,fp
 2014988:	dfc00117 	ldw	ra,4(sp)
 201498c:	df000017 	ldw	fp,0(sp)
 2014990:	dec00204 	addi	sp,sp,8
 2014994:	f800283a 	ret

02014998 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2014998:	defff804 	addi	sp,sp,-32
 201499c:	dfc00715 	stw	ra,28(sp)
 20149a0:	df000615 	stw	fp,24(sp)
 20149a4:	df000604 	addi	fp,sp,24
 20149a8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20149ac:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 20149b0:	008080b4 	movhi	r2,514
 20149b4:	1093d744 	addi	r2,r2,20317
 20149b8:	10800003 	ldbu	r2,0(r2)
 20149bc:	10803fcc 	andi	r2,r2,255
 20149c0:	10800058 	cmpnei	r2,r2,1
 20149c4:	1000231e 	bne	r2,zero,2014a54 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20149c8:	0005303a 	rdctl	r2,status
 20149cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20149d0:	e0fffd17 	ldw	r3,-12(fp)
 20149d4:	00bfff84 	movi	r2,-2
 20149d8:	1884703a 	and	r2,r3,r2
 20149dc:	1001703a 	wrctl	status,r2
  
  return context;
 20149e0:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 20149e4:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 20149e8:	d0a7bf17 	ldw	r2,-24836(gp)
 20149ec:	1004c03a 	cmpne	r2,r2,zero
 20149f0:	1000051e 	bne	r2,zero,2014a08 <__malloc_unlock+0x70>
 20149f4:	e0bffe17 	ldw	r2,-8(fp)
 20149f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20149fc:	e0bffc17 	ldw	r2,-16(fp)
 2014a00:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 2014a04:	00001306 	br	2014a54 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 2014a08:	d0a7bf17 	ldw	r2,-24836(gp)
 2014a0c:	10bfffc4 	addi	r2,r2,-1
 2014a10:	d0a7bf15 	stw	r2,-24836(gp)
 2014a14:	d0a7bf17 	ldw	r2,-24836(gp)
 2014a18:	1004c03a 	cmpne	r2,r2,zero
 2014a1c:	1000091e 	bne	r2,zero,2014a44 <__malloc_unlock+0xac>
  {
    lockid = -1;
 2014a20:	00bfffc4 	movi	r2,-1
 2014a24:	d0a01515 	stw	r2,-32684(gp)
 2014a28:	e0bffe17 	ldw	r2,-8(fp)
 2014a2c:	e0bffb15 	stw	r2,-20(fp)
 2014a30:	e0bffb17 	ldw	r2,-20(fp)
 2014a34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 2014a38:	d127c017 	ldw	r4,-24832(gp)
 2014a3c:	201aa000 	call	201aa00 <OSSemPost>
 2014a40:	00000406 	br	2014a54 <__malloc_unlock+0xbc>
 2014a44:	e0bffe17 	ldw	r2,-8(fp)
 2014a48:	e0bffa15 	stw	r2,-24(fp)
 2014a4c:	e0bffa17 	ldw	r2,-24(fp)
 2014a50:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2014a54:	e037883a 	mov	sp,fp
 2014a58:	dfc00117 	ldw	ra,4(sp)
 2014a5c:	df000017 	ldw	fp,0(sp)
 2014a60:	dec00204 	addi	sp,sp,8
 2014a64:	f800283a 	ret

02014a68 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2014a68:	defff604 	addi	sp,sp,-40
 2014a6c:	dfc00915 	stw	ra,36(sp)
 2014a70:	df000815 	stw	fp,32(sp)
 2014a74:	df000804 	addi	fp,sp,32
 2014a78:	e13ffc15 	stw	r4,-16(fp)
 2014a7c:	e17ffd15 	stw	r5,-12(fp)
 2014a80:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2014a84:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2014a88:	e0bffe17 	ldw	r2,-8(fp)
 2014a8c:	1004c03a 	cmpne	r2,r2,zero
 2014a90:	1000021e 	bne	r2,zero,2014a9c <OSEventNameGet+0x34>
        return (0);
 2014a94:	e03fff15 	stw	zero,-4(fp)
 2014a98:	00003906 	br	2014b80 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2014a9c:	e0bffc17 	ldw	r2,-16(fp)
 2014aa0:	1004c03a 	cmpne	r2,r2,zero
 2014aa4:	1000051e 	bne	r2,zero,2014abc <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 2014aa8:	e0fffe17 	ldw	r3,-8(fp)
 2014aac:	00800104 	movi	r2,4
 2014ab0:	18800005 	stb	r2,0(r3)
        return (0);
 2014ab4:	e03fff15 	stw	zero,-4(fp)
 2014ab8:	00003106 	br	2014b80 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2014abc:	e0bffd17 	ldw	r2,-12(fp)
 2014ac0:	1004c03a 	cmpne	r2,r2,zero
 2014ac4:	1000051e 	bne	r2,zero,2014adc <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 2014ac8:	e0fffe17 	ldw	r3,-8(fp)
 2014acc:	00800304 	movi	r2,12
 2014ad0:	18800005 	stb	r2,0(r3)
        return (0);
 2014ad4:	e03fff15 	stw	zero,-4(fp)
 2014ad8:	00002906 	br	2014b80 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2014adc:	d0a7cf03 	ldbu	r2,-24772(gp)
 2014ae0:	10803fcc 	andi	r2,r2,255
 2014ae4:	1005003a 	cmpeq	r2,r2,zero
 2014ae8:	1000051e 	bne	r2,zero,2014b00 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 2014aec:	e0fffe17 	ldw	r3,-8(fp)
 2014af0:	00800444 	movi	r2,17
 2014af4:	18800005 	stb	r2,0(r3)
        return (0);
 2014af8:	e03fff15 	stw	zero,-4(fp)
 2014afc:	00002006 	br	2014b80 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 2014b00:	e0bffc17 	ldw	r2,-16(fp)
 2014b04:	10800003 	ldbu	r2,0(r2)
 2014b08:	10803fcc 	andi	r2,r2,255
 2014b0c:	10bfffc4 	addi	r2,r2,-1
 2014b10:	10800128 	cmpgeui	r2,r2,4
 2014b14:	1000161e 	bne	r2,zero,2014b70 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014b18:	0005303a 	rdctl	r2,status
 2014b1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014b20:	e0fff917 	ldw	r3,-28(fp)
 2014b24:	00bfff84 	movi	r2,-2
 2014b28:	1884703a 	and	r2,r3,r2
 2014b2c:	1001703a 	wrctl	status,r2
  
  return context;
 2014b30:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 2014b34:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 2014b38:	e0bffc17 	ldw	r2,-16(fp)
 2014b3c:	11400384 	addi	r5,r2,14
 2014b40:	e13ffd17 	ldw	r4,-12(fp)
 2014b44:	20165ec0 	call	20165ec <OS_StrCopy>
 2014b48:	e0bffb05 	stb	r2,-20(fp)
 2014b4c:	e0bffa17 	ldw	r2,-24(fp)
 2014b50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014b54:	e0bff817 	ldw	r2,-32(fp)
 2014b58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2014b5c:	e0bffe17 	ldw	r2,-8(fp)
 2014b60:	10000005 	stb	zero,0(r2)
    return (len);
 2014b64:	e0bffb03 	ldbu	r2,-20(fp)
 2014b68:	e0bfff15 	stw	r2,-4(fp)
 2014b6c:	00000406 	br	2014b80 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2014b70:	e0fffe17 	ldw	r3,-8(fp)
 2014b74:	00800044 	movi	r2,1
 2014b78:	18800005 	stb	r2,0(r3)
             return (0);
 2014b7c:	e03fff15 	stw	zero,-4(fp)
 2014b80:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 2014b84:	e037883a 	mov	sp,fp
 2014b88:	dfc00117 	ldw	ra,4(sp)
 2014b8c:	df000017 	ldw	fp,0(sp)
 2014b90:	dec00204 	addi	sp,sp,8
 2014b94:	f800283a 	ret

02014b98 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 2014b98:	defff604 	addi	sp,sp,-40
 2014b9c:	dfc00915 	stw	ra,36(sp)
 2014ba0:	df000815 	stw	fp,32(sp)
 2014ba4:	df000804 	addi	fp,sp,32
 2014ba8:	e13ffd15 	stw	r4,-12(fp)
 2014bac:	e17ffe15 	stw	r5,-8(fp)
 2014bb0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2014bb4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2014bb8:	e0bfff17 	ldw	r2,-4(fp)
 2014bbc:	1005003a 	cmpeq	r2,r2,zero
 2014bc0:	1000411e 	bne	r2,zero,2014cc8 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2014bc4:	e0bffd17 	ldw	r2,-12(fp)
 2014bc8:	1004c03a 	cmpne	r2,r2,zero
 2014bcc:	1000041e 	bne	r2,zero,2014be0 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 2014bd0:	e0ffff17 	ldw	r3,-4(fp)
 2014bd4:	00800104 	movi	r2,4
 2014bd8:	18800005 	stb	r2,0(r3)
        return;
 2014bdc:	00003a06 	br	2014cc8 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2014be0:	e0bffe17 	ldw	r2,-8(fp)
 2014be4:	1004c03a 	cmpne	r2,r2,zero
 2014be8:	1000041e 	bne	r2,zero,2014bfc <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 2014bec:	e0ffff17 	ldw	r3,-4(fp)
 2014bf0:	00800304 	movi	r2,12
 2014bf4:	18800005 	stb	r2,0(r3)
        return;
 2014bf8:	00003306 	br	2014cc8 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2014bfc:	d0a7cf03 	ldbu	r2,-24772(gp)
 2014c00:	10803fcc 	andi	r2,r2,255
 2014c04:	1005003a 	cmpeq	r2,r2,zero
 2014c08:	1000041e 	bne	r2,zero,2014c1c <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 2014c0c:	e0ffff17 	ldw	r3,-4(fp)
 2014c10:	00800484 	movi	r2,18
 2014c14:	18800005 	stb	r2,0(r3)
        return;
 2014c18:	00002b06 	br	2014cc8 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 2014c1c:	e0bffd17 	ldw	r2,-12(fp)
 2014c20:	10800003 	ldbu	r2,0(r2)
 2014c24:	10803fcc 	andi	r2,r2,255
 2014c28:	10bfffc4 	addi	r2,r2,-1
 2014c2c:	10800128 	cmpgeui	r2,r2,4
 2014c30:	10000f1e 	bne	r2,zero,2014c70 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014c34:	0005303a 	rdctl	r2,status
 2014c38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014c3c:	e0fffa17 	ldw	r3,-24(fp)
 2014c40:	00bfff84 	movi	r2,-2
 2014c44:	1884703a 	and	r2,r3,r2
 2014c48:	1001703a 	wrctl	status,r2
  
  return context;
 2014c4c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 2014c50:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 2014c54:	e13ffe17 	ldw	r4,-8(fp)
 2014c58:	201666c0 	call	201666c <OS_StrLen>
 2014c5c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 2014c60:	e0bffc03 	ldbu	r2,-16(fp)
 2014c64:	10800828 	cmpgeui	r2,r2,32
 2014c68:	1000051e 	bne	r2,zero,2014c80 <OSEventNameSet+0xe8>
 2014c6c:	00000c06 	br	2014ca0 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 2014c70:	e0ffff17 	ldw	r3,-4(fp)
 2014c74:	00800044 	movi	r2,1
 2014c78:	18800005 	stb	r2,0(r3)
             return;
 2014c7c:	00001206 	br	2014cc8 <OSEventNameSet+0x130>
 2014c80:	e0bffb17 	ldw	r2,-20(fp)
 2014c84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014c88:	e0bff917 	ldw	r2,-28(fp)
 2014c8c:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 2014c90:	e0ffff17 	ldw	r3,-4(fp)
 2014c94:	008002c4 	movi	r2,11
 2014c98:	18800005 	stb	r2,0(r3)
        return;
 2014c9c:	00000a06 	br	2014cc8 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 2014ca0:	e0bffd17 	ldw	r2,-12(fp)
 2014ca4:	11000384 	addi	r4,r2,14
 2014ca8:	e17ffe17 	ldw	r5,-8(fp)
 2014cac:	20165ec0 	call	20165ec <OS_StrCopy>
 2014cb0:	e0bffb17 	ldw	r2,-20(fp)
 2014cb4:	e0bff815 	stw	r2,-32(fp)
 2014cb8:	e0bff817 	ldw	r2,-32(fp)
 2014cbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2014cc0:	e0bfff17 	ldw	r2,-4(fp)
 2014cc4:	10000005 	stb	zero,0(r2)
}
 2014cc8:	e037883a 	mov	sp,fp
 2014ccc:	dfc00117 	ldw	ra,4(sp)
 2014cd0:	df000017 	ldw	fp,0(sp)
 2014cd4:	dec00204 	addi	sp,sp,8
 2014cd8:	f800283a 	ret

02014cdc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 2014cdc:	deffe704 	addi	sp,sp,-100
 2014ce0:	dfc01815 	stw	ra,96(sp)
 2014ce4:	df001715 	stw	fp,92(sp)
 2014ce8:	df001704 	addi	fp,sp,92
 2014cec:	e13ff615 	stw	r4,-40(fp)
 2014cf0:	e17ff715 	stw	r5,-36(fp)
 2014cf4:	e1bff815 	stw	r6,-32(fp)
 2014cf8:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 2014cfc:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 2014d00:	e0800217 	ldw	r2,8(fp)
 2014d04:	1004c03a 	cmpne	r2,r2,zero
 2014d08:	1000021e 	bne	r2,zero,2014d14 <OSEventPendMulti+0x38>
        return (0);
 2014d0c:	e03fff15 	stw	zero,-4(fp)
 2014d10:	00019906 	br	2015378 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 2014d14:	e0bff617 	ldw	r2,-40(fp)
 2014d18:	1004c03a 	cmpne	r2,r2,zero
 2014d1c:	1000051e 	bne	r2,zero,2014d34 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 2014d20:	e0c00217 	ldw	r3,8(fp)
 2014d24:	00800104 	movi	r2,4
 2014d28:	18800005 	stb	r2,0(r3)
        return (0);
 2014d2c:	e03fff15 	stw	zero,-4(fp)
 2014d30:	00019106 	br	2015378 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 2014d34:	e0bff717 	ldw	r2,-36(fp)
 2014d38:	1004c03a 	cmpne	r2,r2,zero
 2014d3c:	1000051e 	bne	r2,zero,2014d54 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 2014d40:	e0c00217 	ldw	r3,8(fp)
 2014d44:	00800104 	movi	r2,4
 2014d48:	18800005 	stb	r2,0(r3)
        return (0);
 2014d4c:	e03fff15 	stw	zero,-4(fp)
 2014d50:	00018906 	br	2015378 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 2014d54:	e0bff817 	ldw	r2,-32(fp)
 2014d58:	1004c03a 	cmpne	r2,r2,zero
 2014d5c:	1000051e 	bne	r2,zero,2014d74 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 2014d60:	e0c00217 	ldw	r3,8(fp)
 2014d64:	00800104 	movi	r2,4
 2014d68:	18800005 	stb	r2,0(r3)
        return (0);
 2014d6c:	e03fff15 	stw	zero,-4(fp)
 2014d70:	00018106 	br	2015378 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 2014d74:	e0bff717 	ldw	r2,-36(fp)
 2014d78:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 2014d7c:	e0bff617 	ldw	r2,-40(fp)
 2014d80:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 2014d84:	e0bff517 	ldw	r2,-44(fp)
 2014d88:	10800017 	ldw	r2,0(r2)
 2014d8c:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 2014d90:	00001806 	br	2014df4 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 2014d94:	e0bff417 	ldw	r2,-48(fp)
 2014d98:	10800003 	ldbu	r2,0(r2)
 2014d9c:	10803fcc 	andi	r2,r2,255
 2014da0:	e0bffe15 	stw	r2,-8(fp)
 2014da4:	e0fffe17 	ldw	r3,-8(fp)
 2014da8:	188000a0 	cmpeqi	r2,r3,2
 2014dac:	10000b1e 	bne	r2,zero,2014ddc <OSEventPendMulti+0x100>
 2014db0:	e0fffe17 	ldw	r3,-8(fp)
 2014db4:	188000e0 	cmpeqi	r2,r3,3
 2014db8:	1000081e 	bne	r2,zero,2014ddc <OSEventPendMulti+0x100>
 2014dbc:	e0fffe17 	ldw	r3,-8(fp)
 2014dc0:	18800060 	cmpeqi	r2,r3,1
 2014dc4:	1000051e 	bne	r2,zero,2014ddc <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 2014dc8:	e0c00217 	ldw	r3,8(fp)
 2014dcc:	00800044 	movi	r2,1
 2014dd0:	18800005 	stb	r2,0(r3)
                 return (0);
 2014dd4:	e03fff15 	stw	zero,-4(fp)
 2014dd8:	00016706 	br	2015378 <OSEventPendMulti+0x69c>
        }
        pevents++;
 2014ddc:	e0bff517 	ldw	r2,-44(fp)
 2014de0:	10800104 	addi	r2,r2,4
 2014de4:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 2014de8:	e0bff517 	ldw	r2,-44(fp)
 2014dec:	10800017 	ldw	r2,0(r2)
 2014df0:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 2014df4:	e0bff417 	ldw	r2,-48(fp)
 2014df8:	1004c03a 	cmpne	r2,r2,zero
 2014dfc:	103fe51e 	bne	r2,zero,2014d94 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 2014e00:	d0a7cf03 	ldbu	r2,-24772(gp)
 2014e04:	10803fcc 	andi	r2,r2,255
 2014e08:	1005003a 	cmpeq	r2,r2,zero
 2014e0c:	1000051e 	bne	r2,zero,2014e24 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 2014e10:	e0c00217 	ldw	r3,8(fp)
 2014e14:	00800084 	movi	r2,2
 2014e18:	18800005 	stb	r2,0(r3)
        return (0);
 2014e1c:	e03fff15 	stw	zero,-4(fp)
 2014e20:	00015506 	br	2015378 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 2014e24:	d0a7c103 	ldbu	r2,-24828(gp)
 2014e28:	10803fcc 	andi	r2,r2,255
 2014e2c:	1005003a 	cmpeq	r2,r2,zero
 2014e30:	1000051e 	bne	r2,zero,2014e48 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 2014e34:	e0c00217 	ldw	r3,8(fp)
 2014e38:	00800344 	movi	r2,13
 2014e3c:	18800005 	stb	r2,0(r3)
        return (0);
 2014e40:	e03fff15 	stw	zero,-4(fp)
 2014e44:	00014c06 	br	2015378 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014e48:	0005303a 	rdctl	r2,status
 2014e4c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014e50:	e0ffef17 	ldw	r3,-68(fp)
 2014e54:	00bfff84 	movi	r2,-2
 2014e58:	1884703a 	and	r2,r3,r2
 2014e5c:	1001703a 	wrctl	status,r2
  
  return context;
 2014e60:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2014e64:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 2014e68:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 2014e6c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 2014e70:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 2014e74:	e0bff617 	ldw	r2,-40(fp)
 2014e78:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 2014e7c:	e0bff517 	ldw	r2,-44(fp)
 2014e80:	10800017 	ldw	r2,0(r2)
 2014e84:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2014e88:	00008f06 	br	20150c8 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 2014e8c:	e0bff417 	ldw	r2,-48(fp)
 2014e90:	10800003 	ldbu	r2,0(r2)
 2014e94:	10803fcc 	andi	r2,r2,255
 2014e98:	e0bffd15 	stw	r2,-12(fp)
 2014e9c:	e0fffd17 	ldw	r3,-12(fp)
 2014ea0:	188000a0 	cmpeqi	r2,r3,2
 2014ea4:	1000441e 	bne	r2,zero,2014fb8 <OSEventPendMulti+0x2dc>
 2014ea8:	e0fffd17 	ldw	r3,-12(fp)
 2014eac:	188000e0 	cmpeqi	r2,r3,3
 2014eb0:	1000041e 	bne	r2,zero,2014ec4 <OSEventPendMulti+0x1e8>
 2014eb4:	e0fffd17 	ldw	r3,-12(fp)
 2014eb8:	18800060 	cmpeqi	r2,r3,1
 2014ebc:	1000211e 	bne	r2,zero,2014f44 <OSEventPendMulti+0x268>
 2014ec0:	00006f06 	br	2015080 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 2014ec4:	e0bff417 	ldw	r2,-48(fp)
 2014ec8:	1080020b 	ldhu	r2,8(r2)
 2014ecc:	10bfffcc 	andi	r2,r2,65535
 2014ed0:	1005003a 	cmpeq	r2,r2,zero
 2014ed4:	1000171e 	bne	r2,zero,2014f34 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 2014ed8:	e0bff417 	ldw	r2,-48(fp)
 2014edc:	1080020b 	ldhu	r2,8(r2)
 2014ee0:	10bfffc4 	addi	r2,r2,-1
 2014ee4:	1007883a 	mov	r3,r2
 2014ee8:	e0bff417 	ldw	r2,-48(fp)
 2014eec:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 2014ef0:	e0fff717 	ldw	r3,-36(fp)
 2014ef4:	e0bff417 	ldw	r2,-48(fp)
 2014ef8:	18800015 	stw	r2,0(r3)
 2014efc:	e0bff717 	ldw	r2,-36(fp)
 2014f00:	10800104 	addi	r2,r2,4
 2014f04:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 2014f08:	00800044 	movi	r2,1
 2014f0c:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 2014f10:	e0bff817 	ldw	r2,-32(fp)
 2014f14:	10000015 	stw	zero,0(r2)
 2014f18:	e0bff817 	ldw	r2,-32(fp)
 2014f1c:	10800104 	addi	r2,r2,4
 2014f20:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 2014f24:	e0bff18b 	ldhu	r2,-58(fp)
 2014f28:	10800044 	addi	r2,r2,1
 2014f2c:	e0bff18d 	sth	r2,-58(fp)
 2014f30:	00005f06 	br	20150b0 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 2014f34:	e0bff103 	ldbu	r2,-60(fp)
 2014f38:	10800054 	ori	r2,r2,1
 2014f3c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 2014f40:	00005b06 	br	20150b0 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 2014f44:	e0bff417 	ldw	r2,-48(fp)
 2014f48:	10800117 	ldw	r2,4(r2)
 2014f4c:	1005003a 	cmpeq	r2,r2,zero
 2014f50:	1000151e 	bne	r2,zero,2014fa8 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 2014f54:	e0bff417 	ldw	r2,-48(fp)
 2014f58:	10c00117 	ldw	r3,4(r2)
 2014f5c:	e0bff817 	ldw	r2,-32(fp)
 2014f60:	10c00015 	stw	r3,0(r2)
 2014f64:	e0bff817 	ldw	r2,-32(fp)
 2014f68:	10800104 	addi	r2,r2,4
 2014f6c:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 2014f70:	e0bff417 	ldw	r2,-48(fp)
 2014f74:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 2014f78:	e0fff717 	ldw	r3,-36(fp)
 2014f7c:	e0bff417 	ldw	r2,-48(fp)
 2014f80:	18800015 	stw	r2,0(r3)
 2014f84:	e0bff717 	ldw	r2,-36(fp)
 2014f88:	10800104 	addi	r2,r2,4
 2014f8c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 2014f90:	00800044 	movi	r2,1
 2014f94:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 2014f98:	e0bff18b 	ldhu	r2,-58(fp)
 2014f9c:	10800044 	addi	r2,r2,1
 2014fa0:	e0bff18d 	sth	r2,-58(fp)
 2014fa4:	00004206 	br	20150b0 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 2014fa8:	e0bff103 	ldbu	r2,-60(fp)
 2014fac:	10800094 	ori	r2,r2,2
 2014fb0:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 2014fb4:	00003e06 	br	20150b0 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 2014fb8:	e0bff417 	ldw	r2,-48(fp)
 2014fbc:	10800117 	ldw	r2,4(r2)
 2014fc0:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 2014fc4:	e0bff317 	ldw	r2,-52(fp)
 2014fc8:	1080058b 	ldhu	r2,22(r2)
 2014fcc:	10bfffcc 	andi	r2,r2,65535
 2014fd0:	1005003a 	cmpeq	r2,r2,zero
 2014fd4:	1000261e 	bne	r2,zero,2015070 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 2014fd8:	e0bff317 	ldw	r2,-52(fp)
 2014fdc:	11000417 	ldw	r4,16(r2)
 2014fe0:	20c00017 	ldw	r3,0(r4)
 2014fe4:	e0bff817 	ldw	r2,-32(fp)
 2014fe8:	10c00015 	stw	r3,0(r2)
 2014fec:	e0bff817 	ldw	r2,-32(fp)
 2014ff0:	10800104 	addi	r2,r2,4
 2014ff4:	e0bff815 	stw	r2,-32(fp)
 2014ff8:	20c00104 	addi	r3,r4,4
 2014ffc:	e0bff317 	ldw	r2,-52(fp)
 2015000:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 2015004:	e0bff317 	ldw	r2,-52(fp)
 2015008:	10c00417 	ldw	r3,16(r2)
 201500c:	e0bff317 	ldw	r2,-52(fp)
 2015010:	10800217 	ldw	r2,8(r2)
 2015014:	1880041e 	bne	r3,r2,2015028 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 2015018:	e0bff317 	ldw	r2,-52(fp)
 201501c:	10c00117 	ldw	r3,4(r2)
 2015020:	e0bff317 	ldw	r2,-52(fp)
 2015024:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 2015028:	e0bff317 	ldw	r2,-52(fp)
 201502c:	1080058b 	ldhu	r2,22(r2)
 2015030:	10bfffc4 	addi	r2,r2,-1
 2015034:	1007883a 	mov	r3,r2
 2015038:	e0bff317 	ldw	r2,-52(fp)
 201503c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 2015040:	e0fff717 	ldw	r3,-36(fp)
 2015044:	e0bff417 	ldw	r2,-48(fp)
 2015048:	18800015 	stw	r2,0(r3)
 201504c:	e0bff717 	ldw	r2,-36(fp)
 2015050:	10800104 	addi	r2,r2,4
 2015054:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 2015058:	00800044 	movi	r2,1
 201505c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 2015060:	e0bff18b 	ldhu	r2,-58(fp)
 2015064:	10800044 	addi	r2,r2,1
 2015068:	e0bff18d 	sth	r2,-58(fp)
 201506c:	00001006 	br	20150b0 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 2015070:	e0bff103 	ldbu	r2,-60(fp)
 2015074:	10800114 	ori	r2,r2,4
 2015078:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 201507c:	00000c06 	br	20150b0 <OSEventPendMulti+0x3d4>
 2015080:	e0bff017 	ldw	r2,-64(fp)
 2015084:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015088:	e0bfee17 	ldw	r2,-72(fp)
 201508c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 2015090:	e0bff717 	ldw	r2,-36(fp)
 2015094:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 2015098:	e0c00217 	ldw	r3,8(fp)
 201509c:	00800044 	movi	r2,1
 20150a0:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 20150a4:	e0bff18b 	ldhu	r2,-58(fp)
 20150a8:	e0bfff15 	stw	r2,-4(fp)
 20150ac:	0000b206 	br	2015378 <OSEventPendMulti+0x69c>
        }
        pevents++;
 20150b0:	e0bff517 	ldw	r2,-44(fp)
 20150b4:	10800104 	addi	r2,r2,4
 20150b8:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 20150bc:	e0bff517 	ldw	r2,-44(fp)
 20150c0:	10800017 	ldw	r2,0(r2)
 20150c4:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 20150c8:	e0bff417 	ldw	r2,-48(fp)
 20150cc:	1004c03a 	cmpne	r2,r2,zero
 20150d0:	103f6e1e 	bne	r2,zero,2014e8c <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 20150d4:	e0bff203 	ldbu	r2,-56(fp)
 20150d8:	10800058 	cmpnei	r2,r2,1
 20150dc:	10000b1e 	bne	r2,zero,201510c <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 20150e0:	e0bff717 	ldw	r2,-36(fp)
 20150e4:	10000015 	stw	zero,0(r2)
 20150e8:	e0bff017 	ldw	r2,-64(fp)
 20150ec:	e0bfed15 	stw	r2,-76(fp)
 20150f0:	e0bfed17 	ldw	r2,-76(fp)
 20150f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 20150f8:	e0800217 	ldw	r2,8(fp)
 20150fc:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 2015100:	e0fff18b 	ldhu	r3,-58(fp)
 2015104:	e0ffff15 	stw	r3,-4(fp)
 2015108:	00009b06 	br	2015378 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 201510c:	d127d017 	ldw	r4,-24768(gp)
 2015110:	d0a7d017 	ldw	r2,-24768(gp)
 2015114:	10c00c03 	ldbu	r3,48(r2)
 2015118:	e0bff103 	ldbu	r2,-60(fp)
 201511c:	1884b03a 	or	r2,r3,r2
 2015120:	1007883a 	mov	r3,r2
 2015124:	00bfe004 	movi	r2,-128
 2015128:	1884b03a 	or	r2,r3,r2
 201512c:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2015130:	d0a7d017 	ldw	r2,-24768(gp)
 2015134:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 2015138:	d0e7d017 	ldw	r3,-24768(gp)
 201513c:	e0bff90b 	ldhu	r2,-28(fp)
 2015140:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 2015144:	e13ff617 	ldw	r4,-40(fp)
 2015148:	2015d0c0 	call	2015d0c <OS_EventTaskWaitMulti>
 201514c:	e0bff017 	ldw	r2,-64(fp)
 2015150:	e0bfec15 	stw	r2,-80(fp)
 2015154:	e0bfec17 	ldw	r2,-80(fp)
 2015158:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 201515c:	20164a80 	call	20164a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015160:	0005303a 	rdctl	r2,status
 2015164:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015168:	e0ffeb17 	ldw	r3,-84(fp)
 201516c:	00bfff84 	movi	r2,-2
 2015170:	1884703a 	and	r2,r3,r2
 2015174:	1001703a 	wrctl	status,r2
  
  return context;
 2015178:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 201517c:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 2015180:	d0a7d017 	ldw	r2,-24768(gp)
 2015184:	10800c43 	ldbu	r2,49(r2)
 2015188:	10803fcc 	andi	r2,r2,255
 201518c:	e0bffc15 	stw	r2,-16(fp)
 2015190:	e0fffc17 	ldw	r3,-16(fp)
 2015194:	1805003a 	cmpeq	r2,r3,zero
 2015198:	1000041e 	bne	r2,zero,20151ac <OSEventPendMulti+0x4d0>
 201519c:	e0fffc17 	ldw	r3,-16(fp)
 20151a0:	188000a0 	cmpeqi	r2,r3,2
 20151a4:	1000011e 	bne	r2,zero,20151ac <OSEventPendMulti+0x4d0>
 20151a8:	00001906 	br	2015210 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 20151ac:	d0a7d017 	ldw	r2,-24768(gp)
 20151b0:	10800717 	ldw	r2,28(r2)
 20151b4:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 20151b8:	e0bff417 	ldw	r2,-48(fp)
 20151bc:	1005003a 	cmpeq	r2,r2,zero
 20151c0:	10000c1e 	bne	r2,zero,20151f4 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 20151c4:	e0fff717 	ldw	r3,-36(fp)
 20151c8:	e0bff417 	ldw	r2,-48(fp)
 20151cc:	18800015 	stw	r2,0(r3)
 20151d0:	e0bff717 	ldw	r2,-36(fp)
 20151d4:	10800104 	addi	r2,r2,4
 20151d8:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 20151dc:	e0bff717 	ldw	r2,-36(fp)
 20151e0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 20151e4:	e0bff18b 	ldhu	r2,-58(fp)
 20151e8:	10800044 	addi	r2,r2,1
 20151ec:	e0bff18d 	sth	r2,-58(fp)
 20151f0:	00000a06 	br	201521c <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 20151f4:	d0a7d017 	ldw	r2,-24768(gp)
 20151f8:	00c00044 	movi	r3,1
 20151fc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2015200:	d127d017 	ldw	r4,-24768(gp)
 2015204:	e17ff617 	ldw	r5,-40(fp)
 2015208:	2015f180 	call	2015f18 <OS_EventTaskRemoveMulti>
             }
			 break;
 201520c:	00000306 	br	201521c <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2015210:	d127d017 	ldw	r4,-24768(gp)
 2015214:	e17ff617 	ldw	r5,-40(fp)
 2015218:	2015f180 	call	2015f18 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 201521c:	d0a7d017 	ldw	r2,-24768(gp)
 2015220:	10800c43 	ldbu	r2,49(r2)
 2015224:	10803fcc 	andi	r2,r2,255
 2015228:	e0bffb15 	stw	r2,-20(fp)
 201522c:	e0fffb17 	ldw	r3,-20(fp)
 2015230:	1805003a 	cmpeq	r2,r3,zero
 2015234:	1000041e 	bne	r2,zero,2015248 <OSEventPendMulti+0x56c>
 2015238:	e0fffb17 	ldw	r3,-20(fp)
 201523c:	188000a0 	cmpeqi	r2,r3,2
 2015240:	10002c1e 	bne	r2,zero,20152f4 <OSEventPendMulti+0x618>
 2015244:	00003406 	br	2015318 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 2015248:	e0bff417 	ldw	r2,-48(fp)
 201524c:	10800003 	ldbu	r2,0(r2)
 2015250:	10803fcc 	andi	r2,r2,255
 2015254:	e0bffa15 	stw	r2,-24(fp)
 2015258:	e0fffa17 	ldw	r3,-24(fp)
 201525c:	18800050 	cmplti	r2,r3,1
 2015260:	1000151e 	bne	r2,zero,20152b8 <OSEventPendMulti+0x5dc>
 2015264:	e0fffa17 	ldw	r3,-24(fp)
 2015268:	188000d0 	cmplti	r2,r3,3
 201526c:	10000a1e 	bne	r2,zero,2015298 <OSEventPendMulti+0x5bc>
 2015270:	e0fffa17 	ldw	r3,-24(fp)
 2015274:	188000e0 	cmpeqi	r2,r3,3
 2015278:	1000011e 	bne	r2,zero,2015280 <OSEventPendMulti+0x5a4>
 201527c:	00000e06 	br	20152b8 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 2015280:	e0bff817 	ldw	r2,-32(fp)
 2015284:	10000015 	stw	zero,0(r2)
 2015288:	e0bff817 	ldw	r2,-32(fp)
 201528c:	10800104 	addi	r2,r2,4
 2015290:	e0bff815 	stw	r2,-32(fp)
                      break;
 2015294:	00001406 	br	20152e8 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 2015298:	d0a7d017 	ldw	r2,-24768(gp)
 201529c:	10c00917 	ldw	r3,36(r2)
 20152a0:	e0bff817 	ldw	r2,-32(fp)
 20152a4:	10c00015 	stw	r3,0(r2)
 20152a8:	e0bff817 	ldw	r2,-32(fp)
 20152ac:	10800104 	addi	r2,r2,4
 20152b0:	e0bff815 	stw	r2,-32(fp)
                      break;
 20152b4:	00000c06 	br	20152e8 <OSEventPendMulti+0x60c>
 20152b8:	e0bff017 	ldw	r2,-64(fp)
 20152bc:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20152c0:	e0bfea17 	ldw	r2,-88(fp)
 20152c4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 20152c8:	e0bff717 	ldw	r2,-36(fp)
 20152cc:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 20152d0:	e0c00217 	ldw	r3,8(fp)
 20152d4:	00800044 	movi	r2,1
 20152d8:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 20152dc:	e0bff18b 	ldhu	r2,-58(fp)
 20152e0:	e0bfff15 	stw	r2,-4(fp)
 20152e4:	00002406 	br	2015378 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 20152e8:	e0800217 	ldw	r2,8(fp)
 20152ec:	10000005 	stb	zero,0(r2)
             break;
 20152f0:	00001106 	br	2015338 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 20152f4:	e0bff817 	ldw	r2,-32(fp)
 20152f8:	10000015 	stw	zero,0(r2)
 20152fc:	e0bff817 	ldw	r2,-32(fp)
 2015300:	10800104 	addi	r2,r2,4
 2015304:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 2015308:	e0c00217 	ldw	r3,8(fp)
 201530c:	00800384 	movi	r2,14
 2015310:	18800005 	stb	r2,0(r3)
             break;
 2015314:	00000806 	br	2015338 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 2015318:	e0bff817 	ldw	r2,-32(fp)
 201531c:	10000015 	stw	zero,0(r2)
 2015320:	e0bff817 	ldw	r2,-32(fp)
 2015324:	10800104 	addi	r2,r2,4
 2015328:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 201532c:	e0c00217 	ldw	r3,8(fp)
 2015330:	00800284 	movi	r2,10
 2015334:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 2015338:	d0a7d017 	ldw	r2,-24768(gp)
 201533c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 2015340:	d0a7d017 	ldw	r2,-24768(gp)
 2015344:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 2015348:	d0a7d017 	ldw	r2,-24768(gp)
 201534c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2015350:	d0a7d017 	ldw	r2,-24768(gp)
 2015354:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 2015358:	d0a7d017 	ldw	r2,-24768(gp)
 201535c:	10000915 	stw	zero,36(r2)
 2015360:	e0bff017 	ldw	r2,-64(fp)
 2015364:	e0bfe915 	stw	r2,-92(fp)
 2015368:	e0bfe917 	ldw	r2,-92(fp)
 201536c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 2015370:	e0fff18b 	ldhu	r3,-58(fp)
 2015374:	e0ffff15 	stw	r3,-4(fp)
 2015378:	e0bfff17 	ldw	r2,-4(fp)
}
 201537c:	e037883a 	mov	sp,fp
 2015380:	dfc00117 	ldw	ra,4(sp)
 2015384:	df000017 	ldw	fp,0(sp)
 2015388:	dec00204 	addi	sp,sp,8
 201538c:	f800283a 	ret

02015390 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 2015390:	defffe04 	addi	sp,sp,-8
 2015394:	dfc00115 	stw	ra,4(sp)
 2015398:	df000015 	stw	fp,0(sp)
 201539c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 20153a0:	201fdb80 	call	201fdb8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 20153a4:	20161600 	call	2016160 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 20153a8:	20161a40 	call	20161a4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 20153ac:	20163080 	call	2016308 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 20153b0:	20160840 	call	2016084 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 20153b4:	20183b80 	call	20183b8 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 20153b8:	2018d900 	call	2018d90 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 20153bc:	201a0e80 	call	201a0e8 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 20153c0:	20162100 	call	2016210 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 20153c4:	201628c0 	call	201628c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 20153c8:	201fdd40 	call	201fdd4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 20153cc:	2016b900 	call	2016b90 <OSDebugInit>
#endif
}
 20153d0:	e037883a 	mov	sp,fp
 20153d4:	dfc00117 	ldw	ra,4(sp)
 20153d8:	df000017 	ldw	fp,0(sp)
 20153dc:	dec00204 	addi	sp,sp,8
 20153e0:	f800283a 	ret

020153e4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 20153e4:	defffc04 	addi	sp,sp,-16
 20153e8:	df000315 	stw	fp,12(sp)
 20153ec:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20153f0:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 20153f4:	d0a7c143 	ldbu	r2,-24827(gp)
 20153f8:	10803fcc 	andi	r2,r2,255
 20153fc:	10800058 	cmpnei	r2,r2,1
 2015400:	1000131e 	bne	r2,zero,2015450 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015404:	0005303a 	rdctl	r2,status
 2015408:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201540c:	e0fffe17 	ldw	r3,-8(fp)
 2015410:	00bfff84 	movi	r2,-2
 2015414:	1884703a 	and	r2,r3,r2
 2015418:	1001703a 	wrctl	status,r2
  
  return context;
 201541c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 2015420:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 2015424:	d0a7cf03 	ldbu	r2,-24772(gp)
 2015428:	10803fcc 	andi	r2,r2,255
 201542c:	10803fe0 	cmpeqi	r2,r2,255
 2015430:	1000031e 	bne	r2,zero,2015440 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 2015434:	d0a7cf03 	ldbu	r2,-24772(gp)
 2015438:	10800044 	addi	r2,r2,1
 201543c:	d0a7cf05 	stb	r2,-24772(gp)
 2015440:	e0bfff17 	ldw	r2,-4(fp)
 2015444:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015448:	e0bffd17 	ldw	r2,-12(fp)
 201544c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 2015450:	e037883a 	mov	sp,fp
 2015454:	df000017 	ldw	fp,0(sp)
 2015458:	dec00104 	addi	sp,sp,4
 201545c:	f800283a 	ret

02015460 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 2015460:	defffb04 	addi	sp,sp,-20
 2015464:	dfc00415 	stw	ra,16(sp)
 2015468:	df000315 	stw	fp,12(sp)
 201546c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2015470:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 2015474:	d0a7c143 	ldbu	r2,-24827(gp)
 2015478:	10803fcc 	andi	r2,r2,255
 201547c:	10800058 	cmpnei	r2,r2,1
 2015480:	1000321e 	bne	r2,zero,201554c <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015484:	0005303a 	rdctl	r2,status
 2015488:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201548c:	e0fffe17 	ldw	r3,-8(fp)
 2015490:	00bfff84 	movi	r2,-2
 2015494:	1884703a 	and	r2,r3,r2
 2015498:	1001703a 	wrctl	status,r2
  
  return context;
 201549c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 20154a0:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 20154a4:	d0a7cf03 	ldbu	r2,-24772(gp)
 20154a8:	10803fcc 	andi	r2,r2,255
 20154ac:	1005003a 	cmpeq	r2,r2,zero
 20154b0:	1000031e 	bne	r2,zero,20154c0 <OSIntExit+0x60>
            OSIntNesting--;
 20154b4:	d0a7cf03 	ldbu	r2,-24772(gp)
 20154b8:	10bfffc4 	addi	r2,r2,-1
 20154bc:	d0a7cf05 	stb	r2,-24772(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 20154c0:	d0a7cf03 	ldbu	r2,-24772(gp)
 20154c4:	10803fcc 	andi	r2,r2,255
 20154c8:	1004c03a 	cmpne	r2,r2,zero
 20154cc:	10001b1e 	bne	r2,zero,201553c <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 20154d0:	d0a7c103 	ldbu	r2,-24828(gp)
 20154d4:	10803fcc 	andi	r2,r2,255
 20154d8:	1004c03a 	cmpne	r2,r2,zero
 20154dc:	1000171e 	bne	r2,zero,201553c <OSIntExit+0xdc>
                OS_SchedNew();
 20154e0:	201657c0 	call	201657c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 20154e4:	d0a7c303 	ldbu	r2,-24820(gp)
 20154e8:	d0e7c343 	ldbu	r3,-24819(gp)
 20154ec:	11003fcc 	andi	r4,r2,255
 20154f0:	18803fcc 	andi	r2,r3,255
 20154f4:	20801126 	beq	r4,r2,201553c <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 20154f8:	d0a7c303 	ldbu	r2,-24820(gp)
 20154fc:	10803fcc 	andi	r2,r2,255
 2015500:	00c080f4 	movhi	r3,515
 2015504:	18e0b504 	addi	r3,r3,-32044
 2015508:	1085883a 	add	r2,r2,r2
 201550c:	1085883a 	add	r2,r2,r2
 2015510:	10c5883a 	add	r2,r2,r3
 2015514:	10800017 	ldw	r2,0(r2)
 2015518:	d0a7cb15 	stw	r2,-24788(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 201551c:	d0e7cb17 	ldw	r3,-24788(gp)
 2015520:	18800e17 	ldw	r2,56(r3)
 2015524:	10800044 	addi	r2,r2,1
 2015528:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 201552c:	d0a7c617 	ldw	r2,-24808(gp)
 2015530:	10800044 	addi	r2,r2,1
 2015534:	d0a7c615 	stw	r2,-24808(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 2015538:	201f9440 	call	201f944 <OSCtxSw>
 201553c:	e0bfff17 	ldw	r2,-4(fp)
 2015540:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015544:	e0bffd17 	ldw	r2,-12(fp)
 2015548:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 201554c:	e037883a 	mov	sp,fp
 2015550:	dfc00117 	ldw	ra,4(sp)
 2015554:	df000017 	ldw	fp,0(sp)
 2015558:	dec00204 	addi	sp,sp,8
 201555c:	f800283a 	ret

02015560 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 2015560:	defffc04 	addi	sp,sp,-16
 2015564:	df000315 	stw	fp,12(sp)
 2015568:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201556c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 2015570:	d0a7c143 	ldbu	r2,-24827(gp)
 2015574:	10803fcc 	andi	r2,r2,255
 2015578:	10800058 	cmpnei	r2,r2,1
 201557c:	1000171e 	bne	r2,zero,20155dc <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015580:	0005303a 	rdctl	r2,status
 2015584:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015588:	e0fffe17 	ldw	r3,-8(fp)
 201558c:	00bfff84 	movi	r2,-2
 2015590:	1884703a 	and	r2,r3,r2
 2015594:	1001703a 	wrctl	status,r2
  
  return context;
 2015598:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 201559c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 20155a0:	d0a7cf03 	ldbu	r2,-24772(gp)
 20155a4:	10803fcc 	andi	r2,r2,255
 20155a8:	1004c03a 	cmpne	r2,r2,zero
 20155ac:	1000071e 	bne	r2,zero,20155cc <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 20155b0:	d0a7c103 	ldbu	r2,-24828(gp)
 20155b4:	10803fcc 	andi	r2,r2,255
 20155b8:	10803fe0 	cmpeqi	r2,r2,255
 20155bc:	1000031e 	bne	r2,zero,20155cc <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 20155c0:	d0a7c103 	ldbu	r2,-24828(gp)
 20155c4:	10800044 	addi	r2,r2,1
 20155c8:	d0a7c105 	stb	r2,-24828(gp)
 20155cc:	e0bfff17 	ldw	r2,-4(fp)
 20155d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20155d4:	e0bffd17 	ldw	r2,-12(fp)
 20155d8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 20155dc:	e037883a 	mov	sp,fp
 20155e0:	df000017 	ldw	fp,0(sp)
 20155e4:	dec00104 	addi	sp,sp,4
 20155e8:	f800283a 	ret

020155ec <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 20155ec:	defff804 	addi	sp,sp,-32
 20155f0:	dfc00715 	stw	ra,28(sp)
 20155f4:	df000615 	stw	fp,24(sp)
 20155f8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20155fc:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 2015600:	d0a7c143 	ldbu	r2,-24827(gp)
 2015604:	10803fcc 	andi	r2,r2,255
 2015608:	10800058 	cmpnei	r2,r2,1
 201560c:	10002b1e 	bne	r2,zero,20156bc <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015610:	0005303a 	rdctl	r2,status
 2015614:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015618:	e0fffe17 	ldw	r3,-8(fp)
 201561c:	00bfff84 	movi	r2,-2
 2015620:	1884703a 	and	r2,r3,r2
 2015624:	1001703a 	wrctl	status,r2
  
  return context;
 2015628:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 201562c:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 2015630:	d0a7c103 	ldbu	r2,-24828(gp)
 2015634:	10803fcc 	andi	r2,r2,255
 2015638:	1005003a 	cmpeq	r2,r2,zero
 201563c:	10001b1e 	bne	r2,zero,20156ac <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 2015640:	d0a7c103 	ldbu	r2,-24828(gp)
 2015644:	10bfffc4 	addi	r2,r2,-1
 2015648:	d0a7c105 	stb	r2,-24828(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 201564c:	d0a7c103 	ldbu	r2,-24828(gp)
 2015650:	10803fcc 	andi	r2,r2,255
 2015654:	1004c03a 	cmpne	r2,r2,zero
 2015658:	10000f1e 	bne	r2,zero,2015698 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 201565c:	d0a7cf03 	ldbu	r2,-24772(gp)
 2015660:	10803fcc 	andi	r2,r2,255
 2015664:	1004c03a 	cmpne	r2,r2,zero
 2015668:	1000061e 	bne	r2,zero,2015684 <OSSchedUnlock+0x98>
 201566c:	e0bfff17 	ldw	r2,-4(fp)
 2015670:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015674:	e0bffd17 	ldw	r2,-12(fp)
 2015678:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 201567c:	20164a80 	call	20164a8 <OS_Sched>
 2015680:	00000e06 	br	20156bc <OSSchedUnlock+0xd0>
 2015684:	e0bfff17 	ldw	r2,-4(fp)
 2015688:	e0bffc15 	stw	r2,-16(fp)
 201568c:	e0bffc17 	ldw	r2,-16(fp)
 2015690:	1001703a 	wrctl	status,r2
 2015694:	00000906 	br	20156bc <OSSchedUnlock+0xd0>
 2015698:	e0bfff17 	ldw	r2,-4(fp)
 201569c:	e0bffb15 	stw	r2,-20(fp)
 20156a0:	e0bffb17 	ldw	r2,-20(fp)
 20156a4:	1001703a 	wrctl	status,r2
 20156a8:	00000406 	br	20156bc <OSSchedUnlock+0xd0>
 20156ac:	e0bfff17 	ldw	r2,-4(fp)
 20156b0:	e0bffa15 	stw	r2,-24(fp)
 20156b4:	e0bffa17 	ldw	r2,-24(fp)
 20156b8:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 20156bc:	e037883a 	mov	sp,fp
 20156c0:	dfc00117 	ldw	ra,4(sp)
 20156c4:	df000017 	ldw	fp,0(sp)
 20156c8:	dec00204 	addi	sp,sp,8
 20156cc:	f800283a 	ret

020156d0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 20156d0:	defffe04 	addi	sp,sp,-8
 20156d4:	dfc00115 	stw	ra,4(sp)
 20156d8:	df000015 	stw	fp,0(sp)
 20156dc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 20156e0:	d0a7c143 	ldbu	r2,-24827(gp)
 20156e4:	10803fcc 	andi	r2,r2,255
 20156e8:	1004c03a 	cmpne	r2,r2,zero
 20156ec:	10000f1e 	bne	r2,zero,201572c <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 20156f0:	201657c0 	call	201657c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 20156f4:	d0a7c303 	ldbu	r2,-24820(gp)
 20156f8:	d0a7c345 	stb	r2,-24819(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 20156fc:	d0a7c303 	ldbu	r2,-24820(gp)
 2015700:	10803fcc 	andi	r2,r2,255
 2015704:	00c080f4 	movhi	r3,515
 2015708:	18e0b504 	addi	r3,r3,-32044
 201570c:	1085883a 	add	r2,r2,r2
 2015710:	1085883a 	add	r2,r2,r2
 2015714:	10c5883a 	add	r2,r2,r3
 2015718:	10800017 	ldw	r2,0(r2)
 201571c:	d0a7cb15 	stw	r2,-24788(gp)
        OSTCBCur      = OSTCBHighRdy;
 2015720:	d0a7cb17 	ldw	r2,-24788(gp)
 2015724:	d0a7d015 	stw	r2,-24768(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 2015728:	201f9d00 	call	201f9d0 <OSStartHighRdy>
    }
}
 201572c:	e037883a 	mov	sp,fp
 2015730:	dfc00117 	ldw	ra,4(sp)
 2015734:	df000017 	ldw	fp,0(sp)
 2015738:	dec00204 	addi	sp,sp,8
 201573c:	f800283a 	ret

02015740 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 2015740:	defff904 	addi	sp,sp,-28
 2015744:	dfc00615 	stw	ra,24(sp)
 2015748:	df000515 	stw	fp,20(sp)
 201574c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015750:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 2015754:	01000084 	movi	r4,2
 2015758:	201c79c0 	call	201c79c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201575c:	0005303a 	rdctl	r2,status
 2015760:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015764:	e0fffe17 	ldw	r3,-8(fp)
 2015768:	00bfff84 	movi	r2,-2
 201576c:	1884703a 	and	r2,r3,r2
 2015770:	1001703a 	wrctl	status,r2
  
  return context;
 2015774:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 2015778:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 201577c:	d027c215 	stw	zero,-24824(gp)
 2015780:	e0bfff17 	ldw	r2,-4(fp)
 2015784:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015788:	e0bffd17 	ldw	r2,-12(fp)
 201578c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 2015790:	01001904 	movi	r4,100
 2015794:	201c79c0 	call	201c79c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015798:	0005303a 	rdctl	r2,status
 201579c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20157a0:	e0fffc17 	ldw	r3,-16(fp)
 20157a4:	00bfff84 	movi	r2,-2
 20157a8:	1884703a 	and	r2,r3,r2
 20157ac:	1001703a 	wrctl	status,r2
  
  return context;
 20157b0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 20157b4:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 20157b8:	d0a7c217 	ldw	r2,-24824(gp)
 20157bc:	d0a7c715 	stw	r2,-24804(gp)
    OSStatRdy    = OS_TRUE;
 20157c0:	00800044 	movi	r2,1
 20157c4:	d0a7d305 	stb	r2,-24756(gp)
 20157c8:	e0bfff17 	ldw	r2,-4(fp)
 20157cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20157d0:	e0bffb17 	ldw	r2,-20(fp)
 20157d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 20157d8:	e037883a 	mov	sp,fp
 20157dc:	dfc00117 	ldw	ra,4(sp)
 20157e0:	df000017 	ldw	fp,0(sp)
 20157e4:	dec00204 	addi	sp,sp,8
 20157e8:	f800283a 	ret

020157ec <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 20157ec:	defff604 	addi	sp,sp,-40
 20157f0:	dfc00915 	stw	ra,36(sp)
 20157f4:	df000815 	stw	fp,32(sp)
 20157f8:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20157fc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 2015800:	201fd9c0 	call	201fd9c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015804:	0005303a 	rdctl	r2,status
 2015808:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201580c:	e0fffb17 	ldw	r3,-20(fp)
 2015810:	00bfff84 	movi	r2,-2
 2015814:	1884703a 	and	r2,r3,r2
 2015818:	1001703a 	wrctl	status,r2
  
  return context;
 201581c:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 2015820:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 2015824:	d0a7d117 	ldw	r2,-24764(gp)
 2015828:	10800044 	addi	r2,r2,1
 201582c:	d0a7d115 	stw	r2,-24764(gp)
 2015830:	e0bffc17 	ldw	r2,-16(fp)
 2015834:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015838:	e0bffa17 	ldw	r2,-24(fp)
 201583c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 2015840:	d0a7c143 	ldbu	r2,-24827(gp)
 2015844:	10803fcc 	andi	r2,r2,255
 2015848:	10800058 	cmpnei	r2,r2,1
 201584c:	1000721e 	bne	r2,zero,2015a18 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 2015850:	d0a7c503 	ldbu	r2,-24812(gp)
 2015854:	10803fcc 	andi	r2,r2,255
 2015858:	e0bfff15 	stw	r2,-4(fp)
 201585c:	e0ffff17 	ldw	r3,-4(fp)
 2015860:	18800060 	cmpeqi	r2,r3,1
 2015864:	10000a1e 	bne	r2,zero,2015890 <OSTimeTick+0xa4>
 2015868:	e0ffff17 	ldw	r3,-4(fp)
 201586c:	188000a0 	cmpeqi	r2,r3,2
 2015870:	1000091e 	bne	r2,zero,2015898 <OSTimeTick+0xac>
 2015874:	e0ffff17 	ldw	r3,-4(fp)
 2015878:	1805003a 	cmpeq	r2,r3,zero
 201587c:	1000011e 	bne	r2,zero,2015884 <OSTimeTick+0x98>
 2015880:	00000a06 	br	20158ac <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 2015884:	00800044 	movi	r2,1
 2015888:	e0bffd05 	stb	r2,-12(fp)
                 break;
 201588c:	00000a06 	br	20158b8 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 2015890:	e03ffd05 	stb	zero,-12(fp)
                 break;
 2015894:	00000806 	br	20158b8 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 2015898:	00800044 	movi	r2,1
 201589c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 20158a0:	00800044 	movi	r2,1
 20158a4:	d0a7c505 	stb	r2,-24812(gp)
                 break;
 20158a8:	00000306 	br	20158b8 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 20158ac:	00800044 	movi	r2,1
 20158b0:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 20158b4:	d027c505 	stb	zero,-24812(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 20158b8:	e0bffd03 	ldbu	r2,-12(fp)
 20158bc:	1005003a 	cmpeq	r2,r2,zero
 20158c0:	1000551e 	bne	r2,zero,2015a18 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 20158c4:	d0a7c417 	ldw	r2,-24816(gp)
 20158c8:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 20158cc:	00004d06 	br	2015a04 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20158d0:	0005303a 	rdctl	r2,status
 20158d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20158d8:	e0fff917 	ldw	r3,-28(fp)
 20158dc:	00bfff84 	movi	r2,-2
 20158e0:	1884703a 	and	r2,r3,r2
 20158e4:	1001703a 	wrctl	status,r2
  
  return context;
 20158e8:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 20158ec:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 20158f0:	e0bffe17 	ldw	r2,-8(fp)
 20158f4:	10800b8b 	ldhu	r2,46(r2)
 20158f8:	10bfffcc 	andi	r2,r2,65535
 20158fc:	1005003a 	cmpeq	r2,r2,zero
 2015900:	1000391e 	bne	r2,zero,20159e8 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 2015904:	e0bffe17 	ldw	r2,-8(fp)
 2015908:	10800b8b 	ldhu	r2,46(r2)
 201590c:	10bfffc4 	addi	r2,r2,-1
 2015910:	1007883a 	mov	r3,r2
 2015914:	e0bffe17 	ldw	r2,-8(fp)
 2015918:	10c00b8d 	sth	r3,46(r2)
 201591c:	e0bffe17 	ldw	r2,-8(fp)
 2015920:	10800b8b 	ldhu	r2,46(r2)
 2015924:	10bfffcc 	andi	r2,r2,65535
 2015928:	1004c03a 	cmpne	r2,r2,zero
 201592c:	10002e1e 	bne	r2,zero,20159e8 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2015930:	e0bffe17 	ldw	r2,-8(fp)
 2015934:	10800c03 	ldbu	r2,48(r2)
 2015938:	10803fcc 	andi	r2,r2,255
 201593c:	10800dcc 	andi	r2,r2,55
 2015940:	1005003a 	cmpeq	r2,r2,zero
 2015944:	10000b1e 	bne	r2,zero,2015974 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 2015948:	e0bffe17 	ldw	r2,-8(fp)
 201594c:	10c00c03 	ldbu	r3,48(r2)
 2015950:	00bff204 	movi	r2,-56
 2015954:	1884703a 	and	r2,r3,r2
 2015958:	1007883a 	mov	r3,r2
 201595c:	e0bffe17 	ldw	r2,-8(fp)
 2015960:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 2015964:	e0fffe17 	ldw	r3,-8(fp)
 2015968:	00800044 	movi	r2,1
 201596c:	18800c45 	stb	r2,49(r3)
 2015970:	00000206 	br	201597c <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2015974:	e0bffe17 	ldw	r2,-8(fp)
 2015978:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 201597c:	e0bffe17 	ldw	r2,-8(fp)
 2015980:	10800c03 	ldbu	r2,48(r2)
 2015984:	10803fcc 	andi	r2,r2,255
 2015988:	1080020c 	andi	r2,r2,8
 201598c:	1004c03a 	cmpne	r2,r2,zero
 2015990:	1000151e 	bne	r2,zero,20159e8 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 2015994:	e0bffe17 	ldw	r2,-8(fp)
 2015998:	10c00d83 	ldbu	r3,54(r2)
 201599c:	d0a7cd03 	ldbu	r2,-24780(gp)
 20159a0:	1884b03a 	or	r2,r3,r2
 20159a4:	d0a7cd05 	stb	r2,-24780(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20159a8:	e0bffe17 	ldw	r2,-8(fp)
 20159ac:	10800d03 	ldbu	r2,52(r2)
 20159b0:	11003fcc 	andi	r4,r2,255
 20159b4:	e0bffe17 	ldw	r2,-8(fp)
 20159b8:	10800d03 	ldbu	r2,52(r2)
 20159bc:	10c03fcc 	andi	r3,r2,255
 20159c0:	d0a7cd44 	addi	r2,gp,-24779
 20159c4:	1885883a 	add	r2,r3,r2
 20159c8:	10c00003 	ldbu	r3,0(r2)
 20159cc:	e0bffe17 	ldw	r2,-8(fp)
 20159d0:	10800d43 	ldbu	r2,53(r2)
 20159d4:	1884b03a 	or	r2,r3,r2
 20159d8:	1007883a 	mov	r3,r2
 20159dc:	d0a7cd44 	addi	r2,gp,-24779
 20159e0:	2085883a 	add	r2,r4,r2
 20159e4:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 20159e8:	e0bffe17 	ldw	r2,-8(fp)
 20159ec:	10800517 	ldw	r2,20(r2)
 20159f0:	e0bffe15 	stw	r2,-8(fp)
 20159f4:	e0bffc17 	ldw	r2,-16(fp)
 20159f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20159fc:	e0bff817 	ldw	r2,-32(fp)
 2015a00:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2015a04:	e0bffe17 	ldw	r2,-8(fp)
 2015a08:	10800c83 	ldbu	r2,50(r2)
 2015a0c:	10803fcc 	andi	r2,r2,255
 2015a10:	10800518 	cmpnei	r2,r2,20
 2015a14:	103fae1e 	bne	r2,zero,20158d0 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 2015a18:	e037883a 	mov	sp,fp
 2015a1c:	dfc00117 	ldw	ra,4(sp)
 2015a20:	df000017 	ldw	fp,0(sp)
 2015a24:	dec00204 	addi	sp,sp,8
 2015a28:	f800283a 	ret

02015a2c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 2015a2c:	deffff04 	addi	sp,sp,-4
 2015a30:	df000015 	stw	fp,0(sp)
 2015a34:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 2015a38:	00804784 	movi	r2,286
}
 2015a3c:	e037883a 	mov	sp,fp
 2015a40:	df000017 	ldw	fp,0(sp)
 2015a44:	dec00104 	addi	sp,sp,4
 2015a48:	f800283a 	ret

02015a4c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 2015a4c:	deffff04 	addi	sp,sp,-4
 2015a50:	df000015 	stw	fp,0(sp)
 2015a54:	d839883a 	mov	fp,sp
}
 2015a58:	e037883a 	mov	sp,fp
 2015a5c:	df000017 	ldw	fp,0(sp)
 2015a60:	dec00104 	addi	sp,sp,4
 2015a64:	f800283a 	ret

02015a68 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 2015a68:	defff804 	addi	sp,sp,-32
 2015a6c:	dfc00715 	stw	ra,28(sp)
 2015a70:	df000615 	stw	fp,24(sp)
 2015a74:	df000604 	addi	fp,sp,24
 2015a78:	e13ffc15 	stw	r4,-16(fp)
 2015a7c:	e17ffd15 	stw	r5,-12(fp)
 2015a80:	e1bffe05 	stb	r6,-8(fp)
 2015a84:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 2015a88:	e0bffc17 	ldw	r2,-16(fp)
 2015a8c:	10800283 	ldbu	r2,10(r2)
 2015a90:	10c03fcc 	andi	r3,r2,255
 2015a94:	008080b4 	movhi	r2,514
 2015a98:	10848204 	addi	r2,r2,4616
 2015a9c:	10c5883a 	add	r2,r2,r3
 2015aa0:	10800003 	ldbu	r2,0(r2)
 2015aa4:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 2015aa8:	e0fffa83 	ldbu	r3,-22(fp)
 2015aac:	e0bffc17 	ldw	r2,-16(fp)
 2015ab0:	1885883a 	add	r2,r3,r2
 2015ab4:	10800204 	addi	r2,r2,8
 2015ab8:	108000c3 	ldbu	r2,3(r2)
 2015abc:	10c03fcc 	andi	r3,r2,255
 2015ac0:	008080b4 	movhi	r2,514
 2015ac4:	10848204 	addi	r2,r2,4616
 2015ac8:	10c5883a 	add	r2,r2,r3
 2015acc:	10800003 	ldbu	r2,0(r2)
 2015ad0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 2015ad4:	e0bffa83 	ldbu	r2,-22(fp)
 2015ad8:	100490fa 	slli	r2,r2,3
 2015adc:	1007883a 	mov	r3,r2
 2015ae0:	e0bffa43 	ldbu	r2,-23(fp)
 2015ae4:	1885883a 	add	r2,r3,r2
 2015ae8:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 2015aec:	e0bffa03 	ldbu	r2,-24(fp)
 2015af0:	00c080f4 	movhi	r3,515
 2015af4:	18e0b504 	addi	r3,r3,-32044
 2015af8:	1085883a 	add	r2,r2,r2
 2015afc:	1085883a 	add	r2,r2,r2
 2015b00:	10c5883a 	add	r2,r2,r3
 2015b04:	10800017 	ldw	r2,0(r2)
 2015b08:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 2015b0c:	e0bffb17 	ldw	r2,-20(fp)
 2015b10:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 2015b14:	e0fffb17 	ldw	r3,-20(fp)
 2015b18:	e0bffd17 	ldw	r2,-12(fp)
 2015b1c:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 2015b20:	e0bffb17 	ldw	r2,-20(fp)
 2015b24:	10800c03 	ldbu	r2,48(r2)
 2015b28:	1007883a 	mov	r3,r2
 2015b2c:	e0bffe03 	ldbu	r2,-8(fp)
 2015b30:	0084303a 	nor	r2,zero,r2
 2015b34:	1884703a 	and	r2,r3,r2
 2015b38:	1007883a 	mov	r3,r2
 2015b3c:	e0bffb17 	ldw	r2,-20(fp)
 2015b40:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 2015b44:	e0fffb17 	ldw	r3,-20(fp)
 2015b48:	e0bfff03 	ldbu	r2,-4(fp)
 2015b4c:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 2015b50:	e0bffb17 	ldw	r2,-20(fp)
 2015b54:	10800c03 	ldbu	r2,48(r2)
 2015b58:	10803fcc 	andi	r2,r2,255
 2015b5c:	1080020c 	andi	r2,r2,8
 2015b60:	1004c03a 	cmpne	r2,r2,zero
 2015b64:	1000111e 	bne	r2,zero,2015bac <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 2015b68:	e0bffb17 	ldw	r2,-20(fp)
 2015b6c:	10c00d83 	ldbu	r3,54(r2)
 2015b70:	d0a7cd03 	ldbu	r2,-24780(gp)
 2015b74:	1884b03a 	or	r2,r3,r2
 2015b78:	d0a7cd05 	stb	r2,-24780(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 2015b7c:	e13ffa83 	ldbu	r4,-22(fp)
 2015b80:	e0fffa83 	ldbu	r3,-22(fp)
 2015b84:	d0a7cd44 	addi	r2,gp,-24779
 2015b88:	1885883a 	add	r2,r3,r2
 2015b8c:	10c00003 	ldbu	r3,0(r2)
 2015b90:	e0bffb17 	ldw	r2,-20(fp)
 2015b94:	10800d43 	ldbu	r2,53(r2)
 2015b98:	1884b03a 	or	r2,r3,r2
 2015b9c:	1007883a 	mov	r3,r2
 2015ba0:	d0a7cd44 	addi	r2,gp,-24779
 2015ba4:	2085883a 	add	r2,r4,r2
 2015ba8:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 2015bac:	e13ffb17 	ldw	r4,-20(fp)
 2015bb0:	e17ffc17 	ldw	r5,-16(fp)
 2015bb4:	2015e600 	call	2015e60 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 2015bb8:	e0bffb17 	ldw	r2,-20(fp)
 2015bbc:	10800817 	ldw	r2,32(r2)
 2015bc0:	1005003a 	cmpeq	r2,r2,zero
 2015bc4:	1000071e 	bne	r2,zero,2015be4 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 2015bc8:	e0bffb17 	ldw	r2,-20(fp)
 2015bcc:	11400817 	ldw	r5,32(r2)
 2015bd0:	e13ffb17 	ldw	r4,-20(fp)
 2015bd4:	2015f180 	call	2015f18 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 2015bd8:	e0fffb17 	ldw	r3,-20(fp)
 2015bdc:	e0bffc17 	ldw	r2,-16(fp)
 2015be0:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 2015be4:	e0bffa03 	ldbu	r2,-24(fp)
}
 2015be8:	e037883a 	mov	sp,fp
 2015bec:	dfc00117 	ldw	ra,4(sp)
 2015bf0:	df000017 	ldw	fp,0(sp)
 2015bf4:	dec00204 	addi	sp,sp,8
 2015bf8:	f800283a 	ret

02015bfc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 2015bfc:	defffd04 	addi	sp,sp,-12
 2015c00:	df000215 	stw	fp,8(sp)
 2015c04:	df000204 	addi	fp,sp,8
 2015c08:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 2015c0c:	d0e7d017 	ldw	r3,-24768(gp)
 2015c10:	e0bfff17 	ldw	r2,-4(fp)
 2015c14:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 2015c18:	d0a7d017 	ldw	r2,-24768(gp)
 2015c1c:	10800d03 	ldbu	r2,52(r2)
 2015c20:	11003fcc 	andi	r4,r2,255
 2015c24:	d0a7d017 	ldw	r2,-24768(gp)
 2015c28:	10800d03 	ldbu	r2,52(r2)
 2015c2c:	10c03fcc 	andi	r3,r2,255
 2015c30:	e0bfff17 	ldw	r2,-4(fp)
 2015c34:	1885883a 	add	r2,r3,r2
 2015c38:	10800204 	addi	r2,r2,8
 2015c3c:	10c000c3 	ldbu	r3,3(r2)
 2015c40:	d0a7d017 	ldw	r2,-24768(gp)
 2015c44:	10800d43 	ldbu	r2,53(r2)
 2015c48:	1884b03a 	or	r2,r3,r2
 2015c4c:	1007883a 	mov	r3,r2
 2015c50:	e0bfff17 	ldw	r2,-4(fp)
 2015c54:	2085883a 	add	r2,r4,r2
 2015c58:	10800204 	addi	r2,r2,8
 2015c5c:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2015c60:	e0bfff17 	ldw	r2,-4(fp)
 2015c64:	10c00283 	ldbu	r3,10(r2)
 2015c68:	d0a7d017 	ldw	r2,-24768(gp)
 2015c6c:	10800d83 	ldbu	r2,54(r2)
 2015c70:	1884b03a 	or	r2,r3,r2
 2015c74:	1007883a 	mov	r3,r2
 2015c78:	e0bfff17 	ldw	r2,-4(fp)
 2015c7c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2015c80:	d0a7d017 	ldw	r2,-24768(gp)
 2015c84:	10800d03 	ldbu	r2,52(r2)
 2015c88:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2015c8c:	e13ffe03 	ldbu	r4,-8(fp)
 2015c90:	e0fffe03 	ldbu	r3,-8(fp)
 2015c94:	d0a7cd44 	addi	r2,gp,-24779
 2015c98:	1885883a 	add	r2,r3,r2
 2015c9c:	10800003 	ldbu	r2,0(r2)
 2015ca0:	1007883a 	mov	r3,r2
 2015ca4:	d0a7d017 	ldw	r2,-24768(gp)
 2015ca8:	10800d43 	ldbu	r2,53(r2)
 2015cac:	0084303a 	nor	r2,zero,r2
 2015cb0:	1884703a 	and	r2,r3,r2
 2015cb4:	1007883a 	mov	r3,r2
 2015cb8:	d0a7cd44 	addi	r2,gp,-24779
 2015cbc:	2085883a 	add	r2,r4,r2
 2015cc0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 2015cc4:	e0fffe03 	ldbu	r3,-8(fp)
 2015cc8:	d0a7cd44 	addi	r2,gp,-24779
 2015ccc:	1885883a 	add	r2,r3,r2
 2015cd0:	10800003 	ldbu	r2,0(r2)
 2015cd4:	10803fcc 	andi	r2,r2,255
 2015cd8:	1004c03a 	cmpne	r2,r2,zero
 2015cdc:	1000071e 	bne	r2,zero,2015cfc <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2015ce0:	d0a7d017 	ldw	r2,-24768(gp)
 2015ce4:	10800d83 	ldbu	r2,54(r2)
 2015ce8:	0084303a 	nor	r2,zero,r2
 2015cec:	1007883a 	mov	r3,r2
 2015cf0:	d0a7cd03 	ldbu	r2,-24780(gp)
 2015cf4:	1884703a 	and	r2,r3,r2
 2015cf8:	d0a7cd05 	stb	r2,-24780(gp)
    }
}
 2015cfc:	e037883a 	mov	sp,fp
 2015d00:	df000017 	ldw	fp,0(sp)
 2015d04:	dec00104 	addi	sp,sp,4
 2015d08:	f800283a 	ret

02015d0c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 2015d0c:	defffb04 	addi	sp,sp,-20
 2015d10:	df000415 	stw	fp,16(sp)
 2015d14:	df000404 	addi	fp,sp,16
 2015d18:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 2015d1c:	d0a7d017 	ldw	r2,-24768(gp)
 2015d20:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 2015d24:	d0e7d017 	ldw	r3,-24768(gp)
 2015d28:	e0bfff17 	ldw	r2,-4(fp)
 2015d2c:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 2015d30:	e0bfff17 	ldw	r2,-4(fp)
 2015d34:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 2015d38:	e0bffe17 	ldw	r2,-8(fp)
 2015d3c:	10800017 	ldw	r2,0(r2)
 2015d40:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2015d44:	00002006 	br	2015dc8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 2015d48:	d0a7d017 	ldw	r2,-24768(gp)
 2015d4c:	10800d03 	ldbu	r2,52(r2)
 2015d50:	11003fcc 	andi	r4,r2,255
 2015d54:	d0a7d017 	ldw	r2,-24768(gp)
 2015d58:	10800d03 	ldbu	r2,52(r2)
 2015d5c:	10c03fcc 	andi	r3,r2,255
 2015d60:	e0bffd17 	ldw	r2,-12(fp)
 2015d64:	1885883a 	add	r2,r3,r2
 2015d68:	10800204 	addi	r2,r2,8
 2015d6c:	10c000c3 	ldbu	r3,3(r2)
 2015d70:	d0a7d017 	ldw	r2,-24768(gp)
 2015d74:	10800d43 	ldbu	r2,53(r2)
 2015d78:	1884b03a 	or	r2,r3,r2
 2015d7c:	1007883a 	mov	r3,r2
 2015d80:	e0bffd17 	ldw	r2,-12(fp)
 2015d84:	2085883a 	add	r2,r4,r2
 2015d88:	10800204 	addi	r2,r2,8
 2015d8c:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2015d90:	e0bffd17 	ldw	r2,-12(fp)
 2015d94:	10c00283 	ldbu	r3,10(r2)
 2015d98:	d0a7d017 	ldw	r2,-24768(gp)
 2015d9c:	10800d83 	ldbu	r2,54(r2)
 2015da0:	1884b03a 	or	r2,r3,r2
 2015da4:	1007883a 	mov	r3,r2
 2015da8:	e0bffd17 	ldw	r2,-12(fp)
 2015dac:	10c00285 	stb	r3,10(r2)
        pevents++;
 2015db0:	e0bffe17 	ldw	r2,-8(fp)
 2015db4:	10800104 	addi	r2,r2,4
 2015db8:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 2015dbc:	e0bffe17 	ldw	r2,-8(fp)
 2015dc0:	10800017 	ldw	r2,0(r2)
 2015dc4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2015dc8:	e0bffd17 	ldw	r2,-12(fp)
 2015dcc:	1004c03a 	cmpne	r2,r2,zero
 2015dd0:	103fdd1e 	bne	r2,zero,2015d48 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2015dd4:	d0a7d017 	ldw	r2,-24768(gp)
 2015dd8:	10800d03 	ldbu	r2,52(r2)
 2015ddc:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2015de0:	e13ffc03 	ldbu	r4,-16(fp)
 2015de4:	e0fffc03 	ldbu	r3,-16(fp)
 2015de8:	d0a7cd44 	addi	r2,gp,-24779
 2015dec:	1885883a 	add	r2,r3,r2
 2015df0:	10800003 	ldbu	r2,0(r2)
 2015df4:	1007883a 	mov	r3,r2
 2015df8:	d0a7d017 	ldw	r2,-24768(gp)
 2015dfc:	10800d43 	ldbu	r2,53(r2)
 2015e00:	0084303a 	nor	r2,zero,r2
 2015e04:	1884703a 	and	r2,r3,r2
 2015e08:	1007883a 	mov	r3,r2
 2015e0c:	d0a7cd44 	addi	r2,gp,-24779
 2015e10:	2085883a 	add	r2,r4,r2
 2015e14:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 2015e18:	e0fffc03 	ldbu	r3,-16(fp)
 2015e1c:	d0a7cd44 	addi	r2,gp,-24779
 2015e20:	1885883a 	add	r2,r3,r2
 2015e24:	10800003 	ldbu	r2,0(r2)
 2015e28:	10803fcc 	andi	r2,r2,255
 2015e2c:	1004c03a 	cmpne	r2,r2,zero
 2015e30:	1000071e 	bne	r2,zero,2015e50 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2015e34:	d0a7d017 	ldw	r2,-24768(gp)
 2015e38:	10800d83 	ldbu	r2,54(r2)
 2015e3c:	0084303a 	nor	r2,zero,r2
 2015e40:	1007883a 	mov	r3,r2
 2015e44:	d0a7cd03 	ldbu	r2,-24780(gp)
 2015e48:	1884703a 	and	r2,r3,r2
 2015e4c:	d0a7cd05 	stb	r2,-24780(gp)
    }
}
 2015e50:	e037883a 	mov	sp,fp
 2015e54:	df000017 	ldw	fp,0(sp)
 2015e58:	dec00104 	addi	sp,sp,4
 2015e5c:	f800283a 	ret

02015e60 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 2015e60:	defffc04 	addi	sp,sp,-16
 2015e64:	df000315 	stw	fp,12(sp)
 2015e68:	df000304 	addi	fp,sp,12
 2015e6c:	e13ffe15 	stw	r4,-8(fp)
 2015e70:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 2015e74:	e0bffe17 	ldw	r2,-8(fp)
 2015e78:	10800d03 	ldbu	r2,52(r2)
 2015e7c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 2015e80:	e13ffd03 	ldbu	r4,-12(fp)
 2015e84:	e0fffd03 	ldbu	r3,-12(fp)
 2015e88:	e0bfff17 	ldw	r2,-4(fp)
 2015e8c:	1885883a 	add	r2,r3,r2
 2015e90:	10800204 	addi	r2,r2,8
 2015e94:	108000c3 	ldbu	r2,3(r2)
 2015e98:	1007883a 	mov	r3,r2
 2015e9c:	e0bffe17 	ldw	r2,-8(fp)
 2015ea0:	10800d43 	ldbu	r2,53(r2)
 2015ea4:	0084303a 	nor	r2,zero,r2
 2015ea8:	1884703a 	and	r2,r3,r2
 2015eac:	1007883a 	mov	r3,r2
 2015eb0:	e0bfff17 	ldw	r2,-4(fp)
 2015eb4:	2085883a 	add	r2,r4,r2
 2015eb8:	10800204 	addi	r2,r2,8
 2015ebc:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 2015ec0:	e0fffd03 	ldbu	r3,-12(fp)
 2015ec4:	e0bfff17 	ldw	r2,-4(fp)
 2015ec8:	1885883a 	add	r2,r3,r2
 2015ecc:	10800204 	addi	r2,r2,8
 2015ed0:	108000c3 	ldbu	r2,3(r2)
 2015ed4:	10803fcc 	andi	r2,r2,255
 2015ed8:	1004c03a 	cmpne	r2,r2,zero
 2015edc:	10000a1e 	bne	r2,zero,2015f08 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 2015ee0:	e0bfff17 	ldw	r2,-4(fp)
 2015ee4:	10800283 	ldbu	r2,10(r2)
 2015ee8:	1007883a 	mov	r3,r2
 2015eec:	e0bffe17 	ldw	r2,-8(fp)
 2015ef0:	10800d83 	ldbu	r2,54(r2)
 2015ef4:	0084303a 	nor	r2,zero,r2
 2015ef8:	1884703a 	and	r2,r3,r2
 2015efc:	1007883a 	mov	r3,r2
 2015f00:	e0bfff17 	ldw	r2,-4(fp)
 2015f04:	10c00285 	stb	r3,10(r2)
    }
}
 2015f08:	e037883a 	mov	sp,fp
 2015f0c:	df000017 	ldw	fp,0(sp)
 2015f10:	dec00104 	addi	sp,sp,4
 2015f14:	f800283a 	ret

02015f18 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 2015f18:	defffa04 	addi	sp,sp,-24
 2015f1c:	df000515 	stw	fp,20(sp)
 2015f20:	df000504 	addi	fp,sp,20
 2015f24:	e13ffe15 	stw	r4,-8(fp)
 2015f28:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 2015f2c:	e0bffe17 	ldw	r2,-8(fp)
 2015f30:	10800d03 	ldbu	r2,52(r2)
 2015f34:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 2015f38:	e0bffe17 	ldw	r2,-8(fp)
 2015f3c:	10800d83 	ldbu	r2,54(r2)
 2015f40:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 2015f44:	e0bffe17 	ldw	r2,-8(fp)
 2015f48:	10800d43 	ldbu	r2,53(r2)
 2015f4c:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 2015f50:	e0bfff17 	ldw	r2,-4(fp)
 2015f54:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 2015f58:	e0bffd17 	ldw	r2,-12(fp)
 2015f5c:	10800017 	ldw	r2,0(r2)
 2015f60:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2015f64:	00002606 	br	2016000 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 2015f68:	e13ffb83 	ldbu	r4,-18(fp)
 2015f6c:	e0fffb83 	ldbu	r3,-18(fp)
 2015f70:	e0bffc17 	ldw	r2,-16(fp)
 2015f74:	1885883a 	add	r2,r3,r2
 2015f78:	10800204 	addi	r2,r2,8
 2015f7c:	108000c3 	ldbu	r2,3(r2)
 2015f80:	1007883a 	mov	r3,r2
 2015f84:	e0bffb03 	ldbu	r2,-20(fp)
 2015f88:	0084303a 	nor	r2,zero,r2
 2015f8c:	1884703a 	and	r2,r3,r2
 2015f90:	1007883a 	mov	r3,r2
 2015f94:	e0bffc17 	ldw	r2,-16(fp)
 2015f98:	2085883a 	add	r2,r4,r2
 2015f9c:	10800204 	addi	r2,r2,8
 2015fa0:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 2015fa4:	e0fffb83 	ldbu	r3,-18(fp)
 2015fa8:	e0bffc17 	ldw	r2,-16(fp)
 2015fac:	1885883a 	add	r2,r3,r2
 2015fb0:	10800204 	addi	r2,r2,8
 2015fb4:	108000c3 	ldbu	r2,3(r2)
 2015fb8:	10803fcc 	andi	r2,r2,255
 2015fbc:	1004c03a 	cmpne	r2,r2,zero
 2015fc0:	1000091e 	bne	r2,zero,2015fe8 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 2015fc4:	e0bffc17 	ldw	r2,-16(fp)
 2015fc8:	10800283 	ldbu	r2,10(r2)
 2015fcc:	1007883a 	mov	r3,r2
 2015fd0:	e0bffb43 	ldbu	r2,-19(fp)
 2015fd4:	0084303a 	nor	r2,zero,r2
 2015fd8:	1884703a 	and	r2,r3,r2
 2015fdc:	1007883a 	mov	r3,r2
 2015fe0:	e0bffc17 	ldw	r2,-16(fp)
 2015fe4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 2015fe8:	e0bffd17 	ldw	r2,-12(fp)
 2015fec:	10800104 	addi	r2,r2,4
 2015ff0:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 2015ff4:	e0bffd17 	ldw	r2,-12(fp)
 2015ff8:	10800017 	ldw	r2,0(r2)
 2015ffc:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2016000:	e0bffc17 	ldw	r2,-16(fp)
 2016004:	1004c03a 	cmpne	r2,r2,zero
 2016008:	103fd71e 	bne	r2,zero,2015f68 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 201600c:	e037883a 	mov	sp,fp
 2016010:	df000017 	ldw	fp,0(sp)
 2016014:	dec00104 	addi	sp,sp,4
 2016018:	f800283a 	ret

0201601c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 201601c:	defffc04 	addi	sp,sp,-16
 2016020:	df000315 	stw	fp,12(sp)
 2016024:	df000304 	addi	fp,sp,12
 2016028:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 201602c:	e0bfff17 	ldw	r2,-4(fp)
 2016030:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 2016034:	e0bfff17 	ldw	r2,-4(fp)
 2016038:	108002c4 	addi	r2,r2,11
 201603c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2016040:	e03ffd05 	stb	zero,-12(fp)
 2016044:	00000806 	br	2016068 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 2016048:	e0bffe17 	ldw	r2,-8(fp)
 201604c:	10000005 	stb	zero,0(r2)
 2016050:	e0bffe17 	ldw	r2,-8(fp)
 2016054:	10800044 	addi	r2,r2,1
 2016058:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201605c:	e0bffd03 	ldbu	r2,-12(fp)
 2016060:	10800044 	addi	r2,r2,1
 2016064:	e0bffd05 	stb	r2,-12(fp)
 2016068:	e0bffd03 	ldbu	r2,-12(fp)
 201606c:	108000f0 	cmpltui	r2,r2,3
 2016070:	103ff51e 	bne	r2,zero,2016048 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 2016074:	e037883a 	mov	sp,fp
 2016078:	df000017 	ldw	fp,0(sp)
 201607c:	dec00104 	addi	sp,sp,4
 2016080:	f800283a 	ret

02016084 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 2016084:	defffb04 	addi	sp,sp,-20
 2016088:	dfc00415 	stw	ra,16(sp)
 201608c:	df000315 	stw	fp,12(sp)
 2016090:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 2016094:	010080b4 	movhi	r4,514
 2016098:	211ca104 	addi	r4,r4,29316
 201609c:	0142d004 	movi	r5,2880
 20160a0:	20163e80 	call	20163e8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 20160a4:	008080b4 	movhi	r2,514
 20160a8:	109ca104 	addi	r2,r2,29316
 20160ac:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 20160b0:	008080b4 	movhi	r2,514
 20160b4:	109cad04 	addi	r2,r2,29364
 20160b8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 20160bc:	e03fff0d 	sth	zero,-4(fp)
 20160c0:	00001306 	br	2016110 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 20160c4:	e0bffe17 	ldw	r2,-8(fp)
 20160c8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 20160cc:	e0fffe17 	ldw	r3,-8(fp)
 20160d0:	e0bffd17 	ldw	r2,-12(fp)
 20160d4:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 20160d8:	e0fffe17 	ldw	r3,-8(fp)
 20160dc:	00800fc4 	movi	r2,63
 20160e0:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 20160e4:	e0bffe17 	ldw	r2,-8(fp)
 20160e8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 20160ec:	e0bffe17 	ldw	r2,-8(fp)
 20160f0:	10800c04 	addi	r2,r2,48
 20160f4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 20160f8:	e0bffd17 	ldw	r2,-12(fp)
 20160fc:	10800c04 	addi	r2,r2,48
 2016100:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2016104:	e0bfff0b 	ldhu	r2,-4(fp)
 2016108:	10800044 	addi	r2,r2,1
 201610c:	e0bfff0d 	sth	r2,-4(fp)
 2016110:	e0bfff0b 	ldhu	r2,-4(fp)
 2016114:	10800ef0 	cmpltui	r2,r2,59
 2016118:	103fea1e 	bne	r2,zero,20160c4 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 201611c:	e0bffe17 	ldw	r2,-8(fp)
 2016120:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 2016124:	e0bffe17 	ldw	r2,-8(fp)
 2016128:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 201612c:	e0fffe17 	ldw	r3,-8(fp)
 2016130:	00800fc4 	movi	r2,63
 2016134:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 2016138:	e0bffe17 	ldw	r2,-8(fp)
 201613c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 2016140:	008080b4 	movhi	r2,514
 2016144:	109ca104 	addi	r2,r2,29316
 2016148:	d0a7ce15 	stw	r2,-24776(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 201614c:	e037883a 	mov	sp,fp
 2016150:	dfc00117 	ldw	ra,4(sp)
 2016154:	df000017 	ldw	fp,0(sp)
 2016158:	dec00204 	addi	sp,sp,8
 201615c:	f800283a 	ret

02016160 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 2016160:	deffff04 	addi	sp,sp,-4
 2016164:	df000015 	stw	fp,0(sp)
 2016168:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 201616c:	d027d115 	stw	zero,-24764(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 2016170:	d027cf05 	stb	zero,-24772(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 2016174:	d027c105 	stb	zero,-24828(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 2016178:	d027c945 	stb	zero,-24795(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 201617c:	d027c145 	stb	zero,-24827(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 2016180:	d027c615 	stw	zero,-24808(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 2016184:	d027c215 	stw	zero,-24824(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 2016188:	d027d415 	stw	zero,-24752(gp)
    OSIdleCtrMax  = 0L;
 201618c:	d027c715 	stw	zero,-24804(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 2016190:	d027d305 	stb	zero,-24756(gp)
#endif
}
 2016194:	e037883a 	mov	sp,fp
 2016198:	df000017 	ldw	fp,0(sp)
 201619c:	dec00104 	addi	sp,sp,4
 20161a0:	f800283a 	ret

020161a4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 20161a4:	defffd04 	addi	sp,sp,-12
 20161a8:	df000215 	stw	fp,8(sp)
 20161ac:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 20161b0:	d027cd05 	stb	zero,-24780(gp)
    prdytbl       = &OSRdyTbl[0];
 20161b4:	d0a7cd44 	addi	r2,gp,-24779
 20161b8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 20161bc:	e03fff05 	stb	zero,-4(fp)
 20161c0:	00000806 	br	20161e4 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 20161c4:	e0bffe17 	ldw	r2,-8(fp)
 20161c8:	10000005 	stb	zero,0(r2)
 20161cc:	e0bffe17 	ldw	r2,-8(fp)
 20161d0:	10800044 	addi	r2,r2,1
 20161d4:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 20161d8:	e0bfff03 	ldbu	r2,-4(fp)
 20161dc:	10800044 	addi	r2,r2,1
 20161e0:	e0bfff05 	stb	r2,-4(fp)
 20161e4:	e0bfff03 	ldbu	r2,-4(fp)
 20161e8:	108000f0 	cmpltui	r2,r2,3
 20161ec:	103ff51e 	bne	r2,zero,20161c4 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 20161f0:	d027c345 	stb	zero,-24819(gp)
    OSPrioHighRdy = 0;
 20161f4:	d027c305 	stb	zero,-24820(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 20161f8:	d027cb15 	stw	zero,-24788(gp)
    OSTCBCur      = (OS_TCB *)0;
 20161fc:	d027d015 	stw	zero,-24768(gp)
}
 2016200:	e037883a 	mov	sp,fp
 2016204:	df000017 	ldw	fp,0(sp)
 2016208:	dec00104 	addi	sp,sp,4
 201620c:	f800283a 	ret

02016210 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 2016210:	defff804 	addi	sp,sp,-32
 2016214:	dfc00715 	stw	ra,28(sp)
 2016218:	df000615 	stw	fp,24(sp)
 201621c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 2016220:	018080b4 	movhi	r6,514
 2016224:	319ca004 	addi	r6,r6,29312
 2016228:	00bfffd4 	movui	r2,65535
 201622c:	d8800015 	stw	r2,0(sp)
 2016230:	008080b4 	movhi	r2,514
 2016234:	109aa104 	addi	r2,r2,27268
 2016238:	d8800115 	stw	r2,4(sp)
 201623c:	00808004 	movi	r2,512
 2016240:	d8800215 	stw	r2,8(sp)
 2016244:	d8000315 	stw	zero,12(sp)
 2016248:	008000c4 	movi	r2,3
 201624c:	d8800415 	stw	r2,16(sp)
 2016250:	01008074 	movhi	r4,513
 2016254:	2119b104 	addi	r4,r4,26308
 2016258:	000b883a 	mov	r5,zero
 201625c:	01c00504 	movi	r7,20
 2016260:	201b4a40 	call	201b4a4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 2016264:	014080b4 	movhi	r5,514
 2016268:	2944c204 	addi	r5,r5,4872
 201626c:	01000504 	movi	r4,20
 2016270:	e1bfff04 	addi	r6,fp,-4
 2016274:	201bdd80 	call	201bdd8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 2016278:	e037883a 	mov	sp,fp
 201627c:	dfc00117 	ldw	ra,4(sp)
 2016280:	df000017 	ldw	fp,0(sp)
 2016284:	dec00204 	addi	sp,sp,8
 2016288:	f800283a 	ret

0201628c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 201628c:	defff804 	addi	sp,sp,-32
 2016290:	dfc00715 	stw	ra,28(sp)
 2016294:	df000615 	stw	fp,24(sp)
 2016298:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 201629c:	018080b4 	movhi	r6,514
 20162a0:	319a2804 	addi	r6,r6,26784
 20162a4:	00bfff94 	movui	r2,65534
 20162a8:	d8800015 	stw	r2,0(sp)
 20162ac:	008080b4 	movhi	r2,514
 20162b0:	10982904 	addi	r2,r2,24740
 20162b4:	d8800115 	stw	r2,4(sp)
 20162b8:	00808004 	movi	r2,512
 20162bc:	d8800215 	stw	r2,8(sp)
 20162c0:	d8000315 	stw	zero,12(sp)
 20162c4:	008000c4 	movi	r2,3
 20162c8:	d8800415 	stw	r2,16(sp)
 20162cc:	01008074 	movhi	r4,513
 20162d0:	2119c804 	addi	r4,r4,26400
 20162d4:	000b883a 	mov	r5,zero
 20162d8:	01c004c4 	movi	r7,19
 20162dc:	201b4a40 	call	201b4a4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 20162e0:	014080b4 	movhi	r5,514
 20162e4:	2944c604 	addi	r5,r5,4888
 20162e8:	010004c4 	movi	r4,19
 20162ec:	e1bfff04 	addi	r6,fp,-4
 20162f0:	201bdd80 	call	201bdd8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 20162f4:	e037883a 	mov	sp,fp
 20162f8:	dfc00117 	ldw	ra,4(sp)
 20162fc:	df000017 	ldw	fp,0(sp)
 2016300:	dec00204 	addi	sp,sp,8
 2016304:	f800283a 	ret

02016308 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 2016308:	defffb04 	addi	sp,sp,-20
 201630c:	dfc00415 	stw	ra,16(sp)
 2016310:	df000315 	stw	fp,12(sp)
 2016314:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 2016318:	010080b4 	movhi	r4,514
 201631c:	211f7104 	addi	r4,r4,32196
 2016320:	01414404 	movi	r5,1296
 2016324:	20163e80 	call	20163e8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 2016328:	010080f4 	movhi	r4,515
 201632c:	2120b504 	addi	r4,r4,-32044
 2016330:	01401504 	movi	r5,84
 2016334:	20163e80 	call	20163e8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 2016338:	008080b4 	movhi	r2,514
 201633c:	109f7104 	addi	r2,r2,32196
 2016340:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 2016344:	008080b4 	movhi	r2,514
 2016348:	109f8c04 	addi	r2,r2,32304
 201634c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2016350:	e03fff05 	stb	zero,-4(fp)
 2016354:	00001106 	br	201639c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 2016358:	e0fffe17 	ldw	r3,-8(fp)
 201635c:	e0bffd17 	ldw	r2,-12(fp)
 2016360:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 2016364:	e0fffe17 	ldw	r3,-8(fp)
 2016368:	00800fc4 	movi	r2,63
 201636c:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2016370:	e0bffe17 	ldw	r2,-8(fp)
 2016374:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 2016378:	e0bffe17 	ldw	r2,-8(fp)
 201637c:	10801b04 	addi	r2,r2,108
 2016380:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 2016384:	e0bffd17 	ldw	r2,-12(fp)
 2016388:	10801b04 	addi	r2,r2,108
 201638c:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2016390:	e0bfff03 	ldbu	r2,-4(fp)
 2016394:	10800044 	addi	r2,r2,1
 2016398:	e0bfff05 	stb	r2,-4(fp)
 201639c:	e0bfff03 	ldbu	r2,-4(fp)
 20163a0:	108002f0 	cmpltui	r2,r2,11
 20163a4:	103fec1e 	bne	r2,zero,2016358 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 20163a8:	e0bffe17 	ldw	r2,-8(fp)
 20163ac:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 20163b0:	e0fffe17 	ldw	r3,-8(fp)
 20163b4:	00800fc4 	movi	r2,63
 20163b8:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 20163bc:	e0bffe17 	ldw	r2,-8(fp)
 20163c0:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 20163c4:	d027c415 	stw	zero,-24816(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 20163c8:	008080b4 	movhi	r2,514
 20163cc:	109f7104 	addi	r2,r2,32196
 20163d0:	d0a7c815 	stw	r2,-24800(gp)
}
 20163d4:	e037883a 	mov	sp,fp
 20163d8:	dfc00117 	ldw	ra,4(sp)
 20163dc:	df000017 	ldw	fp,0(sp)
 20163e0:	dec00204 	addi	sp,sp,8
 20163e4:	f800283a 	ret

020163e8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 20163e8:	defffd04 	addi	sp,sp,-12
 20163ec:	df000215 	stw	fp,8(sp)
 20163f0:	df000204 	addi	fp,sp,8
 20163f4:	e13ffe15 	stw	r4,-8(fp)
 20163f8:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 20163fc:	00000806 	br	2016420 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 2016400:	e0bffe17 	ldw	r2,-8(fp)
 2016404:	10000005 	stb	zero,0(r2)
 2016408:	e0bffe17 	ldw	r2,-8(fp)
 201640c:	10800044 	addi	r2,r2,1
 2016410:	e0bffe15 	stw	r2,-8(fp)
        size--;
 2016414:	e0bfff0b 	ldhu	r2,-4(fp)
 2016418:	10bfffc4 	addi	r2,r2,-1
 201641c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 2016420:	e0bfff0b 	ldhu	r2,-4(fp)
 2016424:	1004c03a 	cmpne	r2,r2,zero
 2016428:	103ff51e 	bne	r2,zero,2016400 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 201642c:	e037883a 	mov	sp,fp
 2016430:	df000017 	ldw	fp,0(sp)
 2016434:	dec00104 	addi	sp,sp,4
 2016438:	f800283a 	ret

0201643c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 201643c:	defffc04 	addi	sp,sp,-16
 2016440:	df000315 	stw	fp,12(sp)
 2016444:	df000304 	addi	fp,sp,12
 2016448:	e13ffd15 	stw	r4,-12(fp)
 201644c:	e17ffe15 	stw	r5,-8(fp)
 2016450:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 2016454:	00000d06 	br	201648c <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 2016458:	e0bffe17 	ldw	r2,-8(fp)
 201645c:	10c00003 	ldbu	r3,0(r2)
 2016460:	e0bffd17 	ldw	r2,-12(fp)
 2016464:	10c00005 	stb	r3,0(r2)
 2016468:	e0bffd17 	ldw	r2,-12(fp)
 201646c:	10800044 	addi	r2,r2,1
 2016470:	e0bffd15 	stw	r2,-12(fp)
 2016474:	e0bffe17 	ldw	r2,-8(fp)
 2016478:	10800044 	addi	r2,r2,1
 201647c:	e0bffe15 	stw	r2,-8(fp)
        size--;
 2016480:	e0bfff0b 	ldhu	r2,-4(fp)
 2016484:	10bfffc4 	addi	r2,r2,-1
 2016488:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 201648c:	e0bfff0b 	ldhu	r2,-4(fp)
 2016490:	1004c03a 	cmpne	r2,r2,zero
 2016494:	103ff01e 	bne	r2,zero,2016458 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 2016498:	e037883a 	mov	sp,fp
 201649c:	df000017 	ldw	fp,0(sp)
 20164a0:	dec00104 	addi	sp,sp,4
 20164a4:	f800283a 	ret

020164a8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 20164a8:	defffb04 	addi	sp,sp,-20
 20164ac:	dfc00415 	stw	ra,16(sp)
 20164b0:	df000315 	stw	fp,12(sp)
 20164b4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20164b8:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20164bc:	0005303a 	rdctl	r2,status
 20164c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20164c4:	e0fffe17 	ldw	r3,-8(fp)
 20164c8:	00bfff84 	movi	r2,-2
 20164cc:	1884703a 	and	r2,r3,r2
 20164d0:	1001703a 	wrctl	status,r2
  
  return context;
 20164d4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 20164d8:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 20164dc:	d0a7cf03 	ldbu	r2,-24772(gp)
 20164e0:	10803fcc 	andi	r2,r2,255
 20164e4:	1004c03a 	cmpne	r2,r2,zero
 20164e8:	10001b1e 	bne	r2,zero,2016558 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 20164ec:	d0a7c103 	ldbu	r2,-24828(gp)
 20164f0:	10803fcc 	andi	r2,r2,255
 20164f4:	1004c03a 	cmpne	r2,r2,zero
 20164f8:	1000171e 	bne	r2,zero,2016558 <OS_Sched+0xb0>
            OS_SchedNew();
 20164fc:	201657c0 	call	201657c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 2016500:	d0a7c303 	ldbu	r2,-24820(gp)
 2016504:	d0e7c343 	ldbu	r3,-24819(gp)
 2016508:	11003fcc 	andi	r4,r2,255
 201650c:	18803fcc 	andi	r2,r3,255
 2016510:	20801126 	beq	r4,r2,2016558 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 2016514:	d0a7c303 	ldbu	r2,-24820(gp)
 2016518:	10803fcc 	andi	r2,r2,255
 201651c:	00c080f4 	movhi	r3,515
 2016520:	18e0b504 	addi	r3,r3,-32044
 2016524:	1085883a 	add	r2,r2,r2
 2016528:	1085883a 	add	r2,r2,r2
 201652c:	10c5883a 	add	r2,r2,r3
 2016530:	10800017 	ldw	r2,0(r2)
 2016534:	d0a7cb15 	stw	r2,-24788(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 2016538:	d0e7cb17 	ldw	r3,-24788(gp)
 201653c:	18800e17 	ldw	r2,56(r3)
 2016540:	10800044 	addi	r2,r2,1
 2016544:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 2016548:	d0a7c617 	ldw	r2,-24808(gp)
 201654c:	10800044 	addi	r2,r2,1
 2016550:	d0a7c615 	stw	r2,-24808(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 2016554:	201f9440 	call	201f944 <OSCtxSw>
 2016558:	e0bfff17 	ldw	r2,-4(fp)
 201655c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016560:	e0bffd17 	ldw	r2,-12(fp)
 2016564:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 2016568:	e037883a 	mov	sp,fp
 201656c:	dfc00117 	ldw	ra,4(sp)
 2016570:	df000017 	ldw	fp,0(sp)
 2016574:	dec00204 	addi	sp,sp,8
 2016578:	f800283a 	ret

0201657c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 201657c:	defffe04 	addi	sp,sp,-8
 2016580:	df000115 	stw	fp,4(sp)
 2016584:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 2016588:	d0a7cd03 	ldbu	r2,-24780(gp)
 201658c:	10c03fcc 	andi	r3,r2,255
 2016590:	008080b4 	movhi	r2,514
 2016594:	10848204 	addi	r2,r2,4616
 2016598:	10c5883a 	add	r2,r2,r3
 201659c:	10800003 	ldbu	r2,0(r2)
 20165a0:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 20165a4:	e0bfff03 	ldbu	r2,-4(fp)
 20165a8:	100490fa 	slli	r2,r2,3
 20165ac:	1009883a 	mov	r4,r2
 20165b0:	e0ffff03 	ldbu	r3,-4(fp)
 20165b4:	d0a7cd44 	addi	r2,gp,-24779
 20165b8:	1885883a 	add	r2,r3,r2
 20165bc:	10800003 	ldbu	r2,0(r2)
 20165c0:	10c03fcc 	andi	r3,r2,255
 20165c4:	008080b4 	movhi	r2,514
 20165c8:	10848204 	addi	r2,r2,4616
 20165cc:	10c5883a 	add	r2,r2,r3
 20165d0:	10800003 	ldbu	r2,0(r2)
 20165d4:	2085883a 	add	r2,r4,r2
 20165d8:	d0a7c305 	stb	r2,-24820(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 20165dc:	e037883a 	mov	sp,fp
 20165e0:	df000017 	ldw	fp,0(sp)
 20165e4:	dec00104 	addi	sp,sp,4
 20165e8:	f800283a 	ret

020165ec <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 20165ec:	defffc04 	addi	sp,sp,-16
 20165f0:	df000315 	stw	fp,12(sp)
 20165f4:	df000304 	addi	fp,sp,12
 20165f8:	e13ffe15 	stw	r4,-8(fp)
 20165fc:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 2016600:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 2016604:	00000d06 	br	201663c <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 2016608:	e0bfff17 	ldw	r2,-4(fp)
 201660c:	10c00003 	ldbu	r3,0(r2)
 2016610:	e0bffe17 	ldw	r2,-8(fp)
 2016614:	10c00005 	stb	r3,0(r2)
 2016618:	e0bffe17 	ldw	r2,-8(fp)
 201661c:	10800044 	addi	r2,r2,1
 2016620:	e0bffe15 	stw	r2,-8(fp)
 2016624:	e0bfff17 	ldw	r2,-4(fp)
 2016628:	10800044 	addi	r2,r2,1
 201662c:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2016630:	e0bffd03 	ldbu	r2,-12(fp)
 2016634:	10800044 	addi	r2,r2,1
 2016638:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 201663c:	e0bfff17 	ldw	r2,-4(fp)
 2016640:	10800003 	ldbu	r2,0(r2)
 2016644:	10803fcc 	andi	r2,r2,255
 2016648:	1004c03a 	cmpne	r2,r2,zero
 201664c:	103fee1e 	bne	r2,zero,2016608 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 2016650:	e0bffe17 	ldw	r2,-8(fp)
 2016654:	10000005 	stb	zero,0(r2)
    return (len);
 2016658:	e0bffd03 	ldbu	r2,-12(fp)
}
 201665c:	e037883a 	mov	sp,fp
 2016660:	df000017 	ldw	fp,0(sp)
 2016664:	dec00104 	addi	sp,sp,4
 2016668:	f800283a 	ret

0201666c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 201666c:	defffd04 	addi	sp,sp,-12
 2016670:	df000215 	stw	fp,8(sp)
 2016674:	df000204 	addi	fp,sp,8
 2016678:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 201667c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 2016680:	00000606 	br	201669c <OS_StrLen+0x30>
        psrc++;
 2016684:	e0bfff17 	ldw	r2,-4(fp)
 2016688:	10800044 	addi	r2,r2,1
 201668c:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2016690:	e0bffe03 	ldbu	r2,-8(fp)
 2016694:	10800044 	addi	r2,r2,1
 2016698:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 201669c:	e0bfff17 	ldw	r2,-4(fp)
 20166a0:	10800003 	ldbu	r2,0(r2)
 20166a4:	10803fcc 	andi	r2,r2,255
 20166a8:	1004c03a 	cmpne	r2,r2,zero
 20166ac:	103ff51e 	bne	r2,zero,2016684 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 20166b0:	e0bffe03 	ldbu	r2,-8(fp)
}
 20166b4:	e037883a 	mov	sp,fp
 20166b8:	df000017 	ldw	fp,0(sp)
 20166bc:	dec00104 	addi	sp,sp,4
 20166c0:	f800283a 	ret

020166c4 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 20166c4:	defffa04 	addi	sp,sp,-24
 20166c8:	dfc00515 	stw	ra,20(sp)
 20166cc:	df000415 	stw	fp,16(sp)
 20166d0:	df000404 	addi	fp,sp,16
 20166d4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20166d8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20166dc:	0005303a 	rdctl	r2,status
 20166e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20166e4:	e0fffd17 	ldw	r3,-12(fp)
 20166e8:	00bfff84 	movi	r2,-2
 20166ec:	1884703a 	and	r2,r3,r2
 20166f0:	1001703a 	wrctl	status,r2
  
  return context;
 20166f4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 20166f8:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 20166fc:	d0a7c217 	ldw	r2,-24824(gp)
 2016700:	10800044 	addi	r2,r2,1
 2016704:	d0a7c215 	stw	r2,-24824(gp)
 2016708:	e0bffe17 	ldw	r2,-8(fp)
 201670c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016710:	e0bffc17 	ldw	r2,-16(fp)
 2016714:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 2016718:	201fdf00 	call	201fdf0 <OSTaskIdleHook>
    }
 201671c:	003fef06 	br	20166dc <OS_TaskIdle+0x18>

02016720 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 2016720:	defffa04 	addi	sp,sp,-24
 2016724:	dfc00515 	stw	ra,20(sp)
 2016728:	df000415 	stw	fp,16(sp)
 201672c:	df000404 	addi	fp,sp,16
 2016730:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016734:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2016738:	00000206 	br	2016744 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 201673c:	01003204 	movi	r4,200
 2016740:	201c79c0 	call	201c79c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2016744:	d0a7d303 	ldbu	r2,-24756(gp)
 2016748:	10803fcc 	andi	r2,r2,255
 201674c:	1005003a 	cmpeq	r2,r2,zero
 2016750:	103ffa1e 	bne	r2,zero,201673c <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 2016754:	d127c717 	ldw	r4,-24804(gp)
 2016758:	01401904 	movi	r5,100
 201675c:	2005ab40 	call	2005ab4 <__udivsi3>
 2016760:	d0a7c715 	stw	r2,-24804(gp)
    if (OSIdleCtrMax == 0L) {
 2016764:	d0a7c717 	ldw	r2,-24804(gp)
 2016768:	1004c03a 	cmpne	r2,r2,zero
 201676c:	1000031e 	bne	r2,zero,201677c <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 2016770:	d027c905 	stb	zero,-24796(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 2016774:	01003fc4 	movi	r4,255
 2016778:	201c3b00 	call	201c3b0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201677c:	0005303a 	rdctl	r2,status
 2016780:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016784:	e0fffd17 	ldw	r3,-12(fp)
 2016788:	00bfff84 	movi	r2,-2
 201678c:	1884703a 	and	r2,r3,r2
 2016790:	1001703a 	wrctl	status,r2
  
  return context;
 2016794:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 2016798:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 201679c:	d0a7c217 	ldw	r2,-24824(gp)
 20167a0:	d0a7d415 	stw	r2,-24752(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 20167a4:	d027c215 	stw	zero,-24824(gp)
 20167a8:	e0bffe17 	ldw	r2,-8(fp)
 20167ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20167b0:	e0bffc17 	ldw	r2,-16(fp)
 20167b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 20167b8:	d127d417 	ldw	r4,-24752(gp)
 20167bc:	d167c717 	ldw	r5,-24804(gp)
 20167c0:	2005ab40 	call	2005ab4 <__udivsi3>
 20167c4:	1007883a 	mov	r3,r2
 20167c8:	00801904 	movi	r2,100
 20167cc:	10c5c83a 	sub	r2,r2,r3
 20167d0:	d0a7c905 	stb	r2,-24796(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 20167d4:	201fd800 	call	201fd80 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 20167d8:	20167e80 	call	20167e8 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 20167dc:	01001904 	movi	r4,100
 20167e0:	201c79c0 	call	201c79c <OSTimeDly>
    }
 20167e4:	003fe506 	br	201677c <OS_TaskStat+0x5c>

020167e8 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 20167e8:	defffa04 	addi	sp,sp,-24
 20167ec:	dfc00515 	stw	ra,20(sp)
 20167f0:	df000415 	stw	fp,16(sp)
 20167f4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 20167f8:	e03ffc05 	stb	zero,-16(fp)
 20167fc:	00002406 	br	2016890 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 2016800:	e13ffc03 	ldbu	r4,-16(fp)
 2016804:	e17ffe04 	addi	r5,fp,-8
 2016808:	201c1b40 	call	201c1b4 <OSTaskStkChk>
 201680c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 2016810:	e0bffc43 	ldbu	r2,-15(fp)
 2016814:	1004c03a 	cmpne	r2,r2,zero
 2016818:	10001a1e 	bne	r2,zero,2016884 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 201681c:	e0bffc03 	ldbu	r2,-16(fp)
 2016820:	00c080f4 	movhi	r3,515
 2016824:	18e0b504 	addi	r3,r3,-32044
 2016828:	1085883a 	add	r2,r2,r2
 201682c:	1085883a 	add	r2,r2,r2
 2016830:	10c5883a 	add	r2,r2,r3
 2016834:	10800017 	ldw	r2,0(r2)
 2016838:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 201683c:	e0bffd17 	ldw	r2,-12(fp)
 2016840:	1005003a 	cmpeq	r2,r2,zero
 2016844:	10000f1e 	bne	r2,zero,2016884 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 2016848:	e0bffd17 	ldw	r2,-12(fp)
 201684c:	10800060 	cmpeqi	r2,r2,1
 2016850:	10000c1e 	bne	r2,zero,2016884 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 2016854:	e0bffd17 	ldw	r2,-12(fp)
 2016858:	10c00217 	ldw	r3,8(r2)
 201685c:	e0bffd17 	ldw	r2,-12(fp)
 2016860:	10800317 	ldw	r2,12(r2)
 2016864:	1085883a 	add	r2,r2,r2
 2016868:	1085883a 	add	r2,r2,r2
 201686c:	1887883a 	add	r3,r3,r2
 2016870:	e0bffd17 	ldw	r2,-12(fp)
 2016874:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 2016878:	e0ffff17 	ldw	r3,-4(fp)
 201687c:	e0bffd17 	ldw	r2,-12(fp)
 2016880:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2016884:	e0bffc03 	ldbu	r2,-16(fp)
 2016888:	10800044 	addi	r2,r2,1
 201688c:	e0bffc05 	stb	r2,-16(fp)
 2016890:	e0bffc03 	ldbu	r2,-16(fp)
 2016894:	10800570 	cmpltui	r2,r2,21
 2016898:	103fd91e 	bne	r2,zero,2016800 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 201689c:	e037883a 	mov	sp,fp
 20168a0:	dfc00117 	ldw	ra,4(sp)
 20168a4:	df000017 	ldw	fp,0(sp)
 20168a8:	dec00204 	addi	sp,sp,8
 20168ac:	f800283a 	ret

020168b0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 20168b0:	defff104 	addi	sp,sp,-60
 20168b4:	dfc00e15 	stw	ra,56(sp)
 20168b8:	df000d15 	stw	fp,52(sp)
 20168bc:	df000d04 	addi	fp,sp,52
 20168c0:	e17ffb15 	stw	r5,-20(fp)
 20168c4:	e1bffc15 	stw	r6,-16(fp)
 20168c8:	e0800417 	ldw	r2,16(fp)
 20168cc:	e13ffa05 	stb	r4,-24(fp)
 20168d0:	e1fffd0d 	sth	r7,-12(fp)
 20168d4:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20168d8:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20168dc:	0005303a 	rdctl	r2,status
 20168e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20168e4:	e0fff717 	ldw	r3,-36(fp)
 20168e8:	00bfff84 	movi	r2,-2
 20168ec:	1884703a 	and	r2,r3,r2
 20168f0:	1001703a 	wrctl	status,r2
  
  return context;
 20168f4:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 20168f8:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 20168fc:	d0a7c817 	ldw	r2,-24800(gp)
 2016900:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 2016904:	e0bff917 	ldw	r2,-28(fp)
 2016908:	1005003a 	cmpeq	r2,r2,zero
 201690c:	1000941e 	bne	r2,zero,2016b60 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 2016910:	e0bff917 	ldw	r2,-28(fp)
 2016914:	10800517 	ldw	r2,20(r2)
 2016918:	d0a7c815 	stw	r2,-24800(gp)
 201691c:	e0bff817 	ldw	r2,-32(fp)
 2016920:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016924:	e0bff617 	ldw	r2,-40(fp)
 2016928:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 201692c:	e0fff917 	ldw	r3,-28(fp)
 2016930:	e0bffb17 	ldw	r2,-20(fp)
 2016934:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 2016938:	e0fff917 	ldw	r3,-28(fp)
 201693c:	e0bffa03 	ldbu	r2,-24(fp)
 2016940:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 2016944:	e0bff917 	ldw	r2,-28(fp)
 2016948:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 201694c:	e0bff917 	ldw	r2,-28(fp)
 2016950:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 2016954:	e0bff917 	ldw	r2,-28(fp)
 2016958:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 201695c:	e0fff917 	ldw	r3,-28(fp)
 2016960:	e0800317 	ldw	r2,12(fp)
 2016964:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 2016968:	e0fff917 	ldw	r3,-28(fp)
 201696c:	e0800217 	ldw	r2,8(fp)
 2016970:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 2016974:	e0fff917 	ldw	r3,-28(fp)
 2016978:	e0bffc17 	ldw	r2,-16(fp)
 201697c:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2016980:	e0fff917 	ldw	r3,-28(fp)
 2016984:	e0bffe0b 	ldhu	r2,-8(fp)
 2016988:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 201698c:	e0fff917 	ldw	r3,-28(fp)
 2016990:	e0bffd0b 	ldhu	r2,-12(fp)
 2016994:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 2016998:	e0bff917 	ldw	r2,-28(fp)
 201699c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 20169a0:	e0bffa03 	ldbu	r2,-24(fp)
 20169a4:	1004d0fa 	srli	r2,r2,3
 20169a8:	1007883a 	mov	r3,r2
 20169ac:	e0bff917 	ldw	r2,-28(fp)
 20169b0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 20169b4:	e0bffa03 	ldbu	r2,-24(fp)
 20169b8:	108001cc 	andi	r2,r2,7
 20169bc:	1007883a 	mov	r3,r2
 20169c0:	e0bff917 	ldw	r2,-28(fp)
 20169c4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 20169c8:	e0bff917 	ldw	r2,-28(fp)
 20169cc:	10800d03 	ldbu	r2,52(r2)
 20169d0:	10c03fcc 	andi	r3,r2,255
 20169d4:	00800044 	movi	r2,1
 20169d8:	10c4983a 	sll	r2,r2,r3
 20169dc:	1007883a 	mov	r3,r2
 20169e0:	e0bff917 	ldw	r2,-28(fp)
 20169e4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 20169e8:	e0bff917 	ldw	r2,-28(fp)
 20169ec:	10800cc3 	ldbu	r2,51(r2)
 20169f0:	10c03fcc 	andi	r3,r2,255
 20169f4:	00800044 	movi	r2,1
 20169f8:	10c4983a 	sll	r2,r2,r3
 20169fc:	1007883a 	mov	r3,r2
 2016a00:	e0bff917 	ldw	r2,-28(fp)
 2016a04:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 2016a08:	e0bff917 	ldw	r2,-28(fp)
 2016a0c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 2016a10:	e0bff917 	ldw	r2,-28(fp)
 2016a14:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 2016a18:	e0bff917 	ldw	r2,-28(fp)
 2016a1c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 2016a20:	e0bff917 	ldw	r2,-28(fp)
 2016a24:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 2016a28:	e0bff917 	ldw	r2,-28(fp)
 2016a2c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 2016a30:	e0bff917 	ldw	r2,-28(fp)
 2016a34:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 2016a38:	e0bff917 	ldw	r2,-28(fp)
 2016a3c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 2016a40:	e0bff917 	ldw	r2,-28(fp)
 2016a44:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 2016a48:	e0bff917 	ldw	r2,-28(fp)
 2016a4c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2016a50:	e0fff917 	ldw	r3,-28(fp)
 2016a54:	00800fc4 	movi	r2,63
 2016a58:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2016a5c:	e0bff917 	ldw	r2,-28(fp)
 2016a60:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 2016a64:	e13ff917 	ldw	r4,-28(fp)
 2016a68:	201fe0c0 	call	201fe0c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2016a6c:	e13ff917 	ldw	r4,-28(fp)
 2016a70:	201fd240 	call	201fd24 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016a74:	0005303a 	rdctl	r2,status
 2016a78:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016a7c:	e0fff517 	ldw	r3,-44(fp)
 2016a80:	00bfff84 	movi	r2,-2
 2016a84:	1884703a 	and	r2,r3,r2
 2016a88:	1001703a 	wrctl	status,r2
  
  return context;
 2016a8c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 2016a90:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 2016a94:	e0bffa03 	ldbu	r2,-24(fp)
 2016a98:	00c080f4 	movhi	r3,515
 2016a9c:	18e0b504 	addi	r3,r3,-32044
 2016aa0:	1085883a 	add	r2,r2,r2
 2016aa4:	1085883a 	add	r2,r2,r2
 2016aa8:	10c7883a 	add	r3,r2,r3
 2016aac:	e0bff917 	ldw	r2,-28(fp)
 2016ab0:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 2016ab4:	d0e7c417 	ldw	r3,-24816(gp)
 2016ab8:	e0bff917 	ldw	r2,-28(fp)
 2016abc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2016ac0:	e0bff917 	ldw	r2,-28(fp)
 2016ac4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 2016ac8:	d0a7c417 	ldw	r2,-24816(gp)
 2016acc:	1005003a 	cmpeq	r2,r2,zero
 2016ad0:	1000031e 	bne	r2,zero,2016ae0 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 2016ad4:	d0e7c417 	ldw	r3,-24816(gp)
 2016ad8:	e0bff917 	ldw	r2,-28(fp)
 2016adc:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 2016ae0:	e0bff917 	ldw	r2,-28(fp)
 2016ae4:	d0a7c415 	stw	r2,-24816(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 2016ae8:	e0bff917 	ldw	r2,-28(fp)
 2016aec:	10c00d83 	ldbu	r3,54(r2)
 2016af0:	d0a7cd03 	ldbu	r2,-24780(gp)
 2016af4:	1884b03a 	or	r2,r3,r2
 2016af8:	d0a7cd05 	stb	r2,-24780(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2016afc:	e0bff917 	ldw	r2,-28(fp)
 2016b00:	10800d03 	ldbu	r2,52(r2)
 2016b04:	11003fcc 	andi	r4,r2,255
 2016b08:	e0bff917 	ldw	r2,-28(fp)
 2016b0c:	10800d03 	ldbu	r2,52(r2)
 2016b10:	10c03fcc 	andi	r3,r2,255
 2016b14:	d0a7cd44 	addi	r2,gp,-24779
 2016b18:	1885883a 	add	r2,r3,r2
 2016b1c:	10c00003 	ldbu	r3,0(r2)
 2016b20:	e0bff917 	ldw	r2,-28(fp)
 2016b24:	10800d43 	ldbu	r2,53(r2)
 2016b28:	1884b03a 	or	r2,r3,r2
 2016b2c:	1007883a 	mov	r3,r2
 2016b30:	d0a7cd44 	addi	r2,gp,-24779
 2016b34:	2085883a 	add	r2,r4,r2
 2016b38:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 2016b3c:	d0a7c943 	ldbu	r2,-24795(gp)
 2016b40:	10800044 	addi	r2,r2,1
 2016b44:	d0a7c945 	stb	r2,-24795(gp)
 2016b48:	e0bff817 	ldw	r2,-32(fp)
 2016b4c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016b50:	e0bff417 	ldw	r2,-48(fp)
 2016b54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2016b58:	e03fff15 	stw	zero,-4(fp)
 2016b5c:	00000606 	br	2016b78 <OS_TCBInit+0x2c8>
 2016b60:	e0bff817 	ldw	r2,-32(fp)
 2016b64:	e0bff315 	stw	r2,-52(fp)
 2016b68:	e0bff317 	ldw	r2,-52(fp)
 2016b6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2016b70:	00801084 	movi	r2,66
 2016b74:	e0bfff15 	stw	r2,-4(fp)
 2016b78:	e0bfff17 	ldw	r2,-4(fp)
}
 2016b7c:	e037883a 	mov	sp,fp
 2016b80:	dfc00117 	ldw	ra,4(sp)
 2016b84:	df000017 	ldw	fp,0(sp)
 2016b88:	dec00204 	addi	sp,sp,8
 2016b8c:	f800283a 	ret

02016b90 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 2016b90:	defffe04 	addi	sp,sp,-8
 2016b94:	df000115 	stw	fp,4(sp)
 2016b98:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2016b9c:	d0a01604 	addi	r2,gp,-32680
 2016ba0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2016ba4:	d0a01704 	addi	r2,gp,-32676
 2016ba8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2016bac:	d0a01884 	addi	r2,gp,-32670
 2016bb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2016bb4:	d0a01904 	addi	r2,gp,-32668
 2016bb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2016bbc:	d0a01804 	addi	r2,gp,-32672
 2016bc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2016bc4:	d0a01984 	addi	r2,gp,-32666
 2016bc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 2016bcc:	d0a01a04 	addi	r2,gp,-32664
 2016bd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 2016bd4:	d0a01a84 	addi	r2,gp,-32662
 2016bd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 2016bdc:	d0a01b04 	addi	r2,gp,-32660
 2016be0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 2016be4:	d0a01b84 	addi	r2,gp,-32658
 2016be8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 2016bec:	d0a01c04 	addi	r2,gp,-32656
 2016bf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 2016bf4:	d0a01c84 	addi	r2,gp,-32654
 2016bf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 2016bfc:	d0a01d04 	addi	r2,gp,-32652
 2016c00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 2016c04:	d0a01d84 	addi	r2,gp,-32650
 2016c08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 2016c0c:	d0a01e04 	addi	r2,gp,-32648
 2016c10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 2016c14:	d0a01e84 	addi	r2,gp,-32646
 2016c18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 2016c1c:	d0a01f04 	addi	r2,gp,-32644
 2016c20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 2016c24:	d0a01f84 	addi	r2,gp,-32642
 2016c28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 2016c2c:	d0a02004 	addi	r2,gp,-32640
 2016c30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 2016c34:	d0a02084 	addi	r2,gp,-32638
 2016c38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 2016c3c:	d0a02104 	addi	r2,gp,-32636
 2016c40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 2016c44:	d0a02184 	addi	r2,gp,-32634
 2016c48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 2016c4c:	d0a02204 	addi	r2,gp,-32632
 2016c50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 2016c54:	d0a02284 	addi	r2,gp,-32630
 2016c58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2016c5c:	d0a02304 	addi	r2,gp,-32628
 2016c60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 2016c64:	d0a02384 	addi	r2,gp,-32626
 2016c68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2016c6c:	d0a02404 	addi	r2,gp,-32624
 2016c70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 2016c74:	d0a02484 	addi	r2,gp,-32622
 2016c78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2016c7c:	d0a02504 	addi	r2,gp,-32620
 2016c80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 2016c84:	d0a02584 	addi	r2,gp,-32618
 2016c88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2016c8c:	d0a02604 	addi	r2,gp,-32616
 2016c90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 2016c94:	d0a02684 	addi	r2,gp,-32614
 2016c98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2016c9c:	d0a02704 	addi	r2,gp,-32612
 2016ca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2016ca4:	d0a02784 	addi	r2,gp,-32610
 2016ca8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2016cac:	d0a02804 	addi	r2,gp,-32608
 2016cb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2016cb4:	d0a02884 	addi	r2,gp,-32606
 2016cb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2016cbc:	d0a02904 	addi	r2,gp,-32604
 2016cc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 2016cc4:	d0a02984 	addi	r2,gp,-32602
 2016cc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 2016ccc:	d0a02a04 	addi	r2,gp,-32600
 2016cd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 2016cd4:	d0a02a84 	addi	r2,gp,-32598
 2016cd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 2016cdc:	d0a02b04 	addi	r2,gp,-32596
 2016ce0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 2016ce4:	d0a02b84 	addi	r2,gp,-32594
 2016ce8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 2016cec:	d0a02c04 	addi	r2,gp,-32592
 2016cf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 2016cf4:	d0a02c84 	addi	r2,gp,-32590
 2016cf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 2016cfc:	d0a02d04 	addi	r2,gp,-32588
 2016d00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 2016d04:	d0a03204 	addi	r2,gp,-32568
 2016d08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 2016d0c:	e037883a 	mov	sp,fp
 2016d10:	df000017 	ldw	fp,0(sp)
 2016d14:	dec00104 	addi	sp,sp,4
 2016d18:	f800283a 	ret

02016d1c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 2016d1c:	defff104 	addi	sp,sp,-60
 2016d20:	df000e15 	stw	fp,56(sp)
 2016d24:	df000e04 	addi	fp,sp,56
 2016d28:	e13ffa15 	stw	r4,-24(fp)
 2016d2c:	e1fffd15 	stw	r7,-12(fp)
 2016d30:	e17ffb0d 	sth	r5,-20(fp)
 2016d34:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2016d38:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2016d3c:	e0bffd17 	ldw	r2,-12(fp)
 2016d40:	1004c03a 	cmpne	r2,r2,zero
 2016d44:	1000021e 	bne	r2,zero,2016d50 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 2016d48:	e03fff15 	stw	zero,-4(fp)
 2016d4c:	0000bb06 	br	201703c <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2016d50:	e0bffa17 	ldw	r2,-24(fp)
 2016d54:	1004c03a 	cmpne	r2,r2,zero
 2016d58:	1000051e 	bne	r2,zero,2016d70 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2016d5c:	e0fffd17 	ldw	r3,-12(fp)
 2016d60:	00801b84 	movi	r2,110
 2016d64:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2016d68:	e03fff15 	stw	zero,-4(fp)
 2016d6c:	0000b306 	br	201703c <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2016d70:	e0bffa17 	ldw	r2,-24(fp)
 2016d74:	10800003 	ldbu	r2,0(r2)
 2016d78:	10803fcc 	andi	r2,r2,255
 2016d7c:	10800160 	cmpeqi	r2,r2,5
 2016d80:	1000051e 	bne	r2,zero,2016d98 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2016d84:	e0fffd17 	ldw	r3,-12(fp)
 2016d88:	00800044 	movi	r2,1
 2016d8c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2016d90:	e03fff15 	stw	zero,-4(fp)
 2016d94:	0000a906 	br	201703c <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2016d98:	e0fffc03 	ldbu	r3,-16(fp)
 2016d9c:	00bfe004 	movi	r2,-128
 2016da0:	1884703a 	and	r2,r3,r2
 2016da4:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 2016da8:	e0bff943 	ldbu	r2,-27(fp)
 2016dac:	1005003a 	cmpeq	r2,r2,zero
 2016db0:	1000061e 	bne	r2,zero,2016dcc <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 2016db4:	e0bffc03 	ldbu	r2,-16(fp)
 2016db8:	10801fcc 	andi	r2,r2,127
 2016dbc:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 2016dc0:	00800044 	movi	r2,1
 2016dc4:	e0bff905 	stb	r2,-28(fp)
 2016dc8:	00000106 	br	2016dd0 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 2016dcc:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 2016dd0:	e0bffd17 	ldw	r2,-12(fp)
 2016dd4:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016dd8:	0005303a 	rdctl	r2,status
 2016ddc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016de0:	e0fff717 	ldw	r3,-36(fp)
 2016de4:	00bfff84 	movi	r2,-2
 2016de8:	1884703a 	and	r2,r3,r2
 2016dec:	1001703a 	wrctl	status,r2
  
  return context;
 2016df0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 2016df4:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 2016df8:	e0bffc03 	ldbu	r2,-16(fp)
 2016dfc:	e0bffe15 	stw	r2,-8(fp)
 2016e00:	e0fffe17 	ldw	r3,-8(fp)
 2016e04:	18800060 	cmpeqi	r2,r3,1
 2016e08:	1000651e 	bne	r2,zero,2016fa0 <OSFlagAccept+0x284>
 2016e0c:	e0fffe17 	ldw	r3,-8(fp)
 2016e10:	18800088 	cmpgei	r2,r3,2
 2016e14:	1000041e 	bne	r2,zero,2016e28 <OSFlagAccept+0x10c>
 2016e18:	e0fffe17 	ldw	r3,-8(fp)
 2016e1c:	1805003a 	cmpeq	r2,r3,zero
 2016e20:	1000421e 	bne	r2,zero,2016f2c <OSFlagAccept+0x210>
 2016e24:	00007b06 	br	2017014 <OSFlagAccept+0x2f8>
 2016e28:	e0fffe17 	ldw	r3,-8(fp)
 2016e2c:	188000a0 	cmpeqi	r2,r3,2
 2016e30:	1000041e 	bne	r2,zero,2016e44 <OSFlagAccept+0x128>
 2016e34:	e0fffe17 	ldw	r3,-8(fp)
 2016e38:	188000e0 	cmpeqi	r2,r3,3
 2016e3c:	10001e1e 	bne	r2,zero,2016eb8 <OSFlagAccept+0x19c>
 2016e40:	00007406 	br	2017014 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2016e44:	e0bffa17 	ldw	r2,-24(fp)
 2016e48:	10c0020b 	ldhu	r3,8(r2)
 2016e4c:	e0bffb0b 	ldhu	r2,-20(fp)
 2016e50:	1884703a 	and	r2,r3,r2
 2016e54:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2016e58:	e0fff98b 	ldhu	r3,-26(fp)
 2016e5c:	e0bffb0b 	ldhu	r2,-20(fp)
 2016e60:	18800d1e 	bne	r3,r2,2016e98 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016e64:	e0bff903 	ldbu	r2,-28(fp)
 2016e68:	10800058 	cmpnei	r2,r2,1
 2016e6c:	10000d1e 	bne	r2,zero,2016ea4 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2016e70:	e0bffa17 	ldw	r2,-24(fp)
 2016e74:	1080020b 	ldhu	r2,8(r2)
 2016e78:	1007883a 	mov	r3,r2
 2016e7c:	e0bff98b 	ldhu	r2,-26(fp)
 2016e80:	0084303a 	nor	r2,zero,r2
 2016e84:	1884703a 	and	r2,r3,r2
 2016e88:	1007883a 	mov	r3,r2
 2016e8c:	e0bffa17 	ldw	r2,-24(fp)
 2016e90:	10c0020d 	sth	r3,8(r2)
 2016e94:	00000306 	br	2016ea4 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2016e98:	e0fffd17 	ldw	r3,-12(fp)
 2016e9c:	00801c04 	movi	r2,112
 2016ea0:	18800005 	stb	r2,0(r3)
 2016ea4:	e0bff817 	ldw	r2,-32(fp)
 2016ea8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016eac:	e0bff617 	ldw	r2,-40(fp)
 2016eb0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2016eb4:	00005f06 	br	2017034 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2016eb8:	e0bffa17 	ldw	r2,-24(fp)
 2016ebc:	10c0020b 	ldhu	r3,8(r2)
 2016ec0:	e0bffb0b 	ldhu	r2,-20(fp)
 2016ec4:	1884703a 	and	r2,r3,r2
 2016ec8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2016ecc:	e0bff98b 	ldhu	r2,-26(fp)
 2016ed0:	1005003a 	cmpeq	r2,r2,zero
 2016ed4:	10000d1e 	bne	r2,zero,2016f0c <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016ed8:	e0bff903 	ldbu	r2,-28(fp)
 2016edc:	10800058 	cmpnei	r2,r2,1
 2016ee0:	10000d1e 	bne	r2,zero,2016f18 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2016ee4:	e0bffa17 	ldw	r2,-24(fp)
 2016ee8:	1080020b 	ldhu	r2,8(r2)
 2016eec:	1007883a 	mov	r3,r2
 2016ef0:	e0bff98b 	ldhu	r2,-26(fp)
 2016ef4:	0084303a 	nor	r2,zero,r2
 2016ef8:	1884703a 	and	r2,r3,r2
 2016efc:	1007883a 	mov	r3,r2
 2016f00:	e0bffa17 	ldw	r2,-24(fp)
 2016f04:	10c0020d 	sth	r3,8(r2)
 2016f08:	00000306 	br	2016f18 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2016f0c:	e0fffd17 	ldw	r3,-12(fp)
 2016f10:	00801c04 	movi	r2,112
 2016f14:	18800005 	stb	r2,0(r3)
 2016f18:	e0bff817 	ldw	r2,-32(fp)
 2016f1c:	e0bff515 	stw	r2,-44(fp)
 2016f20:	e0bff517 	ldw	r2,-44(fp)
 2016f24:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2016f28:	00004206 	br	2017034 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2016f2c:	e0bffa17 	ldw	r2,-24(fp)
 2016f30:	1080020b 	ldhu	r2,8(r2)
 2016f34:	0084303a 	nor	r2,zero,r2
 2016f38:	1007883a 	mov	r3,r2
 2016f3c:	e0bffb0b 	ldhu	r2,-20(fp)
 2016f40:	1884703a 	and	r2,r3,r2
 2016f44:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2016f48:	e0fff98b 	ldhu	r3,-26(fp)
 2016f4c:	e0bffb0b 	ldhu	r2,-20(fp)
 2016f50:	18800b1e 	bne	r3,r2,2016f80 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016f54:	e0bff903 	ldbu	r2,-28(fp)
 2016f58:	10800058 	cmpnei	r2,r2,1
 2016f5c:	10000b1e 	bne	r2,zero,2016f8c <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2016f60:	e0bffa17 	ldw	r2,-24(fp)
 2016f64:	10c0020b 	ldhu	r3,8(r2)
 2016f68:	e0bff98b 	ldhu	r2,-26(fp)
 2016f6c:	1884b03a 	or	r2,r3,r2
 2016f70:	1007883a 	mov	r3,r2
 2016f74:	e0bffa17 	ldw	r2,-24(fp)
 2016f78:	10c0020d 	sth	r3,8(r2)
 2016f7c:	00000306 	br	2016f8c <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2016f80:	e0fffd17 	ldw	r3,-12(fp)
 2016f84:	00801c04 	movi	r2,112
 2016f88:	18800005 	stb	r2,0(r3)
 2016f8c:	e0bff817 	ldw	r2,-32(fp)
 2016f90:	e0bff415 	stw	r2,-48(fp)
 2016f94:	e0bff417 	ldw	r2,-48(fp)
 2016f98:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2016f9c:	00002506 	br	2017034 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2016fa0:	e0bffa17 	ldw	r2,-24(fp)
 2016fa4:	1080020b 	ldhu	r2,8(r2)
 2016fa8:	0084303a 	nor	r2,zero,r2
 2016fac:	1007883a 	mov	r3,r2
 2016fb0:	e0bffb0b 	ldhu	r2,-20(fp)
 2016fb4:	1884703a 	and	r2,r3,r2
 2016fb8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2016fbc:	e0bff98b 	ldhu	r2,-26(fp)
 2016fc0:	1005003a 	cmpeq	r2,r2,zero
 2016fc4:	10000b1e 	bne	r2,zero,2016ff4 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2016fc8:	e0bff903 	ldbu	r2,-28(fp)
 2016fcc:	10800058 	cmpnei	r2,r2,1
 2016fd0:	10000b1e 	bne	r2,zero,2017000 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2016fd4:	e0bffa17 	ldw	r2,-24(fp)
 2016fd8:	10c0020b 	ldhu	r3,8(r2)
 2016fdc:	e0bff98b 	ldhu	r2,-26(fp)
 2016fe0:	1884b03a 	or	r2,r3,r2
 2016fe4:	1007883a 	mov	r3,r2
 2016fe8:	e0bffa17 	ldw	r2,-24(fp)
 2016fec:	10c0020d 	sth	r3,8(r2)
 2016ff0:	00000306 	br	2017000 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2016ff4:	e0fffd17 	ldw	r3,-12(fp)
 2016ff8:	00801c04 	movi	r2,112
 2016ffc:	18800005 	stb	r2,0(r3)
 2017000:	e0bff817 	ldw	r2,-32(fp)
 2017004:	e0bff315 	stw	r2,-52(fp)
 2017008:	e0bff317 	ldw	r2,-52(fp)
 201700c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2017010:	00000806 	br	2017034 <OSFlagAccept+0x318>
 2017014:	e0bff817 	ldw	r2,-32(fp)
 2017018:	e0bff215 	stw	r2,-56(fp)
 201701c:	e0bff217 	ldw	r2,-56(fp)
 2017020:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2017024:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 2017028:	e0fffd17 	ldw	r3,-12(fp)
 201702c:	00801bc4 	movi	r2,111
 2017030:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 2017034:	e0bff98b 	ldhu	r2,-26(fp)
 2017038:	e0bfff15 	stw	r2,-4(fp)
 201703c:	e0bfff17 	ldw	r2,-4(fp)
}
 2017040:	e037883a 	mov	sp,fp
 2017044:	df000017 	ldw	fp,0(sp)
 2017048:	dec00104 	addi	sp,sp,4
 201704c:	f800283a 	ret

02017050 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 2017050:	defff704 	addi	sp,sp,-36
 2017054:	df000815 	stw	fp,32(sp)
 2017058:	df000804 	addi	fp,sp,32
 201705c:	e17ffe15 	stw	r5,-8(fp)
 2017060:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 2017064:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 2017068:	e0bffe17 	ldw	r2,-8(fp)
 201706c:	1004c03a 	cmpne	r2,r2,zero
 2017070:	1000021e 	bne	r2,zero,201707c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 2017074:	e03fff15 	stw	zero,-4(fp)
 2017078:	00003f06 	br	2017178 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 201707c:	008080b4 	movhi	r2,514
 2017080:	1093e504 	addi	r2,r2,20372
 2017084:	10800003 	ldbu	r2,0(r2)
 2017088:	10803fcc 	andi	r2,r2,255
 201708c:	1005003a 	cmpeq	r2,r2,zero
 2017090:	1000051e 	bne	r2,zero,20170a8 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 2017094:	e0fffe17 	ldw	r3,-8(fp)
 2017098:	00800404 	movi	r2,16
 201709c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 20170a0:	e03fff15 	stw	zero,-4(fp)
 20170a4:	00003406 	br	2017178 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20170a8:	0005303a 	rdctl	r2,status
 20170ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20170b0:	e0fffa17 	ldw	r3,-24(fp)
 20170b4:	00bfff84 	movi	r2,-2
 20170b8:	1884703a 	and	r2,r3,r2
 20170bc:	1001703a 	wrctl	status,r2
  
  return context;
 20170c0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 20170c4:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 20170c8:	008080b4 	movhi	r2,514
 20170cc:	1093e804 	addi	r2,r2,20384
 20170d0:	10800017 	ldw	r2,0(r2)
 20170d4:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 20170d8:	e0bffc17 	ldw	r2,-16(fp)
 20170dc:	1005003a 	cmpeq	r2,r2,zero
 20170e0:	10001c1e 	bne	r2,zero,2017154 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 20170e4:	008080b4 	movhi	r2,514
 20170e8:	1093e804 	addi	r2,r2,20384
 20170ec:	10800017 	ldw	r2,0(r2)
 20170f0:	10800117 	ldw	r2,4(r2)
 20170f4:	1007883a 	mov	r3,r2
 20170f8:	008080b4 	movhi	r2,514
 20170fc:	1093e804 	addi	r2,r2,20384
 2017100:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 2017104:	e0fffc17 	ldw	r3,-16(fp)
 2017108:	00800144 	movi	r2,5
 201710c:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 2017110:	e0fffc17 	ldw	r3,-16(fp)
 2017114:	e0bffd0b 	ldhu	r2,-12(fp)
 2017118:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 201711c:	e0bffc17 	ldw	r2,-16(fp)
 2017120:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 2017124:	e0fffc17 	ldw	r3,-16(fp)
 2017128:	00800fc4 	movi	r2,63
 201712c:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2017130:	e0bffc17 	ldw	r2,-16(fp)
 2017134:	100002c5 	stb	zero,11(r2)
 2017138:	e0bffb17 	ldw	r2,-20(fp)
 201713c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017140:	e0bff917 	ldw	r2,-28(fp)
 2017144:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 2017148:	e0bffe17 	ldw	r2,-8(fp)
 201714c:	10000005 	stb	zero,0(r2)
 2017150:	00000706 	br	2017170 <OSFlagCreate+0x120>
 2017154:	e0bffb17 	ldw	r2,-20(fp)
 2017158:	e0bff815 	stw	r2,-32(fp)
 201715c:	e0bff817 	ldw	r2,-32(fp)
 2017160:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 2017164:	e0fffe17 	ldw	r3,-8(fp)
 2017168:	00801c84 	movi	r2,114
 201716c:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 2017170:	e0bffc17 	ldw	r2,-16(fp)
 2017174:	e0bfff15 	stw	r2,-4(fp)
 2017178:	e0bfff17 	ldw	r2,-4(fp)
}
 201717c:	e037883a 	mov	sp,fp
 2017180:	df000017 	ldw	fp,0(sp)
 2017184:	dec00104 	addi	sp,sp,4
 2017188:	f800283a 	ret

0201718c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 201718c:	defff004 	addi	sp,sp,-64
 2017190:	dfc00f15 	stw	ra,60(sp)
 2017194:	df000e15 	stw	fp,56(sp)
 2017198:	df000e04 	addi	fp,sp,56
 201719c:	e13ffb15 	stw	r4,-20(fp)
 20171a0:	e1bffd15 	stw	r6,-12(fp)
 20171a4:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 20171a8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20171ac:	e0bffd17 	ldw	r2,-12(fp)
 20171b0:	1004c03a 	cmpne	r2,r2,zero
 20171b4:	1000031e 	bne	r2,zero,20171c4 <OSFlagDel+0x38>
        return (pgrp);
 20171b8:	e0bffb17 	ldw	r2,-20(fp)
 20171bc:	e0bfff15 	stw	r2,-4(fp)
 20171c0:	00009606 	br	201741c <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 20171c4:	e0bffb17 	ldw	r2,-20(fp)
 20171c8:	1004c03a 	cmpne	r2,r2,zero
 20171cc:	1000061e 	bne	r2,zero,20171e8 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20171d0:	e0fffd17 	ldw	r3,-12(fp)
 20171d4:	00801b84 	movi	r2,110
 20171d8:	18800005 	stb	r2,0(r3)
        return (pgrp);
 20171dc:	e0fffb17 	ldw	r3,-20(fp)
 20171e0:	e0ffff15 	stw	r3,-4(fp)
 20171e4:	00008d06 	br	201741c <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 20171e8:	008080b4 	movhi	r2,514
 20171ec:	1093e504 	addi	r2,r2,20372
 20171f0:	10800003 	ldbu	r2,0(r2)
 20171f4:	10803fcc 	andi	r2,r2,255
 20171f8:	1005003a 	cmpeq	r2,r2,zero
 20171fc:	1000061e 	bne	r2,zero,2017218 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2017200:	e0fffd17 	ldw	r3,-12(fp)
 2017204:	008003c4 	movi	r2,15
 2017208:	18800005 	stb	r2,0(r3)
        return (pgrp);
 201720c:	e0bffb17 	ldw	r2,-20(fp)
 2017210:	e0bfff15 	stw	r2,-4(fp)
 2017214:	00008106 	br	201741c <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 2017218:	e0bffb17 	ldw	r2,-20(fp)
 201721c:	10800003 	ldbu	r2,0(r2)
 2017220:	10803fcc 	andi	r2,r2,255
 2017224:	10800160 	cmpeqi	r2,r2,5
 2017228:	1000061e 	bne	r2,zero,2017244 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 201722c:	e0fffd17 	ldw	r3,-12(fp)
 2017230:	00800044 	movi	r2,1
 2017234:	18800005 	stb	r2,0(r3)
        return (pgrp);
 2017238:	e0fffb17 	ldw	r3,-20(fp)
 201723c:	e0ffff15 	stw	r3,-4(fp)
 2017240:	00007606 	br	201741c <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017244:	0005303a 	rdctl	r2,status
 2017248:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201724c:	e0fff617 	ldw	r3,-40(fp)
 2017250:	00bfff84 	movi	r2,-2
 2017254:	1884703a 	and	r2,r3,r2
 2017258:	1001703a 	wrctl	status,r2
  
  return context;
 201725c:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 2017260:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 2017264:	e0bffb17 	ldw	r2,-20(fp)
 2017268:	10800117 	ldw	r2,4(r2)
 201726c:	1005003a 	cmpeq	r2,r2,zero
 2017270:	1000031e 	bne	r2,zero,2017280 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2017274:	00800044 	movi	r2,1
 2017278:	e0bffa05 	stb	r2,-24(fp)
 201727c:	00000106 	br	2017284 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2017280:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 2017284:	e0bffc03 	ldbu	r2,-16(fp)
 2017288:	e0bffe15 	stw	r2,-8(fp)
 201728c:	e0fffe17 	ldw	r3,-8(fp)
 2017290:	1805003a 	cmpeq	r2,r3,zero
 2017294:	1000041e 	bne	r2,zero,20172a8 <OSFlagDel+0x11c>
 2017298:	e0fffe17 	ldw	r3,-8(fp)
 201729c:	18800060 	cmpeqi	r2,r3,1
 20172a0:	1000281e 	bne	r2,zero,2017344 <OSFlagDel+0x1b8>
 20172a4:	00005206 	br	20173f0 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 20172a8:	e0bffa03 	ldbu	r2,-24(fp)
 20172ac:	1004c03a 	cmpne	r2,r2,zero
 20172b0:	10001a1e 	bne	r2,zero,201731c <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 20172b4:	e0fffb17 	ldw	r3,-20(fp)
 20172b8:	00800fc4 	movi	r2,63
 20172bc:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20172c0:	e0bffb17 	ldw	r2,-20(fp)
 20172c4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20172c8:	e0bffb17 	ldw	r2,-20(fp)
 20172cc:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 20172d0:	008080b4 	movhi	r2,514
 20172d4:	1093e804 	addi	r2,r2,20384
 20172d8:	10c00017 	ldw	r3,0(r2)
 20172dc:	e0bffb17 	ldw	r2,-20(fp)
 20172e0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 20172e4:	e0bffb17 	ldw	r2,-20(fp)
 20172e8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 20172ec:	00c080b4 	movhi	r3,514
 20172f0:	18d3e804 	addi	r3,r3,20384
 20172f4:	e0bffb17 	ldw	r2,-20(fp)
 20172f8:	18800015 	stw	r2,0(r3)
 20172fc:	e0bff717 	ldw	r2,-36(fp)
 2017300:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017304:	e0bff517 	ldw	r2,-44(fp)
 2017308:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 201730c:	e0bffd17 	ldw	r2,-12(fp)
 2017310:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 2017314:	e03ff815 	stw	zero,-32(fp)
 2017318:	00003e06 	br	2017414 <OSFlagDel+0x288>
 201731c:	e0bff717 	ldw	r2,-36(fp)
 2017320:	e0bff415 	stw	r2,-48(fp)
 2017324:	e0bff417 	ldw	r2,-48(fp)
 2017328:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 201732c:	e0fffd17 	ldw	r3,-12(fp)
 2017330:	00801244 	movi	r2,73
 2017334:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 2017338:	e0bffb17 	ldw	r2,-20(fp)
 201733c:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 2017340:	00003406 	br	2017414 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2017344:	e0bffb17 	ldw	r2,-20(fp)
 2017348:	10800117 	ldw	r2,4(r2)
 201734c:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2017350:	00000606 	br	201736c <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 2017354:	e13ff917 	ldw	r4,-28(fp)
 2017358:	000b883a 	mov	r5,zero
 201735c:	201849c0 	call	201849c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2017360:	e0bff917 	ldw	r2,-28(fp)
 2017364:	10800017 	ldw	r2,0(r2)
 2017368:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 201736c:	e0bff917 	ldw	r2,-28(fp)
 2017370:	1004c03a 	cmpne	r2,r2,zero
 2017374:	103ff71e 	bne	r2,zero,2017354 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 2017378:	e0fffb17 	ldw	r3,-20(fp)
 201737c:	00800fc4 	movi	r2,63
 2017380:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2017384:	e0bffb17 	ldw	r2,-20(fp)
 2017388:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 201738c:	e0bffb17 	ldw	r2,-20(fp)
 2017390:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 2017394:	008080b4 	movhi	r2,514
 2017398:	1093e804 	addi	r2,r2,20384
 201739c:	10c00017 	ldw	r3,0(r2)
 20173a0:	e0bffb17 	ldw	r2,-20(fp)
 20173a4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 20173a8:	e0bffb17 	ldw	r2,-20(fp)
 20173ac:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 20173b0:	00c080b4 	movhi	r3,514
 20173b4:	18d3e804 	addi	r3,r3,20384
 20173b8:	e0bffb17 	ldw	r2,-20(fp)
 20173bc:	18800015 	stw	r2,0(r3)
 20173c0:	e0bff717 	ldw	r2,-36(fp)
 20173c4:	e0bff315 	stw	r2,-52(fp)
 20173c8:	e0bff317 	ldw	r2,-52(fp)
 20173cc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 20173d0:	e0bffa03 	ldbu	r2,-24(fp)
 20173d4:	10800058 	cmpnei	r2,r2,1
 20173d8:	1000011e 	bne	r2,zero,20173e0 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 20173dc:	20164a80 	call	20164a8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 20173e0:	e0bffd17 	ldw	r2,-12(fp)
 20173e4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 20173e8:	e03ff815 	stw	zero,-32(fp)
             break;
 20173ec:	00000906 	br	2017414 <OSFlagDel+0x288>
 20173f0:	e0bff717 	ldw	r2,-36(fp)
 20173f4:	e0bff215 	stw	r2,-56(fp)
 20173f8:	e0bff217 	ldw	r2,-56(fp)
 20173fc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 2017400:	e0fffd17 	ldw	r3,-12(fp)
 2017404:	008001c4 	movi	r2,7
 2017408:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 201740c:	e0bffb17 	ldw	r2,-20(fp)
 2017410:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 2017414:	e0bff817 	ldw	r2,-32(fp)
 2017418:	e0bfff15 	stw	r2,-4(fp)
 201741c:	e0bfff17 	ldw	r2,-4(fp)
}
 2017420:	e037883a 	mov	sp,fp
 2017424:	dfc00117 	ldw	ra,4(sp)
 2017428:	df000017 	ldw	fp,0(sp)
 201742c:	dec00204 	addi	sp,sp,8
 2017430:	f800283a 	ret

02017434 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2017434:	defff504 	addi	sp,sp,-44
 2017438:	dfc00a15 	stw	ra,40(sp)
 201743c:	df000915 	stw	fp,36(sp)
 2017440:	df000904 	addi	fp,sp,36
 2017444:	e13ffc15 	stw	r4,-16(fp)
 2017448:	e17ffd15 	stw	r5,-12(fp)
 201744c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017450:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2017454:	e0bffe17 	ldw	r2,-8(fp)
 2017458:	1004c03a 	cmpne	r2,r2,zero
 201745c:	1000021e 	bne	r2,zero,2017468 <OSFlagNameGet+0x34>
        return (0);
 2017460:	e03fff15 	stw	zero,-4(fp)
 2017464:	00003e06 	br	2017560 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2017468:	e0bffc17 	ldw	r2,-16(fp)
 201746c:	1004c03a 	cmpne	r2,r2,zero
 2017470:	1000051e 	bne	r2,zero,2017488 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2017474:	e0fffe17 	ldw	r3,-8(fp)
 2017478:	00801b84 	movi	r2,110
 201747c:	18800005 	stb	r2,0(r3)
        return (0);
 2017480:	e03fff15 	stw	zero,-4(fp)
 2017484:	00003606 	br	2017560 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2017488:	e0bffd17 	ldw	r2,-12(fp)
 201748c:	1004c03a 	cmpne	r2,r2,zero
 2017490:	1000051e 	bne	r2,zero,20174a8 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 2017494:	e0fffe17 	ldw	r3,-8(fp)
 2017498:	00800304 	movi	r2,12
 201749c:	18800005 	stb	r2,0(r3)
        return (0);
 20174a0:	e03fff15 	stw	zero,-4(fp)
 20174a4:	00002e06 	br	2017560 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20174a8:	008080b4 	movhi	r2,514
 20174ac:	1093e504 	addi	r2,r2,20372
 20174b0:	10800003 	ldbu	r2,0(r2)
 20174b4:	10803fcc 	andi	r2,r2,255
 20174b8:	1005003a 	cmpeq	r2,r2,zero
 20174bc:	1000051e 	bne	r2,zero,20174d4 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 20174c0:	e0fffe17 	ldw	r3,-8(fp)
 20174c4:	00800444 	movi	r2,17
 20174c8:	18800005 	stb	r2,0(r3)
        return (0);
 20174cc:	e03fff15 	stw	zero,-4(fp)
 20174d0:	00002306 	br	2017560 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20174d4:	0005303a 	rdctl	r2,status
 20174d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20174dc:	e0fff917 	ldw	r3,-28(fp)
 20174e0:	00bfff84 	movi	r2,-2
 20174e4:	1884703a 	and	r2,r3,r2
 20174e8:	1001703a 	wrctl	status,r2
  
  return context;
 20174ec:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 20174f0:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 20174f4:	e0bffc17 	ldw	r2,-16(fp)
 20174f8:	10800003 	ldbu	r2,0(r2)
 20174fc:	10803fcc 	andi	r2,r2,255
 2017500:	10800160 	cmpeqi	r2,r2,5
 2017504:	1000091e 	bne	r2,zero,201752c <OSFlagNameGet+0xf8>
 2017508:	e0bffa17 	ldw	r2,-24(fp)
 201750c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017510:	e0bff817 	ldw	r2,-32(fp)
 2017514:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2017518:	e0fffe17 	ldw	r3,-8(fp)
 201751c:	00800044 	movi	r2,1
 2017520:	18800005 	stb	r2,0(r3)
        return (0);
 2017524:	e03fff15 	stw	zero,-4(fp)
 2017528:	00000d06 	br	2017560 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 201752c:	e0bffc17 	ldw	r2,-16(fp)
 2017530:	11400284 	addi	r5,r2,10
 2017534:	e13ffd17 	ldw	r4,-12(fp)
 2017538:	20165ec0 	call	20165ec <OS_StrCopy>
 201753c:	e0bffb05 	stb	r2,-20(fp)
 2017540:	e0bffa17 	ldw	r2,-24(fp)
 2017544:	e0bff715 	stw	r2,-36(fp)
 2017548:	e0bff717 	ldw	r2,-36(fp)
 201754c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2017550:	e0bffe17 	ldw	r2,-8(fp)
 2017554:	10000005 	stb	zero,0(r2)
    return (len);
 2017558:	e0bffb03 	ldbu	r2,-20(fp)
 201755c:	e0bfff15 	stw	r2,-4(fp)
 2017560:	e0bfff17 	ldw	r2,-4(fp)
}
 2017564:	e037883a 	mov	sp,fp
 2017568:	dfc00117 	ldw	ra,4(sp)
 201756c:	df000017 	ldw	fp,0(sp)
 2017570:	dec00204 	addi	sp,sp,8
 2017574:	f800283a 	ret

02017578 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2017578:	defff504 	addi	sp,sp,-44
 201757c:	dfc00a15 	stw	ra,40(sp)
 2017580:	df000915 	stw	fp,36(sp)
 2017584:	df000904 	addi	fp,sp,36
 2017588:	e13ffd15 	stw	r4,-12(fp)
 201758c:	e17ffe15 	stw	r5,-8(fp)
 2017590:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017594:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2017598:	e0bfff17 	ldw	r2,-4(fp)
 201759c:	1005003a 	cmpeq	r2,r2,zero
 20175a0:	1000451e 	bne	r2,zero,20176b8 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 20175a4:	e0bffd17 	ldw	r2,-12(fp)
 20175a8:	1004c03a 	cmpne	r2,r2,zero
 20175ac:	1000041e 	bne	r2,zero,20175c0 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20175b0:	e0ffff17 	ldw	r3,-4(fp)
 20175b4:	00801b84 	movi	r2,110
 20175b8:	18800005 	stb	r2,0(r3)
        return;
 20175bc:	00003e06 	br	20176b8 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20175c0:	e0bffe17 	ldw	r2,-8(fp)
 20175c4:	1004c03a 	cmpne	r2,r2,zero
 20175c8:	1000041e 	bne	r2,zero,20175dc <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 20175cc:	e0ffff17 	ldw	r3,-4(fp)
 20175d0:	00800304 	movi	r2,12
 20175d4:	18800005 	stb	r2,0(r3)
        return;
 20175d8:	00003706 	br	20176b8 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20175dc:	008080b4 	movhi	r2,514
 20175e0:	1093e504 	addi	r2,r2,20372
 20175e4:	10800003 	ldbu	r2,0(r2)
 20175e8:	10803fcc 	andi	r2,r2,255
 20175ec:	1005003a 	cmpeq	r2,r2,zero
 20175f0:	1000041e 	bne	r2,zero,2017604 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 20175f4:	e0ffff17 	ldw	r3,-4(fp)
 20175f8:	00800484 	movi	r2,18
 20175fc:	18800005 	stb	r2,0(r3)
        return;
 2017600:	00002d06 	br	20176b8 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017604:	0005303a 	rdctl	r2,status
 2017608:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201760c:	e0fffa17 	ldw	r3,-24(fp)
 2017610:	00bfff84 	movi	r2,-2
 2017614:	1884703a 	and	r2,r3,r2
 2017618:	1001703a 	wrctl	status,r2
  
  return context;
 201761c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2017620:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2017624:	e0bffd17 	ldw	r2,-12(fp)
 2017628:	10800003 	ldbu	r2,0(r2)
 201762c:	10803fcc 	andi	r2,r2,255
 2017630:	10800160 	cmpeqi	r2,r2,5
 2017634:	1000081e 	bne	r2,zero,2017658 <OSFlagNameSet+0xe0>
 2017638:	e0bffb17 	ldw	r2,-20(fp)
 201763c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017640:	e0bff917 	ldw	r2,-28(fp)
 2017644:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2017648:	e0ffff17 	ldw	r3,-4(fp)
 201764c:	00800044 	movi	r2,1
 2017650:	18800005 	stb	r2,0(r3)
        return;
 2017654:	00001806 	br	20176b8 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2017658:	e13ffe17 	ldw	r4,-8(fp)
 201765c:	201666c0 	call	201666c <OS_StrLen>
 2017660:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 2017664:	e0bffc03 	ldbu	r2,-16(fp)
 2017668:	10800830 	cmpltui	r2,r2,32
 201766c:	1000081e 	bne	r2,zero,2017690 <OSFlagNameSet+0x118>
 2017670:	e0bffb17 	ldw	r2,-20(fp)
 2017674:	e0bff815 	stw	r2,-32(fp)
 2017678:	e0bff817 	ldw	r2,-32(fp)
 201767c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 2017680:	e0ffff17 	ldw	r3,-4(fp)
 2017684:	00801cc4 	movi	r2,115
 2017688:	18800005 	stb	r2,0(r3)
        return;
 201768c:	00000a06 	br	20176b8 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 2017690:	e0bffd17 	ldw	r2,-12(fp)
 2017694:	11000284 	addi	r4,r2,10
 2017698:	e17ffe17 	ldw	r5,-8(fp)
 201769c:	20165ec0 	call	20165ec <OS_StrCopy>
 20176a0:	e0bffb17 	ldw	r2,-20(fp)
 20176a4:	e0bff715 	stw	r2,-36(fp)
 20176a8:	e0bff717 	ldw	r2,-36(fp)
 20176ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20176b0:	e0bfff17 	ldw	r2,-4(fp)
 20176b4:	10000005 	stb	zero,0(r2)
    return;
}
 20176b8:	e037883a 	mov	sp,fp
 20176bc:	dfc00117 	ldw	ra,4(sp)
 20176c0:	df000017 	ldw	fp,0(sp)
 20176c4:	dec00204 	addi	sp,sp,8
 20176c8:	f800283a 	ret

020176cc <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 20176cc:	deffe004 	addi	sp,sp,-128
 20176d0:	dfc01f15 	stw	ra,124(sp)
 20176d4:	df001e15 	stw	fp,120(sp)
 20176d8:	df001e04 	addi	fp,sp,120
 20176dc:	e13ff915 	stw	r4,-28(fp)
 20176e0:	e17ffa0d 	sth	r5,-24(fp)
 20176e4:	e1bffb05 	stb	r6,-20(fp)
 20176e8:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 20176ec:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20176f0:	e0800217 	ldw	r2,8(fp)
 20176f4:	1004c03a 	cmpne	r2,r2,zero
 20176f8:	1000021e 	bne	r2,zero,2017704 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 20176fc:	e03fff15 	stw	zero,-4(fp)
 2017700:	00017d06 	br	2017cf8 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2017704:	e0bff917 	ldw	r2,-28(fp)
 2017708:	1004c03a 	cmpne	r2,r2,zero
 201770c:	1000051e 	bne	r2,zero,2017724 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2017710:	e0c00217 	ldw	r3,8(fp)
 2017714:	00801b84 	movi	r2,110
 2017718:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 201771c:	e03fff15 	stw	zero,-4(fp)
 2017720:	00017506 	br	2017cf8 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2017724:	008080b4 	movhi	r2,514
 2017728:	1093e504 	addi	r2,r2,20372
 201772c:	10800003 	ldbu	r2,0(r2)
 2017730:	10803fcc 	andi	r2,r2,255
 2017734:	1005003a 	cmpeq	r2,r2,zero
 2017738:	1000051e 	bne	r2,zero,2017750 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 201773c:	e0c00217 	ldw	r3,8(fp)
 2017740:	00800084 	movi	r2,2
 2017744:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2017748:	e03fff15 	stw	zero,-4(fp)
 201774c:	00016a06 	br	2017cf8 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 2017750:	008080b4 	movhi	r2,514
 2017754:	1093d704 	addi	r2,r2,20316
 2017758:	10800003 	ldbu	r2,0(r2)
 201775c:	10803fcc 	andi	r2,r2,255
 2017760:	1005003a 	cmpeq	r2,r2,zero
 2017764:	1000051e 	bne	r2,zero,201777c <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 2017768:	e0c00217 	ldw	r3,8(fp)
 201776c:	00800344 	movi	r2,13
 2017770:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2017774:	e03fff15 	stw	zero,-4(fp)
 2017778:	00015f06 	br	2017cf8 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 201777c:	e0bff917 	ldw	r2,-28(fp)
 2017780:	10800003 	ldbu	r2,0(r2)
 2017784:	10803fcc 	andi	r2,r2,255
 2017788:	10800160 	cmpeqi	r2,r2,5
 201778c:	1000051e 	bne	r2,zero,20177a4 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 2017790:	e0c00217 	ldw	r3,8(fp)
 2017794:	00800044 	movi	r2,1
 2017798:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 201779c:	e03fff15 	stw	zero,-4(fp)
 20177a0:	00015506 	br	2017cf8 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 20177a4:	e0fffb03 	ldbu	r3,-20(fp)
 20177a8:	00bfe004 	movi	r2,-128
 20177ac:	1884703a 	and	r2,r3,r2
 20177b0:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 20177b4:	e0bff283 	ldbu	r2,-54(fp)
 20177b8:	1005003a 	cmpeq	r2,r2,zero
 20177bc:	1000071e 	bne	r2,zero,20177dc <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 20177c0:	00c01fc4 	movi	r3,127
 20177c4:	e0bffb03 	ldbu	r2,-20(fp)
 20177c8:	10c4703a 	and	r2,r2,r3
 20177cc:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 20177d0:	00800044 	movi	r2,1
 20177d4:	e0bff205 	stb	r2,-56(fp)
 20177d8:	00000106 	br	20177e0 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 20177dc:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20177e0:	0005303a 	rdctl	r2,status
 20177e4:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20177e8:	e0fff017 	ldw	r3,-64(fp)
 20177ec:	00bfff84 	movi	r2,-2
 20177f0:	1884703a 	and	r2,r3,r2
 20177f4:	1001703a 	wrctl	status,r2
  
  return context;
 20177f8:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 20177fc:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 2017800:	e0bffb03 	ldbu	r2,-20(fp)
 2017804:	e0bffe15 	stw	r2,-8(fp)
 2017808:	e0fffe17 	ldw	r3,-8(fp)
 201780c:	18800060 	cmpeqi	r2,r3,1
 2017810:	1000981e 	bne	r2,zero,2017a74 <OSFlagPend+0x3a8>
 2017814:	e0fffe17 	ldw	r3,-8(fp)
 2017818:	18800088 	cmpgei	r2,r3,2
 201781c:	1000041e 	bne	r2,zero,2017830 <OSFlagPend+0x164>
 2017820:	e0fffe17 	ldw	r3,-8(fp)
 2017824:	1805003a 	cmpeq	r2,r3,zero
 2017828:	1000641e 	bne	r2,zero,20179bc <OSFlagPend+0x2f0>
 201782c:	0000bf06 	br	2017b2c <OSFlagPend+0x460>
 2017830:	e0fffe17 	ldw	r3,-8(fp)
 2017834:	188000a0 	cmpeqi	r2,r3,2
 2017838:	1000041e 	bne	r2,zero,201784c <OSFlagPend+0x180>
 201783c:	e0fffe17 	ldw	r3,-8(fp)
 2017840:	188000e0 	cmpeqi	r2,r3,3
 2017844:	10002f1e 	bne	r2,zero,2017904 <OSFlagPend+0x238>
 2017848:	0000b806 	br	2017b2c <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 201784c:	e0bff917 	ldw	r2,-28(fp)
 2017850:	10c0020b 	ldhu	r3,8(r2)
 2017854:	e0bffa0b 	ldhu	r2,-24(fp)
 2017858:	1884703a 	and	r2,r3,r2
 201785c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2017860:	e0fff30b 	ldhu	r3,-52(fp)
 2017864:	e0bffa0b 	ldhu	r2,-24(fp)
 2017868:	18801a1e 	bne	r3,r2,20178d4 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201786c:	e0bff203 	ldbu	r2,-56(fp)
 2017870:	10800058 	cmpnei	r2,r2,1
 2017874:	1000091e 	bne	r2,zero,201789c <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2017878:	e0bff917 	ldw	r2,-28(fp)
 201787c:	1080020b 	ldhu	r2,8(r2)
 2017880:	1007883a 	mov	r3,r2
 2017884:	e0bff30b 	ldhu	r2,-52(fp)
 2017888:	0084303a 	nor	r2,zero,r2
 201788c:	1884703a 	and	r2,r3,r2
 2017890:	1007883a 	mov	r3,r2
 2017894:	e0bff917 	ldw	r2,-28(fp)
 2017898:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201789c:	008080b4 	movhi	r2,514
 20178a0:	1093e604 	addi	r2,r2,20376
 20178a4:	10c00017 	ldw	r3,0(r2)
 20178a8:	e0bff30b 	ldhu	r2,-52(fp)
 20178ac:	18800b0d 	sth	r2,44(r3)
 20178b0:	e0bff117 	ldw	r2,-60(fp)
 20178b4:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20178b8:	e0bfef17 	ldw	r2,-68(fp)
 20178bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 20178c0:	e0800217 	ldw	r2,8(fp)
 20178c4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 20178c8:	e0bff30b 	ldhu	r2,-52(fp)
 20178cc:	e0bfff15 	stw	r2,-4(fp)
 20178d0:	00010906 	br	2017cf8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 20178d4:	e1bffa0b 	ldhu	r6,-24(fp)
 20178d8:	e1fffb03 	ldbu	r7,-20(fp)
 20178dc:	e0bffc0b 	ldhu	r2,-16(fp)
 20178e0:	e17ff404 	addi	r5,fp,-48
 20178e4:	d8800015 	stw	r2,0(sp)
 20178e8:	e13ff917 	ldw	r4,-28(fp)
 20178ec:	20181f40 	call	20181f4 <OS_FlagBlock>
 20178f0:	e0bff117 	ldw	r2,-60(fp)
 20178f4:	e0bfee15 	stw	r2,-72(fp)
 20178f8:	e0bfee17 	ldw	r2,-72(fp)
 20178fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2017900:	00009506 	br	2017b58 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 2017904:	e0bff917 	ldw	r2,-28(fp)
 2017908:	10c0020b 	ldhu	r3,8(r2)
 201790c:	e0bffa0b 	ldhu	r2,-24(fp)
 2017910:	1884703a 	and	r2,r3,r2
 2017914:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2017918:	e0bff30b 	ldhu	r2,-52(fp)
 201791c:	1005003a 	cmpeq	r2,r2,zero
 2017920:	10001a1e 	bne	r2,zero,201798c <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2017924:	e0bff203 	ldbu	r2,-56(fp)
 2017928:	10800058 	cmpnei	r2,r2,1
 201792c:	1000091e 	bne	r2,zero,2017954 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2017930:	e0bff917 	ldw	r2,-28(fp)
 2017934:	1080020b 	ldhu	r2,8(r2)
 2017938:	1007883a 	mov	r3,r2
 201793c:	e0bff30b 	ldhu	r2,-52(fp)
 2017940:	0084303a 	nor	r2,zero,r2
 2017944:	1884703a 	and	r2,r3,r2
 2017948:	1007883a 	mov	r3,r2
 201794c:	e0bff917 	ldw	r2,-28(fp)
 2017950:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2017954:	008080b4 	movhi	r2,514
 2017958:	1093e604 	addi	r2,r2,20376
 201795c:	10c00017 	ldw	r3,0(r2)
 2017960:	e0bff30b 	ldhu	r2,-52(fp)
 2017964:	18800b0d 	sth	r2,44(r3)
 2017968:	e0bff117 	ldw	r2,-60(fp)
 201796c:	e0bfed15 	stw	r2,-76(fp)
 2017970:	e0bfed17 	ldw	r2,-76(fp)
 2017974:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2017978:	e0800217 	ldw	r2,8(fp)
 201797c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2017980:	e0fff30b 	ldhu	r3,-52(fp)
 2017984:	e0ffff15 	stw	r3,-4(fp)
 2017988:	0000db06 	br	2017cf8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 201798c:	e1bffa0b 	ldhu	r6,-24(fp)
 2017990:	e1fffb03 	ldbu	r7,-20(fp)
 2017994:	e0bffc0b 	ldhu	r2,-16(fp)
 2017998:	e17ff404 	addi	r5,fp,-48
 201799c:	d8800015 	stw	r2,0(sp)
 20179a0:	e13ff917 	ldw	r4,-28(fp)
 20179a4:	20181f40 	call	20181f4 <OS_FlagBlock>
 20179a8:	e0bff117 	ldw	r2,-60(fp)
 20179ac:	e0bfec15 	stw	r2,-80(fp)
 20179b0:	e0bfec17 	ldw	r2,-80(fp)
 20179b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 20179b8:	00006706 	br	2017b58 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 20179bc:	e0bff917 	ldw	r2,-28(fp)
 20179c0:	1080020b 	ldhu	r2,8(r2)
 20179c4:	0084303a 	nor	r2,zero,r2
 20179c8:	1007883a 	mov	r3,r2
 20179cc:	e0bffa0b 	ldhu	r2,-24(fp)
 20179d0:	1884703a 	and	r2,r3,r2
 20179d4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20179d8:	e0fff30b 	ldhu	r3,-52(fp)
 20179dc:	e0bffa0b 	ldhu	r2,-24(fp)
 20179e0:	1880181e 	bne	r3,r2,2017a44 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20179e4:	e0bff203 	ldbu	r2,-56(fp)
 20179e8:	10800058 	cmpnei	r2,r2,1
 20179ec:	1000071e 	bne	r2,zero,2017a0c <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 20179f0:	e0bff917 	ldw	r2,-28(fp)
 20179f4:	10c0020b 	ldhu	r3,8(r2)
 20179f8:	e0bff30b 	ldhu	r2,-52(fp)
 20179fc:	1884b03a 	or	r2,r3,r2
 2017a00:	1007883a 	mov	r3,r2
 2017a04:	e0bff917 	ldw	r2,-28(fp)
 2017a08:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2017a0c:	008080b4 	movhi	r2,514
 2017a10:	1093e604 	addi	r2,r2,20376
 2017a14:	10c00017 	ldw	r3,0(r2)
 2017a18:	e0bff30b 	ldhu	r2,-52(fp)
 2017a1c:	18800b0d 	sth	r2,44(r3)
 2017a20:	e0bff117 	ldw	r2,-60(fp)
 2017a24:	e0bfeb15 	stw	r2,-84(fp)
 2017a28:	e0bfeb17 	ldw	r2,-84(fp)
 2017a2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2017a30:	e0800217 	ldw	r2,8(fp)
 2017a34:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2017a38:	e0bff30b 	ldhu	r2,-52(fp)
 2017a3c:	e0bfff15 	stw	r2,-4(fp)
 2017a40:	0000ad06 	br	2017cf8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2017a44:	e1bffa0b 	ldhu	r6,-24(fp)
 2017a48:	e1fffb03 	ldbu	r7,-20(fp)
 2017a4c:	e0bffc0b 	ldhu	r2,-16(fp)
 2017a50:	e17ff404 	addi	r5,fp,-48
 2017a54:	d8800015 	stw	r2,0(sp)
 2017a58:	e13ff917 	ldw	r4,-28(fp)
 2017a5c:	20181f40 	call	20181f4 <OS_FlagBlock>
 2017a60:	e0bff117 	ldw	r2,-60(fp)
 2017a64:	e0bfea15 	stw	r2,-88(fp)
 2017a68:	e0bfea17 	ldw	r2,-88(fp)
 2017a6c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2017a70:	00003906 	br	2017b58 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2017a74:	e0bff917 	ldw	r2,-28(fp)
 2017a78:	1080020b 	ldhu	r2,8(r2)
 2017a7c:	0084303a 	nor	r2,zero,r2
 2017a80:	1007883a 	mov	r3,r2
 2017a84:	e0bffa0b 	ldhu	r2,-24(fp)
 2017a88:	1884703a 	and	r2,r3,r2
 2017a8c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2017a90:	e0bff30b 	ldhu	r2,-52(fp)
 2017a94:	1005003a 	cmpeq	r2,r2,zero
 2017a98:	1000181e 	bne	r2,zero,2017afc <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2017a9c:	e0bff203 	ldbu	r2,-56(fp)
 2017aa0:	10800058 	cmpnei	r2,r2,1
 2017aa4:	1000071e 	bne	r2,zero,2017ac4 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2017aa8:	e0bff917 	ldw	r2,-28(fp)
 2017aac:	10c0020b 	ldhu	r3,8(r2)
 2017ab0:	e0bff30b 	ldhu	r2,-52(fp)
 2017ab4:	1884b03a 	or	r2,r3,r2
 2017ab8:	1007883a 	mov	r3,r2
 2017abc:	e0bff917 	ldw	r2,-28(fp)
 2017ac0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2017ac4:	008080b4 	movhi	r2,514
 2017ac8:	1093e604 	addi	r2,r2,20376
 2017acc:	10c00017 	ldw	r3,0(r2)
 2017ad0:	e0bff30b 	ldhu	r2,-52(fp)
 2017ad4:	18800b0d 	sth	r2,44(r3)
 2017ad8:	e0bff117 	ldw	r2,-60(fp)
 2017adc:	e0bfe915 	stw	r2,-92(fp)
 2017ae0:	e0bfe917 	ldw	r2,-92(fp)
 2017ae4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2017ae8:	e0800217 	ldw	r2,8(fp)
 2017aec:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2017af0:	e0fff30b 	ldhu	r3,-52(fp)
 2017af4:	e0ffff15 	stw	r3,-4(fp)
 2017af8:	00007f06 	br	2017cf8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2017afc:	e1bffa0b 	ldhu	r6,-24(fp)
 2017b00:	e1fffb03 	ldbu	r7,-20(fp)
 2017b04:	e0bffc0b 	ldhu	r2,-16(fp)
 2017b08:	e17ff404 	addi	r5,fp,-48
 2017b0c:	d8800015 	stw	r2,0(sp)
 2017b10:	e13ff917 	ldw	r4,-28(fp)
 2017b14:	20181f40 	call	20181f4 <OS_FlagBlock>
 2017b18:	e0bff117 	ldw	r2,-60(fp)
 2017b1c:	e0bfe815 	stw	r2,-96(fp)
 2017b20:	e0bfe817 	ldw	r2,-96(fp)
 2017b24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2017b28:	00000b06 	br	2017b58 <OSFlagPend+0x48c>
 2017b2c:	e0bff117 	ldw	r2,-60(fp)
 2017b30:	e0bfe715 	stw	r2,-100(fp)
 2017b34:	e0bfe717 	ldw	r2,-100(fp)
 2017b38:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2017b3c:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 2017b40:	e0c00217 	ldw	r3,8(fp)
 2017b44:	00801bc4 	movi	r2,111
 2017b48:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 2017b4c:	e0bff30b 	ldhu	r2,-52(fp)
 2017b50:	e0bfff15 	stw	r2,-4(fp)
 2017b54:	00006806 	br	2017cf8 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 2017b58:	20164a80 	call	20164a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017b5c:	0005303a 	rdctl	r2,status
 2017b60:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017b64:	e0ffe617 	ldw	r3,-104(fp)
 2017b68:	00bfff84 	movi	r2,-2
 2017b6c:	1884703a 	and	r2,r3,r2
 2017b70:	1001703a 	wrctl	status,r2
  
  return context;
 2017b74:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 2017b78:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 2017b7c:	008080b4 	movhi	r2,514
 2017b80:	1093e604 	addi	r2,r2,20376
 2017b84:	10800017 	ldw	r2,0(r2)
 2017b88:	10800c43 	ldbu	r2,49(r2)
 2017b8c:	10803fcc 	andi	r2,r2,255
 2017b90:	1005003a 	cmpeq	r2,r2,zero
 2017b94:	1000221e 	bne	r2,zero,2017c20 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 2017b98:	008080b4 	movhi	r2,514
 2017b9c:	1093e604 	addi	r2,r2,20376
 2017ba0:	10800017 	ldw	r2,0(r2)
 2017ba4:	10800c43 	ldbu	r2,49(r2)
 2017ba8:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2017bac:	008080b4 	movhi	r2,514
 2017bb0:	1093e604 	addi	r2,r2,20376
 2017bb4:	10800017 	ldw	r2,0(r2)
 2017bb8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 2017bbc:	e13ff404 	addi	r4,fp,-48
 2017bc0:	20185ac0 	call	20185ac <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 2017bc4:	008080b4 	movhi	r2,514
 2017bc8:	1093e604 	addi	r2,r2,20376
 2017bcc:	10800017 	ldw	r2,0(r2)
 2017bd0:	10000c05 	stb	zero,48(r2)
 2017bd4:	e0bff117 	ldw	r2,-60(fp)
 2017bd8:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017bdc:	e0bfe517 	ldw	r2,-108(fp)
 2017be0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 2017be4:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 2017be8:	e0bff243 	ldbu	r2,-55(fp)
 2017bec:	108000a0 	cmpeqi	r2,r2,2
 2017bf0:	1000011e 	bne	r2,zero,2017bf8 <OSFlagPend+0x52c>
 2017bf4:	00000406 	br	2017c08 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 2017bf8:	e0c00217 	ldw	r3,8(fp)
 2017bfc:	00800384 	movi	r2,14
 2017c00:	18800005 	stb	r2,0(r3)
                 break;
 2017c04:	00000306 	br	2017c14 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 2017c08:	e0c00217 	ldw	r3,8(fp)
 2017c0c:	00800284 	movi	r2,10
 2017c10:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 2017c14:	e0fff30b 	ldhu	r3,-52(fp)
 2017c18:	e0ffff15 	stw	r3,-4(fp)
 2017c1c:	00003606 	br	2017cf8 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 2017c20:	008080b4 	movhi	r2,514
 2017c24:	1093e604 	addi	r2,r2,20376
 2017c28:	10800017 	ldw	r2,0(r2)
 2017c2c:	10800b0b 	ldhu	r2,44(r2)
 2017c30:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 2017c34:	e0bff203 	ldbu	r2,-56(fp)
 2017c38:	10800058 	cmpnei	r2,r2,1
 2017c3c:	1000261e 	bne	r2,zero,2017cd8 <OSFlagPend+0x60c>
        switch (wait_type) {
 2017c40:	e0bffb03 	ldbu	r2,-20(fp)
 2017c44:	e0bffd15 	stw	r2,-12(fp)
 2017c48:	e0fffd17 	ldw	r3,-12(fp)
 2017c4c:	1804803a 	cmplt	r2,r3,zero
 2017c50:	1000181e 	bne	r2,zero,2017cb4 <OSFlagPend+0x5e8>
 2017c54:	e0fffd17 	ldw	r3,-12(fp)
 2017c58:	18800090 	cmplti	r2,r3,2
 2017c5c:	10000d1e 	bne	r2,zero,2017c94 <OSFlagPend+0x5c8>
 2017c60:	e0fffd17 	ldw	r3,-12(fp)
 2017c64:	18800108 	cmpgei	r2,r3,4
 2017c68:	1000121e 	bne	r2,zero,2017cb4 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 2017c6c:	e0bff917 	ldw	r2,-28(fp)
 2017c70:	1080020b 	ldhu	r2,8(r2)
 2017c74:	1007883a 	mov	r3,r2
 2017c78:	e0bff30b 	ldhu	r2,-52(fp)
 2017c7c:	0084303a 	nor	r2,zero,r2
 2017c80:	1884703a 	and	r2,r3,r2
 2017c84:	1007883a 	mov	r3,r2
 2017c88:	e0bff917 	ldw	r2,-28(fp)
 2017c8c:	10c0020d 	sth	r3,8(r2)
                 break;
 2017c90:	00001106 	br	2017cd8 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 2017c94:	e0bff917 	ldw	r2,-28(fp)
 2017c98:	10c0020b 	ldhu	r3,8(r2)
 2017c9c:	e0bff30b 	ldhu	r2,-52(fp)
 2017ca0:	1884b03a 	or	r2,r3,r2
 2017ca4:	1007883a 	mov	r3,r2
 2017ca8:	e0bff917 	ldw	r2,-28(fp)
 2017cac:	10c0020d 	sth	r3,8(r2)
                 break;
 2017cb0:	00000906 	br	2017cd8 <OSFlagPend+0x60c>
 2017cb4:	e0bff117 	ldw	r2,-60(fp)
 2017cb8:	e0bfe415 	stw	r2,-112(fp)
 2017cbc:	e0bfe417 	ldw	r2,-112(fp)
 2017cc0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2017cc4:	e0c00217 	ldw	r3,8(fp)
 2017cc8:	00801bc4 	movi	r2,111
 2017ccc:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 2017cd0:	e03fff15 	stw	zero,-4(fp)
 2017cd4:	00000806 	br	2017cf8 <OSFlagPend+0x62c>
 2017cd8:	e0bff117 	ldw	r2,-60(fp)
 2017cdc:	e0bfe315 	stw	r2,-116(fp)
 2017ce0:	e0bfe317 	ldw	r2,-116(fp)
 2017ce4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 2017ce8:	e0800217 	ldw	r2,8(fp)
 2017cec:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 2017cf0:	e0bff30b 	ldhu	r2,-52(fp)
 2017cf4:	e0bfff15 	stw	r2,-4(fp)
 2017cf8:	e0bfff17 	ldw	r2,-4(fp)
}
 2017cfc:	e037883a 	mov	sp,fp
 2017d00:	dfc00117 	ldw	ra,4(sp)
 2017d04:	df000017 	ldw	fp,0(sp)
 2017d08:	dec00204 	addi	sp,sp,8
 2017d0c:	f800283a 	ret

02017d10 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 2017d10:	defffb04 	addi	sp,sp,-20
 2017d14:	df000415 	stw	fp,16(sp)
 2017d18:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2017d1c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017d20:	0005303a 	rdctl	r2,status
 2017d24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017d28:	e0fffd17 	ldw	r3,-12(fp)
 2017d2c:	00bfff84 	movi	r2,-2
 2017d30:	1884703a 	and	r2,r3,r2
 2017d34:	1001703a 	wrctl	status,r2
  
  return context;
 2017d38:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 2017d3c:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 2017d40:	008080b4 	movhi	r2,514
 2017d44:	1093e604 	addi	r2,r2,20376
 2017d48:	10800017 	ldw	r2,0(r2)
 2017d4c:	10800b0b 	ldhu	r2,44(r2)
 2017d50:	e0bfff0d 	sth	r2,-4(fp)
 2017d54:	e0bffe17 	ldw	r2,-8(fp)
 2017d58:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017d5c:	e0bffc17 	ldw	r2,-16(fp)
 2017d60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 2017d64:	e0bfff0b 	ldhu	r2,-4(fp)
}
 2017d68:	e037883a 	mov	sp,fp
 2017d6c:	df000017 	ldw	fp,0(sp)
 2017d70:	dec00104 	addi	sp,sp,4
 2017d74:	f800283a 	ret

02017d78 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 2017d78:	deffed04 	addi	sp,sp,-76
 2017d7c:	dfc01215 	stw	ra,72(sp)
 2017d80:	df001115 	stw	fp,68(sp)
 2017d84:	df001104 	addi	fp,sp,68
 2017d88:	e13ff915 	stw	r4,-28(fp)
 2017d8c:	e1fffc15 	stw	r7,-16(fp)
 2017d90:	e17ffa0d 	sth	r5,-24(fp)
 2017d94:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 2017d98:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 2017d9c:	e0bffc17 	ldw	r2,-16(fp)
 2017da0:	1004c03a 	cmpne	r2,r2,zero
 2017da4:	1000021e 	bne	r2,zero,2017db0 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 2017da8:	e03fff15 	stw	zero,-4(fp)
 2017dac:	0000d606 	br	2018108 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 2017db0:	e0bff917 	ldw	r2,-28(fp)
 2017db4:	1004c03a 	cmpne	r2,r2,zero
 2017db8:	1000051e 	bne	r2,zero,2017dd0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2017dbc:	e0fffc17 	ldw	r3,-16(fp)
 2017dc0:	00801b84 	movi	r2,110
 2017dc4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2017dc8:	e03fff15 	stw	zero,-4(fp)
 2017dcc:	0000ce06 	br	2018108 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 2017dd0:	e0bff917 	ldw	r2,-28(fp)
 2017dd4:	10800003 	ldbu	r2,0(r2)
 2017dd8:	10803fcc 	andi	r2,r2,255
 2017ddc:	10800160 	cmpeqi	r2,r2,5
 2017de0:	1000051e 	bne	r2,zero,2017df8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 2017de4:	e0fffc17 	ldw	r3,-16(fp)
 2017de8:	00800044 	movi	r2,1
 2017dec:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2017df0:	e03fff15 	stw	zero,-4(fp)
 2017df4:	0000c406 	br	2018108 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017df8:	0005303a 	rdctl	r2,status
 2017dfc:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017e00:	e0fff417 	ldw	r3,-48(fp)
 2017e04:	00bfff84 	movi	r2,-2
 2017e08:	1884703a 	and	r2,r3,r2
 2017e0c:	1001703a 	wrctl	status,r2
  
  return context;
 2017e10:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2017e14:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 2017e18:	e0bffb03 	ldbu	r2,-20(fp)
 2017e1c:	e0bffe15 	stw	r2,-8(fp)
 2017e20:	e0fffe17 	ldw	r3,-8(fp)
 2017e24:	1805003a 	cmpeq	r2,r3,zero
 2017e28:	1000041e 	bne	r2,zero,2017e3c <OSFlagPost+0xc4>
 2017e2c:	e0fffe17 	ldw	r3,-8(fp)
 2017e30:	18800060 	cmpeqi	r2,r3,1
 2017e34:	10000b1e 	bne	r2,zero,2017e64 <OSFlagPost+0xec>
 2017e38:	00001206 	br	2017e84 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 2017e3c:	e0bff917 	ldw	r2,-28(fp)
 2017e40:	1080020b 	ldhu	r2,8(r2)
 2017e44:	1007883a 	mov	r3,r2
 2017e48:	e0bffa0b 	ldhu	r2,-24(fp)
 2017e4c:	0084303a 	nor	r2,zero,r2
 2017e50:	1884703a 	and	r2,r3,r2
 2017e54:	1007883a 	mov	r3,r2
 2017e58:	e0bff917 	ldw	r2,-28(fp)
 2017e5c:	10c0020d 	sth	r3,8(r2)
             break;
 2017e60:	00001106 	br	2017ea8 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 2017e64:	e0bff917 	ldw	r2,-28(fp)
 2017e68:	10c0020b 	ldhu	r3,8(r2)
 2017e6c:	e0bffa0b 	ldhu	r2,-24(fp)
 2017e70:	1884b03a 	or	r2,r3,r2
 2017e74:	1007883a 	mov	r3,r2
 2017e78:	e0bff917 	ldw	r2,-28(fp)
 2017e7c:	10c0020d 	sth	r3,8(r2)
             break;
 2017e80:	00000906 	br	2017ea8 <OSFlagPost+0x130>
 2017e84:	e0bff517 	ldw	r2,-44(fp)
 2017e88:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017e8c:	e0bff317 	ldw	r2,-52(fp)
 2017e90:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 2017e94:	e0fffc17 	ldw	r3,-16(fp)
 2017e98:	00801c44 	movi	r2,113
 2017e9c:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 2017ea0:	e03fff15 	stw	zero,-4(fp)
 2017ea4:	00009806 	br	2018108 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 2017ea8:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2017eac:	e0bff917 	ldw	r2,-28(fp)
 2017eb0:	10800117 	ldw	r2,4(r2)
 2017eb4:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2017eb8:	00007506 	br	2018090 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 2017ebc:	e0bff817 	ldw	r2,-32(fp)
 2017ec0:	10800483 	ldbu	r2,18(r2)
 2017ec4:	10803fcc 	andi	r2,r2,255
 2017ec8:	e0bffd15 	stw	r2,-12(fp)
 2017ecc:	e0fffd17 	ldw	r3,-12(fp)
 2017ed0:	18800060 	cmpeqi	r2,r3,1
 2017ed4:	10004d1e 	bne	r2,zero,201800c <OSFlagPost+0x294>
 2017ed8:	e0fffd17 	ldw	r3,-12(fp)
 2017edc:	18800088 	cmpgei	r2,r3,2
 2017ee0:	1000041e 	bne	r2,zero,2017ef4 <OSFlagPost+0x17c>
 2017ee4:	e0fffd17 	ldw	r3,-12(fp)
 2017ee8:	1805003a 	cmpeq	r2,r3,zero
 2017eec:	1000301e 	bne	r2,zero,2017fb0 <OSFlagPost+0x238>
 2017ef0:	00005b06 	br	2018060 <OSFlagPost+0x2e8>
 2017ef4:	e0fffd17 	ldw	r3,-12(fp)
 2017ef8:	188000a0 	cmpeqi	r2,r3,2
 2017efc:	1000041e 	bne	r2,zero,2017f10 <OSFlagPost+0x198>
 2017f00:	e0fffd17 	ldw	r3,-12(fp)
 2017f04:	188000e0 	cmpeqi	r2,r3,3
 2017f08:	1000161e 	bne	r2,zero,2017f64 <OSFlagPost+0x1ec>
 2017f0c:	00005406 	br	2018060 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2017f10:	e0bff917 	ldw	r2,-28(fp)
 2017f14:	10c0020b 	ldhu	r3,8(r2)
 2017f18:	e0bff817 	ldw	r2,-32(fp)
 2017f1c:	1080040b 	ldhu	r2,16(r2)
 2017f20:	1884703a 	and	r2,r3,r2
 2017f24:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2017f28:	e0bff817 	ldw	r2,-32(fp)
 2017f2c:	1080040b 	ldhu	r2,16(r2)
 2017f30:	10ffffcc 	andi	r3,r2,65535
 2017f34:	e0bff68b 	ldhu	r2,-38(fp)
 2017f38:	1880521e 	bne	r3,r2,2018084 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2017f3c:	e17ff68b 	ldhu	r5,-38(fp)
 2017f40:	e13ff817 	ldw	r4,-32(fp)
 2017f44:	201849c0 	call	201849c <OS_FlagTaskRdy>
 2017f48:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 2017f4c:	e0bff603 	ldbu	r2,-40(fp)
 2017f50:	10800058 	cmpnei	r2,r2,1
 2017f54:	10004b1e 	bne	r2,zero,2018084 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2017f58:	00800044 	movi	r2,1
 2017f5c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 2017f60:	00004806 	br	2018084 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2017f64:	e0bff917 	ldw	r2,-28(fp)
 2017f68:	10c0020b 	ldhu	r3,8(r2)
 2017f6c:	e0bff817 	ldw	r2,-32(fp)
 2017f70:	1080040b 	ldhu	r2,16(r2)
 2017f74:	1884703a 	and	r2,r3,r2
 2017f78:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2017f7c:	e0bff68b 	ldhu	r2,-38(fp)
 2017f80:	1005003a 	cmpeq	r2,r2,zero
 2017f84:	10003f1e 	bne	r2,zero,2018084 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2017f88:	e17ff68b 	ldhu	r5,-38(fp)
 2017f8c:	e13ff817 	ldw	r4,-32(fp)
 2017f90:	201849c0 	call	201849c <OS_FlagTaskRdy>
 2017f94:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 2017f98:	e0bff603 	ldbu	r2,-40(fp)
 2017f9c:	10800058 	cmpnei	r2,r2,1
 2017fa0:	1000381e 	bne	r2,zero,2018084 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2017fa4:	00800044 	movi	r2,1
 2017fa8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 2017fac:	00003506 	br	2018084 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2017fb0:	e0bff917 	ldw	r2,-28(fp)
 2017fb4:	1080020b 	ldhu	r2,8(r2)
 2017fb8:	0084303a 	nor	r2,zero,r2
 2017fbc:	1007883a 	mov	r3,r2
 2017fc0:	e0bff817 	ldw	r2,-32(fp)
 2017fc4:	1080040b 	ldhu	r2,16(r2)
 2017fc8:	1884703a 	and	r2,r3,r2
 2017fcc:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2017fd0:	e0bff817 	ldw	r2,-32(fp)
 2017fd4:	1080040b 	ldhu	r2,16(r2)
 2017fd8:	10ffffcc 	andi	r3,r2,65535
 2017fdc:	e0bff68b 	ldhu	r2,-38(fp)
 2017fe0:	1880281e 	bne	r3,r2,2018084 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2017fe4:	e17ff68b 	ldhu	r5,-38(fp)
 2017fe8:	e13ff817 	ldw	r4,-32(fp)
 2017fec:	201849c0 	call	201849c <OS_FlagTaskRdy>
 2017ff0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 2017ff4:	e0bff603 	ldbu	r2,-40(fp)
 2017ff8:	10800058 	cmpnei	r2,r2,1
 2017ffc:	1000211e 	bne	r2,zero,2018084 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2018000:	00800044 	movi	r2,1
 2018004:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 2018008:	00001e06 	br	2018084 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 201800c:	e0bff917 	ldw	r2,-28(fp)
 2018010:	1080020b 	ldhu	r2,8(r2)
 2018014:	0084303a 	nor	r2,zero,r2
 2018018:	1007883a 	mov	r3,r2
 201801c:	e0bff817 	ldw	r2,-32(fp)
 2018020:	1080040b 	ldhu	r2,16(r2)
 2018024:	1884703a 	and	r2,r3,r2
 2018028:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 201802c:	e0bff68b 	ldhu	r2,-38(fp)
 2018030:	1005003a 	cmpeq	r2,r2,zero
 2018034:	1000131e 	bne	r2,zero,2018084 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2018038:	e17ff68b 	ldhu	r5,-38(fp)
 201803c:	e13ff817 	ldw	r4,-32(fp)
 2018040:	201849c0 	call	201849c <OS_FlagTaskRdy>
 2018044:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 2018048:	e0bff603 	ldbu	r2,-40(fp)
 201804c:	10800058 	cmpnei	r2,r2,1
 2018050:	10000c1e 	bne	r2,zero,2018084 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2018054:	00800044 	movi	r2,1
 2018058:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 201805c:	00000906 	br	2018084 <OSFlagPost+0x30c>
 2018060:	e0bff517 	ldw	r2,-44(fp)
 2018064:	e0bff215 	stw	r2,-56(fp)
 2018068:	e0bff217 	ldw	r2,-56(fp)
 201806c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2018070:	e0fffc17 	ldw	r3,-16(fp)
 2018074:	00801bc4 	movi	r2,111
 2018078:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 201807c:	e03fff15 	stw	zero,-4(fp)
 2018080:	00002106 	br	2018108 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 2018084:	e0bff817 	ldw	r2,-32(fp)
 2018088:	10800017 	ldw	r2,0(r2)
 201808c:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2018090:	e0bff817 	ldw	r2,-32(fp)
 2018094:	1004c03a 	cmpne	r2,r2,zero
 2018098:	103f881e 	bne	r2,zero,2017ebc <OSFlagPost+0x144>
 201809c:	e0bff517 	ldw	r2,-44(fp)
 20180a0:	e0bff115 	stw	r2,-60(fp)
 20180a4:	e0bff117 	ldw	r2,-60(fp)
 20180a8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 20180ac:	e0bff783 	ldbu	r2,-34(fp)
 20180b0:	10800058 	cmpnei	r2,r2,1
 20180b4:	1000011e 	bne	r2,zero,20180bc <OSFlagPost+0x344>
        OS_Sched();
 20180b8:	20164a80 	call	20164a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20180bc:	0005303a 	rdctl	r2,status
 20180c0:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20180c4:	e0fff017 	ldw	r3,-64(fp)
 20180c8:	00bfff84 	movi	r2,-2
 20180cc:	1884703a 	and	r2,r3,r2
 20180d0:	1001703a 	wrctl	status,r2
  
  return context;
 20180d4:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 20180d8:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 20180dc:	e0bff917 	ldw	r2,-28(fp)
 20180e0:	1080020b 	ldhu	r2,8(r2)
 20180e4:	e0bff70d 	sth	r2,-36(fp)
 20180e8:	e0bff517 	ldw	r2,-44(fp)
 20180ec:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20180f0:	e0bfef17 	ldw	r2,-68(fp)
 20180f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 20180f8:	e0bffc17 	ldw	r2,-16(fp)
 20180fc:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 2018100:	e0bff70b 	ldhu	r2,-36(fp)
 2018104:	e0bfff15 	stw	r2,-4(fp)
 2018108:	e0bfff17 	ldw	r2,-4(fp)
}
 201810c:	e037883a 	mov	sp,fp
 2018110:	dfc00117 	ldw	ra,4(sp)
 2018114:	df000017 	ldw	fp,0(sp)
 2018118:	dec00204 	addi	sp,sp,8
 201811c:	f800283a 	ret

02018120 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 2018120:	defff804 	addi	sp,sp,-32
 2018124:	df000715 	stw	fp,28(sp)
 2018128:	df000704 	addi	fp,sp,28
 201812c:	e13ffd15 	stw	r4,-12(fp)
 2018130:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 2018134:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 2018138:	e0bffe17 	ldw	r2,-8(fp)
 201813c:	1004c03a 	cmpne	r2,r2,zero
 2018140:	1000021e 	bne	r2,zero,201814c <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 2018144:	e03fff15 	stw	zero,-4(fp)
 2018148:	00002506 	br	20181e0 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 201814c:	e0bffd17 	ldw	r2,-12(fp)
 2018150:	1004c03a 	cmpne	r2,r2,zero
 2018154:	1000051e 	bne	r2,zero,201816c <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2018158:	e0fffe17 	ldw	r3,-8(fp)
 201815c:	00801b84 	movi	r2,110
 2018160:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2018164:	e03fff15 	stw	zero,-4(fp)
 2018168:	00001d06 	br	20181e0 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 201816c:	e0bffd17 	ldw	r2,-12(fp)
 2018170:	10800003 	ldbu	r2,0(r2)
 2018174:	10803fcc 	andi	r2,r2,255
 2018178:	10800160 	cmpeqi	r2,r2,5
 201817c:	1000051e 	bne	r2,zero,2018194 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 2018180:	e0fffe17 	ldw	r3,-8(fp)
 2018184:	00800044 	movi	r2,1
 2018188:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 201818c:	e03fff15 	stw	zero,-4(fp)
 2018190:	00001306 	br	20181e0 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018194:	0005303a 	rdctl	r2,status
 2018198:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201819c:	e0fffa17 	ldw	r3,-24(fp)
 20181a0:	00bfff84 	movi	r2,-2
 20181a4:	1884703a 	and	r2,r3,r2
 20181a8:	1001703a 	wrctl	status,r2
  
  return context;
 20181ac:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 20181b0:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 20181b4:	e0bffd17 	ldw	r2,-12(fp)
 20181b8:	1080020b 	ldhu	r2,8(r2)
 20181bc:	e0bffc0d 	sth	r2,-16(fp)
 20181c0:	e0bffb17 	ldw	r2,-20(fp)
 20181c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20181c8:	e0bff917 	ldw	r2,-28(fp)
 20181cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20181d0:	e0bffe17 	ldw	r2,-8(fp)
 20181d4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 20181d8:	e0bffc0b 	ldhu	r2,-16(fp)
 20181dc:	e0bfff15 	stw	r2,-4(fp)
 20181e0:	e0bfff17 	ldw	r2,-4(fp)
}
 20181e4:	e037883a 	mov	sp,fp
 20181e8:	df000017 	ldw	fp,0(sp)
 20181ec:	dec00104 	addi	sp,sp,4
 20181f0:	f800283a 	ret

020181f4 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 20181f4:	defff804 	addi	sp,sp,-32
 20181f8:	df000715 	stw	fp,28(sp)
 20181fc:	df000704 	addi	fp,sp,28
 2018200:	e13ffb15 	stw	r4,-20(fp)
 2018204:	e17ffc15 	stw	r5,-16(fp)
 2018208:	e0800117 	ldw	r2,4(fp)
 201820c:	e1bffd0d 	sth	r6,-12(fp)
 2018210:	e1fffe05 	stb	r7,-8(fp)
 2018214:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 2018218:	008080b4 	movhi	r2,514
 201821c:	1093e604 	addi	r2,r2,20376
 2018220:	10c00017 	ldw	r3,0(r2)
 2018224:	008080b4 	movhi	r2,514
 2018228:	1093e604 	addi	r2,r2,20376
 201822c:	10800017 	ldw	r2,0(r2)
 2018230:	10800c03 	ldbu	r2,48(r2)
 2018234:	10800814 	ori	r2,r2,32
 2018238:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 201823c:	008080b4 	movhi	r2,514
 2018240:	1093e604 	addi	r2,r2,20376
 2018244:	10800017 	ldw	r2,0(r2)
 2018248:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 201824c:	008080b4 	movhi	r2,514
 2018250:	1093e604 	addi	r2,r2,20376
 2018254:	10c00017 	ldw	r3,0(r2)
 2018258:	e0bfff0b 	ldhu	r2,-4(fp)
 201825c:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 2018260:	008080b4 	movhi	r2,514
 2018264:	1093e604 	addi	r2,r2,20376
 2018268:	10c00017 	ldw	r3,0(r2)
 201826c:	e0bffc17 	ldw	r2,-16(fp)
 2018270:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 2018274:	e0fffc17 	ldw	r3,-16(fp)
 2018278:	e0bffd0b 	ldhu	r2,-12(fp)
 201827c:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 2018280:	e0fffc17 	ldw	r3,-16(fp)
 2018284:	e0bffe03 	ldbu	r2,-8(fp)
 2018288:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 201828c:	008080b4 	movhi	r2,514
 2018290:	1093e604 	addi	r2,r2,20376
 2018294:	10c00017 	ldw	r3,0(r2)
 2018298:	e0bffc17 	ldw	r2,-16(fp)
 201829c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 20182a0:	e0bffb17 	ldw	r2,-20(fp)
 20182a4:	10c00117 	ldw	r3,4(r2)
 20182a8:	e0bffc17 	ldw	r2,-16(fp)
 20182ac:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 20182b0:	e0bffc17 	ldw	r2,-16(fp)
 20182b4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 20182b8:	e0fffc17 	ldw	r3,-16(fp)
 20182bc:	e0bffb17 	ldw	r2,-20(fp)
 20182c0:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 20182c4:	e0bffb17 	ldw	r2,-20(fp)
 20182c8:	10800117 	ldw	r2,4(r2)
 20182cc:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 20182d0:	e0bffa17 	ldw	r2,-24(fp)
 20182d4:	1005003a 	cmpeq	r2,r2,zero
 20182d8:	1000031e 	bne	r2,zero,20182e8 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 20182dc:	e0fffa17 	ldw	r3,-24(fp)
 20182e0:	e0bffc17 	ldw	r2,-16(fp)
 20182e4:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 20182e8:	e0fffb17 	ldw	r3,-20(fp)
 20182ec:	e0bffc17 	ldw	r2,-16(fp)
 20182f0:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 20182f4:	008080b4 	movhi	r2,514
 20182f8:	1093e604 	addi	r2,r2,20376
 20182fc:	10800017 	ldw	r2,0(r2)
 2018300:	10800d03 	ldbu	r2,52(r2)
 2018304:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 2018308:	e13ff903 	ldbu	r4,-28(fp)
 201830c:	e0fff903 	ldbu	r3,-28(fp)
 2018310:	008080b4 	movhi	r2,514
 2018314:	1093e344 	addi	r2,r2,20365
 2018318:	10c5883a 	add	r2,r2,r3
 201831c:	10800003 	ldbu	r2,0(r2)
 2018320:	1007883a 	mov	r3,r2
 2018324:	008080b4 	movhi	r2,514
 2018328:	1093e604 	addi	r2,r2,20376
 201832c:	10800017 	ldw	r2,0(r2)
 2018330:	10800d43 	ldbu	r2,53(r2)
 2018334:	0084303a 	nor	r2,zero,r2
 2018338:	1884703a 	and	r2,r3,r2
 201833c:	1007883a 	mov	r3,r2
 2018340:	008080b4 	movhi	r2,514
 2018344:	1093e344 	addi	r2,r2,20365
 2018348:	1105883a 	add	r2,r2,r4
 201834c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 2018350:	e0fff903 	ldbu	r3,-28(fp)
 2018354:	008080b4 	movhi	r2,514
 2018358:	1093e344 	addi	r2,r2,20365
 201835c:	10c5883a 	add	r2,r2,r3
 2018360:	10800003 	ldbu	r2,0(r2)
 2018364:	10803fcc 	andi	r2,r2,255
 2018368:	1004c03a 	cmpne	r2,r2,zero
 201836c:	10000e1e 	bne	r2,zero,20183a8 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 2018370:	008080b4 	movhi	r2,514
 2018374:	1093e604 	addi	r2,r2,20376
 2018378:	10800017 	ldw	r2,0(r2)
 201837c:	10800d83 	ldbu	r2,54(r2)
 2018380:	0084303a 	nor	r2,zero,r2
 2018384:	1007883a 	mov	r3,r2
 2018388:	008080b4 	movhi	r2,514
 201838c:	1093e304 	addi	r2,r2,20364
 2018390:	10800003 	ldbu	r2,0(r2)
 2018394:	1884703a 	and	r2,r3,r2
 2018398:	1007883a 	mov	r3,r2
 201839c:	008080b4 	movhi	r2,514
 20183a0:	1093e304 	addi	r2,r2,20364
 20183a4:	10c00005 	stb	r3,0(r2)
    }
}
 20183a8:	e037883a 	mov	sp,fp
 20183ac:	df000017 	ldw	fp,0(sp)
 20183b0:	dec00104 	addi	sp,sp,4
 20183b4:	f800283a 	ret

020183b8 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 20183b8:	defffb04 	addi	sp,sp,-20
 20183bc:	dfc00415 	stw	ra,16(sp)
 20183c0:	df000315 	stw	fp,12(sp)
 20183c4:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 20183c8:	010080b4 	movhi	r4,514
 20183cc:	21144104 	addi	r4,r4,20740
 20183d0:	0140dc04 	movi	r5,880
 20183d4:	20163e80 	call	20163e8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 20183d8:	008080b4 	movhi	r2,514
 20183dc:	10944104 	addi	r2,r2,20740
 20183e0:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 20183e4:	008080b4 	movhi	r2,514
 20183e8:	10944c04 	addi	r2,r2,20784
 20183ec:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 20183f0:	e03fff0d 	sth	zero,-4(fp)
 20183f4:	00001306 	br	2018444 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20183f8:	e0bffe17 	ldw	r2,-8(fp)
 20183fc:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 2018400:	e0fffe17 	ldw	r3,-8(fp)
 2018404:	e0bffd17 	ldw	r2,-12(fp)
 2018408:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 201840c:	e0fffe17 	ldw	r3,-8(fp)
 2018410:	00800fc4 	movi	r2,63
 2018414:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2018418:	e0bffe17 	ldw	r2,-8(fp)
 201841c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 2018420:	e0bffe17 	ldw	r2,-8(fp)
 2018424:	10800b04 	addi	r2,r2,44
 2018428:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 201842c:	e0bffd17 	ldw	r2,-12(fp)
 2018430:	10800b04 	addi	r2,r2,44
 2018434:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2018438:	e0bfff0b 	ldhu	r2,-4(fp)
 201843c:	10800044 	addi	r2,r2,1
 2018440:	e0bfff0d 	sth	r2,-4(fp)
 2018444:	e0bfff0b 	ldhu	r2,-4(fp)
 2018448:	108004f0 	cmpltui	r2,r2,19
 201844c:	103fea1e 	bne	r2,zero,20183f8 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2018450:	e0bffe17 	ldw	r2,-8(fp)
 2018454:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 2018458:	e0bffe17 	ldw	r2,-8(fp)
 201845c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 2018460:	e0fffe17 	ldw	r3,-8(fp)
 2018464:	00800fc4 	movi	r2,63
 2018468:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 201846c:	e0bffe17 	ldw	r2,-8(fp)
 2018470:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 2018474:	00c080b4 	movhi	r3,514
 2018478:	18d3e804 	addi	r3,r3,20384
 201847c:	008080b4 	movhi	r2,514
 2018480:	10944104 	addi	r2,r2,20740
 2018484:	18800015 	stw	r2,0(r3)
#endif
}
 2018488:	e037883a 	mov	sp,fp
 201848c:	dfc00117 	ldw	ra,4(sp)
 2018490:	df000017 	ldw	fp,0(sp)
 2018494:	dec00204 	addi	sp,sp,8
 2018498:	f800283a 	ret

0201849c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 201849c:	defffa04 	addi	sp,sp,-24
 20184a0:	dfc00515 	stw	ra,20(sp)
 20184a4:	df000415 	stw	fp,16(sp)
 20184a8:	df000404 	addi	fp,sp,16
 20184ac:	e13ffe15 	stw	r4,-8(fp)
 20184b0:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 20184b4:	e0bffe17 	ldw	r2,-8(fp)
 20184b8:	10800217 	ldw	r2,8(r2)
 20184bc:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 20184c0:	e0bffd17 	ldw	r2,-12(fp)
 20184c4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 20184c8:	e0fffd17 	ldw	r3,-12(fp)
 20184cc:	e0bfff0b 	ldhu	r2,-4(fp)
 20184d0:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 20184d4:	e0bffd17 	ldw	r2,-12(fp)
 20184d8:	10c00c03 	ldbu	r3,48(r2)
 20184dc:	00bff7c4 	movi	r2,-33
 20184e0:	1884703a 	and	r2,r3,r2
 20184e4:	1007883a 	mov	r3,r2
 20184e8:	e0bffd17 	ldw	r2,-12(fp)
 20184ec:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 20184f0:	e0bffd17 	ldw	r2,-12(fp)
 20184f4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 20184f8:	e0bffd17 	ldw	r2,-12(fp)
 20184fc:	10800c03 	ldbu	r2,48(r2)
 2018500:	10803fcc 	andi	r2,r2,255
 2018504:	1004c03a 	cmpne	r2,r2,zero
 2018508:	10001f1e 	bne	r2,zero,2018588 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 201850c:	e0bffd17 	ldw	r2,-12(fp)
 2018510:	10c00d83 	ldbu	r3,54(r2)
 2018514:	008080b4 	movhi	r2,514
 2018518:	1093e304 	addi	r2,r2,20364
 201851c:	10800003 	ldbu	r2,0(r2)
 2018520:	1884b03a 	or	r2,r3,r2
 2018524:	1007883a 	mov	r3,r2
 2018528:	008080b4 	movhi	r2,514
 201852c:	1093e304 	addi	r2,r2,20364
 2018530:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2018534:	e0bffd17 	ldw	r2,-12(fp)
 2018538:	10800d03 	ldbu	r2,52(r2)
 201853c:	11003fcc 	andi	r4,r2,255
 2018540:	e0bffd17 	ldw	r2,-12(fp)
 2018544:	10800d03 	ldbu	r2,52(r2)
 2018548:	10c03fcc 	andi	r3,r2,255
 201854c:	008080b4 	movhi	r2,514
 2018550:	1093e344 	addi	r2,r2,20365
 2018554:	10c5883a 	add	r2,r2,r3
 2018558:	10c00003 	ldbu	r3,0(r2)
 201855c:	e0bffd17 	ldw	r2,-12(fp)
 2018560:	10800d43 	ldbu	r2,53(r2)
 2018564:	1884b03a 	or	r2,r3,r2
 2018568:	1007883a 	mov	r3,r2
 201856c:	008080b4 	movhi	r2,514
 2018570:	1093e344 	addi	r2,r2,20365
 2018574:	1105883a 	add	r2,r2,r4
 2018578:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 201857c:	00800044 	movi	r2,1
 2018580:	e0bffc05 	stb	r2,-16(fp)
 2018584:	00000106 	br	201858c <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 2018588:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 201858c:	e13ffe17 	ldw	r4,-8(fp)
 2018590:	20185ac0 	call	20185ac <OS_FlagUnlink>
    return (sched);
 2018594:	e0bffc03 	ldbu	r2,-16(fp)
}
 2018598:	e037883a 	mov	sp,fp
 201859c:	dfc00117 	ldw	ra,4(sp)
 20185a0:	df000017 	ldw	fp,0(sp)
 20185a4:	dec00204 	addi	sp,sp,8
 20185a8:	f800283a 	ret

020185ac <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 20185ac:	defffa04 	addi	sp,sp,-24
 20185b0:	df000515 	stw	fp,20(sp)
 20185b4:	df000504 	addi	fp,sp,20
 20185b8:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 20185bc:	e0bfff17 	ldw	r2,-4(fp)
 20185c0:	10800117 	ldw	r2,4(r2)
 20185c4:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 20185c8:	e0bfff17 	ldw	r2,-4(fp)
 20185cc:	10800017 	ldw	r2,0(r2)
 20185d0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 20185d4:	e0bffc17 	ldw	r2,-16(fp)
 20185d8:	1004c03a 	cmpne	r2,r2,zero
 20185dc:	10000c1e 	bne	r2,zero,2018610 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 20185e0:	e0bfff17 	ldw	r2,-4(fp)
 20185e4:	10800317 	ldw	r2,12(r2)
 20185e8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 20185ec:	e0fffd17 	ldw	r3,-12(fp)
 20185f0:	e0bffb17 	ldw	r2,-20(fp)
 20185f4:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 20185f8:	e0bffb17 	ldw	r2,-20(fp)
 20185fc:	1005003a 	cmpeq	r2,r2,zero
 2018600:	10000c1e 	bne	r2,zero,2018634 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 2018604:	e0bffb17 	ldw	r2,-20(fp)
 2018608:	10000115 	stw	zero,4(r2)
 201860c:	00000906 	br	2018634 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 2018610:	e0fffc17 	ldw	r3,-16(fp)
 2018614:	e0bffb17 	ldw	r2,-20(fp)
 2018618:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 201861c:	e0bffb17 	ldw	r2,-20(fp)
 2018620:	1005003a 	cmpeq	r2,r2,zero
 2018624:	1000031e 	bne	r2,zero,2018634 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 2018628:	e0fffb17 	ldw	r3,-20(fp)
 201862c:	e0bffc17 	ldw	r2,-16(fp)
 2018630:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 2018634:	e0bfff17 	ldw	r2,-4(fp)
 2018638:	10800217 	ldw	r2,8(r2)
 201863c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 2018640:	e0bffe17 	ldw	r2,-8(fp)
 2018644:	10000a15 	stw	zero,40(r2)
#endif
}
 2018648:	e037883a 	mov	sp,fp
 201864c:	df000017 	ldw	fp,0(sp)
 2018650:	dec00104 	addi	sp,sp,4
 2018654:	f800283a 	ret

02018658 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 2018658:	defff304 	addi	sp,sp,-52
 201865c:	df000c15 	stw	fp,48(sp)
 2018660:	df000c04 	addi	fp,sp,48
 2018664:	e13ffb15 	stw	r4,-20(fp)
 2018668:	e17ffc15 	stw	r5,-16(fp)
 201866c:	e1bffd15 	stw	r6,-12(fp)
 2018670:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2018674:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2018678:	e0bffe17 	ldw	r2,-8(fp)
 201867c:	1004c03a 	cmpne	r2,r2,zero
 2018680:	1000021e 	bne	r2,zero,201868c <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 2018684:	e03fff15 	stw	zero,-4(fp)
 2018688:	00007506 	br	2018860 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 201868c:	e0bffb17 	ldw	r2,-20(fp)
 2018690:	1004c03a 	cmpne	r2,r2,zero
 2018694:	1000051e 	bne	r2,zero,20186ac <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 2018698:	e0fffe17 	ldw	r3,-8(fp)
 201869c:	00801884 	movi	r2,98
 20186a0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 20186a4:	e03fff15 	stw	zero,-4(fp)
 20186a8:	00006d06 	br	2018860 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 20186ac:	e0bffb17 	ldw	r2,-20(fp)
 20186b0:	108000cc 	andi	r2,r2,3
 20186b4:	1005003a 	cmpeq	r2,r2,zero
 20186b8:	1000051e 	bne	r2,zero,20186d0 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 20186bc:	e0fffe17 	ldw	r3,-8(fp)
 20186c0:	00801884 	movi	r2,98
 20186c4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 20186c8:	e03fff15 	stw	zero,-4(fp)
 20186cc:	00006406 	br	2018860 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 20186d0:	e0bffc17 	ldw	r2,-16(fp)
 20186d4:	108000a8 	cmpgeui	r2,r2,2
 20186d8:	1000051e 	bne	r2,zero,20186f0 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 20186dc:	e0fffe17 	ldw	r3,-8(fp)
 20186e0:	008016c4 	movi	r2,91
 20186e4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 20186e8:	e03fff15 	stw	zero,-4(fp)
 20186ec:	00005c06 	br	2018860 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 20186f0:	e0bffd17 	ldw	r2,-12(fp)
 20186f4:	10800128 	cmpgeui	r2,r2,4
 20186f8:	1000051e 	bne	r2,zero,2018710 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 20186fc:	e0fffe17 	ldw	r3,-8(fp)
 2018700:	00801704 	movi	r2,92
 2018704:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 2018708:	e03fff15 	stw	zero,-4(fp)
 201870c:	00005406 	br	2018860 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018710:	0005303a 	rdctl	r2,status
 2018714:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018718:	e0fff517 	ldw	r3,-44(fp)
 201871c:	00bfff84 	movi	r2,-2
 2018720:	1884703a 	and	r2,r3,r2
 2018724:	1001703a 	wrctl	status,r2
  
  return context;
 2018728:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201872c:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 2018730:	008080b4 	movhi	r2,514
 2018734:	1093e004 	addi	r2,r2,20352
 2018738:	10800017 	ldw	r2,0(r2)
 201873c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 2018740:	008080b4 	movhi	r2,514
 2018744:	1093e004 	addi	r2,r2,20352
 2018748:	10800017 	ldw	r2,0(r2)
 201874c:	1005003a 	cmpeq	r2,r2,zero
 2018750:	1000081e 	bne	r2,zero,2018774 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 2018754:	008080b4 	movhi	r2,514
 2018758:	1093e004 	addi	r2,r2,20352
 201875c:	10800017 	ldw	r2,0(r2)
 2018760:	10800117 	ldw	r2,4(r2)
 2018764:	1007883a 	mov	r3,r2
 2018768:	008080b4 	movhi	r2,514
 201876c:	1093e004 	addi	r2,r2,20352
 2018770:	10c00015 	stw	r3,0(r2)
 2018774:	e0bff617 	ldw	r2,-40(fp)
 2018778:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201877c:	e0bff417 	ldw	r2,-48(fp)
 2018780:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 2018784:	e0bffa17 	ldw	r2,-24(fp)
 2018788:	1004c03a 	cmpne	r2,r2,zero
 201878c:	1000051e 	bne	r2,zero,20187a4 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 2018790:	e0fffe17 	ldw	r3,-8(fp)
 2018794:	00801684 	movi	r2,90
 2018798:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 201879c:	e03fff15 	stw	zero,-4(fp)
 20187a0:	00002f06 	br	2018860 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 20187a4:	e0bffb17 	ldw	r2,-20(fp)
 20187a8:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 20187ac:	e0bffb17 	ldw	r2,-20(fp)
 20187b0:	1007883a 	mov	r3,r2
 20187b4:	e0bffd17 	ldw	r2,-12(fp)
 20187b8:	1885883a 	add	r2,r3,r2
 20187bc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 20187c0:	e03ff715 	stw	zero,-36(fp)
 20187c4:	00000d06 	br	20187fc <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 20187c8:	e0fff817 	ldw	r3,-32(fp)
 20187cc:	e0bff917 	ldw	r2,-28(fp)
 20187d0:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 20187d4:	e0bff917 	ldw	r2,-28(fp)
 20187d8:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 20187dc:	e0bff917 	ldw	r2,-28(fp)
 20187e0:	1007883a 	mov	r3,r2
 20187e4:	e0bffd17 	ldw	r2,-12(fp)
 20187e8:	1885883a 	add	r2,r3,r2
 20187ec:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 20187f0:	e0bff717 	ldw	r2,-36(fp)
 20187f4:	10800044 	addi	r2,r2,1
 20187f8:	e0bff715 	stw	r2,-36(fp)
 20187fc:	e0bffc17 	ldw	r2,-16(fp)
 2018800:	10ffffc4 	addi	r3,r2,-1
 2018804:	e0bff717 	ldw	r2,-36(fp)
 2018808:	10ffef36 	bltu	r2,r3,20187c8 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 201880c:	e0bff817 	ldw	r2,-32(fp)
 2018810:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 2018814:	e0fffa17 	ldw	r3,-24(fp)
 2018818:	e0bffb17 	ldw	r2,-20(fp)
 201881c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 2018820:	e0fffa17 	ldw	r3,-24(fp)
 2018824:	e0bffb17 	ldw	r2,-20(fp)
 2018828:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 201882c:	e0fffa17 	ldw	r3,-24(fp)
 2018830:	e0bffc17 	ldw	r2,-16(fp)
 2018834:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 2018838:	e0fffa17 	ldw	r3,-24(fp)
 201883c:	e0bffc17 	ldw	r2,-16(fp)
 2018840:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 2018844:	e0fffa17 	ldw	r3,-24(fp)
 2018848:	e0bffd17 	ldw	r2,-12(fp)
 201884c:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 2018850:	e0bffe17 	ldw	r2,-8(fp)
 2018854:	10000005 	stb	zero,0(r2)
    return (pmem);
 2018858:	e0bffa17 	ldw	r2,-24(fp)
 201885c:	e0bfff15 	stw	r2,-4(fp)
 2018860:	e0bfff17 	ldw	r2,-4(fp)
}
 2018864:	e037883a 	mov	sp,fp
 2018868:	df000017 	ldw	fp,0(sp)
 201886c:	dec00104 	addi	sp,sp,4
 2018870:	f800283a 	ret

02018874 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 2018874:	defff704 	addi	sp,sp,-36
 2018878:	df000815 	stw	fp,32(sp)
 201887c:	df000804 	addi	fp,sp,32
 2018880:	e13ffd15 	stw	r4,-12(fp)
 2018884:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2018888:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201888c:	e0bffe17 	ldw	r2,-8(fp)
 2018890:	1004c03a 	cmpne	r2,r2,zero
 2018894:	1000021e 	bne	r2,zero,20188a0 <OSMemGet+0x2c>
        return ((void *)0);
 2018898:	e03fff15 	stw	zero,-4(fp)
 201889c:	00003106 	br	2018964 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 20188a0:	e0bffd17 	ldw	r2,-12(fp)
 20188a4:	1004c03a 	cmpne	r2,r2,zero
 20188a8:	1000051e 	bne	r2,zero,20188c0 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 20188ac:	e0fffe17 	ldw	r3,-8(fp)
 20188b0:	00801804 	movi	r2,96
 20188b4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 20188b8:	e03fff15 	stw	zero,-4(fp)
 20188bc:	00002906 	br	2018964 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20188c0:	0005303a 	rdctl	r2,status
 20188c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20188c8:	e0fffa17 	ldw	r3,-24(fp)
 20188cc:	00bfff84 	movi	r2,-2
 20188d0:	1884703a 	and	r2,r3,r2
 20188d4:	1001703a 	wrctl	status,r2
  
  return context;
 20188d8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20188dc:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 20188e0:	e0bffd17 	ldw	r2,-12(fp)
 20188e4:	10800417 	ldw	r2,16(r2)
 20188e8:	1005003a 	cmpeq	r2,r2,zero
 20188ec:	1000151e 	bne	r2,zero,2018944 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 20188f0:	e0bffd17 	ldw	r2,-12(fp)
 20188f4:	10800117 	ldw	r2,4(r2)
 20188f8:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 20188fc:	e0bffc17 	ldw	r2,-16(fp)
 2018900:	10c00017 	ldw	r3,0(r2)
 2018904:	e0bffd17 	ldw	r2,-12(fp)
 2018908:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 201890c:	e0bffd17 	ldw	r2,-12(fp)
 2018910:	10800417 	ldw	r2,16(r2)
 2018914:	10ffffc4 	addi	r3,r2,-1
 2018918:	e0bffd17 	ldw	r2,-12(fp)
 201891c:	10c00415 	stw	r3,16(r2)
 2018920:	e0bffb17 	ldw	r2,-20(fp)
 2018924:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018928:	e0bff917 	ldw	r2,-28(fp)
 201892c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 2018930:	e0bffe17 	ldw	r2,-8(fp)
 2018934:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 2018938:	e0bffc17 	ldw	r2,-16(fp)
 201893c:	e0bfff15 	stw	r2,-4(fp)
 2018940:	00000806 	br	2018964 <OSMemGet+0xf0>
 2018944:	e0bffb17 	ldw	r2,-20(fp)
 2018948:	e0bff815 	stw	r2,-32(fp)
 201894c:	e0bff817 	ldw	r2,-32(fp)
 2018950:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 2018954:	e0fffe17 	ldw	r3,-8(fp)
 2018958:	00801744 	movi	r2,93
 201895c:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 2018960:	e03fff15 	stw	zero,-4(fp)
 2018964:	e0bfff17 	ldw	r2,-4(fp)
}
 2018968:	e037883a 	mov	sp,fp
 201896c:	df000017 	ldw	fp,0(sp)
 2018970:	dec00104 	addi	sp,sp,4
 2018974:	f800283a 	ret

02018978 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2018978:	defff604 	addi	sp,sp,-40
 201897c:	dfc00915 	stw	ra,36(sp)
 2018980:	df000815 	stw	fp,32(sp)
 2018984:	df000804 	addi	fp,sp,32
 2018988:	e13ffc15 	stw	r4,-16(fp)
 201898c:	e17ffd15 	stw	r5,-12(fp)
 2018990:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018994:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2018998:	e0bffe17 	ldw	r2,-8(fp)
 201899c:	1004c03a 	cmpne	r2,r2,zero
 20189a0:	1000021e 	bne	r2,zero,20189ac <OSMemNameGet+0x34>
        return (0);
 20189a4:	e03fff15 	stw	zero,-4(fp)
 20189a8:	00003006 	br	2018a6c <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 20189ac:	e0bffc17 	ldw	r2,-16(fp)
 20189b0:	1004c03a 	cmpne	r2,r2,zero
 20189b4:	1000051e 	bne	r2,zero,20189cc <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 20189b8:	e0fffe17 	ldw	r3,-8(fp)
 20189bc:	00801804 	movi	r2,96
 20189c0:	18800005 	stb	r2,0(r3)
        return (0);
 20189c4:	e03fff15 	stw	zero,-4(fp)
 20189c8:	00002806 	br	2018a6c <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20189cc:	e0bffd17 	ldw	r2,-12(fp)
 20189d0:	1004c03a 	cmpne	r2,r2,zero
 20189d4:	1000051e 	bne	r2,zero,20189ec <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 20189d8:	e0fffe17 	ldw	r3,-8(fp)
 20189dc:	00800304 	movi	r2,12
 20189e0:	18800005 	stb	r2,0(r3)
        return (0);
 20189e4:	e03fff15 	stw	zero,-4(fp)
 20189e8:	00002006 	br	2018a6c <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20189ec:	008080b4 	movhi	r2,514
 20189f0:	1093e504 	addi	r2,r2,20372
 20189f4:	10800003 	ldbu	r2,0(r2)
 20189f8:	10803fcc 	andi	r2,r2,255
 20189fc:	1005003a 	cmpeq	r2,r2,zero
 2018a00:	1000051e 	bne	r2,zero,2018a18 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 2018a04:	e0fffe17 	ldw	r3,-8(fp)
 2018a08:	00800444 	movi	r2,17
 2018a0c:	18800005 	stb	r2,0(r3)
        return (0);
 2018a10:	e03fff15 	stw	zero,-4(fp)
 2018a14:	00001506 	br	2018a6c <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018a18:	0005303a 	rdctl	r2,status
 2018a1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018a20:	e0fff917 	ldw	r3,-28(fp)
 2018a24:	00bfff84 	movi	r2,-2
 2018a28:	1884703a 	and	r2,r3,r2
 2018a2c:	1001703a 	wrctl	status,r2
  
  return context;
 2018a30:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2018a34:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 2018a38:	e0bffc17 	ldw	r2,-16(fp)
 2018a3c:	11400504 	addi	r5,r2,20
 2018a40:	e13ffd17 	ldw	r4,-12(fp)
 2018a44:	20165ec0 	call	20165ec <OS_StrCopy>
 2018a48:	e0bffb05 	stb	r2,-20(fp)
 2018a4c:	e0bffa17 	ldw	r2,-24(fp)
 2018a50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018a54:	e0bff817 	ldw	r2,-32(fp)
 2018a58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2018a5c:	e0bffe17 	ldw	r2,-8(fp)
 2018a60:	10000005 	stb	zero,0(r2)
    return (len);
 2018a64:	e0bffb03 	ldbu	r2,-20(fp)
 2018a68:	e0bfff15 	stw	r2,-4(fp)
 2018a6c:	e0bfff17 	ldw	r2,-4(fp)
}
 2018a70:	e037883a 	mov	sp,fp
 2018a74:	dfc00117 	ldw	ra,4(sp)
 2018a78:	df000017 	ldw	fp,0(sp)
 2018a7c:	dec00204 	addi	sp,sp,8
 2018a80:	f800283a 	ret

02018a84 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2018a84:	defff604 	addi	sp,sp,-40
 2018a88:	dfc00915 	stw	ra,36(sp)
 2018a8c:	df000815 	stw	fp,32(sp)
 2018a90:	df000804 	addi	fp,sp,32
 2018a94:	e13ffd15 	stw	r4,-12(fp)
 2018a98:	e17ffe15 	stw	r5,-8(fp)
 2018a9c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018aa0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2018aa4:	e0bfff17 	ldw	r2,-4(fp)
 2018aa8:	1005003a 	cmpeq	r2,r2,zero
 2018aac:	1000381e 	bne	r2,zero,2018b90 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2018ab0:	e0bffd17 	ldw	r2,-12(fp)
 2018ab4:	1004c03a 	cmpne	r2,r2,zero
 2018ab8:	1000041e 	bne	r2,zero,2018acc <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2018abc:	e0ffff17 	ldw	r3,-4(fp)
 2018ac0:	00801804 	movi	r2,96
 2018ac4:	18800005 	stb	r2,0(r3)
        return;
 2018ac8:	00003106 	br	2018b90 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2018acc:	e0bffe17 	ldw	r2,-8(fp)
 2018ad0:	1004c03a 	cmpne	r2,r2,zero
 2018ad4:	1000041e 	bne	r2,zero,2018ae8 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 2018ad8:	e0ffff17 	ldw	r3,-4(fp)
 2018adc:	00800304 	movi	r2,12
 2018ae0:	18800005 	stb	r2,0(r3)
        return;
 2018ae4:	00002a06 	br	2018b90 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2018ae8:	008080b4 	movhi	r2,514
 2018aec:	1093e504 	addi	r2,r2,20372
 2018af0:	10800003 	ldbu	r2,0(r2)
 2018af4:	10803fcc 	andi	r2,r2,255
 2018af8:	1005003a 	cmpeq	r2,r2,zero
 2018afc:	1000041e 	bne	r2,zero,2018b10 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 2018b00:	e0ffff17 	ldw	r3,-4(fp)
 2018b04:	00800484 	movi	r2,18
 2018b08:	18800005 	stb	r2,0(r3)
        return;
 2018b0c:	00002006 	br	2018b90 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018b10:	0005303a 	rdctl	r2,status
 2018b14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018b18:	e0fffa17 	ldw	r3,-24(fp)
 2018b1c:	00bfff84 	movi	r2,-2
 2018b20:	1884703a 	and	r2,r3,r2
 2018b24:	1001703a 	wrctl	status,r2
  
  return context;
 2018b28:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2018b2c:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2018b30:	e13ffe17 	ldw	r4,-8(fp)
 2018b34:	201666c0 	call	201666c <OS_StrLen>
 2018b38:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 2018b3c:	e0bffc03 	ldbu	r2,-16(fp)
 2018b40:	10800830 	cmpltui	r2,r2,32
 2018b44:	1000081e 	bne	r2,zero,2018b68 <OSMemNameSet+0xe4>
 2018b48:	e0bffb17 	ldw	r2,-20(fp)
 2018b4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018b50:	e0bff917 	ldw	r2,-28(fp)
 2018b54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 2018b58:	e0ffff17 	ldw	r3,-4(fp)
 2018b5c:	008018c4 	movi	r2,99
 2018b60:	18800005 	stb	r2,0(r3)
        return;
 2018b64:	00000a06 	br	2018b90 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 2018b68:	e0bffd17 	ldw	r2,-12(fp)
 2018b6c:	11000504 	addi	r4,r2,20
 2018b70:	e17ffe17 	ldw	r5,-8(fp)
 2018b74:	20165ec0 	call	20165ec <OS_StrCopy>
 2018b78:	e0bffb17 	ldw	r2,-20(fp)
 2018b7c:	e0bff815 	stw	r2,-32(fp)
 2018b80:	e0bff817 	ldw	r2,-32(fp)
 2018b84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2018b88:	e0bfff17 	ldw	r2,-4(fp)
 2018b8c:	10000005 	stb	zero,0(r2)
}
 2018b90:	e037883a 	mov	sp,fp
 2018b94:	dfc00117 	ldw	ra,4(sp)
 2018b98:	df000017 	ldw	fp,0(sp)
 2018b9c:	dec00204 	addi	sp,sp,8
 2018ba0:	f800283a 	ret

02018ba4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 2018ba4:	defff804 	addi	sp,sp,-32
 2018ba8:	df000715 	stw	fp,28(sp)
 2018bac:	df000704 	addi	fp,sp,28
 2018bb0:	e13ffd15 	stw	r4,-12(fp)
 2018bb4:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018bb8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 2018bbc:	e0bffd17 	ldw	r2,-12(fp)
 2018bc0:	1004c03a 	cmpne	r2,r2,zero
 2018bc4:	1000031e 	bne	r2,zero,2018bd4 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 2018bc8:	00801804 	movi	r2,96
 2018bcc:	e0bfff15 	stw	r2,-4(fp)
 2018bd0:	00002b06 	br	2018c80 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 2018bd4:	e0bffe17 	ldw	r2,-8(fp)
 2018bd8:	1004c03a 	cmpne	r2,r2,zero
 2018bdc:	1000031e 	bne	r2,zero,2018bec <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 2018be0:	008017c4 	movi	r2,95
 2018be4:	e0bfff15 	stw	r2,-4(fp)
 2018be8:	00002506 	br	2018c80 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018bec:	0005303a 	rdctl	r2,status
 2018bf0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018bf4:	e0fffb17 	ldw	r3,-20(fp)
 2018bf8:	00bfff84 	movi	r2,-2
 2018bfc:	1884703a 	and	r2,r3,r2
 2018c00:	1001703a 	wrctl	status,r2
  
  return context;
 2018c04:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2018c08:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 2018c0c:	e0bffd17 	ldw	r2,-12(fp)
 2018c10:	10c00417 	ldw	r3,16(r2)
 2018c14:	e0bffd17 	ldw	r2,-12(fp)
 2018c18:	10800317 	ldw	r2,12(r2)
 2018c1c:	18800736 	bltu	r3,r2,2018c3c <OSMemPut+0x98>
 2018c20:	e0bffc17 	ldw	r2,-16(fp)
 2018c24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018c28:	e0bffa17 	ldw	r2,-24(fp)
 2018c2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 2018c30:	00801784 	movi	r2,94
 2018c34:	e0bfff15 	stw	r2,-4(fp)
 2018c38:	00001106 	br	2018c80 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 2018c3c:	e0fffe17 	ldw	r3,-8(fp)
 2018c40:	e0bffd17 	ldw	r2,-12(fp)
 2018c44:	10800117 	ldw	r2,4(r2)
 2018c48:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 2018c4c:	e0fffd17 	ldw	r3,-12(fp)
 2018c50:	e0bffe17 	ldw	r2,-8(fp)
 2018c54:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 2018c58:	e0bffd17 	ldw	r2,-12(fp)
 2018c5c:	10800417 	ldw	r2,16(r2)
 2018c60:	10c00044 	addi	r3,r2,1
 2018c64:	e0bffd17 	ldw	r2,-12(fp)
 2018c68:	10c00415 	stw	r3,16(r2)
 2018c6c:	e0bffc17 	ldw	r2,-16(fp)
 2018c70:	e0bff915 	stw	r2,-28(fp)
 2018c74:	e0bff917 	ldw	r2,-28(fp)
 2018c78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 2018c7c:	e03fff15 	stw	zero,-4(fp)
 2018c80:	e0bfff17 	ldw	r2,-4(fp)
}
 2018c84:	e037883a 	mov	sp,fp
 2018c88:	df000017 	ldw	fp,0(sp)
 2018c8c:	dec00104 	addi	sp,sp,4
 2018c90:	f800283a 	ret

02018c94 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 2018c94:	defff904 	addi	sp,sp,-28
 2018c98:	df000615 	stw	fp,24(sp)
 2018c9c:	df000604 	addi	fp,sp,24
 2018ca0:	e13ffd15 	stw	r4,-12(fp)
 2018ca4:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018ca8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 2018cac:	e0bffd17 	ldw	r2,-12(fp)
 2018cb0:	1004c03a 	cmpne	r2,r2,zero
 2018cb4:	1000031e 	bne	r2,zero,2018cc4 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 2018cb8:	00801804 	movi	r2,96
 2018cbc:	e0bfff15 	stw	r2,-4(fp)
 2018cc0:	00002e06 	br	2018d7c <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 2018cc4:	e0bffe17 	ldw	r2,-8(fp)
 2018cc8:	1004c03a 	cmpne	r2,r2,zero
 2018ccc:	1000031e 	bne	r2,zero,2018cdc <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 2018cd0:	00801844 	movi	r2,97
 2018cd4:	e0bfff15 	stw	r2,-4(fp)
 2018cd8:	00002806 	br	2018d7c <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018cdc:	0005303a 	rdctl	r2,status
 2018ce0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018ce4:	e0fffb17 	ldw	r3,-20(fp)
 2018ce8:	00bfff84 	movi	r2,-2
 2018cec:	1884703a 	and	r2,r3,r2
 2018cf0:	1001703a 	wrctl	status,r2
  
  return context;
 2018cf4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2018cf8:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 2018cfc:	e0bffd17 	ldw	r2,-12(fp)
 2018d00:	10c00017 	ldw	r3,0(r2)
 2018d04:	e0bffe17 	ldw	r2,-8(fp)
 2018d08:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 2018d0c:	e0bffd17 	ldw	r2,-12(fp)
 2018d10:	10c00117 	ldw	r3,4(r2)
 2018d14:	e0bffe17 	ldw	r2,-8(fp)
 2018d18:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 2018d1c:	e0bffd17 	ldw	r2,-12(fp)
 2018d20:	10c00217 	ldw	r3,8(r2)
 2018d24:	e0bffe17 	ldw	r2,-8(fp)
 2018d28:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 2018d2c:	e0bffd17 	ldw	r2,-12(fp)
 2018d30:	10c00317 	ldw	r3,12(r2)
 2018d34:	e0bffe17 	ldw	r2,-8(fp)
 2018d38:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 2018d3c:	e0bffd17 	ldw	r2,-12(fp)
 2018d40:	10c00417 	ldw	r3,16(r2)
 2018d44:	e0bffe17 	ldw	r2,-8(fp)
 2018d48:	10c00415 	stw	r3,16(r2)
 2018d4c:	e0bffc17 	ldw	r2,-16(fp)
 2018d50:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018d54:	e0bffa17 	ldw	r2,-24(fp)
 2018d58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 2018d5c:	e0bffe17 	ldw	r2,-8(fp)
 2018d60:	10c00317 	ldw	r3,12(r2)
 2018d64:	e0bffe17 	ldw	r2,-8(fp)
 2018d68:	10800417 	ldw	r2,16(r2)
 2018d6c:	1887c83a 	sub	r3,r3,r2
 2018d70:	e0bffe17 	ldw	r2,-8(fp)
 2018d74:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 2018d78:	e03fff15 	stw	zero,-4(fp)
 2018d7c:	e0bfff17 	ldw	r2,-4(fp)
}
 2018d80:	e037883a 	mov	sp,fp
 2018d84:	df000017 	ldw	fp,0(sp)
 2018d88:	dec00104 	addi	sp,sp,4
 2018d8c:	f800283a 	ret

02018d90 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 2018d90:	defffc04 	addi	sp,sp,-16
 2018d94:	dfc00315 	stw	ra,12(sp)
 2018d98:	df000215 	stw	fp,8(sp)
 2018d9c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 2018da0:	010080b4 	movhi	r4,514
 2018da4:	21151d04 	addi	r4,r4,21620
 2018da8:	01430c04 	movi	r5,3120
 2018dac:	20163e80 	call	20163e8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 2018db0:	008080b4 	movhi	r2,514
 2018db4:	10951d04 	addi	r2,r2,21620
 2018db8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2018dbc:	e03ffe0d 	sth	zero,-8(fp)
 2018dc0:	00001306 	br	2018e10 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 2018dc4:	e0bffe0b 	ldhu	r2,-8(fp)
 2018dc8:	10800d24 	muli	r2,r2,52
 2018dcc:	1007883a 	mov	r3,r2
 2018dd0:	008080b4 	movhi	r2,514
 2018dd4:	10952a04 	addi	r2,r2,21672
 2018dd8:	1887883a 	add	r3,r3,r2
 2018ddc:	e0bfff17 	ldw	r2,-4(fp)
 2018de0:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 2018de4:	e0ffff17 	ldw	r3,-4(fp)
 2018de8:	00800fc4 	movi	r2,63
 2018dec:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 2018df0:	e0bfff17 	ldw	r2,-4(fp)
 2018df4:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 2018df8:	e0bfff17 	ldw	r2,-4(fp)
 2018dfc:	10800d04 	addi	r2,r2,52
 2018e00:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2018e04:	e0bffe0b 	ldhu	r2,-8(fp)
 2018e08:	10800044 	addi	r2,r2,1
 2018e0c:	e0bffe0d 	sth	r2,-8(fp)
 2018e10:	e0bffe0b 	ldhu	r2,-8(fp)
 2018e14:	10800ef0 	cmpltui	r2,r2,59
 2018e18:	103fea1e 	bne	r2,zero,2018dc4 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 2018e1c:	e0bfff17 	ldw	r2,-4(fp)
 2018e20:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 2018e24:	e0ffff17 	ldw	r3,-4(fp)
 2018e28:	00800fc4 	movi	r2,63
 2018e2c:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 2018e30:	e0bfff17 	ldw	r2,-4(fp)
 2018e34:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 2018e38:	00c080b4 	movhi	r3,514
 2018e3c:	18d3e004 	addi	r3,r3,20352
 2018e40:	008080b4 	movhi	r2,514
 2018e44:	10951d04 	addi	r2,r2,21620
 2018e48:	18800015 	stw	r2,0(r3)
#endif
}
 2018e4c:	e037883a 	mov	sp,fp
 2018e50:	dfc00117 	ldw	ra,4(sp)
 2018e54:	df000017 	ldw	fp,0(sp)
 2018e58:	dec00204 	addi	sp,sp,8
 2018e5c:	f800283a 	ret

02018e60 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 2018e60:	defff704 	addi	sp,sp,-36
 2018e64:	df000815 	stw	fp,32(sp)
 2018e68:	df000804 	addi	fp,sp,32
 2018e6c:	e13ffd15 	stw	r4,-12(fp)
 2018e70:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018e74:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2018e78:	e0bffe17 	ldw	r2,-8(fp)
 2018e7c:	1004c03a 	cmpne	r2,r2,zero
 2018e80:	1000021e 	bne	r2,zero,2018e8c <OSQAccept+0x2c>
        return ((void *)0);
 2018e84:	e03fff15 	stw	zero,-4(fp)
 2018e88:	00004506 	br	2018fa0 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2018e8c:	e0bffd17 	ldw	r2,-12(fp)
 2018e90:	1004c03a 	cmpne	r2,r2,zero
 2018e94:	1000051e 	bne	r2,zero,2018eac <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 2018e98:	e0fffe17 	ldw	r3,-8(fp)
 2018e9c:	00800104 	movi	r2,4
 2018ea0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 2018ea4:	e03fff15 	stw	zero,-4(fp)
 2018ea8:	00003d06 	br	2018fa0 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 2018eac:	e0bffd17 	ldw	r2,-12(fp)
 2018eb0:	10800003 	ldbu	r2,0(r2)
 2018eb4:	10803fcc 	andi	r2,r2,255
 2018eb8:	108000a0 	cmpeqi	r2,r2,2
 2018ebc:	1000051e 	bne	r2,zero,2018ed4 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 2018ec0:	e0fffe17 	ldw	r3,-8(fp)
 2018ec4:	00800044 	movi	r2,1
 2018ec8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 2018ecc:	e03fff15 	stw	zero,-4(fp)
 2018ed0:	00003306 	br	2018fa0 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018ed4:	0005303a 	rdctl	r2,status
 2018ed8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018edc:	e0fff917 	ldw	r3,-28(fp)
 2018ee0:	00bfff84 	movi	r2,-2
 2018ee4:	1884703a 	and	r2,r3,r2
 2018ee8:	1001703a 	wrctl	status,r2
  
  return context;
 2018eec:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2018ef0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2018ef4:	e0bffd17 	ldw	r2,-12(fp)
 2018ef8:	10800117 	ldw	r2,4(r2)
 2018efc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2018f00:	e0bffb17 	ldw	r2,-20(fp)
 2018f04:	1080058b 	ldhu	r2,22(r2)
 2018f08:	10bfffcc 	andi	r2,r2,65535
 2018f0c:	1005003a 	cmpeq	r2,r2,zero
 2018f10:	1000191e 	bne	r2,zero,2018f78 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2018f14:	e0bffb17 	ldw	r2,-20(fp)
 2018f18:	10c00417 	ldw	r3,16(r2)
 2018f1c:	18800017 	ldw	r2,0(r3)
 2018f20:	e0bffc15 	stw	r2,-16(fp)
 2018f24:	18c00104 	addi	r3,r3,4
 2018f28:	e0bffb17 	ldw	r2,-20(fp)
 2018f2c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2018f30:	e0bffb17 	ldw	r2,-20(fp)
 2018f34:	1080058b 	ldhu	r2,22(r2)
 2018f38:	10bfffc4 	addi	r2,r2,-1
 2018f3c:	1007883a 	mov	r3,r2
 2018f40:	e0bffb17 	ldw	r2,-20(fp)
 2018f44:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2018f48:	e0bffb17 	ldw	r2,-20(fp)
 2018f4c:	10c00417 	ldw	r3,16(r2)
 2018f50:	e0bffb17 	ldw	r2,-20(fp)
 2018f54:	10800217 	ldw	r2,8(r2)
 2018f58:	1880041e 	bne	r3,r2,2018f6c <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 2018f5c:	e0bffb17 	ldw	r2,-20(fp)
 2018f60:	10c00117 	ldw	r3,4(r2)
 2018f64:	e0bffb17 	ldw	r2,-20(fp)
 2018f68:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 2018f6c:	e0bffe17 	ldw	r2,-8(fp)
 2018f70:	10000005 	stb	zero,0(r2)
 2018f74:	00000406 	br	2018f88 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 2018f78:	e0fffe17 	ldw	r3,-8(fp)
 2018f7c:	008007c4 	movi	r2,31
 2018f80:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 2018f84:	e03ffc15 	stw	zero,-16(fp)
 2018f88:	e0bffa17 	ldw	r2,-24(fp)
 2018f8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018f90:	e0bff817 	ldw	r2,-32(fp)
 2018f94:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 2018f98:	e0bffc17 	ldw	r2,-16(fp)
 2018f9c:	e0bfff15 	stw	r2,-4(fp)
 2018fa0:	e0bfff17 	ldw	r2,-4(fp)
}
 2018fa4:	e037883a 	mov	sp,fp
 2018fa8:	df000017 	ldw	fp,0(sp)
 2018fac:	dec00104 	addi	sp,sp,4
 2018fb0:	f800283a 	ret

02018fb4 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 2018fb4:	defff304 	addi	sp,sp,-52
 2018fb8:	dfc00c15 	stw	ra,48(sp)
 2018fbc:	df000b15 	stw	fp,44(sp)
 2018fc0:	df000b04 	addi	fp,sp,44
 2018fc4:	e13ffd15 	stw	r4,-12(fp)
 2018fc8:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2018fcc:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2018fd0:	008080b4 	movhi	r2,514
 2018fd4:	1093e504 	addi	r2,r2,20372
 2018fd8:	10800003 	ldbu	r2,0(r2)
 2018fdc:	10803fcc 	andi	r2,r2,255
 2018fe0:	1005003a 	cmpeq	r2,r2,zero
 2018fe4:	1000021e 	bne	r2,zero,2018ff0 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2018fe8:	e03fff15 	stw	zero,-4(fp)
 2018fec:	00007006 	br	20191b0 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018ff0:	0005303a 	rdctl	r2,status
 2018ff4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018ff8:	e0fff917 	ldw	r3,-28(fp)
 2018ffc:	00bfff84 	movi	r2,-2
 2019000:	1884703a 	and	r2,r3,r2
 2019004:	1001703a 	wrctl	status,r2
  
  return context;
 2019008:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 201900c:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2019010:	008080b4 	movhi	r2,514
 2019014:	1093e404 	addi	r2,r2,20368
 2019018:	10800017 	ldw	r2,0(r2)
 201901c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2019020:	008080b4 	movhi	r2,514
 2019024:	1093e404 	addi	r2,r2,20368
 2019028:	10800017 	ldw	r2,0(r2)
 201902c:	1005003a 	cmpeq	r2,r2,zero
 2019030:	1000081e 	bne	r2,zero,2019054 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2019034:	008080b4 	movhi	r2,514
 2019038:	1093e404 	addi	r2,r2,20368
 201903c:	10800017 	ldw	r2,0(r2)
 2019040:	10800117 	ldw	r2,4(r2)
 2019044:	1007883a 	mov	r3,r2
 2019048:	008080b4 	movhi	r2,514
 201904c:	1093e404 	addi	r2,r2,20368
 2019050:	10c00015 	stw	r3,0(r2)
 2019054:	e0bffa17 	ldw	r2,-24(fp)
 2019058:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201905c:	e0bff817 	ldw	r2,-32(fp)
 2019060:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 2019064:	e0bffc17 	ldw	r2,-16(fp)
 2019068:	1005003a 	cmpeq	r2,r2,zero
 201906c:	10004e1e 	bne	r2,zero,20191a8 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019070:	0005303a 	rdctl	r2,status
 2019074:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019078:	e0fff717 	ldw	r3,-36(fp)
 201907c:	00bfff84 	movi	r2,-2
 2019080:	1884703a 	and	r2,r3,r2
 2019084:	1001703a 	wrctl	status,r2
  
  return context;
 2019088:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 201908c:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 2019090:	008080b4 	movhi	r2,514
 2019094:	1093e204 	addi	r2,r2,20360
 2019098:	10800017 	ldw	r2,0(r2)
 201909c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 20190a0:	e0bffb17 	ldw	r2,-20(fp)
 20190a4:	1005003a 	cmpeq	r2,r2,zero
 20190a8:	1000311e 	bne	r2,zero,2019170 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 20190ac:	008080b4 	movhi	r2,514
 20190b0:	1093e204 	addi	r2,r2,20360
 20190b4:	10800017 	ldw	r2,0(r2)
 20190b8:	10c00017 	ldw	r3,0(r2)
 20190bc:	008080b4 	movhi	r2,514
 20190c0:	1093e204 	addi	r2,r2,20360
 20190c4:	10c00015 	stw	r3,0(r2)
 20190c8:	e0bffa17 	ldw	r2,-24(fp)
 20190cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20190d0:	e0bff617 	ldw	r2,-40(fp)
 20190d4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 20190d8:	e0fffb17 	ldw	r3,-20(fp)
 20190dc:	e0bffd17 	ldw	r2,-12(fp)
 20190e0:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 20190e4:	e0bffe0b 	ldhu	r2,-8(fp)
 20190e8:	1085883a 	add	r2,r2,r2
 20190ec:	1085883a 	add	r2,r2,r2
 20190f0:	1007883a 	mov	r3,r2
 20190f4:	e0bffd17 	ldw	r2,-12(fp)
 20190f8:	1887883a 	add	r3,r3,r2
 20190fc:	e0bffb17 	ldw	r2,-20(fp)
 2019100:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 2019104:	e0fffb17 	ldw	r3,-20(fp)
 2019108:	e0bffd17 	ldw	r2,-12(fp)
 201910c:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 2019110:	e0fffb17 	ldw	r3,-20(fp)
 2019114:	e0bffd17 	ldw	r2,-12(fp)
 2019118:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 201911c:	e0fffb17 	ldw	r3,-20(fp)
 2019120:	e0bffe0b 	ldhu	r2,-8(fp)
 2019124:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 2019128:	e0bffb17 	ldw	r2,-20(fp)
 201912c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 2019130:	e0fffc17 	ldw	r3,-16(fp)
 2019134:	00800084 	movi	r2,2
 2019138:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 201913c:	e0bffc17 	ldw	r2,-16(fp)
 2019140:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 2019144:	e0fffc17 	ldw	r3,-16(fp)
 2019148:	e0bffb17 	ldw	r2,-20(fp)
 201914c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 2019150:	e0fffc17 	ldw	r3,-16(fp)
 2019154:	00800fc4 	movi	r2,63
 2019158:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 201915c:	e0bffc17 	ldw	r2,-16(fp)
 2019160:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 2019164:	e13ffc17 	ldw	r4,-16(fp)
 2019168:	201601c0 	call	201601c <OS_EventWaitListInit>
 201916c:	00000e06 	br	20191a8 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 2019170:	008080b4 	movhi	r2,514
 2019174:	1093e404 	addi	r2,r2,20368
 2019178:	10c00017 	ldw	r3,0(r2)
 201917c:	e0bffc17 	ldw	r2,-16(fp)
 2019180:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 2019184:	00c080b4 	movhi	r3,514
 2019188:	18d3e404 	addi	r3,r3,20368
 201918c:	e0bffc17 	ldw	r2,-16(fp)
 2019190:	18800015 	stw	r2,0(r3)
 2019194:	e0bffa17 	ldw	r2,-24(fp)
 2019198:	e0bff515 	stw	r2,-44(fp)
 201919c:	e0bff517 	ldw	r2,-44(fp)
 20191a0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 20191a4:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 20191a8:	e0bffc17 	ldw	r2,-16(fp)
 20191ac:	e0bfff15 	stw	r2,-4(fp)
 20191b0:	e0bfff17 	ldw	r2,-4(fp)
}
 20191b4:	e037883a 	mov	sp,fp
 20191b8:	dfc00117 	ldw	ra,4(sp)
 20191bc:	df000017 	ldw	fp,0(sp)
 20191c0:	dec00204 	addi	sp,sp,8
 20191c4:	f800283a 	ret

020191c8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20191c8:	defff004 	addi	sp,sp,-64
 20191cc:	dfc00f15 	stw	ra,60(sp)
 20191d0:	df000e15 	stw	fp,56(sp)
 20191d4:	df000e04 	addi	fp,sp,56
 20191d8:	e13ffb15 	stw	r4,-20(fp)
 20191dc:	e1bffd15 	stw	r6,-12(fp)
 20191e0:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20191e4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20191e8:	e0bffd17 	ldw	r2,-12(fp)
 20191ec:	1004c03a 	cmpne	r2,r2,zero
 20191f0:	1000031e 	bne	r2,zero,2019200 <OSQDel+0x38>
        return (pevent);
 20191f4:	e0bffb17 	ldw	r2,-20(fp)
 20191f8:	e0bfff15 	stw	r2,-4(fp)
 20191fc:	0000ac06 	br	20194b0 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2019200:	e0bffb17 	ldw	r2,-20(fp)
 2019204:	1004c03a 	cmpne	r2,r2,zero
 2019208:	1000061e 	bne	r2,zero,2019224 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 201920c:	e0fffd17 	ldw	r3,-12(fp)
 2019210:	00800104 	movi	r2,4
 2019214:	18800005 	stb	r2,0(r3)
        return (pevent);
 2019218:	e0fffb17 	ldw	r3,-20(fp)
 201921c:	e0ffff15 	stw	r3,-4(fp)
 2019220:	0000a306 	br	20194b0 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2019224:	e0bffb17 	ldw	r2,-20(fp)
 2019228:	10800003 	ldbu	r2,0(r2)
 201922c:	10803fcc 	andi	r2,r2,255
 2019230:	108000a0 	cmpeqi	r2,r2,2
 2019234:	1000061e 	bne	r2,zero,2019250 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 2019238:	e0fffd17 	ldw	r3,-12(fp)
 201923c:	00800044 	movi	r2,1
 2019240:	18800005 	stb	r2,0(r3)
        return (pevent);
 2019244:	e0bffb17 	ldw	r2,-20(fp)
 2019248:	e0bfff15 	stw	r2,-4(fp)
 201924c:	00009806 	br	20194b0 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2019250:	008080b4 	movhi	r2,514
 2019254:	1093e504 	addi	r2,r2,20372
 2019258:	10800003 	ldbu	r2,0(r2)
 201925c:	10803fcc 	andi	r2,r2,255
 2019260:	1005003a 	cmpeq	r2,r2,zero
 2019264:	1000061e 	bne	r2,zero,2019280 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2019268:	e0fffd17 	ldw	r3,-12(fp)
 201926c:	008003c4 	movi	r2,15
 2019270:	18800005 	stb	r2,0(r3)
        return (pevent);
 2019274:	e0fffb17 	ldw	r3,-20(fp)
 2019278:	e0ffff15 	stw	r3,-4(fp)
 201927c:	00008c06 	br	20194b0 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019280:	0005303a 	rdctl	r2,status
 2019284:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019288:	e0fff617 	ldw	r3,-40(fp)
 201928c:	00bfff84 	movi	r2,-2
 2019290:	1884703a 	and	r2,r3,r2
 2019294:	1001703a 	wrctl	status,r2
  
  return context;
 2019298:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 201929c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 20192a0:	e0bffb17 	ldw	r2,-20(fp)
 20192a4:	10800283 	ldbu	r2,10(r2)
 20192a8:	10803fcc 	andi	r2,r2,255
 20192ac:	1005003a 	cmpeq	r2,r2,zero
 20192b0:	1000031e 	bne	r2,zero,20192c0 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 20192b4:	00800044 	movi	r2,1
 20192b8:	e0bffa05 	stb	r2,-24(fp)
 20192bc:	00000106 	br	20192c4 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 20192c0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 20192c4:	e0bffc03 	ldbu	r2,-16(fp)
 20192c8:	e0bffe15 	stw	r2,-8(fp)
 20192cc:	e0fffe17 	ldw	r3,-8(fp)
 20192d0:	1805003a 	cmpeq	r2,r3,zero
 20192d4:	1000041e 	bne	r2,zero,20192e8 <OSQDel+0x120>
 20192d8:	e0fffe17 	ldw	r3,-8(fp)
 20192dc:	18800060 	cmpeqi	r2,r3,1
 20192e0:	1000391e 	bne	r2,zero,20193c8 <OSQDel+0x200>
 20192e4:	00006706 	br	2019484 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 20192e8:	e0bffa03 	ldbu	r2,-24(fp)
 20192ec:	1004c03a 	cmpne	r2,r2,zero
 20192f0:	1000261e 	bne	r2,zero,201938c <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 20192f4:	e0fffb17 	ldw	r3,-20(fp)
 20192f8:	00800fc4 	movi	r2,63
 20192fc:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2019300:	e0bffb17 	ldw	r2,-20(fp)
 2019304:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 2019308:	e0bffb17 	ldw	r2,-20(fp)
 201930c:	10800117 	ldw	r2,4(r2)
 2019310:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 2019314:	008080b4 	movhi	r2,514
 2019318:	1093e204 	addi	r2,r2,20360
 201931c:	10c00017 	ldw	r3,0(r2)
 2019320:	e0bff817 	ldw	r2,-32(fp)
 2019324:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 2019328:	00c080b4 	movhi	r3,514
 201932c:	18d3e204 	addi	r3,r3,20360
 2019330:	e0bff817 	ldw	r2,-32(fp)
 2019334:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2019338:	e0bffb17 	ldw	r2,-20(fp)
 201933c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2019340:	008080b4 	movhi	r2,514
 2019344:	1093e404 	addi	r2,r2,20368
 2019348:	10c00017 	ldw	r3,0(r2)
 201934c:	e0bffb17 	ldw	r2,-20(fp)
 2019350:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2019354:	e0bffb17 	ldw	r2,-20(fp)
 2019358:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 201935c:	00c080b4 	movhi	r3,514
 2019360:	18d3e404 	addi	r3,r3,20368
 2019364:	e0bffb17 	ldw	r2,-20(fp)
 2019368:	18800015 	stw	r2,0(r3)
 201936c:	e0bff717 	ldw	r2,-36(fp)
 2019370:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019374:	e0bff517 	ldw	r2,-44(fp)
 2019378:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 201937c:	e0bffd17 	ldw	r2,-12(fp)
 2019380:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 2019384:	e03ff915 	stw	zero,-28(fp)
 2019388:	00004706 	br	20194a8 <OSQDel+0x2e0>
 201938c:	e0bff717 	ldw	r2,-36(fp)
 2019390:	e0bff415 	stw	r2,-48(fp)
 2019394:	e0bff417 	ldw	r2,-48(fp)
 2019398:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 201939c:	e0fffd17 	ldw	r3,-12(fp)
 20193a0:	00801244 	movi	r2,73
 20193a4:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 20193a8:	e0bffb17 	ldw	r2,-20(fp)
 20193ac:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 20193b0:	00003d06 	br	20194a8 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 20193b4:	e13ffb17 	ldw	r4,-20(fp)
 20193b8:	000b883a 	mov	r5,zero
 20193bc:	01800104 	movi	r6,4
 20193c0:	000f883a 	mov	r7,zero
 20193c4:	2015a680 	call	2015a68 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 20193c8:	e0bffb17 	ldw	r2,-20(fp)
 20193cc:	10800283 	ldbu	r2,10(r2)
 20193d0:	10803fcc 	andi	r2,r2,255
 20193d4:	1004c03a 	cmpne	r2,r2,zero
 20193d8:	103ff61e 	bne	r2,zero,20193b4 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 20193dc:	e0fffb17 	ldw	r3,-20(fp)
 20193e0:	00800fc4 	movi	r2,63
 20193e4:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 20193e8:	e0bffb17 	ldw	r2,-20(fp)
 20193ec:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 20193f0:	e0bffb17 	ldw	r2,-20(fp)
 20193f4:	10800117 	ldw	r2,4(r2)
 20193f8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 20193fc:	008080b4 	movhi	r2,514
 2019400:	1093e204 	addi	r2,r2,20360
 2019404:	10c00017 	ldw	r3,0(r2)
 2019408:	e0bff817 	ldw	r2,-32(fp)
 201940c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 2019410:	00c080b4 	movhi	r3,514
 2019414:	18d3e204 	addi	r3,r3,20360
 2019418:	e0bff817 	ldw	r2,-32(fp)
 201941c:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2019420:	e0bffb17 	ldw	r2,-20(fp)
 2019424:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2019428:	008080b4 	movhi	r2,514
 201942c:	1093e404 	addi	r2,r2,20368
 2019430:	10c00017 	ldw	r3,0(r2)
 2019434:	e0bffb17 	ldw	r2,-20(fp)
 2019438:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201943c:	e0bffb17 	ldw	r2,-20(fp)
 2019440:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2019444:	00c080b4 	movhi	r3,514
 2019448:	18d3e404 	addi	r3,r3,20368
 201944c:	e0bffb17 	ldw	r2,-20(fp)
 2019450:	18800015 	stw	r2,0(r3)
 2019454:	e0bff717 	ldw	r2,-36(fp)
 2019458:	e0bff315 	stw	r2,-52(fp)
 201945c:	e0bff317 	ldw	r2,-52(fp)
 2019460:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2019464:	e0bffa03 	ldbu	r2,-24(fp)
 2019468:	10800058 	cmpnei	r2,r2,1
 201946c:	1000011e 	bne	r2,zero,2019474 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2019470:	20164a80 	call	20164a8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2019474:	e0bffd17 	ldw	r2,-12(fp)
 2019478:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 201947c:	e03ff915 	stw	zero,-28(fp)
             break;
 2019480:	00000906 	br	20194a8 <OSQDel+0x2e0>
 2019484:	e0bff717 	ldw	r2,-36(fp)
 2019488:	e0bff215 	stw	r2,-56(fp)
 201948c:	e0bff217 	ldw	r2,-56(fp)
 2019490:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2019494:	e0fffd17 	ldw	r3,-12(fp)
 2019498:	008001c4 	movi	r2,7
 201949c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 20194a0:	e0bffb17 	ldw	r2,-20(fp)
 20194a4:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 20194a8:	e0bff917 	ldw	r2,-28(fp)
 20194ac:	e0bfff15 	stw	r2,-4(fp)
 20194b0:	e0bfff17 	ldw	r2,-4(fp)
}
 20194b4:	e037883a 	mov	sp,fp
 20194b8:	dfc00117 	ldw	ra,4(sp)
 20194bc:	df000017 	ldw	fp,0(sp)
 20194c0:	dec00204 	addi	sp,sp,8
 20194c4:	f800283a 	ret

020194c8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 20194c8:	defff904 	addi	sp,sp,-28
 20194cc:	df000615 	stw	fp,24(sp)
 20194d0:	df000604 	addi	fp,sp,24
 20194d4:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20194d8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20194dc:	e0bffe17 	ldw	r2,-8(fp)
 20194e0:	1004c03a 	cmpne	r2,r2,zero
 20194e4:	1000031e 	bne	r2,zero,20194f4 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 20194e8:	00800104 	movi	r2,4
 20194ec:	e0bfff15 	stw	r2,-4(fp)
 20194f0:	00002206 	br	201957c <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 20194f4:	e0bffe17 	ldw	r2,-8(fp)
 20194f8:	10800003 	ldbu	r2,0(r2)
 20194fc:	10803fcc 	andi	r2,r2,255
 2019500:	108000a0 	cmpeqi	r2,r2,2
 2019504:	1000031e 	bne	r2,zero,2019514 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 2019508:	00800044 	movi	r2,1
 201950c:	e0bfff15 	stw	r2,-4(fp)
 2019510:	00001a06 	br	201957c <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019514:	0005303a 	rdctl	r2,status
 2019518:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201951c:	e0fffb17 	ldw	r3,-20(fp)
 2019520:	00bfff84 	movi	r2,-2
 2019524:	1884703a 	and	r2,r3,r2
 2019528:	1001703a 	wrctl	status,r2
  
  return context;
 201952c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2019530:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 2019534:	e0bffe17 	ldw	r2,-8(fp)
 2019538:	10800117 	ldw	r2,4(r2)
 201953c:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 2019540:	e0bffd17 	ldw	r2,-12(fp)
 2019544:	10c00117 	ldw	r3,4(r2)
 2019548:	e0bffd17 	ldw	r2,-12(fp)
 201954c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 2019550:	e0bffd17 	ldw	r2,-12(fp)
 2019554:	10c00117 	ldw	r3,4(r2)
 2019558:	e0bffd17 	ldw	r2,-12(fp)
 201955c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 2019560:	e0bffd17 	ldw	r2,-12(fp)
 2019564:	1000058d 	sth	zero,22(r2)
 2019568:	e0bffc17 	ldw	r2,-16(fp)
 201956c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019570:	e0bffa17 	ldw	r2,-24(fp)
 2019574:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2019578:	e03fff15 	stw	zero,-4(fp)
 201957c:	e0bfff17 	ldw	r2,-4(fp)
}
 2019580:	e037883a 	mov	sp,fp
 2019584:	df000017 	ldw	fp,0(sp)
 2019588:	dec00104 	addi	sp,sp,4
 201958c:	f800283a 	ret

02019590 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2019590:	defff104 	addi	sp,sp,-60
 2019594:	dfc00e15 	stw	ra,56(sp)
 2019598:	df000d15 	stw	fp,52(sp)
 201959c:	df000d04 	addi	fp,sp,52
 20195a0:	e13ffb15 	stw	r4,-20(fp)
 20195a4:	e1bffd15 	stw	r6,-12(fp)
 20195a8:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20195ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20195b0:	e0bffd17 	ldw	r2,-12(fp)
 20195b4:	1004c03a 	cmpne	r2,r2,zero
 20195b8:	1000021e 	bne	r2,zero,20195c4 <OSQPend+0x34>
        return ((void *)0);
 20195bc:	e03fff15 	stw	zero,-4(fp)
 20195c0:	0000b506 	br	2019898 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 20195c4:	e0bffb17 	ldw	r2,-20(fp)
 20195c8:	1004c03a 	cmpne	r2,r2,zero
 20195cc:	1000051e 	bne	r2,zero,20195e4 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 20195d0:	e0fffd17 	ldw	r3,-12(fp)
 20195d4:	00800104 	movi	r2,4
 20195d8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 20195dc:	e03fff15 	stw	zero,-4(fp)
 20195e0:	0000ad06 	br	2019898 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 20195e4:	e0bffb17 	ldw	r2,-20(fp)
 20195e8:	10800003 	ldbu	r2,0(r2)
 20195ec:	10803fcc 	andi	r2,r2,255
 20195f0:	108000a0 	cmpeqi	r2,r2,2
 20195f4:	1000051e 	bne	r2,zero,201960c <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 20195f8:	e0fffd17 	ldw	r3,-12(fp)
 20195fc:	00800044 	movi	r2,1
 2019600:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 2019604:	e03fff15 	stw	zero,-4(fp)
 2019608:	0000a306 	br	2019898 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 201960c:	008080b4 	movhi	r2,514
 2019610:	1093e504 	addi	r2,r2,20372
 2019614:	10800003 	ldbu	r2,0(r2)
 2019618:	10803fcc 	andi	r2,r2,255
 201961c:	1005003a 	cmpeq	r2,r2,zero
 2019620:	1000051e 	bne	r2,zero,2019638 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 2019624:	e0fffd17 	ldw	r3,-12(fp)
 2019628:	00800084 	movi	r2,2
 201962c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 2019630:	e03fff15 	stw	zero,-4(fp)
 2019634:	00009806 	br	2019898 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 2019638:	008080b4 	movhi	r2,514
 201963c:	1093d704 	addi	r2,r2,20316
 2019640:	10800003 	ldbu	r2,0(r2)
 2019644:	10803fcc 	andi	r2,r2,255
 2019648:	1005003a 	cmpeq	r2,r2,zero
 201964c:	1000051e 	bne	r2,zero,2019664 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 2019650:	e0fffd17 	ldw	r3,-12(fp)
 2019654:	00800344 	movi	r2,13
 2019658:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 201965c:	e03fff15 	stw	zero,-4(fp)
 2019660:	00008d06 	br	2019898 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019664:	0005303a 	rdctl	r2,status
 2019668:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201966c:	e0fff717 	ldw	r3,-36(fp)
 2019670:	00bfff84 	movi	r2,-2
 2019674:	1884703a 	and	r2,r3,r2
 2019678:	1001703a 	wrctl	status,r2
  
  return context;
 201967c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 2019680:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2019684:	e0bffb17 	ldw	r2,-20(fp)
 2019688:	10800117 	ldw	r2,4(r2)
 201968c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2019690:	e0bff917 	ldw	r2,-28(fp)
 2019694:	1080058b 	ldhu	r2,22(r2)
 2019698:	10bfffcc 	andi	r2,r2,65535
 201969c:	1005003a 	cmpeq	r2,r2,zero
 20196a0:	10001f1e 	bne	r2,zero,2019720 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 20196a4:	e0bff917 	ldw	r2,-28(fp)
 20196a8:	10c00417 	ldw	r3,16(r2)
 20196ac:	18800017 	ldw	r2,0(r3)
 20196b0:	e0bffa15 	stw	r2,-24(fp)
 20196b4:	18c00104 	addi	r3,r3,4
 20196b8:	e0bff917 	ldw	r2,-28(fp)
 20196bc:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 20196c0:	e0bff917 	ldw	r2,-28(fp)
 20196c4:	1080058b 	ldhu	r2,22(r2)
 20196c8:	10bfffc4 	addi	r2,r2,-1
 20196cc:	1007883a 	mov	r3,r2
 20196d0:	e0bff917 	ldw	r2,-28(fp)
 20196d4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 20196d8:	e0bff917 	ldw	r2,-28(fp)
 20196dc:	10c00417 	ldw	r3,16(r2)
 20196e0:	e0bff917 	ldw	r2,-28(fp)
 20196e4:	10800217 	ldw	r2,8(r2)
 20196e8:	1880041e 	bne	r3,r2,20196fc <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 20196ec:	e0bff917 	ldw	r2,-28(fp)
 20196f0:	10c00117 	ldw	r3,4(r2)
 20196f4:	e0bff917 	ldw	r2,-28(fp)
 20196f8:	10c00415 	stw	r3,16(r2)
 20196fc:	e0bff817 	ldw	r2,-32(fp)
 2019700:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019704:	e0bff617 	ldw	r2,-40(fp)
 2019708:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201970c:	e0bffd17 	ldw	r2,-12(fp)
 2019710:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 2019714:	e0bffa17 	ldw	r2,-24(fp)
 2019718:	e0bfff15 	stw	r2,-4(fp)
 201971c:	00005e06 	br	2019898 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 2019720:	008080b4 	movhi	r2,514
 2019724:	1093e604 	addi	r2,r2,20376
 2019728:	10c00017 	ldw	r3,0(r2)
 201972c:	008080b4 	movhi	r2,514
 2019730:	1093e604 	addi	r2,r2,20376
 2019734:	10800017 	ldw	r2,0(r2)
 2019738:	10800c03 	ldbu	r2,48(r2)
 201973c:	10800114 	ori	r2,r2,4
 2019740:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2019744:	008080b4 	movhi	r2,514
 2019748:	1093e604 	addi	r2,r2,20376
 201974c:	10800017 	ldw	r2,0(r2)
 2019750:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 2019754:	008080b4 	movhi	r2,514
 2019758:	1093e604 	addi	r2,r2,20376
 201975c:	10c00017 	ldw	r3,0(r2)
 2019760:	e0bffc0b 	ldhu	r2,-16(fp)
 2019764:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 2019768:	e13ffb17 	ldw	r4,-20(fp)
 201976c:	2015bfc0 	call	2015bfc <OS_EventTaskWait>
 2019770:	e0bff817 	ldw	r2,-32(fp)
 2019774:	e0bff515 	stw	r2,-44(fp)
 2019778:	e0bff517 	ldw	r2,-44(fp)
 201977c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 2019780:	20164a80 	call	20164a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019784:	0005303a 	rdctl	r2,status
 2019788:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201978c:	e0fff417 	ldw	r3,-48(fp)
 2019790:	00bfff84 	movi	r2,-2
 2019794:	1884703a 	and	r2,r3,r2
 2019798:	1001703a 	wrctl	status,r2
  
  return context;
 201979c:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 20197a0:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 20197a4:	008080b4 	movhi	r2,514
 20197a8:	1093e604 	addi	r2,r2,20376
 20197ac:	10800017 	ldw	r2,0(r2)
 20197b0:	10800c43 	ldbu	r2,49(r2)
 20197b4:	10803fcc 	andi	r2,r2,255
 20197b8:	e0bffe15 	stw	r2,-8(fp)
 20197bc:	e0fffe17 	ldw	r3,-8(fp)
 20197c0:	1805003a 	cmpeq	r2,r3,zero
 20197c4:	1000041e 	bne	r2,zero,20197d8 <OSQPend+0x248>
 20197c8:	e0fffe17 	ldw	r3,-8(fp)
 20197cc:	188000a0 	cmpeqi	r2,r3,2
 20197d0:	1000091e 	bne	r2,zero,20197f8 <OSQPend+0x268>
 20197d4:	00000d06 	br	201980c <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 20197d8:	008080b4 	movhi	r2,514
 20197dc:	1093e604 	addi	r2,r2,20376
 20197e0:	10800017 	ldw	r2,0(r2)
 20197e4:	10800917 	ldw	r2,36(r2)
 20197e8:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 20197ec:	e0bffd17 	ldw	r2,-12(fp)
 20197f0:	10000005 	stb	zero,0(r2)
             break;
 20197f4:	00000e06 	br	2019830 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 20197f8:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 20197fc:	e0fffd17 	ldw	r3,-12(fp)
 2019800:	00800384 	movi	r2,14
 2019804:	18800005 	stb	r2,0(r3)
             break;
 2019808:	00000906 	br	2019830 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 201980c:	008080b4 	movhi	r2,514
 2019810:	1093e604 	addi	r2,r2,20376
 2019814:	11000017 	ldw	r4,0(r2)
 2019818:	e17ffb17 	ldw	r5,-20(fp)
 201981c:	2015e600 	call	2015e60 <OS_EventTaskRemove>
             pmsg = (void *)0;
 2019820:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2019824:	e0fffd17 	ldw	r3,-12(fp)
 2019828:	00800284 	movi	r2,10
 201982c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2019830:	008080b4 	movhi	r2,514
 2019834:	1093e604 	addi	r2,r2,20376
 2019838:	10800017 	ldw	r2,0(r2)
 201983c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2019840:	008080b4 	movhi	r2,514
 2019844:	1093e604 	addi	r2,r2,20376
 2019848:	10800017 	ldw	r2,0(r2)
 201984c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2019850:	008080b4 	movhi	r2,514
 2019854:	1093e604 	addi	r2,r2,20376
 2019858:	10800017 	ldw	r2,0(r2)
 201985c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2019860:	008080b4 	movhi	r2,514
 2019864:	1093e604 	addi	r2,r2,20376
 2019868:	10800017 	ldw	r2,0(r2)
 201986c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2019870:	008080b4 	movhi	r2,514
 2019874:	1093e604 	addi	r2,r2,20376
 2019878:	10800017 	ldw	r2,0(r2)
 201987c:	10000915 	stw	zero,36(r2)
 2019880:	e0bff817 	ldw	r2,-32(fp)
 2019884:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019888:	e0bff317 	ldw	r2,-52(fp)
 201988c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2019890:	e0bffa17 	ldw	r2,-24(fp)
 2019894:	e0bfff15 	stw	r2,-4(fp)
 2019898:	e0bfff17 	ldw	r2,-4(fp)
}
 201989c:	e037883a 	mov	sp,fp
 20198a0:	dfc00117 	ldw	ra,4(sp)
 20198a4:	df000017 	ldw	fp,0(sp)
 20198a8:	dec00204 	addi	sp,sp,8
 20198ac:	f800283a 	ret

020198b0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20198b0:	defff504 	addi	sp,sp,-44
 20198b4:	dfc00a15 	stw	ra,40(sp)
 20198b8:	df000915 	stw	fp,36(sp)
 20198bc:	df000904 	addi	fp,sp,36
 20198c0:	e13ffc15 	stw	r4,-16(fp)
 20198c4:	e1bffe15 	stw	r6,-8(fp)
 20198c8:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20198cc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20198d0:	e0bffe17 	ldw	r2,-8(fp)
 20198d4:	1004c03a 	cmpne	r2,r2,zero
 20198d8:	1000021e 	bne	r2,zero,20198e4 <OSQPendAbort+0x34>
        return (0);
 20198dc:	e03fff15 	stw	zero,-4(fp)
 20198e0:	00004c06 	br	2019a14 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20198e4:	e0bffc17 	ldw	r2,-16(fp)
 20198e8:	1004c03a 	cmpne	r2,r2,zero
 20198ec:	1000051e 	bne	r2,zero,2019904 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 20198f0:	e0fffe17 	ldw	r3,-8(fp)
 20198f4:	00800104 	movi	r2,4
 20198f8:	18800005 	stb	r2,0(r3)
        return (0);
 20198fc:	e03fff15 	stw	zero,-4(fp)
 2019900:	00004406 	br	2019a14 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2019904:	e0bffc17 	ldw	r2,-16(fp)
 2019908:	10800003 	ldbu	r2,0(r2)
 201990c:	10803fcc 	andi	r2,r2,255
 2019910:	108000a0 	cmpeqi	r2,r2,2
 2019914:	1000051e 	bne	r2,zero,201992c <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2019918:	e0fffe17 	ldw	r3,-8(fp)
 201991c:	00800044 	movi	r2,1
 2019920:	18800005 	stb	r2,0(r3)
        return (0);
 2019924:	e03fff15 	stw	zero,-4(fp)
 2019928:	00003a06 	br	2019a14 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201992c:	0005303a 	rdctl	r2,status
 2019930:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019934:	e0fff917 	ldw	r3,-28(fp)
 2019938:	00bfff84 	movi	r2,-2
 201993c:	1884703a 	and	r2,r3,r2
 2019940:	1001703a 	wrctl	status,r2
  
  return context;
 2019944:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2019948:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 201994c:	e0bffc17 	ldw	r2,-16(fp)
 2019950:	10800283 	ldbu	r2,10(r2)
 2019954:	10803fcc 	andi	r2,r2,255
 2019958:	1005003a 	cmpeq	r2,r2,zero
 201995c:	1000261e 	bne	r2,zero,20199f8 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 2019960:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 2019964:	e0bffd03 	ldbu	r2,-12(fp)
 2019968:	10800060 	cmpeqi	r2,r2,1
 201996c:	1000091e 	bne	r2,zero,2019994 <OSQPendAbort+0xe4>
 2019970:	00000e06 	br	20199ac <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 2019974:	e13ffc17 	ldw	r4,-16(fp)
 2019978:	000b883a 	mov	r5,zero
 201997c:	01800104 	movi	r6,4
 2019980:	01c00084 	movi	r7,2
 2019984:	2015a680 	call	2015a68 <OS_EventTaskRdy>
                     nbr_tasks++;
 2019988:	e0bffb03 	ldbu	r2,-20(fp)
 201998c:	10800044 	addi	r2,r2,1
 2019990:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 2019994:	e0bffc17 	ldw	r2,-16(fp)
 2019998:	10800283 	ldbu	r2,10(r2)
 201999c:	10803fcc 	andi	r2,r2,255
 20199a0:	1004c03a 	cmpne	r2,r2,zero
 20199a4:	103ff31e 	bne	r2,zero,2019974 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 20199a8:	00000806 	br	20199cc <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 20199ac:	e13ffc17 	ldw	r4,-16(fp)
 20199b0:	000b883a 	mov	r5,zero
 20199b4:	01800104 	movi	r6,4
 20199b8:	01c00084 	movi	r7,2
 20199bc:	2015a680 	call	2015a68 <OS_EventTaskRdy>
                 nbr_tasks++;
 20199c0:	e0bffb03 	ldbu	r2,-20(fp)
 20199c4:	10800044 	addi	r2,r2,1
 20199c8:	e0bffb05 	stb	r2,-20(fp)
 20199cc:	e0bffa17 	ldw	r2,-24(fp)
 20199d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20199d4:	e0bff817 	ldw	r2,-32(fp)
 20199d8:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 20199dc:	20164a80 	call	20164a8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 20199e0:	e0fffe17 	ldw	r3,-8(fp)
 20199e4:	00800384 	movi	r2,14
 20199e8:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 20199ec:	e0bffb03 	ldbu	r2,-20(fp)
 20199f0:	e0bfff15 	stw	r2,-4(fp)
 20199f4:	00000706 	br	2019a14 <OSQPendAbort+0x164>
 20199f8:	e0bffa17 	ldw	r2,-24(fp)
 20199fc:	e0bff715 	stw	r2,-36(fp)
 2019a00:	e0bff717 	ldw	r2,-36(fp)
 2019a04:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2019a08:	e0bffe17 	ldw	r2,-8(fp)
 2019a0c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 2019a10:	e03fff15 	stw	zero,-4(fp)
 2019a14:	e0bfff17 	ldw	r2,-4(fp)
}
 2019a18:	e037883a 	mov	sp,fp
 2019a1c:	dfc00117 	ldw	ra,4(sp)
 2019a20:	df000017 	ldw	fp,0(sp)
 2019a24:	dec00204 	addi	sp,sp,8
 2019a28:	f800283a 	ret

02019a2c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 2019a2c:	defff504 	addi	sp,sp,-44
 2019a30:	dfc00a15 	stw	ra,40(sp)
 2019a34:	df000915 	stw	fp,36(sp)
 2019a38:	df000904 	addi	fp,sp,36
 2019a3c:	e13ffd15 	stw	r4,-12(fp)
 2019a40:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2019a44:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2019a48:	e0bffd17 	ldw	r2,-12(fp)
 2019a4c:	1004c03a 	cmpne	r2,r2,zero
 2019a50:	1000031e 	bne	r2,zero,2019a60 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 2019a54:	00800104 	movi	r2,4
 2019a58:	e0bfff15 	stw	r2,-4(fp)
 2019a5c:	00004d06 	br	2019b94 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2019a60:	e0bffd17 	ldw	r2,-12(fp)
 2019a64:	10800003 	ldbu	r2,0(r2)
 2019a68:	10803fcc 	andi	r2,r2,255
 2019a6c:	108000a0 	cmpeqi	r2,r2,2
 2019a70:	1000031e 	bne	r2,zero,2019a80 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 2019a74:	00800044 	movi	r2,1
 2019a78:	e0bfff15 	stw	r2,-4(fp)
 2019a7c:	00004506 	br	2019b94 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019a80:	0005303a 	rdctl	r2,status
 2019a84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019a88:	e0fffa17 	ldw	r3,-24(fp)
 2019a8c:	00bfff84 	movi	r2,-2
 2019a90:	1884703a 	and	r2,r3,r2
 2019a94:	1001703a 	wrctl	status,r2
  
  return context;
 2019a98:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2019a9c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 2019aa0:	e0bffd17 	ldw	r2,-12(fp)
 2019aa4:	10800283 	ldbu	r2,10(r2)
 2019aa8:	10803fcc 	andi	r2,r2,255
 2019aac:	1005003a 	cmpeq	r2,r2,zero
 2019ab0:	10000c1e 	bne	r2,zero,2019ae4 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2019ab4:	e13ffd17 	ldw	r4,-12(fp)
 2019ab8:	e17ffe17 	ldw	r5,-8(fp)
 2019abc:	01800104 	movi	r6,4
 2019ac0:	000f883a 	mov	r7,zero
 2019ac4:	2015a680 	call	2015a68 <OS_EventTaskRdy>
 2019ac8:	e0bffb17 	ldw	r2,-20(fp)
 2019acc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019ad0:	e0bff917 	ldw	r2,-28(fp)
 2019ad4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 2019ad8:	20164a80 	call	20164a8 <OS_Sched>
        return (OS_ERR_NONE);
 2019adc:	e03fff15 	stw	zero,-4(fp)
 2019ae0:	00002c06 	br	2019b94 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 2019ae4:	e0bffd17 	ldw	r2,-12(fp)
 2019ae8:	10800117 	ldw	r2,4(r2)
 2019aec:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 2019af0:	e0bffc17 	ldw	r2,-16(fp)
 2019af4:	10c0058b 	ldhu	r3,22(r2)
 2019af8:	e0bffc17 	ldw	r2,-16(fp)
 2019afc:	1080050b 	ldhu	r2,20(r2)
 2019b00:	18ffffcc 	andi	r3,r3,65535
 2019b04:	10bfffcc 	andi	r2,r2,65535
 2019b08:	18800736 	bltu	r3,r2,2019b28 <OSQPost+0xfc>
 2019b0c:	e0bffb17 	ldw	r2,-20(fp)
 2019b10:	e0bff815 	stw	r2,-32(fp)
 2019b14:	e0bff817 	ldw	r2,-32(fp)
 2019b18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2019b1c:	00800784 	movi	r2,30
 2019b20:	e0bfff15 	stw	r2,-4(fp)
 2019b24:	00001b06 	br	2019b94 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 2019b28:	e0bffc17 	ldw	r2,-16(fp)
 2019b2c:	10c00317 	ldw	r3,12(r2)
 2019b30:	e0bffe17 	ldw	r2,-8(fp)
 2019b34:	18800015 	stw	r2,0(r3)
 2019b38:	18c00104 	addi	r3,r3,4
 2019b3c:	e0bffc17 	ldw	r2,-16(fp)
 2019b40:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 2019b44:	e0bffc17 	ldw	r2,-16(fp)
 2019b48:	1080058b 	ldhu	r2,22(r2)
 2019b4c:	10800044 	addi	r2,r2,1
 2019b50:	1007883a 	mov	r3,r2
 2019b54:	e0bffc17 	ldw	r2,-16(fp)
 2019b58:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 2019b5c:	e0bffc17 	ldw	r2,-16(fp)
 2019b60:	10c00317 	ldw	r3,12(r2)
 2019b64:	e0bffc17 	ldw	r2,-16(fp)
 2019b68:	10800217 	ldw	r2,8(r2)
 2019b6c:	1880041e 	bne	r3,r2,2019b80 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 2019b70:	e0bffc17 	ldw	r2,-16(fp)
 2019b74:	10c00117 	ldw	r3,4(r2)
 2019b78:	e0bffc17 	ldw	r2,-16(fp)
 2019b7c:	10c00315 	stw	r3,12(r2)
 2019b80:	e0bffb17 	ldw	r2,-20(fp)
 2019b84:	e0bff715 	stw	r2,-36(fp)
 2019b88:	e0bff717 	ldw	r2,-36(fp)
 2019b8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2019b90:	e03fff15 	stw	zero,-4(fp)
 2019b94:	e0bfff17 	ldw	r2,-4(fp)
}
 2019b98:	e037883a 	mov	sp,fp
 2019b9c:	dfc00117 	ldw	ra,4(sp)
 2019ba0:	df000017 	ldw	fp,0(sp)
 2019ba4:	dec00204 	addi	sp,sp,8
 2019ba8:	f800283a 	ret

02019bac <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 2019bac:	defff504 	addi	sp,sp,-44
 2019bb0:	dfc00a15 	stw	ra,40(sp)
 2019bb4:	df000915 	stw	fp,36(sp)
 2019bb8:	df000904 	addi	fp,sp,36
 2019bbc:	e13ffd15 	stw	r4,-12(fp)
 2019bc0:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2019bc4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019bc8:	e0bffd17 	ldw	r2,-12(fp)
 2019bcc:	1004c03a 	cmpne	r2,r2,zero
 2019bd0:	1000031e 	bne	r2,zero,2019be0 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 2019bd4:	00800104 	movi	r2,4
 2019bd8:	e0bfff15 	stw	r2,-4(fp)
 2019bdc:	00004f06 	br	2019d1c <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2019be0:	e0bffd17 	ldw	r2,-12(fp)
 2019be4:	10800003 	ldbu	r2,0(r2)
 2019be8:	10803fcc 	andi	r2,r2,255
 2019bec:	108000a0 	cmpeqi	r2,r2,2
 2019bf0:	1000031e 	bne	r2,zero,2019c00 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 2019bf4:	00800044 	movi	r2,1
 2019bf8:	e0bfff15 	stw	r2,-4(fp)
 2019bfc:	00004706 	br	2019d1c <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019c00:	0005303a 	rdctl	r2,status
 2019c04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019c08:	e0fffa17 	ldw	r3,-24(fp)
 2019c0c:	00bfff84 	movi	r2,-2
 2019c10:	1884703a 	and	r2,r3,r2
 2019c14:	1001703a 	wrctl	status,r2
  
  return context;
 2019c18:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2019c1c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 2019c20:	e0bffd17 	ldw	r2,-12(fp)
 2019c24:	10800283 	ldbu	r2,10(r2)
 2019c28:	10803fcc 	andi	r2,r2,255
 2019c2c:	1005003a 	cmpeq	r2,r2,zero
 2019c30:	10000c1e 	bne	r2,zero,2019c64 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2019c34:	e13ffd17 	ldw	r4,-12(fp)
 2019c38:	e17ffe17 	ldw	r5,-8(fp)
 2019c3c:	01800104 	movi	r6,4
 2019c40:	000f883a 	mov	r7,zero
 2019c44:	2015a680 	call	2015a68 <OS_EventTaskRdy>
 2019c48:	e0bffb17 	ldw	r2,-20(fp)
 2019c4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019c50:	e0bff917 	ldw	r2,-28(fp)
 2019c54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2019c58:	20164a80 	call	20164a8 <OS_Sched>
        return (OS_ERR_NONE);
 2019c5c:	e03fff15 	stw	zero,-4(fp)
 2019c60:	00002e06 	br	2019d1c <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 2019c64:	e0bffd17 	ldw	r2,-12(fp)
 2019c68:	10800117 	ldw	r2,4(r2)
 2019c6c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2019c70:	e0bffc17 	ldw	r2,-16(fp)
 2019c74:	10c0058b 	ldhu	r3,22(r2)
 2019c78:	e0bffc17 	ldw	r2,-16(fp)
 2019c7c:	1080050b 	ldhu	r2,20(r2)
 2019c80:	18ffffcc 	andi	r3,r3,65535
 2019c84:	10bfffcc 	andi	r2,r2,65535
 2019c88:	18800736 	bltu	r3,r2,2019ca8 <OSQPostFront+0xfc>
 2019c8c:	e0bffb17 	ldw	r2,-20(fp)
 2019c90:	e0bff815 	stw	r2,-32(fp)
 2019c94:	e0bff817 	ldw	r2,-32(fp)
 2019c98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2019c9c:	00800784 	movi	r2,30
 2019ca0:	e0bfff15 	stw	r2,-4(fp)
 2019ca4:	00001d06 	br	2019d1c <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 2019ca8:	e0bffc17 	ldw	r2,-16(fp)
 2019cac:	10c00417 	ldw	r3,16(r2)
 2019cb0:	e0bffc17 	ldw	r2,-16(fp)
 2019cb4:	10800117 	ldw	r2,4(r2)
 2019cb8:	1880041e 	bne	r3,r2,2019ccc <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 2019cbc:	e0bffc17 	ldw	r2,-16(fp)
 2019cc0:	10c00217 	ldw	r3,8(r2)
 2019cc4:	e0bffc17 	ldw	r2,-16(fp)
 2019cc8:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 2019ccc:	e0bffc17 	ldw	r2,-16(fp)
 2019cd0:	10800417 	ldw	r2,16(r2)
 2019cd4:	10ffff04 	addi	r3,r2,-4
 2019cd8:	e0bffc17 	ldw	r2,-16(fp)
 2019cdc:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 2019ce0:	e0bffc17 	ldw	r2,-16(fp)
 2019ce4:	10c00417 	ldw	r3,16(r2)
 2019ce8:	e0bffe17 	ldw	r2,-8(fp)
 2019cec:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2019cf0:	e0bffc17 	ldw	r2,-16(fp)
 2019cf4:	1080058b 	ldhu	r2,22(r2)
 2019cf8:	10800044 	addi	r2,r2,1
 2019cfc:	1007883a 	mov	r3,r2
 2019d00:	e0bffc17 	ldw	r2,-16(fp)
 2019d04:	10c0058d 	sth	r3,22(r2)
 2019d08:	e0bffb17 	ldw	r2,-20(fp)
 2019d0c:	e0bff715 	stw	r2,-36(fp)
 2019d10:	e0bff717 	ldw	r2,-36(fp)
 2019d14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2019d18:	e03fff15 	stw	zero,-4(fp)
 2019d1c:	e0bfff17 	ldw	r2,-4(fp)
}
 2019d20:	e037883a 	mov	sp,fp
 2019d24:	dfc00117 	ldw	ra,4(sp)
 2019d28:	df000017 	ldw	fp,0(sp)
 2019d2c:	dec00204 	addi	sp,sp,8
 2019d30:	f800283a 	ret

02019d34 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2019d34:	defff404 	addi	sp,sp,-48
 2019d38:	dfc00b15 	stw	ra,44(sp)
 2019d3c:	df000a15 	stw	fp,40(sp)
 2019d40:	df000a04 	addi	fp,sp,40
 2019d44:	e13ffc15 	stw	r4,-16(fp)
 2019d48:	e17ffd15 	stw	r5,-12(fp)
 2019d4c:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2019d50:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2019d54:	e0bffc17 	ldw	r2,-16(fp)
 2019d58:	1004c03a 	cmpne	r2,r2,zero
 2019d5c:	1000031e 	bne	r2,zero,2019d6c <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 2019d60:	00800104 	movi	r2,4
 2019d64:	e0bfff15 	stw	r2,-4(fp)
 2019d68:	00007906 	br	2019f50 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2019d6c:	e0bffc17 	ldw	r2,-16(fp)
 2019d70:	10800003 	ldbu	r2,0(r2)
 2019d74:	10803fcc 	andi	r2,r2,255
 2019d78:	108000a0 	cmpeqi	r2,r2,2
 2019d7c:	1000031e 	bne	r2,zero,2019d8c <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 2019d80:	00800044 	movi	r2,1
 2019d84:	e0bfff15 	stw	r2,-4(fp)
 2019d88:	00007106 	br	2019f50 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019d8c:	0005303a 	rdctl	r2,status
 2019d90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019d94:	e0fff917 	ldw	r3,-28(fp)
 2019d98:	00bfff84 	movi	r2,-2
 2019d9c:	1884703a 	and	r2,r3,r2
 2019da0:	1001703a 	wrctl	status,r2
  
  return context;
 2019da4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2019da8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 2019dac:	e0bffc17 	ldw	r2,-16(fp)
 2019db0:	10800283 	ldbu	r2,10(r2)
 2019db4:	10803fcc 	andi	r2,r2,255
 2019db8:	1005003a 	cmpeq	r2,r2,zero
 2019dbc:	1000211e 	bne	r2,zero,2019e44 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 2019dc0:	e0bffe03 	ldbu	r2,-8(fp)
 2019dc4:	1080004c 	andi	r2,r2,1
 2019dc8:	10803fcc 	andi	r2,r2,255
 2019dcc:	1005003a 	cmpeq	r2,r2,zero
 2019dd0:	10000c1e 	bne	r2,zero,2019e04 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2019dd4:	00000506 	br	2019dec <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2019dd8:	e13ffc17 	ldw	r4,-16(fp)
 2019ddc:	e17ffd17 	ldw	r5,-12(fp)
 2019de0:	01800104 	movi	r6,4
 2019de4:	000f883a 	mov	r7,zero
 2019de8:	2015a680 	call	2015a68 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2019dec:	e0bffc17 	ldw	r2,-16(fp)
 2019df0:	10800283 	ldbu	r2,10(r2)
 2019df4:	10803fcc 	andi	r2,r2,255
 2019df8:	1004c03a 	cmpne	r2,r2,zero
 2019dfc:	103ff61e 	bne	r2,zero,2019dd8 <OSQPostOpt+0xa4>
 2019e00:	00000506 	br	2019e18 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2019e04:	e13ffc17 	ldw	r4,-16(fp)
 2019e08:	e17ffd17 	ldw	r5,-12(fp)
 2019e0c:	01800104 	movi	r6,4
 2019e10:	000f883a 	mov	r7,zero
 2019e14:	2015a680 	call	2015a68 <OS_EventTaskRdy>
 2019e18:	e0bffa17 	ldw	r2,-24(fp)
 2019e1c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2019e20:	e0bff817 	ldw	r2,-32(fp)
 2019e24:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2019e28:	e0bffe03 	ldbu	r2,-8(fp)
 2019e2c:	1080010c 	andi	r2,r2,4
 2019e30:	1004c03a 	cmpne	r2,r2,zero
 2019e34:	1000011e 	bne	r2,zero,2019e3c <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 2019e38:	20164a80 	call	20164a8 <OS_Sched>
        }
        return (OS_ERR_NONE);
 2019e3c:	e03fff15 	stw	zero,-4(fp)
 2019e40:	00004306 	br	2019f50 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 2019e44:	e0bffc17 	ldw	r2,-16(fp)
 2019e48:	10800117 	ldw	r2,4(r2)
 2019e4c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2019e50:	e0bffb17 	ldw	r2,-20(fp)
 2019e54:	10c0058b 	ldhu	r3,22(r2)
 2019e58:	e0bffb17 	ldw	r2,-20(fp)
 2019e5c:	1080050b 	ldhu	r2,20(r2)
 2019e60:	18ffffcc 	andi	r3,r3,65535
 2019e64:	10bfffcc 	andi	r2,r2,65535
 2019e68:	18800736 	bltu	r3,r2,2019e88 <OSQPostOpt+0x154>
 2019e6c:	e0bffa17 	ldw	r2,-24(fp)
 2019e70:	e0bff715 	stw	r2,-36(fp)
 2019e74:	e0bff717 	ldw	r2,-36(fp)
 2019e78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2019e7c:	00800784 	movi	r2,30
 2019e80:	e0bfff15 	stw	r2,-4(fp)
 2019e84:	00003206 	br	2019f50 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 2019e88:	e0bffe03 	ldbu	r2,-8(fp)
 2019e8c:	1080008c 	andi	r2,r2,2
 2019e90:	1005003a 	cmpeq	r2,r2,zero
 2019e94:	1000131e 	bne	r2,zero,2019ee4 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 2019e98:	e0bffb17 	ldw	r2,-20(fp)
 2019e9c:	10c00417 	ldw	r3,16(r2)
 2019ea0:	e0bffb17 	ldw	r2,-20(fp)
 2019ea4:	10800117 	ldw	r2,4(r2)
 2019ea8:	1880041e 	bne	r3,r2,2019ebc <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 2019eac:	e0bffb17 	ldw	r2,-20(fp)
 2019eb0:	10c00217 	ldw	r3,8(r2)
 2019eb4:	e0bffb17 	ldw	r2,-20(fp)
 2019eb8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 2019ebc:	e0bffb17 	ldw	r2,-20(fp)
 2019ec0:	10800417 	ldw	r2,16(r2)
 2019ec4:	10ffff04 	addi	r3,r2,-4
 2019ec8:	e0bffb17 	ldw	r2,-20(fp)
 2019ecc:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 2019ed0:	e0bffb17 	ldw	r2,-20(fp)
 2019ed4:	10c00417 	ldw	r3,16(r2)
 2019ed8:	e0bffd17 	ldw	r2,-12(fp)
 2019edc:	18800015 	stw	r2,0(r3)
 2019ee0:	00001006 	br	2019f24 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 2019ee4:	e0bffb17 	ldw	r2,-20(fp)
 2019ee8:	10c00317 	ldw	r3,12(r2)
 2019eec:	e0bffd17 	ldw	r2,-12(fp)
 2019ef0:	18800015 	stw	r2,0(r3)
 2019ef4:	18c00104 	addi	r3,r3,4
 2019ef8:	e0bffb17 	ldw	r2,-20(fp)
 2019efc:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 2019f00:	e0bffb17 	ldw	r2,-20(fp)
 2019f04:	10c00317 	ldw	r3,12(r2)
 2019f08:	e0bffb17 	ldw	r2,-20(fp)
 2019f0c:	10800217 	ldw	r2,8(r2)
 2019f10:	1880041e 	bne	r3,r2,2019f24 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 2019f14:	e0bffb17 	ldw	r2,-20(fp)
 2019f18:	10c00117 	ldw	r3,4(r2)
 2019f1c:	e0bffb17 	ldw	r2,-20(fp)
 2019f20:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2019f24:	e0bffb17 	ldw	r2,-20(fp)
 2019f28:	1080058b 	ldhu	r2,22(r2)
 2019f2c:	10800044 	addi	r2,r2,1
 2019f30:	1007883a 	mov	r3,r2
 2019f34:	e0bffb17 	ldw	r2,-20(fp)
 2019f38:	10c0058d 	sth	r3,22(r2)
 2019f3c:	e0bffa17 	ldw	r2,-24(fp)
 2019f40:	e0bff615 	stw	r2,-40(fp)
 2019f44:	e0bff617 	ldw	r2,-40(fp)
 2019f48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2019f4c:	e03fff15 	stw	zero,-4(fp)
 2019f50:	e0bfff17 	ldw	r2,-4(fp)
}
 2019f54:	e037883a 	mov	sp,fp
 2019f58:	dfc00117 	ldw	ra,4(sp)
 2019f5c:	df000017 	ldw	fp,0(sp)
 2019f60:	dec00204 	addi	sp,sp,8
 2019f64:	f800283a 	ret

02019f68 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 2019f68:	defff504 	addi	sp,sp,-44
 2019f6c:	df000a15 	stw	fp,40(sp)
 2019f70:	df000a04 	addi	fp,sp,40
 2019f74:	e13ffd15 	stw	r4,-12(fp)
 2019f78:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2019f7c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2019f80:	e0bffd17 	ldw	r2,-12(fp)
 2019f84:	1004c03a 	cmpne	r2,r2,zero
 2019f88:	1000031e 	bne	r2,zero,2019f98 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 2019f8c:	00800104 	movi	r2,4
 2019f90:	e0bfff15 	stw	r2,-4(fp)
 2019f94:	00004f06 	br	201a0d4 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 2019f98:	e0bffe17 	ldw	r2,-8(fp)
 2019f9c:	1004c03a 	cmpne	r2,r2,zero
 2019fa0:	1000031e 	bne	r2,zero,2019fb0 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 2019fa4:	00800244 	movi	r2,9
 2019fa8:	e0bfff15 	stw	r2,-4(fp)
 2019fac:	00004906 	br	201a0d4 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2019fb0:	e0bffd17 	ldw	r2,-12(fp)
 2019fb4:	10800003 	ldbu	r2,0(r2)
 2019fb8:	10803fcc 	andi	r2,r2,255
 2019fbc:	108000a0 	cmpeqi	r2,r2,2
 2019fc0:	1000031e 	bne	r2,zero,2019fd0 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 2019fc4:	00800044 	movi	r2,1
 2019fc8:	e0bfff15 	stw	r2,-4(fp)
 2019fcc:	00004106 	br	201a0d4 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019fd0:	0005303a 	rdctl	r2,status
 2019fd4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019fd8:	e0fff717 	ldw	r3,-36(fp)
 2019fdc:	00bfff84 	movi	r2,-2
 2019fe0:	1884703a 	and	r2,r3,r2
 2019fe4:	1001703a 	wrctl	status,r2
  
  return context;
 2019fe8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 2019fec:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 2019ff0:	e0bffd17 	ldw	r2,-12(fp)
 2019ff4:	10c00283 	ldbu	r3,10(r2)
 2019ff8:	e0bffe17 	ldw	r2,-8(fp)
 2019ffc:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 201a000:	e0bffd17 	ldw	r2,-12(fp)
 201a004:	108002c4 	addi	r2,r2,11
 201a008:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 201a00c:	e0bffe17 	ldw	r2,-8(fp)
 201a010:	10800204 	addi	r2,r2,8
 201a014:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201a018:	e03ffb05 	stb	zero,-20(fp)
 201a01c:	00000d06 	br	201a054 <OSQQuery+0xec>
        *pdest++ = *psrc++;
 201a020:	e0bffa17 	ldw	r2,-24(fp)
 201a024:	10c00003 	ldbu	r3,0(r2)
 201a028:	e0bff917 	ldw	r2,-28(fp)
 201a02c:	10c00005 	stb	r3,0(r2)
 201a030:	e0bff917 	ldw	r2,-28(fp)
 201a034:	10800044 	addi	r2,r2,1
 201a038:	e0bff915 	stw	r2,-28(fp)
 201a03c:	e0bffa17 	ldw	r2,-24(fp)
 201a040:	10800044 	addi	r2,r2,1
 201a044:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201a048:	e0bffb03 	ldbu	r2,-20(fp)
 201a04c:	10800044 	addi	r2,r2,1
 201a050:	e0bffb05 	stb	r2,-20(fp)
 201a054:	e0bffb03 	ldbu	r2,-20(fp)
 201a058:	108000f0 	cmpltui	r2,r2,3
 201a05c:	103ff01e 	bne	r2,zero,201a020 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 201a060:	e0bffd17 	ldw	r2,-12(fp)
 201a064:	10800117 	ldw	r2,4(r2)
 201a068:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 201a06c:	e0bffc17 	ldw	r2,-16(fp)
 201a070:	1080058b 	ldhu	r2,22(r2)
 201a074:	10bfffcc 	andi	r2,r2,65535
 201a078:	1005003a 	cmpeq	r2,r2,zero
 201a07c:	1000061e 	bne	r2,zero,201a098 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 201a080:	e0bffc17 	ldw	r2,-16(fp)
 201a084:	10800417 	ldw	r2,16(r2)
 201a088:	10c00017 	ldw	r3,0(r2)
 201a08c:	e0bffe17 	ldw	r2,-8(fp)
 201a090:	10c00015 	stw	r3,0(r2)
 201a094:	00000206 	br	201a0a0 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 201a098:	e0bffe17 	ldw	r2,-8(fp)
 201a09c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 201a0a0:	e0bffc17 	ldw	r2,-16(fp)
 201a0a4:	10c0058b 	ldhu	r3,22(r2)
 201a0a8:	e0bffe17 	ldw	r2,-8(fp)
 201a0ac:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 201a0b0:	e0bffc17 	ldw	r2,-16(fp)
 201a0b4:	10c0050b 	ldhu	r3,20(r2)
 201a0b8:	e0bffe17 	ldw	r2,-8(fp)
 201a0bc:	10c0018d 	sth	r3,6(r2)
 201a0c0:	e0bff817 	ldw	r2,-32(fp)
 201a0c4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a0c8:	e0bff617 	ldw	r2,-40(fp)
 201a0cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201a0d0:	e03fff15 	stw	zero,-4(fp)
 201a0d4:	e0bfff17 	ldw	r2,-4(fp)
}
 201a0d8:	e037883a 	mov	sp,fp
 201a0dc:	df000017 	ldw	fp,0(sp)
 201a0e0:	dec00104 	addi	sp,sp,4
 201a0e4:	f800283a 	ret

0201a0e8 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 201a0e8:	defffb04 	addi	sp,sp,-20
 201a0ec:	dfc00415 	stw	ra,16(sp)
 201a0f0:	df000315 	stw	fp,12(sp)
 201a0f4:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 201a0f8:	010080b4 	movhi	r4,514
 201a0fc:	211a2904 	addi	r4,r4,26788
 201a100:	01407804 	movi	r5,480
 201a104:	20163e80 	call	20163e8 <OS_MemClr>
    pq1 = &OSQTbl[0];
 201a108:	008080b4 	movhi	r2,514
 201a10c:	109a2904 	addi	r2,r2,26788
 201a110:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 201a114:	008080b4 	movhi	r2,514
 201a118:	109a2f04 	addi	r2,r2,26812
 201a11c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 201a120:	e03fff0d 	sth	zero,-4(fp)
 201a124:	00000c06 	br	201a158 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 201a128:	e0fffe17 	ldw	r3,-8(fp)
 201a12c:	e0bffd17 	ldw	r2,-12(fp)
 201a130:	18800015 	stw	r2,0(r3)
        pq1++;
 201a134:	e0bffe17 	ldw	r2,-8(fp)
 201a138:	10800604 	addi	r2,r2,24
 201a13c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 201a140:	e0bffd17 	ldw	r2,-12(fp)
 201a144:	10800604 	addi	r2,r2,24
 201a148:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 201a14c:	e0bfff0b 	ldhu	r2,-4(fp)
 201a150:	10800044 	addi	r2,r2,1
 201a154:	e0bfff0d 	sth	r2,-4(fp)
 201a158:	e0bfff0b 	ldhu	r2,-4(fp)
 201a15c:	108004f0 	cmpltui	r2,r2,19
 201a160:	103ff11e 	bne	r2,zero,201a128 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 201a164:	e0bffe17 	ldw	r2,-8(fp)
 201a168:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 201a16c:	00c080b4 	movhi	r3,514
 201a170:	18d3e204 	addi	r3,r3,20360
 201a174:	008080b4 	movhi	r2,514
 201a178:	109a2904 	addi	r2,r2,26788
 201a17c:	18800015 	stw	r2,0(r3)
#endif
}
 201a180:	e037883a 	mov	sp,fp
 201a184:	dfc00117 	ldw	ra,4(sp)
 201a188:	df000017 	ldw	fp,0(sp)
 201a18c:	dec00204 	addi	sp,sp,8
 201a190:	f800283a 	ret

0201a194 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 201a194:	defff904 	addi	sp,sp,-28
 201a198:	df000615 	stw	fp,24(sp)
 201a19c:	df000604 	addi	fp,sp,24
 201a1a0:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201a1a4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201a1a8:	e0bffe17 	ldw	r2,-8(fp)
 201a1ac:	1004c03a 	cmpne	r2,r2,zero
 201a1b0:	1000021e 	bne	r2,zero,201a1bc <OSSemAccept+0x28>
        return (0);
 201a1b4:	e03fff15 	stw	zero,-4(fp)
 201a1b8:	00002106 	br	201a240 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201a1bc:	e0bffe17 	ldw	r2,-8(fp)
 201a1c0:	10800003 	ldbu	r2,0(r2)
 201a1c4:	10803fcc 	andi	r2,r2,255
 201a1c8:	108000e0 	cmpeqi	r2,r2,3
 201a1cc:	1000021e 	bne	r2,zero,201a1d8 <OSSemAccept+0x44>
        return (0);
 201a1d0:	e03fff15 	stw	zero,-4(fp)
 201a1d4:	00001a06 	br	201a240 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a1d8:	0005303a 	rdctl	r2,status
 201a1dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a1e0:	e0fffb17 	ldw	r3,-20(fp)
 201a1e4:	00bfff84 	movi	r2,-2
 201a1e8:	1884703a 	and	r2,r3,r2
 201a1ec:	1001703a 	wrctl	status,r2
  
  return context;
 201a1f0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 201a1f4:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 201a1f8:	e0bffe17 	ldw	r2,-8(fp)
 201a1fc:	1080020b 	ldhu	r2,8(r2)
 201a200:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 201a204:	e0bffd0b 	ldhu	r2,-12(fp)
 201a208:	1005003a 	cmpeq	r2,r2,zero
 201a20c:	1000061e 	bne	r2,zero,201a228 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 201a210:	e0bffe17 	ldw	r2,-8(fp)
 201a214:	1080020b 	ldhu	r2,8(r2)
 201a218:	10bfffc4 	addi	r2,r2,-1
 201a21c:	1007883a 	mov	r3,r2
 201a220:	e0bffe17 	ldw	r2,-8(fp)
 201a224:	10c0020d 	sth	r3,8(r2)
 201a228:	e0bffc17 	ldw	r2,-16(fp)
 201a22c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a230:	e0bffa17 	ldw	r2,-24(fp)
 201a234:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 201a238:	e0bffd0b 	ldhu	r2,-12(fp)
 201a23c:	e0bfff15 	stw	r2,-4(fp)
 201a240:	e0bfff17 	ldw	r2,-4(fp)
}
 201a244:	e037883a 	mov	sp,fp
 201a248:	df000017 	ldw	fp,0(sp)
 201a24c:	dec00104 	addi	sp,sp,4
 201a250:	f800283a 	ret

0201a254 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 201a254:	defff804 	addi	sp,sp,-32
 201a258:	dfc00715 	stw	ra,28(sp)
 201a25c:	df000615 	stw	fp,24(sp)
 201a260:	df000604 	addi	fp,sp,24
 201a264:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201a268:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201a26c:	008080b4 	movhi	r2,514
 201a270:	1093e504 	addi	r2,r2,20372
 201a274:	10800003 	ldbu	r2,0(r2)
 201a278:	10803fcc 	andi	r2,r2,255
 201a27c:	1005003a 	cmpeq	r2,r2,zero
 201a280:	1000021e 	bne	r2,zero,201a28c <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 201a284:	e03fff15 	stw	zero,-4(fp)
 201a288:	00003106 	br	201a350 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a28c:	0005303a 	rdctl	r2,status
 201a290:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a294:	e0fffb17 	ldw	r3,-20(fp)
 201a298:	00bfff84 	movi	r2,-2
 201a29c:	1884703a 	and	r2,r3,r2
 201a2a0:	1001703a 	wrctl	status,r2
  
  return context;
 201a2a4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 201a2a8:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 201a2ac:	008080b4 	movhi	r2,514
 201a2b0:	1093e404 	addi	r2,r2,20368
 201a2b4:	10800017 	ldw	r2,0(r2)
 201a2b8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 201a2bc:	008080b4 	movhi	r2,514
 201a2c0:	1093e404 	addi	r2,r2,20368
 201a2c4:	10800017 	ldw	r2,0(r2)
 201a2c8:	1005003a 	cmpeq	r2,r2,zero
 201a2cc:	1000081e 	bne	r2,zero,201a2f0 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201a2d0:	008080b4 	movhi	r2,514
 201a2d4:	1093e404 	addi	r2,r2,20368
 201a2d8:	10800017 	ldw	r2,0(r2)
 201a2dc:	10800117 	ldw	r2,4(r2)
 201a2e0:	1007883a 	mov	r3,r2
 201a2e4:	008080b4 	movhi	r2,514
 201a2e8:	1093e404 	addi	r2,r2,20368
 201a2ec:	10c00015 	stw	r3,0(r2)
 201a2f0:	e0bffc17 	ldw	r2,-16(fp)
 201a2f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a2f8:	e0bffa17 	ldw	r2,-24(fp)
 201a2fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 201a300:	e0bffd17 	ldw	r2,-12(fp)
 201a304:	1005003a 	cmpeq	r2,r2,zero
 201a308:	10000f1e 	bne	r2,zero,201a348 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 201a30c:	e0fffd17 	ldw	r3,-12(fp)
 201a310:	008000c4 	movi	r2,3
 201a314:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 201a318:	e0fffd17 	ldw	r3,-12(fp)
 201a31c:	e0bffe0b 	ldhu	r2,-8(fp)
 201a320:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 201a324:	e0bffd17 	ldw	r2,-12(fp)
 201a328:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 201a32c:	e0fffd17 	ldw	r3,-12(fp)
 201a330:	00800fc4 	movi	r2,63
 201a334:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 201a338:	e0bffd17 	ldw	r2,-12(fp)
 201a33c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 201a340:	e13ffd17 	ldw	r4,-12(fp)
 201a344:	201601c0 	call	201601c <OS_EventWaitListInit>
    }
    return (pevent);
 201a348:	e0bffd17 	ldw	r2,-12(fp)
 201a34c:	e0bfff15 	stw	r2,-4(fp)
 201a350:	e0bfff17 	ldw	r2,-4(fp)
}
 201a354:	e037883a 	mov	sp,fp
 201a358:	dfc00117 	ldw	ra,4(sp)
 201a35c:	df000017 	ldw	fp,0(sp)
 201a360:	dec00204 	addi	sp,sp,8
 201a364:	f800283a 	ret

0201a368 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201a368:	defff104 	addi	sp,sp,-60
 201a36c:	dfc00e15 	stw	ra,56(sp)
 201a370:	df000d15 	stw	fp,52(sp)
 201a374:	df000d04 	addi	fp,sp,52
 201a378:	e13ffb15 	stw	r4,-20(fp)
 201a37c:	e1bffd15 	stw	r6,-12(fp)
 201a380:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201a384:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 201a388:	e0bffd17 	ldw	r2,-12(fp)
 201a38c:	1004c03a 	cmpne	r2,r2,zero
 201a390:	1000031e 	bne	r2,zero,201a3a0 <OSSemDel+0x38>
        return (pevent);
 201a394:	e0bffb17 	ldw	r2,-20(fp)
 201a398:	e0bfff15 	stw	r2,-4(fp)
 201a39c:	00009406 	br	201a5f0 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201a3a0:	e0bffb17 	ldw	r2,-20(fp)
 201a3a4:	1004c03a 	cmpne	r2,r2,zero
 201a3a8:	1000061e 	bne	r2,zero,201a3c4 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 201a3ac:	e0fffd17 	ldw	r3,-12(fp)
 201a3b0:	00800104 	movi	r2,4
 201a3b4:	18800005 	stb	r2,0(r3)
        return (pevent);
 201a3b8:	e0fffb17 	ldw	r3,-20(fp)
 201a3bc:	e0ffff15 	stw	r3,-4(fp)
 201a3c0:	00008b06 	br	201a5f0 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201a3c4:	e0bffb17 	ldw	r2,-20(fp)
 201a3c8:	10800003 	ldbu	r2,0(r2)
 201a3cc:	10803fcc 	andi	r2,r2,255
 201a3d0:	108000e0 	cmpeqi	r2,r2,3
 201a3d4:	1000061e 	bne	r2,zero,201a3f0 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 201a3d8:	e0fffd17 	ldw	r3,-12(fp)
 201a3dc:	00800044 	movi	r2,1
 201a3e0:	18800005 	stb	r2,0(r3)
        return (pevent);
 201a3e4:	e0bffb17 	ldw	r2,-20(fp)
 201a3e8:	e0bfff15 	stw	r2,-4(fp)
 201a3ec:	00008006 	br	201a5f0 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201a3f0:	008080b4 	movhi	r2,514
 201a3f4:	1093e504 	addi	r2,r2,20372
 201a3f8:	10800003 	ldbu	r2,0(r2)
 201a3fc:	10803fcc 	andi	r2,r2,255
 201a400:	1005003a 	cmpeq	r2,r2,zero
 201a404:	1000061e 	bne	r2,zero,201a420 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 201a408:	e0fffd17 	ldw	r3,-12(fp)
 201a40c:	008003c4 	movi	r2,15
 201a410:	18800005 	stb	r2,0(r3)
        return (pevent);
 201a414:	e0fffb17 	ldw	r3,-20(fp)
 201a418:	e0ffff15 	stw	r3,-4(fp)
 201a41c:	00007406 	br	201a5f0 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a420:	0005303a 	rdctl	r2,status
 201a424:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a428:	e0fff717 	ldw	r3,-36(fp)
 201a42c:	00bfff84 	movi	r2,-2
 201a430:	1884703a 	and	r2,r3,r2
 201a434:	1001703a 	wrctl	status,r2
  
  return context;
 201a438:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 201a43c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 201a440:	e0bffb17 	ldw	r2,-20(fp)
 201a444:	10800283 	ldbu	r2,10(r2)
 201a448:	10803fcc 	andi	r2,r2,255
 201a44c:	1005003a 	cmpeq	r2,r2,zero
 201a450:	1000031e 	bne	r2,zero,201a460 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201a454:	00800044 	movi	r2,1
 201a458:	e0bffa05 	stb	r2,-24(fp)
 201a45c:	00000106 	br	201a464 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 201a460:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 201a464:	e0bffc03 	ldbu	r2,-16(fp)
 201a468:	e0bffe15 	stw	r2,-8(fp)
 201a46c:	e0fffe17 	ldw	r3,-8(fp)
 201a470:	1805003a 	cmpeq	r2,r3,zero
 201a474:	1000041e 	bne	r2,zero,201a488 <OSSemDel+0x120>
 201a478:	e0fffe17 	ldw	r3,-8(fp)
 201a47c:	18800060 	cmpeqi	r2,r3,1
 201a480:	10002d1e 	bne	r2,zero,201a538 <OSSemDel+0x1d0>
 201a484:	00004f06 	br	201a5c4 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 201a488:	e0bffa03 	ldbu	r2,-24(fp)
 201a48c:	1004c03a 	cmpne	r2,r2,zero
 201a490:	10001a1e 	bne	r2,zero,201a4fc <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 201a494:	e0fffb17 	ldw	r3,-20(fp)
 201a498:	00800fc4 	movi	r2,63
 201a49c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 201a4a0:	e0bffb17 	ldw	r2,-20(fp)
 201a4a4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201a4a8:	e0bffb17 	ldw	r2,-20(fp)
 201a4ac:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 201a4b0:	008080b4 	movhi	r2,514
 201a4b4:	1093e404 	addi	r2,r2,20368
 201a4b8:	10c00017 	ldw	r3,0(r2)
 201a4bc:	e0bffb17 	ldw	r2,-20(fp)
 201a4c0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 201a4c4:	e0bffb17 	ldw	r2,-20(fp)
 201a4c8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 201a4cc:	00c080b4 	movhi	r3,514
 201a4d0:	18d3e404 	addi	r3,r3,20368
 201a4d4:	e0bffb17 	ldw	r2,-20(fp)
 201a4d8:	18800015 	stw	r2,0(r3)
 201a4dc:	e0bff817 	ldw	r2,-32(fp)
 201a4e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a4e4:	e0bff617 	ldw	r2,-40(fp)
 201a4e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 201a4ec:	e0bffd17 	ldw	r2,-12(fp)
 201a4f0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 201a4f4:	e03ff915 	stw	zero,-28(fp)
 201a4f8:	00003b06 	br	201a5e8 <OSSemDel+0x280>
 201a4fc:	e0bff817 	ldw	r2,-32(fp)
 201a500:	e0bff515 	stw	r2,-44(fp)
 201a504:	e0bff517 	ldw	r2,-44(fp)
 201a508:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 201a50c:	e0fffd17 	ldw	r3,-12(fp)
 201a510:	00801244 	movi	r2,73
 201a514:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 201a518:	e0bffb17 	ldw	r2,-20(fp)
 201a51c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 201a520:	00003106 	br	201a5e8 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201a524:	e13ffb17 	ldw	r4,-20(fp)
 201a528:	000b883a 	mov	r5,zero
 201a52c:	01800044 	movi	r6,1
 201a530:	000f883a 	mov	r7,zero
 201a534:	2015a680 	call	2015a68 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 201a538:	e0bffb17 	ldw	r2,-20(fp)
 201a53c:	10800283 	ldbu	r2,10(r2)
 201a540:	10803fcc 	andi	r2,r2,255
 201a544:	1004c03a 	cmpne	r2,r2,zero
 201a548:	103ff61e 	bne	r2,zero,201a524 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201a54c:	e0fffb17 	ldw	r3,-20(fp)
 201a550:	00800fc4 	movi	r2,63
 201a554:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 201a558:	e0bffb17 	ldw	r2,-20(fp)
 201a55c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 201a560:	e0bffb17 	ldw	r2,-20(fp)
 201a564:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 201a568:	008080b4 	movhi	r2,514
 201a56c:	1093e404 	addi	r2,r2,20368
 201a570:	10c00017 	ldw	r3,0(r2)
 201a574:	e0bffb17 	ldw	r2,-20(fp)
 201a578:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 201a57c:	e0bffb17 	ldw	r2,-20(fp)
 201a580:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201a584:	00c080b4 	movhi	r3,514
 201a588:	18d3e404 	addi	r3,r3,20368
 201a58c:	e0bffb17 	ldw	r2,-20(fp)
 201a590:	18800015 	stw	r2,0(r3)
 201a594:	e0bff817 	ldw	r2,-32(fp)
 201a598:	e0bff415 	stw	r2,-48(fp)
 201a59c:	e0bff417 	ldw	r2,-48(fp)
 201a5a0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201a5a4:	e0bffa03 	ldbu	r2,-24(fp)
 201a5a8:	10800058 	cmpnei	r2,r2,1
 201a5ac:	1000011e 	bne	r2,zero,201a5b4 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 201a5b0:	20164a80 	call	20164a8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 201a5b4:	e0bffd17 	ldw	r2,-12(fp)
 201a5b8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 201a5bc:	e03ff915 	stw	zero,-28(fp)
             break;
 201a5c0:	00000906 	br	201a5e8 <OSSemDel+0x280>
 201a5c4:	e0bff817 	ldw	r2,-32(fp)
 201a5c8:	e0bff315 	stw	r2,-52(fp)
 201a5cc:	e0bff317 	ldw	r2,-52(fp)
 201a5d0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 201a5d4:	e0fffd17 	ldw	r3,-12(fp)
 201a5d8:	008001c4 	movi	r2,7
 201a5dc:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 201a5e0:	e0bffb17 	ldw	r2,-20(fp)
 201a5e4:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 201a5e8:	e0bff917 	ldw	r2,-28(fp)
 201a5ec:	e0bfff15 	stw	r2,-4(fp)
 201a5f0:	e0bfff17 	ldw	r2,-4(fp)
}
 201a5f4:	e037883a 	mov	sp,fp
 201a5f8:	dfc00117 	ldw	ra,4(sp)
 201a5fc:	df000017 	ldw	fp,0(sp)
 201a600:	dec00204 	addi	sp,sp,8
 201a604:	f800283a 	ret

0201a608 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 201a608:	defff404 	addi	sp,sp,-48
 201a60c:	dfc00b15 	stw	ra,44(sp)
 201a610:	df000a15 	stw	fp,40(sp)
 201a614:	df000a04 	addi	fp,sp,40
 201a618:	e13ffc15 	stw	r4,-16(fp)
 201a61c:	e1bffe15 	stw	r6,-8(fp)
 201a620:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201a624:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201a628:	e0bffe17 	ldw	r2,-8(fp)
 201a62c:	1005003a 	cmpeq	r2,r2,zero
 201a630:	10008f1e 	bne	r2,zero,201a870 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201a634:	e0bffc17 	ldw	r2,-16(fp)
 201a638:	1004c03a 	cmpne	r2,r2,zero
 201a63c:	1000041e 	bne	r2,zero,201a650 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 201a640:	e0fffe17 	ldw	r3,-8(fp)
 201a644:	00800104 	movi	r2,4
 201a648:	18800005 	stb	r2,0(r3)
        return;
 201a64c:	00008806 	br	201a870 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201a650:	e0bffc17 	ldw	r2,-16(fp)
 201a654:	10800003 	ldbu	r2,0(r2)
 201a658:	10803fcc 	andi	r2,r2,255
 201a65c:	108000e0 	cmpeqi	r2,r2,3
 201a660:	1000041e 	bne	r2,zero,201a674 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 201a664:	e0fffe17 	ldw	r3,-8(fp)
 201a668:	00800044 	movi	r2,1
 201a66c:	18800005 	stb	r2,0(r3)
        return;
 201a670:	00007f06 	br	201a870 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 201a674:	008080b4 	movhi	r2,514
 201a678:	1093e504 	addi	r2,r2,20372
 201a67c:	10800003 	ldbu	r2,0(r2)
 201a680:	10803fcc 	andi	r2,r2,255
 201a684:	1005003a 	cmpeq	r2,r2,zero
 201a688:	1000041e 	bne	r2,zero,201a69c <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 201a68c:	e0fffe17 	ldw	r3,-8(fp)
 201a690:	00800084 	movi	r2,2
 201a694:	18800005 	stb	r2,0(r3)
        return;
 201a698:	00007506 	br	201a870 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 201a69c:	008080b4 	movhi	r2,514
 201a6a0:	1093d704 	addi	r2,r2,20316
 201a6a4:	10800003 	ldbu	r2,0(r2)
 201a6a8:	10803fcc 	andi	r2,r2,255
 201a6ac:	1005003a 	cmpeq	r2,r2,zero
 201a6b0:	1000041e 	bne	r2,zero,201a6c4 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 201a6b4:	e0fffe17 	ldw	r3,-8(fp)
 201a6b8:	00800344 	movi	r2,13
 201a6bc:	18800005 	stb	r2,0(r3)
        return;
 201a6c0:	00006b06 	br	201a870 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a6c4:	0005303a 	rdctl	r2,status
 201a6c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a6cc:	e0fffa17 	ldw	r3,-24(fp)
 201a6d0:	00bfff84 	movi	r2,-2
 201a6d4:	1884703a 	and	r2,r3,r2
 201a6d8:	1001703a 	wrctl	status,r2
  
  return context;
 201a6dc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 201a6e0:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 201a6e4:	e0bffc17 	ldw	r2,-16(fp)
 201a6e8:	1080020b 	ldhu	r2,8(r2)
 201a6ec:	10bfffcc 	andi	r2,r2,65535
 201a6f0:	1005003a 	cmpeq	r2,r2,zero
 201a6f4:	10000d1e 	bne	r2,zero,201a72c <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 201a6f8:	e0bffc17 	ldw	r2,-16(fp)
 201a6fc:	1080020b 	ldhu	r2,8(r2)
 201a700:	10bfffc4 	addi	r2,r2,-1
 201a704:	1007883a 	mov	r3,r2
 201a708:	e0bffc17 	ldw	r2,-16(fp)
 201a70c:	10c0020d 	sth	r3,8(r2)
 201a710:	e0bffb17 	ldw	r2,-20(fp)
 201a714:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a718:	e0bff917 	ldw	r2,-28(fp)
 201a71c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 201a720:	e0bffe17 	ldw	r2,-8(fp)
 201a724:	10000005 	stb	zero,0(r2)
        return;
 201a728:	00005106 	br	201a870 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 201a72c:	008080b4 	movhi	r2,514
 201a730:	1093e604 	addi	r2,r2,20376
 201a734:	10c00017 	ldw	r3,0(r2)
 201a738:	008080b4 	movhi	r2,514
 201a73c:	1093e604 	addi	r2,r2,20376
 201a740:	10800017 	ldw	r2,0(r2)
 201a744:	10800c03 	ldbu	r2,48(r2)
 201a748:	10800054 	ori	r2,r2,1
 201a74c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201a750:	008080b4 	movhi	r2,514
 201a754:	1093e604 	addi	r2,r2,20376
 201a758:	10800017 	ldw	r2,0(r2)
 201a75c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 201a760:	008080b4 	movhi	r2,514
 201a764:	1093e604 	addi	r2,r2,20376
 201a768:	10c00017 	ldw	r3,0(r2)
 201a76c:	e0bffd0b 	ldhu	r2,-12(fp)
 201a770:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 201a774:	e13ffc17 	ldw	r4,-16(fp)
 201a778:	2015bfc0 	call	2015bfc <OS_EventTaskWait>
 201a77c:	e0bffb17 	ldw	r2,-20(fp)
 201a780:	e0bff815 	stw	r2,-32(fp)
 201a784:	e0bff817 	ldw	r2,-32(fp)
 201a788:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 201a78c:	20164a80 	call	20164a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a790:	0005303a 	rdctl	r2,status
 201a794:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a798:	e0fff717 	ldw	r3,-36(fp)
 201a79c:	00bfff84 	movi	r2,-2
 201a7a0:	1884703a 	and	r2,r3,r2
 201a7a4:	1001703a 	wrctl	status,r2
  
  return context;
 201a7a8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 201a7ac:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201a7b0:	008080b4 	movhi	r2,514
 201a7b4:	1093e604 	addi	r2,r2,20376
 201a7b8:	10800017 	ldw	r2,0(r2)
 201a7bc:	10800c43 	ldbu	r2,49(r2)
 201a7c0:	10803fcc 	andi	r2,r2,255
 201a7c4:	e0bfff15 	stw	r2,-4(fp)
 201a7c8:	e0ffff17 	ldw	r3,-4(fp)
 201a7cc:	1805003a 	cmpeq	r2,r3,zero
 201a7d0:	1000041e 	bne	r2,zero,201a7e4 <OSSemPend+0x1dc>
 201a7d4:	e0ffff17 	ldw	r3,-4(fp)
 201a7d8:	188000a0 	cmpeqi	r2,r3,2
 201a7dc:	1000041e 	bne	r2,zero,201a7f0 <OSSemPend+0x1e8>
 201a7e0:	00000706 	br	201a800 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 201a7e4:	e0bffe17 	ldw	r2,-8(fp)
 201a7e8:	10000005 	stb	zero,0(r2)
             break;
 201a7ec:	00000c06 	br	201a820 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 201a7f0:	e0fffe17 	ldw	r3,-8(fp)
 201a7f4:	00800384 	movi	r2,14
 201a7f8:	18800005 	stb	r2,0(r3)
             break;
 201a7fc:	00000806 	br	201a820 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 201a800:	008080b4 	movhi	r2,514
 201a804:	1093e604 	addi	r2,r2,20376
 201a808:	11000017 	ldw	r4,0(r2)
 201a80c:	e17ffc17 	ldw	r5,-16(fp)
 201a810:	2015e600 	call	2015e60 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 201a814:	e0fffe17 	ldw	r3,-8(fp)
 201a818:	00800284 	movi	r2,10
 201a81c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 201a820:	008080b4 	movhi	r2,514
 201a824:	1093e604 	addi	r2,r2,20376
 201a828:	10800017 	ldw	r2,0(r2)
 201a82c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 201a830:	008080b4 	movhi	r2,514
 201a834:	1093e604 	addi	r2,r2,20376
 201a838:	10800017 	ldw	r2,0(r2)
 201a83c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 201a840:	008080b4 	movhi	r2,514
 201a844:	1093e604 	addi	r2,r2,20376
 201a848:	10800017 	ldw	r2,0(r2)
 201a84c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 201a850:	008080b4 	movhi	r2,514
 201a854:	1093e604 	addi	r2,r2,20376
 201a858:	10800017 	ldw	r2,0(r2)
 201a85c:	10000815 	stw	zero,32(r2)
 201a860:	e0bffb17 	ldw	r2,-20(fp)
 201a864:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a868:	e0bff617 	ldw	r2,-40(fp)
 201a86c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 201a870:	e037883a 	mov	sp,fp
 201a874:	dfc00117 	ldw	ra,4(sp)
 201a878:	df000017 	ldw	fp,0(sp)
 201a87c:	dec00204 	addi	sp,sp,8
 201a880:	f800283a 	ret

0201a884 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201a884:	defff504 	addi	sp,sp,-44
 201a888:	dfc00a15 	stw	ra,40(sp)
 201a88c:	df000915 	stw	fp,36(sp)
 201a890:	df000904 	addi	fp,sp,36
 201a894:	e13ffc15 	stw	r4,-16(fp)
 201a898:	e1bffe15 	stw	r6,-8(fp)
 201a89c:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201a8a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201a8a4:	e0bffe17 	ldw	r2,-8(fp)
 201a8a8:	1004c03a 	cmpne	r2,r2,zero
 201a8ac:	1000021e 	bne	r2,zero,201a8b8 <OSSemPendAbort+0x34>
        return (0);
 201a8b0:	e03fff15 	stw	zero,-4(fp)
 201a8b4:	00004c06 	br	201a9e8 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201a8b8:	e0bffc17 	ldw	r2,-16(fp)
 201a8bc:	1004c03a 	cmpne	r2,r2,zero
 201a8c0:	1000051e 	bne	r2,zero,201a8d8 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 201a8c4:	e0fffe17 	ldw	r3,-8(fp)
 201a8c8:	00800104 	movi	r2,4
 201a8cc:	18800005 	stb	r2,0(r3)
        return (0);
 201a8d0:	e03fff15 	stw	zero,-4(fp)
 201a8d4:	00004406 	br	201a9e8 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201a8d8:	e0bffc17 	ldw	r2,-16(fp)
 201a8dc:	10800003 	ldbu	r2,0(r2)
 201a8e0:	10803fcc 	andi	r2,r2,255
 201a8e4:	108000e0 	cmpeqi	r2,r2,3
 201a8e8:	1000051e 	bne	r2,zero,201a900 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 201a8ec:	e0fffe17 	ldw	r3,-8(fp)
 201a8f0:	00800044 	movi	r2,1
 201a8f4:	18800005 	stb	r2,0(r3)
        return (0);
 201a8f8:	e03fff15 	stw	zero,-4(fp)
 201a8fc:	00003a06 	br	201a9e8 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201a900:	0005303a 	rdctl	r2,status
 201a904:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201a908:	e0fff917 	ldw	r3,-28(fp)
 201a90c:	00bfff84 	movi	r2,-2
 201a910:	1884703a 	and	r2,r3,r2
 201a914:	1001703a 	wrctl	status,r2
  
  return context;
 201a918:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 201a91c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 201a920:	e0bffc17 	ldw	r2,-16(fp)
 201a924:	10800283 	ldbu	r2,10(r2)
 201a928:	10803fcc 	andi	r2,r2,255
 201a92c:	1005003a 	cmpeq	r2,r2,zero
 201a930:	1000261e 	bne	r2,zero,201a9cc <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 201a934:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 201a938:	e0bffd03 	ldbu	r2,-12(fp)
 201a93c:	10800060 	cmpeqi	r2,r2,1
 201a940:	1000091e 	bne	r2,zero,201a968 <OSSemPendAbort+0xe4>
 201a944:	00000e06 	br	201a980 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201a948:	e13ffc17 	ldw	r4,-16(fp)
 201a94c:	000b883a 	mov	r5,zero
 201a950:	01800044 	movi	r6,1
 201a954:	01c00084 	movi	r7,2
 201a958:	2015a680 	call	2015a68 <OS_EventTaskRdy>
                     nbr_tasks++;
 201a95c:	e0bffb03 	ldbu	r2,-20(fp)
 201a960:	10800044 	addi	r2,r2,1
 201a964:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 201a968:	e0bffc17 	ldw	r2,-16(fp)
 201a96c:	10800283 	ldbu	r2,10(r2)
 201a970:	10803fcc 	andi	r2,r2,255
 201a974:	1004c03a 	cmpne	r2,r2,zero
 201a978:	103ff31e 	bne	r2,zero,201a948 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201a97c:	00000806 	br	201a9a0 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 201a980:	e13ffc17 	ldw	r4,-16(fp)
 201a984:	000b883a 	mov	r5,zero
 201a988:	01800044 	movi	r6,1
 201a98c:	01c00084 	movi	r7,2
 201a990:	2015a680 	call	2015a68 <OS_EventTaskRdy>
                 nbr_tasks++;
 201a994:	e0bffb03 	ldbu	r2,-20(fp)
 201a998:	10800044 	addi	r2,r2,1
 201a99c:	e0bffb05 	stb	r2,-20(fp)
 201a9a0:	e0bffa17 	ldw	r2,-24(fp)
 201a9a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201a9a8:	e0bff817 	ldw	r2,-32(fp)
 201a9ac:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201a9b0:	20164a80 	call	20164a8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201a9b4:	e0fffe17 	ldw	r3,-8(fp)
 201a9b8:	00800384 	movi	r2,14
 201a9bc:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 201a9c0:	e0bffb03 	ldbu	r2,-20(fp)
 201a9c4:	e0bfff15 	stw	r2,-4(fp)
 201a9c8:	00000706 	br	201a9e8 <OSSemPendAbort+0x164>
 201a9cc:	e0bffa17 	ldw	r2,-24(fp)
 201a9d0:	e0bff715 	stw	r2,-36(fp)
 201a9d4:	e0bff717 	ldw	r2,-36(fp)
 201a9d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201a9dc:	e0bffe17 	ldw	r2,-8(fp)
 201a9e0:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 201a9e4:	e03fff15 	stw	zero,-4(fp)
 201a9e8:	e0bfff17 	ldw	r2,-4(fp)
}
 201a9ec:	e037883a 	mov	sp,fp
 201a9f0:	dfc00117 	ldw	ra,4(sp)
 201a9f4:	df000017 	ldw	fp,0(sp)
 201a9f8:	dec00204 	addi	sp,sp,8
 201a9fc:	f800283a 	ret

0201aa00 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 201aa00:	defff704 	addi	sp,sp,-36
 201aa04:	dfc00815 	stw	ra,32(sp)
 201aa08:	df000715 	stw	fp,28(sp)
 201aa0c:	df000704 	addi	fp,sp,28
 201aa10:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201aa14:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201aa18:	e0bffe17 	ldw	r2,-8(fp)
 201aa1c:	1004c03a 	cmpne	r2,r2,zero
 201aa20:	1000031e 	bne	r2,zero,201aa30 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 201aa24:	00800104 	movi	r2,4
 201aa28:	e0bfff15 	stw	r2,-4(fp)
 201aa2c:	00003806 	br	201ab10 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201aa30:	e0bffe17 	ldw	r2,-8(fp)
 201aa34:	10800003 	ldbu	r2,0(r2)
 201aa38:	10803fcc 	andi	r2,r2,255
 201aa3c:	108000e0 	cmpeqi	r2,r2,3
 201aa40:	1000031e 	bne	r2,zero,201aa50 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 201aa44:	00800044 	movi	r2,1
 201aa48:	e0bfff15 	stw	r2,-4(fp)
 201aa4c:	00003006 	br	201ab10 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201aa50:	0005303a 	rdctl	r2,status
 201aa54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201aa58:	e0fffc17 	ldw	r3,-16(fp)
 201aa5c:	00bfff84 	movi	r2,-2
 201aa60:	1884703a 	and	r2,r3,r2
 201aa64:	1001703a 	wrctl	status,r2
  
  return context;
 201aa68:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 201aa6c:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 201aa70:	e0bffe17 	ldw	r2,-8(fp)
 201aa74:	10800283 	ldbu	r2,10(r2)
 201aa78:	10803fcc 	andi	r2,r2,255
 201aa7c:	1005003a 	cmpeq	r2,r2,zero
 201aa80:	10000c1e 	bne	r2,zero,201aab4 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201aa84:	e13ffe17 	ldw	r4,-8(fp)
 201aa88:	000b883a 	mov	r5,zero
 201aa8c:	01800044 	movi	r6,1
 201aa90:	000f883a 	mov	r7,zero
 201aa94:	2015a680 	call	2015a68 <OS_EventTaskRdy>
 201aa98:	e0bffd17 	ldw	r2,-12(fp)
 201aa9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201aaa0:	e0bffb17 	ldw	r2,-20(fp)
 201aaa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201aaa8:	20164a80 	call	20164a8 <OS_Sched>
        return (OS_ERR_NONE);
 201aaac:	e03fff15 	stw	zero,-4(fp)
 201aab0:	00001706 	br	201ab10 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 201aab4:	e0bffe17 	ldw	r2,-8(fp)
 201aab8:	1080020b 	ldhu	r2,8(r2)
 201aabc:	10ffffcc 	andi	r3,r2,65535
 201aac0:	00bfffd4 	movui	r2,65535
 201aac4:	18800c26 	beq	r3,r2,201aaf8 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 201aac8:	e0bffe17 	ldw	r2,-8(fp)
 201aacc:	1080020b 	ldhu	r2,8(r2)
 201aad0:	10800044 	addi	r2,r2,1
 201aad4:	1007883a 	mov	r3,r2
 201aad8:	e0bffe17 	ldw	r2,-8(fp)
 201aadc:	10c0020d 	sth	r3,8(r2)
 201aae0:	e0bffd17 	ldw	r2,-12(fp)
 201aae4:	e0bffa15 	stw	r2,-24(fp)
 201aae8:	e0bffa17 	ldw	r2,-24(fp)
 201aaec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 201aaf0:	e03fff15 	stw	zero,-4(fp)
 201aaf4:	00000606 	br	201ab10 <OSSemPost+0x110>
 201aaf8:	e0bffd17 	ldw	r2,-12(fp)
 201aafc:	e0bff915 	stw	r2,-28(fp)
 201ab00:	e0bff917 	ldw	r2,-28(fp)
 201ab04:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 201ab08:	00800c84 	movi	r2,50
 201ab0c:	e0bfff15 	stw	r2,-4(fp)
 201ab10:	e0bfff17 	ldw	r2,-4(fp)
}
 201ab14:	e037883a 	mov	sp,fp
 201ab18:	dfc00117 	ldw	ra,4(sp)
 201ab1c:	df000017 	ldw	fp,0(sp)
 201ab20:	dec00204 	addi	sp,sp,8
 201ab24:	f800283a 	ret

0201ab28 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 201ab28:	defff604 	addi	sp,sp,-40
 201ab2c:	df000915 	stw	fp,36(sp)
 201ab30:	df000904 	addi	fp,sp,36
 201ab34:	e13ffd15 	stw	r4,-12(fp)
 201ab38:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201ab3c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 201ab40:	e0bffd17 	ldw	r2,-12(fp)
 201ab44:	1004c03a 	cmpne	r2,r2,zero
 201ab48:	1000031e 	bne	r2,zero,201ab58 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 201ab4c:	00800104 	movi	r2,4
 201ab50:	e0bfff15 	stw	r2,-4(fp)
 201ab54:	00003b06 	br	201ac44 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 201ab58:	e0bffe17 	ldw	r2,-8(fp)
 201ab5c:	1004c03a 	cmpne	r2,r2,zero
 201ab60:	1000031e 	bne	r2,zero,201ab70 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 201ab64:	00800244 	movi	r2,9
 201ab68:	e0bfff15 	stw	r2,-4(fp)
 201ab6c:	00003506 	br	201ac44 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 201ab70:	e0bffd17 	ldw	r2,-12(fp)
 201ab74:	10800003 	ldbu	r2,0(r2)
 201ab78:	10803fcc 	andi	r2,r2,255
 201ab7c:	108000e0 	cmpeqi	r2,r2,3
 201ab80:	1000031e 	bne	r2,zero,201ab90 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 201ab84:	00800044 	movi	r2,1
 201ab88:	e0bfff15 	stw	r2,-4(fp)
 201ab8c:	00002d06 	br	201ac44 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ab90:	0005303a 	rdctl	r2,status
 201ab94:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ab98:	e0fff817 	ldw	r3,-32(fp)
 201ab9c:	00bfff84 	movi	r2,-2
 201aba0:	1884703a 	and	r2,r3,r2
 201aba4:	1001703a 	wrctl	status,r2
  
  return context;
 201aba8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 201abac:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 201abb0:	e0bffd17 	ldw	r2,-12(fp)
 201abb4:	10c00283 	ldbu	r3,10(r2)
 201abb8:	e0bffe17 	ldw	r2,-8(fp)
 201abbc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 201abc0:	e0bffd17 	ldw	r2,-12(fp)
 201abc4:	108002c4 	addi	r2,r2,11
 201abc8:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 201abcc:	e0bffe17 	ldw	r2,-8(fp)
 201abd0:	10800084 	addi	r2,r2,2
 201abd4:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201abd8:	e03ffa05 	stb	zero,-24(fp)
 201abdc:	00000d06 	br	201ac14 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 201abe0:	e0bffc17 	ldw	r2,-16(fp)
 201abe4:	10c00003 	ldbu	r3,0(r2)
 201abe8:	e0bffb17 	ldw	r2,-20(fp)
 201abec:	10c00005 	stb	r3,0(r2)
 201abf0:	e0bffb17 	ldw	r2,-20(fp)
 201abf4:	10800044 	addi	r2,r2,1
 201abf8:	e0bffb15 	stw	r2,-20(fp)
 201abfc:	e0bffc17 	ldw	r2,-16(fp)
 201ac00:	10800044 	addi	r2,r2,1
 201ac04:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201ac08:	e0bffa03 	ldbu	r2,-24(fp)
 201ac0c:	10800044 	addi	r2,r2,1
 201ac10:	e0bffa05 	stb	r2,-24(fp)
 201ac14:	e0bffa03 	ldbu	r2,-24(fp)
 201ac18:	108000f0 	cmpltui	r2,r2,3
 201ac1c:	103ff01e 	bne	r2,zero,201abe0 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 201ac20:	e0bffd17 	ldw	r2,-12(fp)
 201ac24:	10c0020b 	ldhu	r3,8(r2)
 201ac28:	e0bffe17 	ldw	r2,-8(fp)
 201ac2c:	10c0000d 	sth	r3,0(r2)
 201ac30:	e0bff917 	ldw	r2,-28(fp)
 201ac34:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ac38:	e0bff717 	ldw	r2,-36(fp)
 201ac3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201ac40:	e03fff15 	stw	zero,-4(fp)
 201ac44:	e0bfff17 	ldw	r2,-4(fp)
}
 201ac48:	e037883a 	mov	sp,fp
 201ac4c:	df000017 	ldw	fp,0(sp)
 201ac50:	dec00104 	addi	sp,sp,4
 201ac54:	f800283a 	ret

0201ac58 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 201ac58:	defff904 	addi	sp,sp,-28
 201ac5c:	df000615 	stw	fp,24(sp)
 201ac60:	df000604 	addi	fp,sp,24
 201ac64:	e13ffd15 	stw	r4,-12(fp)
 201ac68:	e1bfff15 	stw	r6,-4(fp)
 201ac6c:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201ac70:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201ac74:	e0bfff17 	ldw	r2,-4(fp)
 201ac78:	1005003a 	cmpeq	r2,r2,zero
 201ac7c:	1000331e 	bne	r2,zero,201ad4c <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201ac80:	e0bffd17 	ldw	r2,-12(fp)
 201ac84:	1004c03a 	cmpne	r2,r2,zero
 201ac88:	1000041e 	bne	r2,zero,201ac9c <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 201ac8c:	e0ffff17 	ldw	r3,-4(fp)
 201ac90:	00800104 	movi	r2,4
 201ac94:	18800005 	stb	r2,0(r3)
        return;
 201ac98:	00002c06 	br	201ad4c <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 201ac9c:	e0bffd17 	ldw	r2,-12(fp)
 201aca0:	10800003 	ldbu	r2,0(r2)
 201aca4:	10803fcc 	andi	r2,r2,255
 201aca8:	108000e0 	cmpeqi	r2,r2,3
 201acac:	1000041e 	bne	r2,zero,201acc0 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 201acb0:	e0ffff17 	ldw	r3,-4(fp)
 201acb4:	00800044 	movi	r2,1
 201acb8:	18800005 	stb	r2,0(r3)
        return;
 201acbc:	00002306 	br	201ad4c <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201acc0:	0005303a 	rdctl	r2,status
 201acc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201acc8:	e0fffb17 	ldw	r3,-20(fp)
 201accc:	00bfff84 	movi	r2,-2
 201acd0:	1884703a 	and	r2,r3,r2
 201acd4:	1001703a 	wrctl	status,r2
  
  return context;
 201acd8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 201acdc:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 201ace0:	e0bfff17 	ldw	r2,-4(fp)
 201ace4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 201ace8:	e0bffd17 	ldw	r2,-12(fp)
 201acec:	1080020b 	ldhu	r2,8(r2)
 201acf0:	10bfffcc 	andi	r2,r2,65535
 201acf4:	1005003a 	cmpeq	r2,r2,zero
 201acf8:	1000041e 	bne	r2,zero,201ad0c <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 201acfc:	e0fffd17 	ldw	r3,-12(fp)
 201ad00:	e0bffe0b 	ldhu	r2,-8(fp)
 201ad04:	1880020d 	sth	r2,8(r3)
 201ad08:	00000c06 	br	201ad3c <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 201ad0c:	e0bffd17 	ldw	r2,-12(fp)
 201ad10:	10800283 	ldbu	r2,10(r2)
 201ad14:	10803fcc 	andi	r2,r2,255
 201ad18:	1004c03a 	cmpne	r2,r2,zero
 201ad1c:	1000041e 	bne	r2,zero,201ad30 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 201ad20:	e0fffd17 	ldw	r3,-12(fp)
 201ad24:	e0bffe0b 	ldhu	r2,-8(fp)
 201ad28:	1880020d 	sth	r2,8(r3)
 201ad2c:	00000306 	br	201ad3c <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 201ad30:	e0ffff17 	ldw	r3,-4(fp)
 201ad34:	00801244 	movi	r2,73
 201ad38:	18800005 	stb	r2,0(r3)
 201ad3c:	e0bffc17 	ldw	r2,-16(fp)
 201ad40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ad44:	e0bffa17 	ldw	r2,-24(fp)
 201ad48:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 201ad4c:	e037883a 	mov	sp,fp
 201ad50:	df000017 	ldw	fp,0(sp)
 201ad54:	dec00104 	addi	sp,sp,4
 201ad58:	f800283a 	ret

0201ad5c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 201ad5c:	defff004 	addi	sp,sp,-64
 201ad60:	dfc00f15 	stw	ra,60(sp)
 201ad64:	df000e15 	stw	fp,56(sp)
 201ad68:	df000e04 	addi	fp,sp,56
 201ad6c:	e13ffd05 	stb	r4,-12(fp)
 201ad70:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 201ad74:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 201ad78:	e0bffd03 	ldbu	r2,-12(fp)
 201ad7c:	10800530 	cmpltui	r2,r2,20
 201ad80:	1000061e 	bne	r2,zero,201ad9c <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 201ad84:	e0bffd03 	ldbu	r2,-12(fp)
 201ad88:	10803fe0 	cmpeqi	r2,r2,255
 201ad8c:	1000031e 	bne	r2,zero,201ad9c <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 201ad90:	00800a84 	movi	r2,42
 201ad94:	e0bfff15 	stw	r2,-4(fp)
 201ad98:	00014706 	br	201b2b8 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 201ad9c:	e0bffe03 	ldbu	r2,-8(fp)
 201ada0:	10800530 	cmpltui	r2,r2,20
 201ada4:	1000031e 	bne	r2,zero,201adb4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 201ada8:	00800a84 	movi	r2,42
 201adac:	e0bfff15 	stw	r2,-4(fp)
 201adb0:	00014106 	br	201b2b8 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201adb4:	0005303a 	rdctl	r2,status
 201adb8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201adbc:	e0fff617 	ldw	r3,-40(fp)
 201adc0:	00bfff84 	movi	r2,-2
 201adc4:	1884703a 	and	r2,r3,r2
 201adc8:	1001703a 	wrctl	status,r2
  
  return context;
 201adcc:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201add0:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 201add4:	e0bffe03 	ldbu	r2,-8(fp)
 201add8:	00c080f4 	movhi	r3,515
 201addc:	18e0b504 	addi	r3,r3,-32044
 201ade0:	1085883a 	add	r2,r2,r2
 201ade4:	1085883a 	add	r2,r2,r2
 201ade8:	10c5883a 	add	r2,r2,r3
 201adec:	10800017 	ldw	r2,0(r2)
 201adf0:	1005003a 	cmpeq	r2,r2,zero
 201adf4:	1000071e 	bne	r2,zero,201ae14 <OSTaskChangePrio+0xb8>
 201adf8:	e0bff717 	ldw	r2,-36(fp)
 201adfc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ae00:	e0bff517 	ldw	r2,-44(fp)
 201ae04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 201ae08:	00800a04 	movi	r2,40
 201ae0c:	e0bfff15 	stw	r2,-4(fp)
 201ae10:	00012906 	br	201b2b8 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 201ae14:	e0bffd03 	ldbu	r2,-12(fp)
 201ae18:	10803fd8 	cmpnei	r2,r2,255
 201ae1c:	1000051e 	bne	r2,zero,201ae34 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 201ae20:	008080b4 	movhi	r2,514
 201ae24:	1093e604 	addi	r2,r2,20376
 201ae28:	10800017 	ldw	r2,0(r2)
 201ae2c:	10800c83 	ldbu	r2,50(r2)
 201ae30:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 201ae34:	e0bffd03 	ldbu	r2,-12(fp)
 201ae38:	00c080f4 	movhi	r3,515
 201ae3c:	18e0b504 	addi	r3,r3,-32044
 201ae40:	1085883a 	add	r2,r2,r2
 201ae44:	1085883a 	add	r2,r2,r2
 201ae48:	10c5883a 	add	r2,r2,r3
 201ae4c:	10800017 	ldw	r2,0(r2)
 201ae50:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 201ae54:	e0bffa17 	ldw	r2,-24(fp)
 201ae58:	1004c03a 	cmpne	r2,r2,zero
 201ae5c:	1000071e 	bne	r2,zero,201ae7c <OSTaskChangePrio+0x120>
 201ae60:	e0bff717 	ldw	r2,-36(fp)
 201ae64:	e0bff415 	stw	r2,-48(fp)
 201ae68:	e0bff417 	ldw	r2,-48(fp)
 201ae6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 201ae70:	00800a44 	movi	r2,41
 201ae74:	e0bfff15 	stw	r2,-4(fp)
 201ae78:	00010f06 	br	201b2b8 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 201ae7c:	e0bffa17 	ldw	r2,-24(fp)
 201ae80:	10800058 	cmpnei	r2,r2,1
 201ae84:	1000071e 	bne	r2,zero,201aea4 <OSTaskChangePrio+0x148>
 201ae88:	e0bff717 	ldw	r2,-36(fp)
 201ae8c:	e0bff315 	stw	r2,-52(fp)
 201ae90:	e0bff317 	ldw	r2,-52(fp)
 201ae94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 201ae98:	008010c4 	movi	r2,67
 201ae9c:	e0bfff15 	stw	r2,-4(fp)
 201aea0:	00010506 	br	201b2b8 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 201aea4:	e0bffe03 	ldbu	r2,-8(fp)
 201aea8:	1004d0fa 	srli	r2,r2,3
 201aeac:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 201aeb0:	e0bffe03 	ldbu	r2,-8(fp)
 201aeb4:	108001cc 	andi	r2,r2,7
 201aeb8:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 201aebc:	e0fff983 	ldbu	r3,-26(fp)
 201aec0:	00800044 	movi	r2,1
 201aec4:	10c4983a 	sll	r2,r2,r3
 201aec8:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 201aecc:	e0fff943 	ldbu	r3,-27(fp)
 201aed0:	00800044 	movi	r2,1
 201aed4:	10c4983a 	sll	r2,r2,r3
 201aed8:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 201aedc:	e0bffd03 	ldbu	r2,-12(fp)
 201aee0:	00c080f4 	movhi	r3,515
 201aee4:	18e0b504 	addi	r3,r3,-32044
 201aee8:	1085883a 	add	r2,r2,r2
 201aeec:	1085883a 	add	r2,r2,r2
 201aef0:	10c5883a 	add	r2,r2,r3
 201aef4:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 201aef8:	e0bffe03 	ldbu	r2,-8(fp)
 201aefc:	00c080f4 	movhi	r3,515
 201af00:	18e0b504 	addi	r3,r3,-32044
 201af04:	1085883a 	add	r2,r2,r2
 201af08:	1085883a 	add	r2,r2,r2
 201af0c:	10c7883a 	add	r3,r2,r3
 201af10:	e0bffa17 	ldw	r2,-24(fp)
 201af14:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 201af18:	e0bffa17 	ldw	r2,-24(fp)
 201af1c:	10800d03 	ldbu	r2,52(r2)
 201af20:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 201af24:	e0bffa17 	ldw	r2,-24(fp)
 201af28:	10800d83 	ldbu	r2,54(r2)
 201af2c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 201af30:	e0bffa17 	ldw	r2,-24(fp)
 201af34:	10800d43 	ldbu	r2,53(r2)
 201af38:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 201af3c:	e0fff903 	ldbu	r3,-28(fp)
 201af40:	008080b4 	movhi	r2,514
 201af44:	1093e344 	addi	r2,r2,20365
 201af48:	10c5883a 	add	r2,r2,r3
 201af4c:	10c00003 	ldbu	r3,0(r2)
 201af50:	e0bff803 	ldbu	r2,-32(fp)
 201af54:	1884703a 	and	r2,r3,r2
 201af58:	10803fcc 	andi	r2,r2,255
 201af5c:	1005003a 	cmpeq	r2,r2,zero
 201af60:	1000381e 	bne	r2,zero,201b044 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 201af64:	e13ff903 	ldbu	r4,-28(fp)
 201af68:	e0fff903 	ldbu	r3,-28(fp)
 201af6c:	008080b4 	movhi	r2,514
 201af70:	1093e344 	addi	r2,r2,20365
 201af74:	10c5883a 	add	r2,r2,r3
 201af78:	10800003 	ldbu	r2,0(r2)
 201af7c:	1007883a 	mov	r3,r2
 201af80:	e0bff803 	ldbu	r2,-32(fp)
 201af84:	0084303a 	nor	r2,zero,r2
 201af88:	1884703a 	and	r2,r3,r2
 201af8c:	1007883a 	mov	r3,r2
 201af90:	008080b4 	movhi	r2,514
 201af94:	1093e344 	addi	r2,r2,20365
 201af98:	1105883a 	add	r2,r2,r4
 201af9c:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 201afa0:	e0fff903 	ldbu	r3,-28(fp)
 201afa4:	008080b4 	movhi	r2,514
 201afa8:	1093e344 	addi	r2,r2,20365
 201afac:	10c5883a 	add	r2,r2,r3
 201afb0:	10800003 	ldbu	r2,0(r2)
 201afb4:	10803fcc 	andi	r2,r2,255
 201afb8:	1004c03a 	cmpne	r2,r2,zero
 201afbc:	10000b1e 	bne	r2,zero,201afec <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 201afc0:	e0bff843 	ldbu	r2,-31(fp)
 201afc4:	0084303a 	nor	r2,zero,r2
 201afc8:	1007883a 	mov	r3,r2
 201afcc:	008080b4 	movhi	r2,514
 201afd0:	1093e304 	addi	r2,r2,20364
 201afd4:	10800003 	ldbu	r2,0(r2)
 201afd8:	1884703a 	and	r2,r3,r2
 201afdc:	1007883a 	mov	r3,r2
 201afe0:	008080b4 	movhi	r2,514
 201afe4:	1093e304 	addi	r2,r2,20364
 201afe8:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 201afec:	008080b4 	movhi	r2,514
 201aff0:	1093e304 	addi	r2,r2,20364
 201aff4:	10c00003 	ldbu	r3,0(r2)
 201aff8:	e0bff8c3 	ldbu	r2,-29(fp)
 201affc:	1884b03a 	or	r2,r3,r2
 201b000:	1007883a 	mov	r3,r2
 201b004:	008080b4 	movhi	r2,514
 201b008:	1093e304 	addi	r2,r2,20364
 201b00c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 201b010:	e13ff983 	ldbu	r4,-26(fp)
 201b014:	e0fff983 	ldbu	r3,-26(fp)
 201b018:	008080b4 	movhi	r2,514
 201b01c:	1093e344 	addi	r2,r2,20365
 201b020:	10c5883a 	add	r2,r2,r3
 201b024:	10c00003 	ldbu	r3,0(r2)
 201b028:	e0bff883 	ldbu	r2,-30(fp)
 201b02c:	1884b03a 	or	r2,r3,r2
 201b030:	1007883a 	mov	r3,r2
 201b034:	008080b4 	movhi	r2,514
 201b038:	1093e344 	addi	r2,r2,20365
 201b03c:	1105883a 	add	r2,r2,r4
 201b040:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 201b044:	e0bffa17 	ldw	r2,-24(fp)
 201b048:	10800717 	ldw	r2,28(r2)
 201b04c:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 201b050:	e0bffc17 	ldw	r2,-16(fp)
 201b054:	1005003a 	cmpeq	r2,r2,zero
 201b058:	1000341e 	bne	r2,zero,201b12c <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 201b05c:	e13ff903 	ldbu	r4,-28(fp)
 201b060:	e0fff903 	ldbu	r3,-28(fp)
 201b064:	e0bffc17 	ldw	r2,-16(fp)
 201b068:	1885883a 	add	r2,r3,r2
 201b06c:	10800204 	addi	r2,r2,8
 201b070:	108000c3 	ldbu	r2,3(r2)
 201b074:	1007883a 	mov	r3,r2
 201b078:	e0bff803 	ldbu	r2,-32(fp)
 201b07c:	0084303a 	nor	r2,zero,r2
 201b080:	1884703a 	and	r2,r3,r2
 201b084:	1007883a 	mov	r3,r2
 201b088:	e0bffc17 	ldw	r2,-16(fp)
 201b08c:	2085883a 	add	r2,r4,r2
 201b090:	10800204 	addi	r2,r2,8
 201b094:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 201b098:	e0fff903 	ldbu	r3,-28(fp)
 201b09c:	e0bffc17 	ldw	r2,-16(fp)
 201b0a0:	1885883a 	add	r2,r3,r2
 201b0a4:	10800204 	addi	r2,r2,8
 201b0a8:	108000c3 	ldbu	r2,3(r2)
 201b0ac:	10803fcc 	andi	r2,r2,255
 201b0b0:	1004c03a 	cmpne	r2,r2,zero
 201b0b4:	1000091e 	bne	r2,zero,201b0dc <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 201b0b8:	e0bffc17 	ldw	r2,-16(fp)
 201b0bc:	10800283 	ldbu	r2,10(r2)
 201b0c0:	1007883a 	mov	r3,r2
 201b0c4:	e0bff843 	ldbu	r2,-31(fp)
 201b0c8:	0084303a 	nor	r2,zero,r2
 201b0cc:	1884703a 	and	r2,r3,r2
 201b0d0:	1007883a 	mov	r3,r2
 201b0d4:	e0bffc17 	ldw	r2,-16(fp)
 201b0d8:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 201b0dc:	e0bffc17 	ldw	r2,-16(fp)
 201b0e0:	10c00283 	ldbu	r3,10(r2)
 201b0e4:	e0bff8c3 	ldbu	r2,-29(fp)
 201b0e8:	1884b03a 	or	r2,r3,r2
 201b0ec:	1007883a 	mov	r3,r2
 201b0f0:	e0bffc17 	ldw	r2,-16(fp)
 201b0f4:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 201b0f8:	e13ff983 	ldbu	r4,-26(fp)
 201b0fc:	e0fff983 	ldbu	r3,-26(fp)
 201b100:	e0bffc17 	ldw	r2,-16(fp)
 201b104:	1885883a 	add	r2,r3,r2
 201b108:	10800204 	addi	r2,r2,8
 201b10c:	10c000c3 	ldbu	r3,3(r2)
 201b110:	e0bff883 	ldbu	r2,-30(fp)
 201b114:	1884b03a 	or	r2,r3,r2
 201b118:	1007883a 	mov	r3,r2
 201b11c:	e0bffc17 	ldw	r2,-16(fp)
 201b120:	2085883a 	add	r2,r4,r2
 201b124:	10800204 	addi	r2,r2,8
 201b128:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 201b12c:	e0bffa17 	ldw	r2,-24(fp)
 201b130:	10800817 	ldw	r2,32(r2)
 201b134:	1005003a 	cmpeq	r2,r2,zero
 201b138:	1000441e 	bne	r2,zero,201b24c <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 201b13c:	e0bffa17 	ldw	r2,-24(fp)
 201b140:	10800817 	ldw	r2,32(r2)
 201b144:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 201b148:	e0bffb17 	ldw	r2,-20(fp)
 201b14c:	10800017 	ldw	r2,0(r2)
 201b150:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 201b154:	00003a06 	br	201b240 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 201b158:	e13ff903 	ldbu	r4,-28(fp)
 201b15c:	e0fff903 	ldbu	r3,-28(fp)
 201b160:	e0bffc17 	ldw	r2,-16(fp)
 201b164:	1885883a 	add	r2,r3,r2
 201b168:	10800204 	addi	r2,r2,8
 201b16c:	108000c3 	ldbu	r2,3(r2)
 201b170:	1007883a 	mov	r3,r2
 201b174:	e0bff803 	ldbu	r2,-32(fp)
 201b178:	0084303a 	nor	r2,zero,r2
 201b17c:	1884703a 	and	r2,r3,r2
 201b180:	1007883a 	mov	r3,r2
 201b184:	e0bffc17 	ldw	r2,-16(fp)
 201b188:	2085883a 	add	r2,r4,r2
 201b18c:	10800204 	addi	r2,r2,8
 201b190:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 201b194:	e0fff903 	ldbu	r3,-28(fp)
 201b198:	e0bffc17 	ldw	r2,-16(fp)
 201b19c:	1885883a 	add	r2,r3,r2
 201b1a0:	10800204 	addi	r2,r2,8
 201b1a4:	108000c3 	ldbu	r2,3(r2)
 201b1a8:	10803fcc 	andi	r2,r2,255
 201b1ac:	1004c03a 	cmpne	r2,r2,zero
 201b1b0:	1000091e 	bne	r2,zero,201b1d8 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 201b1b4:	e0bffc17 	ldw	r2,-16(fp)
 201b1b8:	10800283 	ldbu	r2,10(r2)
 201b1bc:	1007883a 	mov	r3,r2
 201b1c0:	e0bff843 	ldbu	r2,-31(fp)
 201b1c4:	0084303a 	nor	r2,zero,r2
 201b1c8:	1884703a 	and	r2,r3,r2
 201b1cc:	1007883a 	mov	r3,r2
 201b1d0:	e0bffc17 	ldw	r2,-16(fp)
 201b1d4:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 201b1d8:	e0bffc17 	ldw	r2,-16(fp)
 201b1dc:	10c00283 	ldbu	r3,10(r2)
 201b1e0:	e0bff8c3 	ldbu	r2,-29(fp)
 201b1e4:	1884b03a 	or	r2,r3,r2
 201b1e8:	1007883a 	mov	r3,r2
 201b1ec:	e0bffc17 	ldw	r2,-16(fp)
 201b1f0:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 201b1f4:	e13ff983 	ldbu	r4,-26(fp)
 201b1f8:	e0fff983 	ldbu	r3,-26(fp)
 201b1fc:	e0bffc17 	ldw	r2,-16(fp)
 201b200:	1885883a 	add	r2,r3,r2
 201b204:	10800204 	addi	r2,r2,8
 201b208:	10c000c3 	ldbu	r3,3(r2)
 201b20c:	e0bff883 	ldbu	r2,-30(fp)
 201b210:	1884b03a 	or	r2,r3,r2
 201b214:	1007883a 	mov	r3,r2
 201b218:	e0bffc17 	ldw	r2,-16(fp)
 201b21c:	2085883a 	add	r2,r4,r2
 201b220:	10800204 	addi	r2,r2,8
 201b224:	10c000c5 	stb	r3,3(r2)
            pevents++;
 201b228:	e0bffb17 	ldw	r2,-20(fp)
 201b22c:	10800104 	addi	r2,r2,4
 201b230:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 201b234:	e0bffb17 	ldw	r2,-20(fp)
 201b238:	10800017 	ldw	r2,0(r2)
 201b23c:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 201b240:	e0bffc17 	ldw	r2,-16(fp)
 201b244:	1004c03a 	cmpne	r2,r2,zero
 201b248:	103fc31e 	bne	r2,zero,201b158 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 201b24c:	e0fffa17 	ldw	r3,-24(fp)
 201b250:	e0bffe03 	ldbu	r2,-8(fp)
 201b254:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 201b258:	e0fffa17 	ldw	r3,-24(fp)
 201b25c:	e0bff983 	ldbu	r2,-26(fp)
 201b260:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 201b264:	e0fffa17 	ldw	r3,-24(fp)
 201b268:	e0bff943 	ldbu	r2,-27(fp)
 201b26c:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 201b270:	e0fffa17 	ldw	r3,-24(fp)
 201b274:	e0bff8c3 	ldbu	r2,-29(fp)
 201b278:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 201b27c:	e0fffa17 	ldw	r3,-24(fp)
 201b280:	e0bff883 	ldbu	r2,-30(fp)
 201b284:	18800d45 	stb	r2,53(r3)
 201b288:	e0bff717 	ldw	r2,-36(fp)
 201b28c:	e0bff215 	stw	r2,-56(fp)
 201b290:	e0bff217 	ldw	r2,-56(fp)
 201b294:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201b298:	008080b4 	movhi	r2,514
 201b29c:	1093d744 	addi	r2,r2,20317
 201b2a0:	10800003 	ldbu	r2,0(r2)
 201b2a4:	10803fcc 	andi	r2,r2,255
 201b2a8:	10800058 	cmpnei	r2,r2,1
 201b2ac:	1000011e 	bne	r2,zero,201b2b4 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 201b2b0:	20164a80 	call	20164a8 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201b2b4:	e03fff15 	stw	zero,-4(fp)
 201b2b8:	e0bfff17 	ldw	r2,-4(fp)
}
 201b2bc:	e037883a 	mov	sp,fp
 201b2c0:	dfc00117 	ldw	ra,4(sp)
 201b2c4:	df000017 	ldw	fp,0(sp)
 201b2c8:	dec00204 	addi	sp,sp,8
 201b2cc:	f800283a 	ret

0201b2d0 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 201b2d0:	deffed04 	addi	sp,sp,-76
 201b2d4:	dfc01215 	stw	ra,72(sp)
 201b2d8:	df001115 	stw	fp,68(sp)
 201b2dc:	df001104 	addi	fp,sp,68
 201b2e0:	e13ffb15 	stw	r4,-20(fp)
 201b2e4:	e17ffc15 	stw	r5,-16(fp)
 201b2e8:	e1bffd15 	stw	r6,-12(fp)
 201b2ec:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201b2f0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201b2f4:	e0bffe03 	ldbu	r2,-8(fp)
 201b2f8:	10800570 	cmpltui	r2,r2,21
 201b2fc:	1000031e 	bne	r2,zero,201b30c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 201b300:	00800a84 	movi	r2,42
 201b304:	e0bfff15 	stw	r2,-4(fp)
 201b308:	00006006 	br	201b48c <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b30c:	0005303a 	rdctl	r2,status
 201b310:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b314:	e0fff717 	ldw	r3,-36(fp)
 201b318:	00bfff84 	movi	r2,-2
 201b31c:	1884703a 	and	r2,r3,r2
 201b320:	1001703a 	wrctl	status,r2
  
  return context;
 201b324:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201b328:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201b32c:	008080b4 	movhi	r2,514
 201b330:	1093e504 	addi	r2,r2,20372
 201b334:	10800003 	ldbu	r2,0(r2)
 201b338:	10803fcc 	andi	r2,r2,255
 201b33c:	1005003a 	cmpeq	r2,r2,zero
 201b340:	1000071e 	bne	r2,zero,201b360 <OSTaskCreate+0x90>
 201b344:	e0bff817 	ldw	r2,-32(fp)
 201b348:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b34c:	e0bff617 	ldw	r2,-40(fp)
 201b350:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201b354:	00800f04 	movi	r2,60
 201b358:	e0bfff15 	stw	r2,-4(fp)
 201b35c:	00004b06 	br	201b48c <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201b360:	e0bffe03 	ldbu	r2,-8(fp)
 201b364:	00c080f4 	movhi	r3,515
 201b368:	18e0b504 	addi	r3,r3,-32044
 201b36c:	1085883a 	add	r2,r2,r2
 201b370:	1085883a 	add	r2,r2,r2
 201b374:	10c5883a 	add	r2,r2,r3
 201b378:	10800017 	ldw	r2,0(r2)
 201b37c:	1004c03a 	cmpne	r2,r2,zero
 201b380:	10003c1e 	bne	r2,zero,201b474 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201b384:	e0bffe03 	ldbu	r2,-8(fp)
 201b388:	00c080f4 	movhi	r3,515
 201b38c:	18e0b504 	addi	r3,r3,-32044
 201b390:	1085883a 	add	r2,r2,r2
 201b394:	1085883a 	add	r2,r2,r2
 201b398:	10c7883a 	add	r3,r2,r3
 201b39c:	00800044 	movi	r2,1
 201b3a0:	18800015 	stw	r2,0(r3)
 201b3a4:	e0bff817 	ldw	r2,-32(fp)
 201b3a8:	e0bff515 	stw	r2,-44(fp)
 201b3ac:	e0bff517 	ldw	r2,-44(fp)
 201b3b0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 201b3b4:	e13ffb17 	ldw	r4,-20(fp)
 201b3b8:	e17ffc17 	ldw	r5,-16(fp)
 201b3bc:	e1bffd17 	ldw	r6,-12(fp)
 201b3c0:	000f883a 	mov	r7,zero
 201b3c4:	201fa140 	call	201fa14 <OSTaskStkInit>
 201b3c8:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 201b3cc:	e13ffe03 	ldbu	r4,-8(fp)
 201b3d0:	d8000015 	stw	zero,0(sp)
 201b3d4:	d8000115 	stw	zero,4(sp)
 201b3d8:	d8000215 	stw	zero,8(sp)
 201b3dc:	e17ffa17 	ldw	r5,-24(fp)
 201b3e0:	000d883a 	mov	r6,zero
 201b3e4:	000f883a 	mov	r7,zero
 201b3e8:	20168b00 	call	20168b0 <OS_TCBInit>
 201b3ec:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 201b3f0:	e0bff903 	ldbu	r2,-28(fp)
 201b3f4:	1004c03a 	cmpne	r2,r2,zero
 201b3f8:	1000081e 	bne	r2,zero,201b41c <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 201b3fc:	008080b4 	movhi	r2,514
 201b400:	1093d744 	addi	r2,r2,20317
 201b404:	10800003 	ldbu	r2,0(r2)
 201b408:	10803fcc 	andi	r2,r2,255
 201b40c:	10800058 	cmpnei	r2,r2,1
 201b410:	1000151e 	bne	r2,zero,201b468 <OSTaskCreate+0x198>
                OS_Sched();
 201b414:	20164a80 	call	20164a8 <OS_Sched>
 201b418:	00001306 	br	201b468 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b41c:	0005303a 	rdctl	r2,status
 201b420:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b424:	e0fff417 	ldw	r3,-48(fp)
 201b428:	00bfff84 	movi	r2,-2
 201b42c:	1884703a 	and	r2,r3,r2
 201b430:	1001703a 	wrctl	status,r2
  
  return context;
 201b434:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201b438:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 201b43c:	e0bffe03 	ldbu	r2,-8(fp)
 201b440:	00c080f4 	movhi	r3,515
 201b444:	18e0b504 	addi	r3,r3,-32044
 201b448:	1085883a 	add	r2,r2,r2
 201b44c:	1085883a 	add	r2,r2,r2
 201b450:	10c5883a 	add	r2,r2,r3
 201b454:	10000015 	stw	zero,0(r2)
 201b458:	e0bff817 	ldw	r2,-32(fp)
 201b45c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b460:	e0bff317 	ldw	r2,-52(fp)
 201b464:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201b468:	e0bff903 	ldbu	r2,-28(fp)
 201b46c:	e0bfff15 	stw	r2,-4(fp)
 201b470:	00000606 	br	201b48c <OSTaskCreate+0x1bc>
 201b474:	e0bff817 	ldw	r2,-32(fp)
 201b478:	e0bff215 	stw	r2,-56(fp)
 201b47c:	e0bff217 	ldw	r2,-56(fp)
 201b480:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201b484:	00800a04 	movi	r2,40
 201b488:	e0bfff15 	stw	r2,-4(fp)
 201b48c:	e0bfff17 	ldw	r2,-4(fp)
}
 201b490:	e037883a 	mov	sp,fp
 201b494:	dfc00117 	ldw	ra,4(sp)
 201b498:	df000017 	ldw	fp,0(sp)
 201b49c:	dec00204 	addi	sp,sp,8
 201b4a0:	f800283a 	ret

0201b4a4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 201b4a4:	deffeb04 	addi	sp,sp,-84
 201b4a8:	dfc01415 	stw	ra,80(sp)
 201b4ac:	df001315 	stw	fp,76(sp)
 201b4b0:	df001304 	addi	fp,sp,76
 201b4b4:	e13ff915 	stw	r4,-28(fp)
 201b4b8:	e17ffa15 	stw	r5,-24(fp)
 201b4bc:	e1bffb15 	stw	r6,-20(fp)
 201b4c0:	e0800217 	ldw	r2,8(fp)
 201b4c4:	e0c00617 	ldw	r3,24(fp)
 201b4c8:	e1fffc05 	stb	r7,-16(fp)
 201b4cc:	e0bffd0d 	sth	r2,-12(fp)
 201b4d0:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 201b4d4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 201b4d8:	e0bffc03 	ldbu	r2,-16(fp)
 201b4dc:	10800570 	cmpltui	r2,r2,21
 201b4e0:	1000031e 	bne	r2,zero,201b4f0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 201b4e4:	00800a84 	movi	r2,42
 201b4e8:	e0bfff15 	stw	r2,-4(fp)
 201b4ec:	00006706 	br	201b68c <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b4f0:	0005303a 	rdctl	r2,status
 201b4f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b4f8:	e0fff517 	ldw	r3,-44(fp)
 201b4fc:	00bfff84 	movi	r2,-2
 201b500:	1884703a 	and	r2,r3,r2
 201b504:	1001703a 	wrctl	status,r2
  
  return context;
 201b508:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201b50c:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 201b510:	008080b4 	movhi	r2,514
 201b514:	1093e504 	addi	r2,r2,20372
 201b518:	10800003 	ldbu	r2,0(r2)
 201b51c:	10803fcc 	andi	r2,r2,255
 201b520:	1005003a 	cmpeq	r2,r2,zero
 201b524:	1000071e 	bne	r2,zero,201b544 <OSTaskCreateExt+0xa0>
 201b528:	e0bff617 	ldw	r2,-40(fp)
 201b52c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b530:	e0bff417 	ldw	r2,-48(fp)
 201b534:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201b538:	00800f04 	movi	r2,60
 201b53c:	e0bfff15 	stw	r2,-4(fp)
 201b540:	00005206 	br	201b68c <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201b544:	e0bffc03 	ldbu	r2,-16(fp)
 201b548:	00c080f4 	movhi	r3,515
 201b54c:	18e0b504 	addi	r3,r3,-32044
 201b550:	1085883a 	add	r2,r2,r2
 201b554:	1085883a 	add	r2,r2,r2
 201b558:	10c5883a 	add	r2,r2,r3
 201b55c:	10800017 	ldw	r2,0(r2)
 201b560:	1004c03a 	cmpne	r2,r2,zero
 201b564:	1000431e 	bne	r2,zero,201b674 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 201b568:	e0bffc03 	ldbu	r2,-16(fp)
 201b56c:	00c080f4 	movhi	r3,515
 201b570:	18e0b504 	addi	r3,r3,-32044
 201b574:	1085883a 	add	r2,r2,r2
 201b578:	1085883a 	add	r2,r2,r2
 201b57c:	10c7883a 	add	r3,r2,r3
 201b580:	00800044 	movi	r2,1
 201b584:	18800015 	stw	r2,0(r3)
 201b588:	e0bff617 	ldw	r2,-40(fp)
 201b58c:	e0bff315 	stw	r2,-52(fp)
 201b590:	e0bff317 	ldw	r2,-52(fp)
 201b594:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 201b598:	e1bffe0b 	ldhu	r6,-8(fp)
 201b59c:	e1000317 	ldw	r4,12(fp)
 201b5a0:	e1400417 	ldw	r5,16(fp)
 201b5a4:	201c7200 	call	201c720 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 201b5a8:	e1fffe0b 	ldhu	r7,-8(fp)
 201b5ac:	e13ff917 	ldw	r4,-28(fp)
 201b5b0:	e17ffa17 	ldw	r5,-24(fp)
 201b5b4:	e1bffb17 	ldw	r6,-20(fp)
 201b5b8:	201fa140 	call	201fa14 <OSTaskStkInit>
 201b5bc:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 201b5c0:	e13ffc03 	ldbu	r4,-16(fp)
 201b5c4:	e1fffd0b 	ldhu	r7,-12(fp)
 201b5c8:	e0fffe0b 	ldhu	r3,-8(fp)
 201b5cc:	e0800417 	ldw	r2,16(fp)
 201b5d0:	d8800015 	stw	r2,0(sp)
 201b5d4:	e0800517 	ldw	r2,20(fp)
 201b5d8:	d8800115 	stw	r2,4(sp)
 201b5dc:	d8c00215 	stw	r3,8(sp)
 201b5e0:	e17ff817 	ldw	r5,-32(fp)
 201b5e4:	e1800317 	ldw	r6,12(fp)
 201b5e8:	20168b00 	call	20168b0 <OS_TCBInit>
 201b5ec:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 201b5f0:	e0bff703 	ldbu	r2,-36(fp)
 201b5f4:	1004c03a 	cmpne	r2,r2,zero
 201b5f8:	1000081e 	bne	r2,zero,201b61c <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 201b5fc:	008080b4 	movhi	r2,514
 201b600:	1093d744 	addi	r2,r2,20317
 201b604:	10800003 	ldbu	r2,0(r2)
 201b608:	10803fcc 	andi	r2,r2,255
 201b60c:	10800058 	cmpnei	r2,r2,1
 201b610:	1000151e 	bne	r2,zero,201b668 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 201b614:	20164a80 	call	20164a8 <OS_Sched>
 201b618:	00001306 	br	201b668 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b61c:	0005303a 	rdctl	r2,status
 201b620:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b624:	e0fff217 	ldw	r3,-56(fp)
 201b628:	00bfff84 	movi	r2,-2
 201b62c:	1884703a 	and	r2,r3,r2
 201b630:	1001703a 	wrctl	status,r2
  
  return context;
 201b634:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 201b638:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 201b63c:	e0bffc03 	ldbu	r2,-16(fp)
 201b640:	00c080f4 	movhi	r3,515
 201b644:	18e0b504 	addi	r3,r3,-32044
 201b648:	1085883a 	add	r2,r2,r2
 201b64c:	1085883a 	add	r2,r2,r2
 201b650:	10c5883a 	add	r2,r2,r3
 201b654:	10000015 	stw	zero,0(r2)
 201b658:	e0bff617 	ldw	r2,-40(fp)
 201b65c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b660:	e0bff117 	ldw	r2,-60(fp)
 201b664:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 201b668:	e0bff703 	ldbu	r2,-36(fp)
 201b66c:	e0bfff15 	stw	r2,-4(fp)
 201b670:	00000606 	br	201b68c <OSTaskCreateExt+0x1e8>
 201b674:	e0bff617 	ldw	r2,-40(fp)
 201b678:	e0bff015 	stw	r2,-64(fp)
 201b67c:	e0bff017 	ldw	r2,-64(fp)
 201b680:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201b684:	00800a04 	movi	r2,40
 201b688:	e0bfff15 	stw	r2,-4(fp)
 201b68c:	e0bfff17 	ldw	r2,-4(fp)
}
 201b690:	e037883a 	mov	sp,fp
 201b694:	dfc00117 	ldw	ra,4(sp)
 201b698:	df000017 	ldw	fp,0(sp)
 201b69c:	dec00204 	addi	sp,sp,8
 201b6a0:	f800283a 	ret

0201b6a4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 201b6a4:	defff304 	addi	sp,sp,-52
 201b6a8:	dfc00c15 	stw	ra,48(sp)
 201b6ac:	df000b15 	stw	fp,44(sp)
 201b6b0:	df000b04 	addi	fp,sp,44
 201b6b4:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 201b6b8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 201b6bc:	008080b4 	movhi	r2,514
 201b6c0:	1093e504 	addi	r2,r2,20372
 201b6c4:	10800003 	ldbu	r2,0(r2)
 201b6c8:	10803fcc 	andi	r2,r2,255
 201b6cc:	1005003a 	cmpeq	r2,r2,zero
 201b6d0:	1000031e 	bne	r2,zero,201b6e0 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 201b6d4:	00801004 	movi	r2,64
 201b6d8:	e0bfff15 	stw	r2,-4(fp)
 201b6dc:	0000ee06 	br	201ba98 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 201b6e0:	e0bffe03 	ldbu	r2,-8(fp)
 201b6e4:	10800518 	cmpnei	r2,r2,20
 201b6e8:	1000031e 	bne	r2,zero,201b6f8 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 201b6ec:	00800f84 	movi	r2,62
 201b6f0:	e0bfff15 	stw	r2,-4(fp)
 201b6f4:	0000e806 	br	201ba98 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 201b6f8:	e0bffe03 	ldbu	r2,-8(fp)
 201b6fc:	10800530 	cmpltui	r2,r2,20
 201b700:	1000061e 	bne	r2,zero,201b71c <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 201b704:	e0bffe03 	ldbu	r2,-8(fp)
 201b708:	10803fe0 	cmpeqi	r2,r2,255
 201b70c:	1000031e 	bne	r2,zero,201b71c <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 201b710:	00800a84 	movi	r2,42
 201b714:	e0bfff15 	stw	r2,-4(fp)
 201b718:	0000df06 	br	201ba98 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b71c:	0005303a 	rdctl	r2,status
 201b720:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b724:	e0fffa17 	ldw	r3,-24(fp)
 201b728:	00bfff84 	movi	r2,-2
 201b72c:	1884703a 	and	r2,r3,r2
 201b730:	1001703a 	wrctl	status,r2
  
  return context;
 201b734:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 201b738:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 201b73c:	e0bffe03 	ldbu	r2,-8(fp)
 201b740:	10803fd8 	cmpnei	r2,r2,255
 201b744:	1000051e 	bne	r2,zero,201b75c <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 201b748:	008080b4 	movhi	r2,514
 201b74c:	1093e604 	addi	r2,r2,20376
 201b750:	10800017 	ldw	r2,0(r2)
 201b754:	10800c83 	ldbu	r2,50(r2)
 201b758:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201b75c:	e0bffe03 	ldbu	r2,-8(fp)
 201b760:	00c080f4 	movhi	r3,515
 201b764:	18e0b504 	addi	r3,r3,-32044
 201b768:	1085883a 	add	r2,r2,r2
 201b76c:	1085883a 	add	r2,r2,r2
 201b770:	10c5883a 	add	r2,r2,r3
 201b774:	10800017 	ldw	r2,0(r2)
 201b778:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 201b77c:	e0bffc17 	ldw	r2,-16(fp)
 201b780:	1004c03a 	cmpne	r2,r2,zero
 201b784:	1000071e 	bne	r2,zero,201b7a4 <OSTaskDel+0x100>
 201b788:	e0bffb17 	ldw	r2,-20(fp)
 201b78c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201b790:	e0bff917 	ldw	r2,-28(fp)
 201b794:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201b798:	008010c4 	movi	r2,67
 201b79c:	e0bfff15 	stw	r2,-4(fp)
 201b7a0:	0000bd06 	br	201ba98 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 201b7a4:	e0bffc17 	ldw	r2,-16(fp)
 201b7a8:	10800058 	cmpnei	r2,r2,1
 201b7ac:	1000071e 	bne	r2,zero,201b7cc <OSTaskDel+0x128>
 201b7b0:	e0bffb17 	ldw	r2,-20(fp)
 201b7b4:	e0bff815 	stw	r2,-32(fp)
 201b7b8:	e0bff817 	ldw	r2,-32(fp)
 201b7bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201b7c0:	00800f44 	movi	r2,61
 201b7c4:	e0bfff15 	stw	r2,-4(fp)
 201b7c8:	0000b306 	br	201ba98 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 201b7cc:	e0bffc17 	ldw	r2,-16(fp)
 201b7d0:	10800d03 	ldbu	r2,52(r2)
 201b7d4:	11003fcc 	andi	r4,r2,255
 201b7d8:	e0bffc17 	ldw	r2,-16(fp)
 201b7dc:	10800d03 	ldbu	r2,52(r2)
 201b7e0:	10c03fcc 	andi	r3,r2,255
 201b7e4:	008080b4 	movhi	r2,514
 201b7e8:	1093e344 	addi	r2,r2,20365
 201b7ec:	10c5883a 	add	r2,r2,r3
 201b7f0:	10800003 	ldbu	r2,0(r2)
 201b7f4:	1007883a 	mov	r3,r2
 201b7f8:	e0bffc17 	ldw	r2,-16(fp)
 201b7fc:	10800d43 	ldbu	r2,53(r2)
 201b800:	0084303a 	nor	r2,zero,r2
 201b804:	1884703a 	and	r2,r3,r2
 201b808:	1007883a 	mov	r3,r2
 201b80c:	008080b4 	movhi	r2,514
 201b810:	1093e344 	addi	r2,r2,20365
 201b814:	1105883a 	add	r2,r2,r4
 201b818:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 201b81c:	e0bffc17 	ldw	r2,-16(fp)
 201b820:	10800d03 	ldbu	r2,52(r2)
 201b824:	10c03fcc 	andi	r3,r2,255
 201b828:	008080b4 	movhi	r2,514
 201b82c:	1093e344 	addi	r2,r2,20365
 201b830:	10c5883a 	add	r2,r2,r3
 201b834:	10800003 	ldbu	r2,0(r2)
 201b838:	10803fcc 	andi	r2,r2,255
 201b83c:	1004c03a 	cmpne	r2,r2,zero
 201b840:	10000c1e 	bne	r2,zero,201b874 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 201b844:	e0bffc17 	ldw	r2,-16(fp)
 201b848:	10800d83 	ldbu	r2,54(r2)
 201b84c:	0084303a 	nor	r2,zero,r2
 201b850:	1007883a 	mov	r3,r2
 201b854:	008080b4 	movhi	r2,514
 201b858:	1093e304 	addi	r2,r2,20364
 201b85c:	10800003 	ldbu	r2,0(r2)
 201b860:	1884703a 	and	r2,r3,r2
 201b864:	1007883a 	mov	r3,r2
 201b868:	008080b4 	movhi	r2,514
 201b86c:	1093e304 	addi	r2,r2,20364
 201b870:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 201b874:	e0bffc17 	ldw	r2,-16(fp)
 201b878:	10800717 	ldw	r2,28(r2)
 201b87c:	1005003a 	cmpeq	r2,r2,zero
 201b880:	1000041e 	bne	r2,zero,201b894 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 201b884:	e0bffc17 	ldw	r2,-16(fp)
 201b888:	11400717 	ldw	r5,28(r2)
 201b88c:	e13ffc17 	ldw	r4,-16(fp)
 201b890:	2015e600 	call	2015e60 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 201b894:	e0bffc17 	ldw	r2,-16(fp)
 201b898:	10800817 	ldw	r2,32(r2)
 201b89c:	1005003a 	cmpeq	r2,r2,zero
 201b8a0:	1000041e 	bne	r2,zero,201b8b4 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 201b8a4:	e0bffc17 	ldw	r2,-16(fp)
 201b8a8:	11400817 	ldw	r5,32(r2)
 201b8ac:	e13ffc17 	ldw	r4,-16(fp)
 201b8b0:	2015f180 	call	2015f18 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 201b8b4:	e0bffc17 	ldw	r2,-16(fp)
 201b8b8:	10800a17 	ldw	r2,40(r2)
 201b8bc:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 201b8c0:	e0bffd17 	ldw	r2,-12(fp)
 201b8c4:	1005003a 	cmpeq	r2,r2,zero
 201b8c8:	1000021e 	bne	r2,zero,201b8d4 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 201b8cc:	e13ffd17 	ldw	r4,-12(fp)
 201b8d0:	20185ac0 	call	20185ac <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 201b8d4:	e0bffc17 	ldw	r2,-16(fp)
 201b8d8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 201b8dc:	e0bffc17 	ldw	r2,-16(fp)
 201b8e0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 201b8e4:	e0bffc17 	ldw	r2,-16(fp)
 201b8e8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 201b8ec:	008080b4 	movhi	r2,514
 201b8f0:	1093d704 	addi	r2,r2,20316
 201b8f4:	10800003 	ldbu	r2,0(r2)
 201b8f8:	10803fcc 	andi	r2,r2,255
 201b8fc:	10803fe0 	cmpeqi	r2,r2,255
 201b900:	1000081e 	bne	r2,zero,201b924 <OSTaskDel+0x280>
        OSLockNesting++;
 201b904:	008080b4 	movhi	r2,514
 201b908:	1093d704 	addi	r2,r2,20316
 201b90c:	10800003 	ldbu	r2,0(r2)
 201b910:	10800044 	addi	r2,r2,1
 201b914:	1007883a 	mov	r3,r2
 201b918:	008080b4 	movhi	r2,514
 201b91c:	1093d704 	addi	r2,r2,20316
 201b920:	10c00005 	stb	r3,0(r2)
 201b924:	e0bffb17 	ldw	r2,-20(fp)
 201b928:	e0bff715 	stw	r2,-36(fp)
 201b92c:	e0bff717 	ldw	r2,-36(fp)
 201b930:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 201b934:	2015a4c0 	call	2015a4c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201b938:	0005303a 	rdctl	r2,status
 201b93c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201b940:	e0fff617 	ldw	r3,-40(fp)
 201b944:	00bfff84 	movi	r2,-2
 201b948:	1884703a 	and	r2,r3,r2
 201b94c:	1001703a 	wrctl	status,r2
  
  return context;
 201b950:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 201b954:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 201b958:	008080b4 	movhi	r2,514
 201b95c:	1093d704 	addi	r2,r2,20316
 201b960:	10800003 	ldbu	r2,0(r2)
 201b964:	10803fcc 	andi	r2,r2,255
 201b968:	1005003a 	cmpeq	r2,r2,zero
 201b96c:	1000081e 	bne	r2,zero,201b990 <OSTaskDel+0x2ec>
        OSLockNesting--;
 201b970:	008080b4 	movhi	r2,514
 201b974:	1093d704 	addi	r2,r2,20316
 201b978:	10800003 	ldbu	r2,0(r2)
 201b97c:	10bfffc4 	addi	r2,r2,-1
 201b980:	1007883a 	mov	r3,r2
 201b984:	008080b4 	movhi	r2,514
 201b988:	1093d704 	addi	r2,r2,20316
 201b98c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 201b990:	e13ffc17 	ldw	r4,-16(fp)
 201b994:	201fd440 	call	201fd44 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 201b998:	008080b4 	movhi	r2,514
 201b99c:	1093df44 	addi	r2,r2,20349
 201b9a0:	10800003 	ldbu	r2,0(r2)
 201b9a4:	10bfffc4 	addi	r2,r2,-1
 201b9a8:	1007883a 	mov	r3,r2
 201b9ac:	008080b4 	movhi	r2,514
 201b9b0:	1093df44 	addi	r2,r2,20349
 201b9b4:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 201b9b8:	e0bffe03 	ldbu	r2,-8(fp)
 201b9bc:	00c080f4 	movhi	r3,515
 201b9c0:	18e0b504 	addi	r3,r3,-32044
 201b9c4:	1085883a 	add	r2,r2,r2
 201b9c8:	1085883a 	add	r2,r2,r2
 201b9cc:	10c5883a 	add	r2,r2,r3
 201b9d0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 201b9d4:	e0bffc17 	ldw	r2,-16(fp)
 201b9d8:	10800617 	ldw	r2,24(r2)
 201b9dc:	1004c03a 	cmpne	r2,r2,zero
 201b9e0:	1000091e 	bne	r2,zero,201ba08 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 201b9e4:	e0bffc17 	ldw	r2,-16(fp)
 201b9e8:	10800517 	ldw	r2,20(r2)
 201b9ec:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 201b9f0:	e0bffc17 	ldw	r2,-16(fp)
 201b9f4:	10c00517 	ldw	r3,20(r2)
 201b9f8:	008080b4 	movhi	r2,514
 201b9fc:	1093da04 	addi	r2,r2,20328
 201ba00:	10c00015 	stw	r3,0(r2)
 201ba04:	00000a06 	br	201ba30 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 201ba08:	e0bffc17 	ldw	r2,-16(fp)
 201ba0c:	10c00617 	ldw	r3,24(r2)
 201ba10:	e0bffc17 	ldw	r2,-16(fp)
 201ba14:	10800517 	ldw	r2,20(r2)
 201ba18:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 201ba1c:	e0bffc17 	ldw	r2,-16(fp)
 201ba20:	10c00517 	ldw	r3,20(r2)
 201ba24:	e0bffc17 	ldw	r2,-16(fp)
 201ba28:	10800617 	ldw	r2,24(r2)
 201ba2c:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 201ba30:	008080b4 	movhi	r2,514
 201ba34:	1093de04 	addi	r2,r2,20344
 201ba38:	10c00017 	ldw	r3,0(r2)
 201ba3c:	e0bffc17 	ldw	r2,-16(fp)
 201ba40:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 201ba44:	00c080b4 	movhi	r3,514
 201ba48:	18d3de04 	addi	r3,r3,20344
 201ba4c:	e0bffc17 	ldw	r2,-16(fp)
 201ba50:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 201ba54:	e0fffc17 	ldw	r3,-16(fp)
 201ba58:	00800fc4 	movi	r2,63
 201ba5c:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 201ba60:	e0bffc17 	ldw	r2,-16(fp)
 201ba64:	10001345 	stb	zero,77(r2)
 201ba68:	e0bffb17 	ldw	r2,-20(fp)
 201ba6c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ba70:	e0bff517 	ldw	r2,-44(fp)
 201ba74:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 201ba78:	008080b4 	movhi	r2,514
 201ba7c:	1093d744 	addi	r2,r2,20317
 201ba80:	10800003 	ldbu	r2,0(r2)
 201ba84:	10803fcc 	andi	r2,r2,255
 201ba88:	10800058 	cmpnei	r2,r2,1
 201ba8c:	1000011e 	bne	r2,zero,201ba94 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 201ba90:	20164a80 	call	20164a8 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201ba94:	e03fff15 	stw	zero,-4(fp)
 201ba98:	e0bfff17 	ldw	r2,-4(fp)
}
 201ba9c:	e037883a 	mov	sp,fp
 201baa0:	dfc00117 	ldw	ra,4(sp)
 201baa4:	df000017 	ldw	fp,0(sp)
 201baa8:	dec00204 	addi	sp,sp,8
 201baac:	f800283a 	ret

0201bab0 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 201bab0:	defff404 	addi	sp,sp,-48
 201bab4:	df000b15 	stw	fp,44(sp)
 201bab8:	df000b04 	addi	fp,sp,44
 201babc:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201bac0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 201bac4:	e0bffe03 	ldbu	r2,-8(fp)
 201bac8:	10800518 	cmpnei	r2,r2,20
 201bacc:	1000031e 	bne	r2,zero,201badc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 201bad0:	00800f84 	movi	r2,62
 201bad4:	e0bfff15 	stw	r2,-4(fp)
 201bad8:	00004c06 	br	201bc0c <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201badc:	e0bffe03 	ldbu	r2,-8(fp)
 201bae0:	10800530 	cmpltui	r2,r2,20
 201bae4:	1000061e 	bne	r2,zero,201bb00 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 201bae8:	e0bffe03 	ldbu	r2,-8(fp)
 201baec:	10803fe0 	cmpeqi	r2,r2,255
 201baf0:	1000031e 	bne	r2,zero,201bb00 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 201baf4:	00800a84 	movi	r2,42
 201baf8:	e0bfff15 	stw	r2,-4(fp)
 201bafc:	00004306 	br	201bc0c <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 201bb00:	e0bffe03 	ldbu	r2,-8(fp)
 201bb04:	10803fd8 	cmpnei	r2,r2,255
 201bb08:	1000141e 	bne	r2,zero,201bb5c <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bb0c:	0005303a 	rdctl	r2,status
 201bb10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bb14:	e0fffa17 	ldw	r3,-24(fp)
 201bb18:	00bfff84 	movi	r2,-2
 201bb1c:	1884703a 	and	r2,r3,r2
 201bb20:	1001703a 	wrctl	status,r2
  
  return context;
 201bb24:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 201bb28:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 201bb2c:	008080b4 	movhi	r2,514
 201bb30:	1093e604 	addi	r2,r2,20376
 201bb34:	10800017 	ldw	r2,0(r2)
 201bb38:	10800dc3 	ldbu	r2,55(r2)
 201bb3c:	e0bffd05 	stb	r2,-12(fp)
 201bb40:	e0bffb17 	ldw	r2,-20(fp)
 201bb44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bb48:	e0bff917 	ldw	r2,-28(fp)
 201bb4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 201bb50:	e0bffd03 	ldbu	r2,-12(fp)
 201bb54:	e0bfff15 	stw	r2,-4(fp)
 201bb58:	00002c06 	br	201bc0c <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bb5c:	0005303a 	rdctl	r2,status
 201bb60:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bb64:	e0fff817 	ldw	r3,-32(fp)
 201bb68:	00bfff84 	movi	r2,-2
 201bb6c:	1884703a 	and	r2,r3,r2
 201bb70:	1001703a 	wrctl	status,r2
  
  return context;
 201bb74:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 201bb78:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 201bb7c:	e0bffe03 	ldbu	r2,-8(fp)
 201bb80:	00c080f4 	movhi	r3,515
 201bb84:	18e0b504 	addi	r3,r3,-32044
 201bb88:	1085883a 	add	r2,r2,r2
 201bb8c:	1085883a 	add	r2,r2,r2
 201bb90:	10c5883a 	add	r2,r2,r3
 201bb94:	10800017 	ldw	r2,0(r2)
 201bb98:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 201bb9c:	e0bffc17 	ldw	r2,-16(fp)
 201bba0:	1004c03a 	cmpne	r2,r2,zero
 201bba4:	1000071e 	bne	r2,zero,201bbc4 <OSTaskDelReq+0x114>
 201bba8:	e0bffb17 	ldw	r2,-20(fp)
 201bbac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bbb0:	e0bff717 	ldw	r2,-36(fp)
 201bbb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 201bbb8:	008010c4 	movi	r2,67
 201bbbc:	e0bfff15 	stw	r2,-4(fp)
 201bbc0:	00001206 	br	201bc0c <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 201bbc4:	e0bffc17 	ldw	r2,-16(fp)
 201bbc8:	10800058 	cmpnei	r2,r2,1
 201bbcc:	1000071e 	bne	r2,zero,201bbec <OSTaskDelReq+0x13c>
 201bbd0:	e0bffb17 	ldw	r2,-20(fp)
 201bbd4:	e0bff615 	stw	r2,-40(fp)
 201bbd8:	e0bff617 	ldw	r2,-40(fp)
 201bbdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 201bbe0:	00800f44 	movi	r2,61
 201bbe4:	e0bfff15 	stw	r2,-4(fp)
 201bbe8:	00000806 	br	201bc0c <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 201bbec:	e0fffc17 	ldw	r3,-16(fp)
 201bbf0:	00800fc4 	movi	r2,63
 201bbf4:	18800dc5 	stb	r2,55(r3)
 201bbf8:	e0bffb17 	ldw	r2,-20(fp)
 201bbfc:	e0bff515 	stw	r2,-44(fp)
 201bc00:	e0bff517 	ldw	r2,-44(fp)
 201bc04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201bc08:	e03fff15 	stw	zero,-4(fp)
 201bc0c:	e0bfff17 	ldw	r2,-4(fp)
}
 201bc10:	e037883a 	mov	sp,fp
 201bc14:	df000017 	ldw	fp,0(sp)
 201bc18:	dec00104 	addi	sp,sp,4
 201bc1c:	f800283a 	ret

0201bc20 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201bc20:	defff304 	addi	sp,sp,-52
 201bc24:	dfc00c15 	stw	ra,48(sp)
 201bc28:	df000b15 	stw	fp,44(sp)
 201bc2c:	df000b04 	addi	fp,sp,44
 201bc30:	e17ffd15 	stw	r5,-12(fp)
 201bc34:	e1bffe15 	stw	r6,-8(fp)
 201bc38:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 201bc3c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 201bc40:	e0bffe17 	ldw	r2,-8(fp)
 201bc44:	1004c03a 	cmpne	r2,r2,zero
 201bc48:	1000021e 	bne	r2,zero,201bc54 <OSTaskNameGet+0x34>
        return (0);
 201bc4c:	e03fff15 	stw	zero,-4(fp)
 201bc50:	00005b06 	br	201bdc0 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 201bc54:	e0bffc03 	ldbu	r2,-16(fp)
 201bc58:	10800570 	cmpltui	r2,r2,21
 201bc5c:	1000081e 	bne	r2,zero,201bc80 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 201bc60:	e0bffc03 	ldbu	r2,-16(fp)
 201bc64:	10803fe0 	cmpeqi	r2,r2,255
 201bc68:	1000051e 	bne	r2,zero,201bc80 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 201bc6c:	e0fffe17 	ldw	r3,-8(fp)
 201bc70:	00800a84 	movi	r2,42
 201bc74:	18800005 	stb	r2,0(r3)
            return (0);
 201bc78:	e03fff15 	stw	zero,-4(fp)
 201bc7c:	00005006 	br	201bdc0 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 201bc80:	e0bffd17 	ldw	r2,-12(fp)
 201bc84:	1004c03a 	cmpne	r2,r2,zero
 201bc88:	1000051e 	bne	r2,zero,201bca0 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 201bc8c:	e0fffe17 	ldw	r3,-8(fp)
 201bc90:	00800304 	movi	r2,12
 201bc94:	18800005 	stb	r2,0(r3)
        return (0);
 201bc98:	e03fff15 	stw	zero,-4(fp)
 201bc9c:	00004806 	br	201bdc0 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 201bca0:	008080b4 	movhi	r2,514
 201bca4:	1093e504 	addi	r2,r2,20372
 201bca8:	10800003 	ldbu	r2,0(r2)
 201bcac:	10803fcc 	andi	r2,r2,255
 201bcb0:	1005003a 	cmpeq	r2,r2,zero
 201bcb4:	1000051e 	bne	r2,zero,201bccc <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 201bcb8:	e0fffe17 	ldw	r3,-8(fp)
 201bcbc:	00800444 	movi	r2,17
 201bcc0:	18800005 	stb	r2,0(r3)
        return (0);
 201bcc4:	e03fff15 	stw	zero,-4(fp)
 201bcc8:	00003d06 	br	201bdc0 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bccc:	0005303a 	rdctl	r2,status
 201bcd0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bcd4:	e0fff817 	ldw	r3,-32(fp)
 201bcd8:	00bfff84 	movi	r2,-2
 201bcdc:	1884703a 	and	r2,r3,r2
 201bce0:	1001703a 	wrctl	status,r2
  
  return context;
 201bce4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 201bce8:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 201bcec:	e0bffc03 	ldbu	r2,-16(fp)
 201bcf0:	10803fd8 	cmpnei	r2,r2,255
 201bcf4:	1000051e 	bne	r2,zero,201bd0c <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 201bcf8:	008080b4 	movhi	r2,514
 201bcfc:	1093e604 	addi	r2,r2,20376
 201bd00:	10800017 	ldw	r2,0(r2)
 201bd04:	10800c83 	ldbu	r2,50(r2)
 201bd08:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201bd0c:	e0bffc03 	ldbu	r2,-16(fp)
 201bd10:	00c080f4 	movhi	r3,515
 201bd14:	18e0b504 	addi	r3,r3,-32044
 201bd18:	1085883a 	add	r2,r2,r2
 201bd1c:	1085883a 	add	r2,r2,r2
 201bd20:	10c5883a 	add	r2,r2,r3
 201bd24:	10800017 	ldw	r2,0(r2)
 201bd28:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 201bd2c:	e0bffb17 	ldw	r2,-20(fp)
 201bd30:	1004c03a 	cmpne	r2,r2,zero
 201bd34:	1000091e 	bne	r2,zero,201bd5c <OSTaskNameGet+0x13c>
 201bd38:	e0bff917 	ldw	r2,-28(fp)
 201bd3c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bd40:	e0bff717 	ldw	r2,-36(fp)
 201bd44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201bd48:	e0fffe17 	ldw	r3,-8(fp)
 201bd4c:	008010c4 	movi	r2,67
 201bd50:	18800005 	stb	r2,0(r3)
        return (0);
 201bd54:	e03fff15 	stw	zero,-4(fp)
 201bd58:	00001906 	br	201bdc0 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 201bd5c:	e0bffb17 	ldw	r2,-20(fp)
 201bd60:	10800058 	cmpnei	r2,r2,1
 201bd64:	1000091e 	bne	r2,zero,201bd8c <OSTaskNameGet+0x16c>
 201bd68:	e0bff917 	ldw	r2,-28(fp)
 201bd6c:	e0bff615 	stw	r2,-40(fp)
 201bd70:	e0bff617 	ldw	r2,-40(fp)
 201bd74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201bd78:	e0fffe17 	ldw	r3,-8(fp)
 201bd7c:	008010c4 	movi	r2,67
 201bd80:	18800005 	stb	r2,0(r3)
        return (0);
 201bd84:	e03fff15 	stw	zero,-4(fp)
 201bd88:	00000d06 	br	201bdc0 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 201bd8c:	e0bffb17 	ldw	r2,-20(fp)
 201bd90:	11401304 	addi	r5,r2,76
 201bd94:	e13ffd17 	ldw	r4,-12(fp)
 201bd98:	20165ec0 	call	20165ec <OS_StrCopy>
 201bd9c:	e0bffa05 	stb	r2,-24(fp)
 201bda0:	e0bff917 	ldw	r2,-28(fp)
 201bda4:	e0bff515 	stw	r2,-44(fp)
 201bda8:	e0bff517 	ldw	r2,-44(fp)
 201bdac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201bdb0:	e0bffe17 	ldw	r2,-8(fp)
 201bdb4:	10000005 	stb	zero,0(r2)
    return (len);
 201bdb8:	e0bffa03 	ldbu	r2,-24(fp)
 201bdbc:	e0bfff15 	stw	r2,-4(fp)
 201bdc0:	e0bfff17 	ldw	r2,-4(fp)
}
 201bdc4:	e037883a 	mov	sp,fp
 201bdc8:	dfc00117 	ldw	ra,4(sp)
 201bdcc:	df000017 	ldw	fp,0(sp)
 201bdd0:	dec00204 	addi	sp,sp,8
 201bdd4:	f800283a 	ret

0201bdd8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 201bdd8:	defff304 	addi	sp,sp,-52
 201bddc:	dfc00c15 	stw	ra,48(sp)
 201bde0:	df000b15 	stw	fp,44(sp)
 201bde4:	df000b04 	addi	fp,sp,44
 201bde8:	e17ffe15 	stw	r5,-8(fp)
 201bdec:	e1bfff15 	stw	r6,-4(fp)
 201bdf0:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201bdf4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 201bdf8:	e0bfff17 	ldw	r2,-4(fp)
 201bdfc:	1005003a 	cmpeq	r2,r2,zero
 201be00:	1000611e 	bne	r2,zero,201bf88 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 201be04:	e0bffd03 	ldbu	r2,-12(fp)
 201be08:	10800570 	cmpltui	r2,r2,21
 201be0c:	1000071e 	bne	r2,zero,201be2c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 201be10:	e0bffd03 	ldbu	r2,-12(fp)
 201be14:	10803fe0 	cmpeqi	r2,r2,255
 201be18:	1000041e 	bne	r2,zero,201be2c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 201be1c:	e0ffff17 	ldw	r3,-4(fp)
 201be20:	00800a84 	movi	r2,42
 201be24:	18800005 	stb	r2,0(r3)
            return;
 201be28:	00005706 	br	201bf88 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 201be2c:	e0bffe17 	ldw	r2,-8(fp)
 201be30:	1004c03a 	cmpne	r2,r2,zero
 201be34:	1000041e 	bne	r2,zero,201be48 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 201be38:	e0ffff17 	ldw	r3,-4(fp)
 201be3c:	00800304 	movi	r2,12
 201be40:	18800005 	stb	r2,0(r3)
        return;
 201be44:	00005006 	br	201bf88 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 201be48:	008080b4 	movhi	r2,514
 201be4c:	1093e504 	addi	r2,r2,20372
 201be50:	10800003 	ldbu	r2,0(r2)
 201be54:	10803fcc 	andi	r2,r2,255
 201be58:	1005003a 	cmpeq	r2,r2,zero
 201be5c:	1000041e 	bne	r2,zero,201be70 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 201be60:	e0ffff17 	ldw	r3,-4(fp)
 201be64:	00800484 	movi	r2,18
 201be68:	18800005 	stb	r2,0(r3)
        return;
 201be6c:	00004606 	br	201bf88 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201be70:	0005303a 	rdctl	r2,status
 201be74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201be78:	e0fff917 	ldw	r3,-28(fp)
 201be7c:	00bfff84 	movi	r2,-2
 201be80:	1884703a 	and	r2,r3,r2
 201be84:	1001703a 	wrctl	status,r2
  
  return context;
 201be88:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 201be8c:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 201be90:	e0bffd03 	ldbu	r2,-12(fp)
 201be94:	10803fd8 	cmpnei	r2,r2,255
 201be98:	1000051e 	bne	r2,zero,201beb0 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 201be9c:	008080b4 	movhi	r2,514
 201bea0:	1093e604 	addi	r2,r2,20376
 201bea4:	10800017 	ldw	r2,0(r2)
 201bea8:	10800c83 	ldbu	r2,50(r2)
 201beac:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201beb0:	e0bffd03 	ldbu	r2,-12(fp)
 201beb4:	00c080f4 	movhi	r3,515
 201beb8:	18e0b504 	addi	r3,r3,-32044
 201bebc:	1085883a 	add	r2,r2,r2
 201bec0:	1085883a 	add	r2,r2,r2
 201bec4:	10c5883a 	add	r2,r2,r3
 201bec8:	10800017 	ldw	r2,0(r2)
 201becc:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 201bed0:	e0bffb17 	ldw	r2,-20(fp)
 201bed4:	1004c03a 	cmpne	r2,r2,zero
 201bed8:	1000081e 	bne	r2,zero,201befc <OSTaskNameSet+0x124>
 201bedc:	e0bffa17 	ldw	r2,-24(fp)
 201bee0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201bee4:	e0bff817 	ldw	r2,-32(fp)
 201bee8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201beec:	e0ffff17 	ldw	r3,-4(fp)
 201bef0:	008010c4 	movi	r2,67
 201bef4:	18800005 	stb	r2,0(r3)
        return;
 201bef8:	00002306 	br	201bf88 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 201befc:	e0bffb17 	ldw	r2,-20(fp)
 201bf00:	10800058 	cmpnei	r2,r2,1
 201bf04:	1000081e 	bne	r2,zero,201bf28 <OSTaskNameSet+0x150>
 201bf08:	e0bffa17 	ldw	r2,-24(fp)
 201bf0c:	e0bff715 	stw	r2,-36(fp)
 201bf10:	e0bff717 	ldw	r2,-36(fp)
 201bf14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 201bf18:	e0ffff17 	ldw	r3,-4(fp)
 201bf1c:	008010c4 	movi	r2,67
 201bf20:	18800005 	stb	r2,0(r3)
        return;
 201bf24:	00001806 	br	201bf88 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 201bf28:	e13ffe17 	ldw	r4,-8(fp)
 201bf2c:	201666c0 	call	201666c <OS_StrLen>
 201bf30:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 201bf34:	e0bffc03 	ldbu	r2,-16(fp)
 201bf38:	10800830 	cmpltui	r2,r2,32
 201bf3c:	1000081e 	bne	r2,zero,201bf60 <OSTaskNameSet+0x188>
 201bf40:	e0bffa17 	ldw	r2,-24(fp)
 201bf44:	e0bff615 	stw	r2,-40(fp)
 201bf48:	e0bff617 	ldw	r2,-40(fp)
 201bf4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 201bf50:	e0ffff17 	ldw	r3,-4(fp)
 201bf54:	00801044 	movi	r2,65
 201bf58:	18800005 	stb	r2,0(r3)
        return;
 201bf5c:	00000a06 	br	201bf88 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 201bf60:	e0bffb17 	ldw	r2,-20(fp)
 201bf64:	11001304 	addi	r4,r2,76
 201bf68:	e17ffe17 	ldw	r5,-8(fp)
 201bf6c:	20165ec0 	call	20165ec <OS_StrCopy>
 201bf70:	e0bffa17 	ldw	r2,-24(fp)
 201bf74:	e0bff515 	stw	r2,-44(fp)
 201bf78:	e0bff517 	ldw	r2,-44(fp)
 201bf7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201bf80:	e0bfff17 	ldw	r2,-4(fp)
 201bf84:	10000005 	stb	zero,0(r2)
}
 201bf88:	e037883a 	mov	sp,fp
 201bf8c:	dfc00117 	ldw	ra,4(sp)
 201bf90:	df000017 	ldw	fp,0(sp)
 201bf94:	dec00204 	addi	sp,sp,8
 201bf98:	f800283a 	ret

0201bf9c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 201bf9c:	defff304 	addi	sp,sp,-52
 201bfa0:	dfc00c15 	stw	ra,48(sp)
 201bfa4:	df000b15 	stw	fp,44(sp)
 201bfa8:	df000b04 	addi	fp,sp,44
 201bfac:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201bfb0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 201bfb4:	e0bffe03 	ldbu	r2,-8(fp)
 201bfb8:	10800530 	cmpltui	r2,r2,20
 201bfbc:	1000031e 	bne	r2,zero,201bfcc <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201bfc0:	00800a84 	movi	r2,42
 201bfc4:	e0bfff15 	stw	r2,-4(fp)
 201bfc8:	00007406 	br	201c19c <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201bfcc:	0005303a 	rdctl	r2,status
 201bfd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201bfd4:	e0fffb17 	ldw	r3,-20(fp)
 201bfd8:	00bfff84 	movi	r2,-2
 201bfdc:	1884703a 	and	r2,r3,r2
 201bfe0:	1001703a 	wrctl	status,r2
  
  return context;
 201bfe4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201bfe8:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 201bfec:	e0bffe03 	ldbu	r2,-8(fp)
 201bff0:	00c080f4 	movhi	r3,515
 201bff4:	18e0b504 	addi	r3,r3,-32044
 201bff8:	1085883a 	add	r2,r2,r2
 201bffc:	1085883a 	add	r2,r2,r2
 201c000:	10c5883a 	add	r2,r2,r3
 201c004:	10800017 	ldw	r2,0(r2)
 201c008:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 201c00c:	e0bffd17 	ldw	r2,-12(fp)
 201c010:	1004c03a 	cmpne	r2,r2,zero
 201c014:	1000071e 	bne	r2,zero,201c034 <OSTaskResume+0x98>
 201c018:	e0bffc17 	ldw	r2,-16(fp)
 201c01c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c020:	e0bffa17 	ldw	r2,-24(fp)
 201c024:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 201c028:	00801184 	movi	r2,70
 201c02c:	e0bfff15 	stw	r2,-4(fp)
 201c030:	00005a06 	br	201c19c <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 201c034:	e0bffd17 	ldw	r2,-12(fp)
 201c038:	10800058 	cmpnei	r2,r2,1
 201c03c:	1000071e 	bne	r2,zero,201c05c <OSTaskResume+0xc0>
 201c040:	e0bffc17 	ldw	r2,-16(fp)
 201c044:	e0bff915 	stw	r2,-28(fp)
 201c048:	e0bff917 	ldw	r2,-28(fp)
 201c04c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201c050:	008010c4 	movi	r2,67
 201c054:	e0bfff15 	stw	r2,-4(fp)
 201c058:	00005006 	br	201c19c <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 201c05c:	e0bffd17 	ldw	r2,-12(fp)
 201c060:	10800c03 	ldbu	r2,48(r2)
 201c064:	10803fcc 	andi	r2,r2,255
 201c068:	1080020c 	andi	r2,r2,8
 201c06c:	1005003a 	cmpeq	r2,r2,zero
 201c070:	1000441e 	bne	r2,zero,201c184 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 201c074:	e0bffd17 	ldw	r2,-12(fp)
 201c078:	10c00c03 	ldbu	r3,48(r2)
 201c07c:	00bffdc4 	movi	r2,-9
 201c080:	1884703a 	and	r2,r3,r2
 201c084:	1007883a 	mov	r3,r2
 201c088:	e0bffd17 	ldw	r2,-12(fp)
 201c08c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 201c090:	e0bffd17 	ldw	r2,-12(fp)
 201c094:	10800c03 	ldbu	r2,48(r2)
 201c098:	10803fcc 	andi	r2,r2,255
 201c09c:	1004c03a 	cmpne	r2,r2,zero
 201c0a0:	1000321e 	bne	r2,zero,201c16c <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 201c0a4:	e0bffd17 	ldw	r2,-12(fp)
 201c0a8:	10800b8b 	ldhu	r2,46(r2)
 201c0ac:	10bfffcc 	andi	r2,r2,65535
 201c0b0:	1004c03a 	cmpne	r2,r2,zero
 201c0b4:	1000281e 	bne	r2,zero,201c158 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 201c0b8:	e0bffd17 	ldw	r2,-12(fp)
 201c0bc:	10c00d83 	ldbu	r3,54(r2)
 201c0c0:	008080b4 	movhi	r2,514
 201c0c4:	1093e304 	addi	r2,r2,20364
 201c0c8:	10800003 	ldbu	r2,0(r2)
 201c0cc:	1884b03a 	or	r2,r3,r2
 201c0d0:	1007883a 	mov	r3,r2
 201c0d4:	008080b4 	movhi	r2,514
 201c0d8:	1093e304 	addi	r2,r2,20364
 201c0dc:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201c0e0:	e0bffd17 	ldw	r2,-12(fp)
 201c0e4:	10800d03 	ldbu	r2,52(r2)
 201c0e8:	11003fcc 	andi	r4,r2,255
 201c0ec:	e0bffd17 	ldw	r2,-12(fp)
 201c0f0:	10800d03 	ldbu	r2,52(r2)
 201c0f4:	10c03fcc 	andi	r3,r2,255
 201c0f8:	008080b4 	movhi	r2,514
 201c0fc:	1093e344 	addi	r2,r2,20365
 201c100:	10c5883a 	add	r2,r2,r3
 201c104:	10c00003 	ldbu	r3,0(r2)
 201c108:	e0bffd17 	ldw	r2,-12(fp)
 201c10c:	10800d43 	ldbu	r2,53(r2)
 201c110:	1884b03a 	or	r2,r3,r2
 201c114:	1007883a 	mov	r3,r2
 201c118:	008080b4 	movhi	r2,514
 201c11c:	1093e344 	addi	r2,r2,20365
 201c120:	1105883a 	add	r2,r2,r4
 201c124:	10c00005 	stb	r3,0(r2)
 201c128:	e0bffc17 	ldw	r2,-16(fp)
 201c12c:	e0bff815 	stw	r2,-32(fp)
 201c130:	e0bff817 	ldw	r2,-32(fp)
 201c134:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 201c138:	008080b4 	movhi	r2,514
 201c13c:	1093d744 	addi	r2,r2,20317
 201c140:	10800003 	ldbu	r2,0(r2)
 201c144:	10803fcc 	andi	r2,r2,255
 201c148:	10800058 	cmpnei	r2,r2,1
 201c14c:	10000b1e 	bne	r2,zero,201c17c <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 201c150:	20164a80 	call	20164a8 <OS_Sched>
 201c154:	00000906 	br	201c17c <OSTaskResume+0x1e0>
 201c158:	e0bffc17 	ldw	r2,-16(fp)
 201c15c:	e0bff715 	stw	r2,-36(fp)
 201c160:	e0bff717 	ldw	r2,-36(fp)
 201c164:	1001703a 	wrctl	status,r2
 201c168:	00000406 	br	201c17c <OSTaskResume+0x1e0>
 201c16c:	e0bffc17 	ldw	r2,-16(fp)
 201c170:	e0bff615 	stw	r2,-40(fp)
 201c174:	e0bff617 	ldw	r2,-40(fp)
 201c178:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 201c17c:	e03fff15 	stw	zero,-4(fp)
 201c180:	00000606 	br	201c19c <OSTaskResume+0x200>
 201c184:	e0bffc17 	ldw	r2,-16(fp)
 201c188:	e0bff515 	stw	r2,-44(fp)
 201c18c:	e0bff517 	ldw	r2,-44(fp)
 201c190:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 201c194:	00801104 	movi	r2,68
 201c198:	e0bfff15 	stw	r2,-4(fp)
 201c19c:	e0bfff17 	ldw	r2,-4(fp)
}
 201c1a0:	e037883a 	mov	sp,fp
 201c1a4:	dfc00117 	ldw	ra,4(sp)
 201c1a8:	df000017 	ldw	fp,0(sp)
 201c1ac:	dec00204 	addi	sp,sp,8
 201c1b0:	f800283a 	ret

0201c1b4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 201c1b4:	defff204 	addi	sp,sp,-56
 201c1b8:	df000d15 	stw	fp,52(sp)
 201c1bc:	df000d04 	addi	fp,sp,52
 201c1c0:	e17ffe15 	stw	r5,-8(fp)
 201c1c4:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201c1c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 201c1cc:	e0bffd03 	ldbu	r2,-12(fp)
 201c1d0:	10800570 	cmpltui	r2,r2,21
 201c1d4:	1000061e 	bne	r2,zero,201c1f0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 201c1d8:	e0bffd03 	ldbu	r2,-12(fp)
 201c1dc:	10803fe0 	cmpeqi	r2,r2,255
 201c1e0:	1000031e 	bne	r2,zero,201c1f0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 201c1e4:	00800a84 	movi	r2,42
 201c1e8:	e0bfff15 	stw	r2,-4(fp)
 201c1ec:	00006b06 	br	201c39c <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 201c1f0:	e0bffe17 	ldw	r2,-8(fp)
 201c1f4:	1004c03a 	cmpne	r2,r2,zero
 201c1f8:	1000031e 	bne	r2,zero,201c208 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 201c1fc:	00800244 	movi	r2,9
 201c200:	e0bfff15 	stw	r2,-4(fp)
 201c204:	00006506 	br	201c39c <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 201c208:	e0bffe17 	ldw	r2,-8(fp)
 201c20c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 201c210:	e0bffe17 	ldw	r2,-8(fp)
 201c214:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c218:	0005303a 	rdctl	r2,status
 201c21c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c220:	e0fff717 	ldw	r3,-36(fp)
 201c224:	00bfff84 	movi	r2,-2
 201c228:	1884703a 	and	r2,r3,r2
 201c22c:	1001703a 	wrctl	status,r2
  
  return context;
 201c230:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 201c234:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 201c238:	e0bffd03 	ldbu	r2,-12(fp)
 201c23c:	10803fd8 	cmpnei	r2,r2,255
 201c240:	1000051e 	bne	r2,zero,201c258 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 201c244:	008080b4 	movhi	r2,514
 201c248:	1093e604 	addi	r2,r2,20376
 201c24c:	10800017 	ldw	r2,0(r2)
 201c250:	10800c83 	ldbu	r2,50(r2)
 201c254:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201c258:	e0bffd03 	ldbu	r2,-12(fp)
 201c25c:	00c080f4 	movhi	r3,515
 201c260:	18e0b504 	addi	r3,r3,-32044
 201c264:	1085883a 	add	r2,r2,r2
 201c268:	1085883a 	add	r2,r2,r2
 201c26c:	10c5883a 	add	r2,r2,r3
 201c270:	10800017 	ldw	r2,0(r2)
 201c274:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 201c278:	e0bffc17 	ldw	r2,-16(fp)
 201c27c:	1004c03a 	cmpne	r2,r2,zero
 201c280:	1000071e 	bne	r2,zero,201c2a0 <OSTaskStkChk+0xec>
 201c284:	e0bff817 	ldw	r2,-32(fp)
 201c288:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c28c:	e0bff617 	ldw	r2,-40(fp)
 201c290:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201c294:	008010c4 	movi	r2,67
 201c298:	e0bfff15 	stw	r2,-4(fp)
 201c29c:	00003f06 	br	201c39c <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201c2a0:	e0bffc17 	ldw	r2,-16(fp)
 201c2a4:	10800058 	cmpnei	r2,r2,1
 201c2a8:	1000071e 	bne	r2,zero,201c2c8 <OSTaskStkChk+0x114>
 201c2ac:	e0bff817 	ldw	r2,-32(fp)
 201c2b0:	e0bff515 	stw	r2,-44(fp)
 201c2b4:	e0bff517 	ldw	r2,-44(fp)
 201c2b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201c2bc:	008010c4 	movi	r2,67
 201c2c0:	e0bfff15 	stw	r2,-4(fp)
 201c2c4:	00003506 	br	201c39c <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 201c2c8:	e0bffc17 	ldw	r2,-16(fp)
 201c2cc:	1080040b 	ldhu	r2,16(r2)
 201c2d0:	10bfffcc 	andi	r2,r2,65535
 201c2d4:	1080004c 	andi	r2,r2,1
 201c2d8:	1004c03a 	cmpne	r2,r2,zero
 201c2dc:	1000071e 	bne	r2,zero,201c2fc <OSTaskStkChk+0x148>
 201c2e0:	e0bff817 	ldw	r2,-32(fp)
 201c2e4:	e0bff415 	stw	r2,-48(fp)
 201c2e8:	e0bff417 	ldw	r2,-48(fp)
 201c2ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 201c2f0:	00801144 	movi	r2,69
 201c2f4:	e0bfff15 	stw	r2,-4(fp)
 201c2f8:	00002806 	br	201c39c <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 201c2fc:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 201c300:	e0bffc17 	ldw	r2,-16(fp)
 201c304:	10800317 	ldw	r2,12(r2)
 201c308:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 201c30c:	e0bffc17 	ldw	r2,-16(fp)
 201c310:	10800217 	ldw	r2,8(r2)
 201c314:	e0bffb15 	stw	r2,-20(fp)
 201c318:	e0bff817 	ldw	r2,-32(fp)
 201c31c:	e0bff315 	stw	r2,-52(fp)
 201c320:	e0bff317 	ldw	r2,-52(fp)
 201c324:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201c328:	00000306 	br	201c338 <OSTaskStkChk+0x184>
        nfree++;
 201c32c:	e0bffa17 	ldw	r2,-24(fp)
 201c330:	10800044 	addi	r2,r2,1
 201c334:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 201c338:	e0bffb17 	ldw	r2,-20(fp)
 201c33c:	10800017 	ldw	r2,0(r2)
 201c340:	1005003a 	cmpeq	r2,r2,zero
 201c344:	1007883a 	mov	r3,r2
 201c348:	e0bffb17 	ldw	r2,-20(fp)
 201c34c:	10800104 	addi	r2,r2,4
 201c350:	e0bffb15 	stw	r2,-20(fp)
 201c354:	18803fcc 	andi	r2,r3,255
 201c358:	1004c03a 	cmpne	r2,r2,zero
 201c35c:	103ff31e 	bne	r2,zero,201c32c <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 201c360:	e0bffa17 	ldw	r2,-24(fp)
 201c364:	1085883a 	add	r2,r2,r2
 201c368:	1085883a 	add	r2,r2,r2
 201c36c:	1007883a 	mov	r3,r2
 201c370:	e0bffe17 	ldw	r2,-8(fp)
 201c374:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 201c378:	e0fff917 	ldw	r3,-28(fp)
 201c37c:	e0bffa17 	ldw	r2,-24(fp)
 201c380:	1885c83a 	sub	r2,r3,r2
 201c384:	1085883a 	add	r2,r2,r2
 201c388:	1085883a 	add	r2,r2,r2
 201c38c:	1007883a 	mov	r3,r2
 201c390:	e0bffe17 	ldw	r2,-8(fp)
 201c394:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 201c398:	e03fff15 	stw	zero,-4(fp)
 201c39c:	e0bfff17 	ldw	r2,-4(fp)
}
 201c3a0:	e037883a 	mov	sp,fp
 201c3a4:	df000017 	ldw	fp,0(sp)
 201c3a8:	dec00104 	addi	sp,sp,4
 201c3ac:	f800283a 	ret

0201c3b0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 201c3b0:	defff404 	addi	sp,sp,-48
 201c3b4:	dfc00b15 	stw	ra,44(sp)
 201c3b8:	df000a15 	stw	fp,40(sp)
 201c3bc:	df000a04 	addi	fp,sp,40
 201c3c0:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c3c4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 201c3c8:	e0bffe03 	ldbu	r2,-8(fp)
 201c3cc:	10800518 	cmpnei	r2,r2,20
 201c3d0:	1000031e 	bne	r2,zero,201c3e0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 201c3d4:	008011c4 	movi	r2,71
 201c3d8:	e0bfff15 	stw	r2,-4(fp)
 201c3dc:	00007906 	br	201c5c4 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 201c3e0:	e0bffe03 	ldbu	r2,-8(fp)
 201c3e4:	10800530 	cmpltui	r2,r2,20
 201c3e8:	1000061e 	bne	r2,zero,201c404 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 201c3ec:	e0bffe03 	ldbu	r2,-8(fp)
 201c3f0:	10803fe0 	cmpeqi	r2,r2,255
 201c3f4:	1000031e 	bne	r2,zero,201c404 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 201c3f8:	00800a84 	movi	r2,42
 201c3fc:	e0bfff15 	stw	r2,-4(fp)
 201c400:	00007006 	br	201c5c4 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c404:	0005303a 	rdctl	r2,status
 201c408:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c40c:	e0fff917 	ldw	r3,-28(fp)
 201c410:	00bfff84 	movi	r2,-2
 201c414:	1884703a 	and	r2,r3,r2
 201c418:	1001703a 	wrctl	status,r2
  
  return context;
 201c41c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 201c420:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 201c424:	e0bffe03 	ldbu	r2,-8(fp)
 201c428:	10803fd8 	cmpnei	r2,r2,255
 201c42c:	1000081e 	bne	r2,zero,201c450 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 201c430:	008080b4 	movhi	r2,514
 201c434:	1093e604 	addi	r2,r2,20376
 201c438:	10800017 	ldw	r2,0(r2)
 201c43c:	10800c83 	ldbu	r2,50(r2)
 201c440:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 201c444:	00800044 	movi	r2,1
 201c448:	e0bffd05 	stb	r2,-12(fp)
 201c44c:	00000b06 	br	201c47c <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 201c450:	008080b4 	movhi	r2,514
 201c454:	1093e604 	addi	r2,r2,20376
 201c458:	10800017 	ldw	r2,0(r2)
 201c45c:	10800c83 	ldbu	r2,50(r2)
 201c460:	10c03fcc 	andi	r3,r2,255
 201c464:	e0bffe03 	ldbu	r2,-8(fp)
 201c468:	1880031e 	bne	r3,r2,201c478 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 201c46c:	00800044 	movi	r2,1
 201c470:	e0bffd05 	stb	r2,-12(fp)
 201c474:	00000106 	br	201c47c <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 201c478:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201c47c:	e0bffe03 	ldbu	r2,-8(fp)
 201c480:	00c080f4 	movhi	r3,515
 201c484:	18e0b504 	addi	r3,r3,-32044
 201c488:	1085883a 	add	r2,r2,r2
 201c48c:	1085883a 	add	r2,r2,r2
 201c490:	10c5883a 	add	r2,r2,r3
 201c494:	10800017 	ldw	r2,0(r2)
 201c498:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 201c49c:	e0bffc17 	ldw	r2,-16(fp)
 201c4a0:	1004c03a 	cmpne	r2,r2,zero
 201c4a4:	1000071e 	bne	r2,zero,201c4c4 <OSTaskSuspend+0x114>
 201c4a8:	e0bffa17 	ldw	r2,-24(fp)
 201c4ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c4b0:	e0bff817 	ldw	r2,-32(fp)
 201c4b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 201c4b8:	00801204 	movi	r2,72
 201c4bc:	e0bfff15 	stw	r2,-4(fp)
 201c4c0:	00004006 	br	201c5c4 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 201c4c4:	e0bffc17 	ldw	r2,-16(fp)
 201c4c8:	10800058 	cmpnei	r2,r2,1
 201c4cc:	1000071e 	bne	r2,zero,201c4ec <OSTaskSuspend+0x13c>
 201c4d0:	e0bffa17 	ldw	r2,-24(fp)
 201c4d4:	e0bff715 	stw	r2,-36(fp)
 201c4d8:	e0bff717 	ldw	r2,-36(fp)
 201c4dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201c4e0:	008010c4 	movi	r2,67
 201c4e4:	e0bfff15 	stw	r2,-4(fp)
 201c4e8:	00003606 	br	201c5c4 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 201c4ec:	e0bffc17 	ldw	r2,-16(fp)
 201c4f0:	10800d03 	ldbu	r2,52(r2)
 201c4f4:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 201c4f8:	e13ffb03 	ldbu	r4,-20(fp)
 201c4fc:	e0fffb03 	ldbu	r3,-20(fp)
 201c500:	008080b4 	movhi	r2,514
 201c504:	1093e344 	addi	r2,r2,20365
 201c508:	10c5883a 	add	r2,r2,r3
 201c50c:	10800003 	ldbu	r2,0(r2)
 201c510:	1007883a 	mov	r3,r2
 201c514:	e0bffc17 	ldw	r2,-16(fp)
 201c518:	10800d43 	ldbu	r2,53(r2)
 201c51c:	0084303a 	nor	r2,zero,r2
 201c520:	1884703a 	and	r2,r3,r2
 201c524:	1007883a 	mov	r3,r2
 201c528:	008080b4 	movhi	r2,514
 201c52c:	1093e344 	addi	r2,r2,20365
 201c530:	1105883a 	add	r2,r2,r4
 201c534:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 201c538:	e0fffb03 	ldbu	r3,-20(fp)
 201c53c:	008080b4 	movhi	r2,514
 201c540:	1093e344 	addi	r2,r2,20365
 201c544:	10c5883a 	add	r2,r2,r3
 201c548:	10800003 	ldbu	r2,0(r2)
 201c54c:	10803fcc 	andi	r2,r2,255
 201c550:	1004c03a 	cmpne	r2,r2,zero
 201c554:	10000c1e 	bne	r2,zero,201c588 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 201c558:	e0bffc17 	ldw	r2,-16(fp)
 201c55c:	10800d83 	ldbu	r2,54(r2)
 201c560:	0084303a 	nor	r2,zero,r2
 201c564:	1007883a 	mov	r3,r2
 201c568:	008080b4 	movhi	r2,514
 201c56c:	1093e304 	addi	r2,r2,20364
 201c570:	10800003 	ldbu	r2,0(r2)
 201c574:	1884703a 	and	r2,r3,r2
 201c578:	1007883a 	mov	r3,r2
 201c57c:	008080b4 	movhi	r2,514
 201c580:	1093e304 	addi	r2,r2,20364
 201c584:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 201c588:	e0bffc17 	ldw	r2,-16(fp)
 201c58c:	10800c03 	ldbu	r2,48(r2)
 201c590:	10800214 	ori	r2,r2,8
 201c594:	1007883a 	mov	r3,r2
 201c598:	e0bffc17 	ldw	r2,-16(fp)
 201c59c:	10c00c05 	stb	r3,48(r2)
 201c5a0:	e0bffa17 	ldw	r2,-24(fp)
 201c5a4:	e0bff615 	stw	r2,-40(fp)
 201c5a8:	e0bff617 	ldw	r2,-40(fp)
 201c5ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 201c5b0:	e0bffd03 	ldbu	r2,-12(fp)
 201c5b4:	10800058 	cmpnei	r2,r2,1
 201c5b8:	1000011e 	bne	r2,zero,201c5c0 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 201c5bc:	20164a80 	call	20164a8 <OS_Sched>
    }
    return (OS_ERR_NONE);
 201c5c0:	e03fff15 	stw	zero,-4(fp)
 201c5c4:	e0bfff17 	ldw	r2,-4(fp)
}
 201c5c8:	e037883a 	mov	sp,fp
 201c5cc:	dfc00117 	ldw	ra,4(sp)
 201c5d0:	df000017 	ldw	fp,0(sp)
 201c5d4:	dec00204 	addi	sp,sp,8
 201c5d8:	f800283a 	ret

0201c5dc <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 201c5dc:	defff504 	addi	sp,sp,-44
 201c5e0:	dfc00a15 	stw	ra,40(sp)
 201c5e4:	df000915 	stw	fp,36(sp)
 201c5e8:	df000904 	addi	fp,sp,36
 201c5ec:	e17ffe15 	stw	r5,-8(fp)
 201c5f0:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c5f4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 201c5f8:	e0bffd03 	ldbu	r2,-12(fp)
 201c5fc:	10800570 	cmpltui	r2,r2,21
 201c600:	1000061e 	bne	r2,zero,201c61c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 201c604:	e0bffd03 	ldbu	r2,-12(fp)
 201c608:	10803fe0 	cmpeqi	r2,r2,255
 201c60c:	1000031e 	bne	r2,zero,201c61c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 201c610:	00800a84 	movi	r2,42
 201c614:	e0bfff15 	stw	r2,-4(fp)
 201c618:	00003b06 	br	201c708 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 201c61c:	e0bffe17 	ldw	r2,-8(fp)
 201c620:	1004c03a 	cmpne	r2,r2,zero
 201c624:	1000031e 	bne	r2,zero,201c634 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 201c628:	00800244 	movi	r2,9
 201c62c:	e0bfff15 	stw	r2,-4(fp)
 201c630:	00003506 	br	201c708 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c634:	0005303a 	rdctl	r2,status
 201c638:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c63c:	e0fffa17 	ldw	r3,-24(fp)
 201c640:	00bfff84 	movi	r2,-2
 201c644:	1884703a 	and	r2,r3,r2
 201c648:	1001703a 	wrctl	status,r2
  
  return context;
 201c64c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201c650:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 201c654:	e0bffd03 	ldbu	r2,-12(fp)
 201c658:	10803fd8 	cmpnei	r2,r2,255
 201c65c:	1000051e 	bne	r2,zero,201c674 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 201c660:	008080b4 	movhi	r2,514
 201c664:	1093e604 	addi	r2,r2,20376
 201c668:	10800017 	ldw	r2,0(r2)
 201c66c:	10800c83 	ldbu	r2,50(r2)
 201c670:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201c674:	e0bffd03 	ldbu	r2,-12(fp)
 201c678:	00c080f4 	movhi	r3,515
 201c67c:	18e0b504 	addi	r3,r3,-32044
 201c680:	1085883a 	add	r2,r2,r2
 201c684:	1085883a 	add	r2,r2,r2
 201c688:	10c5883a 	add	r2,r2,r3
 201c68c:	10800017 	ldw	r2,0(r2)
 201c690:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 201c694:	e0bffc17 	ldw	r2,-16(fp)
 201c698:	1004c03a 	cmpne	r2,r2,zero
 201c69c:	1000071e 	bne	r2,zero,201c6bc <OSTaskQuery+0xe0>
 201c6a0:	e0bffb17 	ldw	r2,-20(fp)
 201c6a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c6a8:	e0bff917 	ldw	r2,-28(fp)
 201c6ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 201c6b0:	00800a44 	movi	r2,41
 201c6b4:	e0bfff15 	stw	r2,-4(fp)
 201c6b8:	00001306 	br	201c708 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 201c6bc:	e0bffc17 	ldw	r2,-16(fp)
 201c6c0:	10800058 	cmpnei	r2,r2,1
 201c6c4:	1000071e 	bne	r2,zero,201c6e4 <OSTaskQuery+0x108>
 201c6c8:	e0bffb17 	ldw	r2,-20(fp)
 201c6cc:	e0bff815 	stw	r2,-32(fp)
 201c6d0:	e0bff817 	ldw	r2,-32(fp)
 201c6d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 201c6d8:	008010c4 	movi	r2,67
 201c6dc:	e0bfff15 	stw	r2,-4(fp)
 201c6e0:	00000906 	br	201c708 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 201c6e4:	e13ffe17 	ldw	r4,-8(fp)
 201c6e8:	e17ffc17 	ldw	r5,-16(fp)
 201c6ec:	01801b04 	movi	r6,108
 201c6f0:	201643c0 	call	201643c <OS_MemCopy>
 201c6f4:	e0bffb17 	ldw	r2,-20(fp)
 201c6f8:	e0bff715 	stw	r2,-36(fp)
 201c6fc:	e0bff717 	ldw	r2,-36(fp)
 201c700:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201c704:	e03fff15 	stw	zero,-4(fp)
 201c708:	e0bfff17 	ldw	r2,-4(fp)
}
 201c70c:	e037883a 	mov	sp,fp
 201c710:	dfc00117 	ldw	ra,4(sp)
 201c714:	df000017 	ldw	fp,0(sp)
 201c718:	dec00204 	addi	sp,sp,8
 201c71c:	f800283a 	ret

0201c720 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 201c720:	defffc04 	addi	sp,sp,-16
 201c724:	df000315 	stw	fp,12(sp)
 201c728:	df000304 	addi	fp,sp,12
 201c72c:	e13ffd15 	stw	r4,-12(fp)
 201c730:	e17ffe15 	stw	r5,-8(fp)
 201c734:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 201c738:	e0bfff0b 	ldhu	r2,-4(fp)
 201c73c:	1080004c 	andi	r2,r2,1
 201c740:	10803fcc 	andi	r2,r2,255
 201c744:	1005003a 	cmpeq	r2,r2,zero
 201c748:	1000101e 	bne	r2,zero,201c78c <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 201c74c:	e0bfff0b 	ldhu	r2,-4(fp)
 201c750:	1080008c 	andi	r2,r2,2
 201c754:	1005003a 	cmpeq	r2,r2,zero
 201c758:	10000c1e 	bne	r2,zero,201c78c <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201c75c:	00000806 	br	201c780 <OS_TaskStkClr+0x60>
                size--;
 201c760:	e0bffe17 	ldw	r2,-8(fp)
 201c764:	10bfffc4 	addi	r2,r2,-1
 201c768:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 201c76c:	e0bffd17 	ldw	r2,-12(fp)
 201c770:	10000015 	stw	zero,0(r2)
 201c774:	e0bffd17 	ldw	r2,-12(fp)
 201c778:	10800104 	addi	r2,r2,4
 201c77c:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 201c780:	e0bffe17 	ldw	r2,-8(fp)
 201c784:	1004c03a 	cmpne	r2,r2,zero
 201c788:	103ff51e 	bne	r2,zero,201c760 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 201c78c:	e037883a 	mov	sp,fp
 201c790:	df000017 	ldw	fp,0(sp)
 201c794:	dec00104 	addi	sp,sp,4
 201c798:	f800283a 	ret

0201c79c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 201c79c:	defff904 	addi	sp,sp,-28
 201c7a0:	dfc00615 	stw	ra,24(sp)
 201c7a4:	df000515 	stw	fp,20(sp)
 201c7a8:	df000504 	addi	fp,sp,20
 201c7ac:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201c7b0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201c7b4:	008080b4 	movhi	r2,514
 201c7b8:	1093e504 	addi	r2,r2,20372
 201c7bc:	10800003 	ldbu	r2,0(r2)
 201c7c0:	10803fcc 	andi	r2,r2,255
 201c7c4:	1004c03a 	cmpne	r2,r2,zero
 201c7c8:	1000421e 	bne	r2,zero,201c8d4 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 201c7cc:	e0bfff0b 	ldhu	r2,-4(fp)
 201c7d0:	1005003a 	cmpeq	r2,r2,zero
 201c7d4:	10003f1e 	bne	r2,zero,201c8d4 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201c7d8:	0005303a 	rdctl	r2,status
 201c7dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201c7e0:	e0fffc17 	ldw	r3,-16(fp)
 201c7e4:	00bfff84 	movi	r2,-2
 201c7e8:	1884703a 	and	r2,r3,r2
 201c7ec:	1001703a 	wrctl	status,r2
  
  return context;
 201c7f0:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 201c7f4:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 201c7f8:	008080b4 	movhi	r2,514
 201c7fc:	1093e604 	addi	r2,r2,20376
 201c800:	10800017 	ldw	r2,0(r2)
 201c804:	10800d03 	ldbu	r2,52(r2)
 201c808:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 201c80c:	e13ffe03 	ldbu	r4,-8(fp)
 201c810:	e0fffe03 	ldbu	r3,-8(fp)
 201c814:	008080b4 	movhi	r2,514
 201c818:	1093e344 	addi	r2,r2,20365
 201c81c:	10c5883a 	add	r2,r2,r3
 201c820:	10800003 	ldbu	r2,0(r2)
 201c824:	1007883a 	mov	r3,r2
 201c828:	008080b4 	movhi	r2,514
 201c82c:	1093e604 	addi	r2,r2,20376
 201c830:	10800017 	ldw	r2,0(r2)
 201c834:	10800d43 	ldbu	r2,53(r2)
 201c838:	0084303a 	nor	r2,zero,r2
 201c83c:	1884703a 	and	r2,r3,r2
 201c840:	1007883a 	mov	r3,r2
 201c844:	008080b4 	movhi	r2,514
 201c848:	1093e344 	addi	r2,r2,20365
 201c84c:	1105883a 	add	r2,r2,r4
 201c850:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 201c854:	e0fffe03 	ldbu	r3,-8(fp)
 201c858:	008080b4 	movhi	r2,514
 201c85c:	1093e344 	addi	r2,r2,20365
 201c860:	10c5883a 	add	r2,r2,r3
 201c864:	10800003 	ldbu	r2,0(r2)
 201c868:	10803fcc 	andi	r2,r2,255
 201c86c:	1004c03a 	cmpne	r2,r2,zero
 201c870:	10000e1e 	bne	r2,zero,201c8ac <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 201c874:	008080b4 	movhi	r2,514
 201c878:	1093e604 	addi	r2,r2,20376
 201c87c:	10800017 	ldw	r2,0(r2)
 201c880:	10800d83 	ldbu	r2,54(r2)
 201c884:	0084303a 	nor	r2,zero,r2
 201c888:	1007883a 	mov	r3,r2
 201c88c:	008080b4 	movhi	r2,514
 201c890:	1093e304 	addi	r2,r2,20364
 201c894:	10800003 	ldbu	r2,0(r2)
 201c898:	1884703a 	and	r2,r3,r2
 201c89c:	1007883a 	mov	r3,r2
 201c8a0:	008080b4 	movhi	r2,514
 201c8a4:	1093e304 	addi	r2,r2,20364
 201c8a8:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 201c8ac:	008080b4 	movhi	r2,514
 201c8b0:	1093e604 	addi	r2,r2,20376
 201c8b4:	10c00017 	ldw	r3,0(r2)
 201c8b8:	e0bfff0b 	ldhu	r2,-4(fp)
 201c8bc:	18800b8d 	sth	r2,46(r3)
 201c8c0:	e0bffd17 	ldw	r2,-12(fp)
 201c8c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201c8c8:	e0bffb17 	ldw	r2,-20(fp)
 201c8cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 201c8d0:	20164a80 	call	20164a8 <OS_Sched>
    }
}
 201c8d4:	e037883a 	mov	sp,fp
 201c8d8:	dfc00117 	ldw	ra,4(sp)
 201c8dc:	df000017 	ldw	fp,0(sp)
 201c8e0:	dec00204 	addi	sp,sp,8
 201c8e4:	f800283a 	ret

0201c8e8 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 201c8e8:	defff604 	addi	sp,sp,-40
 201c8ec:	dfc00915 	stw	ra,36(sp)
 201c8f0:	df000815 	stw	fp,32(sp)
 201c8f4:	dc000715 	stw	r16,28(sp)
 201c8f8:	df000704 	addi	fp,sp,28
 201c8fc:	e13ffb05 	stb	r4,-20(fp)
 201c900:	e17ffc05 	stb	r5,-16(fp)
 201c904:	e1bffd05 	stb	r6,-12(fp)
 201c908:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201c90c:	008080b4 	movhi	r2,514
 201c910:	1093e504 	addi	r2,r2,20372
 201c914:	10800003 	ldbu	r2,0(r2)
 201c918:	10803fcc 	andi	r2,r2,255
 201c91c:	1005003a 	cmpeq	r2,r2,zero
 201c920:	1000031e 	bne	r2,zero,201c930 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 201c924:	00801544 	movi	r2,85
 201c928:	e0bfff15 	stw	r2,-4(fp)
 201c92c:	00004406 	br	201ca40 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 201c930:	e0bffb03 	ldbu	r2,-20(fp)
 201c934:	1004c03a 	cmpne	r2,r2,zero
 201c938:	10000c1e 	bne	r2,zero,201c96c <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
 201c93c:	e0bffc03 	ldbu	r2,-16(fp)
 201c940:	1004c03a 	cmpne	r2,r2,zero
 201c944:	1000091e 	bne	r2,zero,201c96c <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
 201c948:	e0bffd03 	ldbu	r2,-12(fp)
 201c94c:	1004c03a 	cmpne	r2,r2,zero
 201c950:	1000061e 	bne	r2,zero,201c96c <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
 201c954:	e0bffe0b 	ldhu	r2,-8(fp)
 201c958:	1004c03a 	cmpne	r2,r2,zero
 201c95c:	1000031e 	bne	r2,zero,201c96c <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
 201c960:	00801504 	movi	r2,84
 201c964:	e0bfff15 	stw	r2,-4(fp)
 201c968:	00003506 	br	201ca40 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
 201c96c:	e0bffc03 	ldbu	r2,-16(fp)
 201c970:	10800f30 	cmpltui	r2,r2,60
 201c974:	1000031e 	bne	r2,zero,201c984 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 201c978:	00801444 	movi	r2,81
 201c97c:	e0bfff15 	stw	r2,-4(fp)
 201c980:	00002f06 	br	201ca40 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
 201c984:	e0bffd03 	ldbu	r2,-12(fp)
 201c988:	10800f30 	cmpltui	r2,r2,60
 201c98c:	1000031e 	bne	r2,zero,201c99c <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
 201c990:	00801484 	movi	r2,82
 201c994:	e0bfff15 	stw	r2,-4(fp)
 201c998:	00002906 	br	201ca40 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
 201c99c:	e0bffe0b 	ldhu	r2,-8(fp)
 201c9a0:	1080fa30 	cmpltui	r2,r2,1000
 201c9a4:	1000031e 	bne	r2,zero,201c9b4 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
 201c9a8:	008014c4 	movi	r2,83
 201c9ac:	e0bfff15 	stw	r2,-4(fp)
 201c9b0:	00002306 	br	201ca40 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201c9b4:	e0bffb03 	ldbu	r2,-20(fp)
 201c9b8:	10c38424 	muli	r3,r2,3600
 201c9bc:	e0bffc03 	ldbu	r2,-16(fp)
 201c9c0:	10800f24 	muli	r2,r2,60
 201c9c4:	1887883a 	add	r3,r3,r2
 201c9c8:	e0bffd03 	ldbu	r2,-12(fp)
 201c9cc:	1885883a 	add	r2,r3,r2
 201c9d0:	1400fa24 	muli	r16,r2,1000
 201c9d4:	e0bffe0b 	ldhu	r2,-8(fp)
 201c9d8:	1100fa24 	muli	r4,r2,1000
 201c9dc:	0140fa04 	movi	r5,1000
 201c9e0:	2005ab40 	call	2005ab4 <__udivsi3>
 201c9e4:	8085883a 	add	r2,r16,r2
 201c9e8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 201c9ec:	e0bffa17 	ldw	r2,-24(fp)
 201c9f0:	1004d43a 	srli	r2,r2,16
 201c9f4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 201c9f8:	e0bffa17 	ldw	r2,-24(fp)
 201c9fc:	10bfffcc 	andi	r2,r2,65535
 201ca00:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 201ca04:	e0bffa17 	ldw	r2,-24(fp)
 201ca08:	113fffcc 	andi	r4,r2,65535
 201ca0c:	201c79c0 	call	201c79c <OSTimeDly>
    while (loops > 0) {
 201ca10:	00000706 	br	201ca30 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
 201ca14:	01200014 	movui	r4,32768
 201ca18:	201c79c0 	call	201c79c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 201ca1c:	01200014 	movui	r4,32768
 201ca20:	201c79c0 	call	201c79c <OSTimeDly>
        loops--;
 201ca24:	e0bff90b 	ldhu	r2,-28(fp)
 201ca28:	10bfffc4 	addi	r2,r2,-1
 201ca2c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 201ca30:	e0bff90b 	ldhu	r2,-28(fp)
 201ca34:	1004c03a 	cmpne	r2,r2,zero
 201ca38:	103ff61e 	bne	r2,zero,201ca14 <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 201ca3c:	e03fff15 	stw	zero,-4(fp)
 201ca40:	e0bfff17 	ldw	r2,-4(fp)
}
 201ca44:	e037883a 	mov	sp,fp
 201ca48:	dfc00217 	ldw	ra,8(sp)
 201ca4c:	df000117 	ldw	fp,4(sp)
 201ca50:	dc000017 	ldw	r16,0(sp)
 201ca54:	dec00304 	addi	sp,sp,12
 201ca58:	f800283a 	ret

0201ca5c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 201ca5c:	defff404 	addi	sp,sp,-48
 201ca60:	dfc00b15 	stw	ra,44(sp)
 201ca64:	df000a15 	stw	fp,40(sp)
 201ca68:	df000a04 	addi	fp,sp,40
 201ca6c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201ca70:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 201ca74:	e0bffe03 	ldbu	r2,-8(fp)
 201ca78:	10800530 	cmpltui	r2,r2,20
 201ca7c:	1000031e 	bne	r2,zero,201ca8c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201ca80:	00800a84 	movi	r2,42
 201ca84:	e0bfff15 	stw	r2,-4(fp)
 201ca88:	00007206 	br	201cc54 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ca8c:	0005303a 	rdctl	r2,status
 201ca90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ca94:	e0fffb17 	ldw	r3,-20(fp)
 201ca98:	00bfff84 	movi	r2,-2
 201ca9c:	1884703a 	and	r2,r3,r2
 201caa0:	1001703a 	wrctl	status,r2
  
  return context;
 201caa4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 201caa8:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 201caac:	e0bffe03 	ldbu	r2,-8(fp)
 201cab0:	00c080f4 	movhi	r3,515
 201cab4:	18e0b504 	addi	r3,r3,-32044
 201cab8:	1085883a 	add	r2,r2,r2
 201cabc:	1085883a 	add	r2,r2,r2
 201cac0:	10c5883a 	add	r2,r2,r3
 201cac4:	10800017 	ldw	r2,0(r2)
 201cac8:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 201cacc:	e0bffd17 	ldw	r2,-12(fp)
 201cad0:	1004c03a 	cmpne	r2,r2,zero
 201cad4:	1000071e 	bne	r2,zero,201caf4 <OSTimeDlyResume+0x98>
 201cad8:	e0bffc17 	ldw	r2,-16(fp)
 201cadc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cae0:	e0bffa17 	ldw	r2,-24(fp)
 201cae4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201cae8:	008010c4 	movi	r2,67
 201caec:	e0bfff15 	stw	r2,-4(fp)
 201caf0:	00005806 	br	201cc54 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 201caf4:	e0bffd17 	ldw	r2,-12(fp)
 201caf8:	10800058 	cmpnei	r2,r2,1
 201cafc:	1000071e 	bne	r2,zero,201cb1c <OSTimeDlyResume+0xc0>
 201cb00:	e0bffc17 	ldw	r2,-16(fp)
 201cb04:	e0bff915 	stw	r2,-28(fp)
 201cb08:	e0bff917 	ldw	r2,-28(fp)
 201cb0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 201cb10:	008010c4 	movi	r2,67
 201cb14:	e0bfff15 	stw	r2,-4(fp)
 201cb18:	00004e06 	br	201cc54 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 201cb1c:	e0bffd17 	ldw	r2,-12(fp)
 201cb20:	10800b8b 	ldhu	r2,46(r2)
 201cb24:	10bfffcc 	andi	r2,r2,65535
 201cb28:	1004c03a 	cmpne	r2,r2,zero
 201cb2c:	1000071e 	bne	r2,zero,201cb4c <OSTimeDlyResume+0xf0>
 201cb30:	e0bffc17 	ldw	r2,-16(fp)
 201cb34:	e0bff815 	stw	r2,-32(fp)
 201cb38:	e0bff817 	ldw	r2,-32(fp)
 201cb3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 201cb40:	00801404 	movi	r2,80
 201cb44:	e0bfff15 	stw	r2,-4(fp)
 201cb48:	00004206 	br	201cc54 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 201cb4c:	e0bffd17 	ldw	r2,-12(fp)
 201cb50:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 201cb54:	e0bffd17 	ldw	r2,-12(fp)
 201cb58:	10800c03 	ldbu	r2,48(r2)
 201cb5c:	10803fcc 	andi	r2,r2,255
 201cb60:	10800dcc 	andi	r2,r2,55
 201cb64:	1005003a 	cmpeq	r2,r2,zero
 201cb68:	10000b1e 	bne	r2,zero,201cb98 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 201cb6c:	e0bffd17 	ldw	r2,-12(fp)
 201cb70:	10c00c03 	ldbu	r3,48(r2)
 201cb74:	00bff204 	movi	r2,-56
 201cb78:	1884703a 	and	r2,r3,r2
 201cb7c:	1007883a 	mov	r3,r2
 201cb80:	e0bffd17 	ldw	r2,-12(fp)
 201cb84:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 201cb88:	e0fffd17 	ldw	r3,-12(fp)
 201cb8c:	00800044 	movi	r2,1
 201cb90:	18800c45 	stb	r2,49(r3)
 201cb94:	00000206 	br	201cba0 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 201cb98:	e0bffd17 	ldw	r2,-12(fp)
 201cb9c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 201cba0:	e0bffd17 	ldw	r2,-12(fp)
 201cba4:	10800c03 	ldbu	r2,48(r2)
 201cba8:	10803fcc 	andi	r2,r2,255
 201cbac:	1080020c 	andi	r2,r2,8
 201cbb0:	1004c03a 	cmpne	r2,r2,zero
 201cbb4:	1000221e 	bne	r2,zero,201cc40 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 201cbb8:	e0bffd17 	ldw	r2,-12(fp)
 201cbbc:	10c00d83 	ldbu	r3,54(r2)
 201cbc0:	008080b4 	movhi	r2,514
 201cbc4:	1093e304 	addi	r2,r2,20364
 201cbc8:	10800003 	ldbu	r2,0(r2)
 201cbcc:	1884b03a 	or	r2,r3,r2
 201cbd0:	1007883a 	mov	r3,r2
 201cbd4:	008080b4 	movhi	r2,514
 201cbd8:	1093e304 	addi	r2,r2,20364
 201cbdc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201cbe0:	e0bffd17 	ldw	r2,-12(fp)
 201cbe4:	10800d03 	ldbu	r2,52(r2)
 201cbe8:	11003fcc 	andi	r4,r2,255
 201cbec:	e0bffd17 	ldw	r2,-12(fp)
 201cbf0:	10800d03 	ldbu	r2,52(r2)
 201cbf4:	10c03fcc 	andi	r3,r2,255
 201cbf8:	008080b4 	movhi	r2,514
 201cbfc:	1093e344 	addi	r2,r2,20365
 201cc00:	10c5883a 	add	r2,r2,r3
 201cc04:	10c00003 	ldbu	r3,0(r2)
 201cc08:	e0bffd17 	ldw	r2,-12(fp)
 201cc0c:	10800d43 	ldbu	r2,53(r2)
 201cc10:	1884b03a 	or	r2,r3,r2
 201cc14:	1007883a 	mov	r3,r2
 201cc18:	008080b4 	movhi	r2,514
 201cc1c:	1093e344 	addi	r2,r2,20365
 201cc20:	1105883a 	add	r2,r2,r4
 201cc24:	10c00005 	stb	r3,0(r2)
 201cc28:	e0bffc17 	ldw	r2,-16(fp)
 201cc2c:	e0bff715 	stw	r2,-36(fp)
 201cc30:	e0bff717 	ldw	r2,-36(fp)
 201cc34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 201cc38:	20164a80 	call	20164a8 <OS_Sched>
 201cc3c:	00000406 	br	201cc50 <OSTimeDlyResume+0x1f4>
 201cc40:	e0bffc17 	ldw	r2,-16(fp)
 201cc44:	e0bff615 	stw	r2,-40(fp)
 201cc48:	e0bff617 	ldw	r2,-40(fp)
 201cc4c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 201cc50:	e03fff15 	stw	zero,-4(fp)
 201cc54:	e0bfff17 	ldw	r2,-4(fp)
}
 201cc58:	e037883a 	mov	sp,fp
 201cc5c:	dfc00117 	ldw	ra,4(sp)
 201cc60:	df000017 	ldw	fp,0(sp)
 201cc64:	dec00204 	addi	sp,sp,8
 201cc68:	f800283a 	ret

0201cc6c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 201cc6c:	defffb04 	addi	sp,sp,-20
 201cc70:	df000415 	stw	fp,16(sp)
 201cc74:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201cc78:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cc7c:	0005303a 	rdctl	r2,status
 201cc80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201cc84:	e0fffd17 	ldw	r3,-12(fp)
 201cc88:	00bfff84 	movi	r2,-2
 201cc8c:	1884703a 	and	r2,r3,r2
 201cc90:	1001703a 	wrctl	status,r2
  
  return context;
 201cc94:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 201cc98:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 201cc9c:	008080b4 	movhi	r2,514
 201cca0:	1093e704 	addi	r2,r2,20380
 201cca4:	10800017 	ldw	r2,0(r2)
 201cca8:	e0bfff15 	stw	r2,-4(fp)
 201ccac:	e0bffe17 	ldw	r2,-8(fp)
 201ccb0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ccb4:	e0bffc17 	ldw	r2,-16(fp)
 201ccb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 201ccbc:	e0bfff17 	ldw	r2,-4(fp)
}
 201ccc0:	e037883a 	mov	sp,fp
 201ccc4:	df000017 	ldw	fp,0(sp)
 201ccc8:	dec00104 	addi	sp,sp,4
 201cccc:	f800283a 	ret

0201ccd0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 201ccd0:	defffb04 	addi	sp,sp,-20
 201ccd4:	df000415 	stw	fp,16(sp)
 201ccd8:	df000404 	addi	fp,sp,16
 201ccdc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201cce0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201cce4:	0005303a 	rdctl	r2,status
 201cce8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ccec:	e0fffd17 	ldw	r3,-12(fp)
 201ccf0:	00bfff84 	movi	r2,-2
 201ccf4:	1884703a 	and	r2,r3,r2
 201ccf8:	1001703a 	wrctl	status,r2
  
  return context;
 201ccfc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 201cd00:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 201cd04:	00c080b4 	movhi	r3,514
 201cd08:	18d3e704 	addi	r3,r3,20380
 201cd0c:	e0bfff17 	ldw	r2,-4(fp)
 201cd10:	18800015 	stw	r2,0(r3)
 201cd14:	e0bffe17 	ldw	r2,-8(fp)
 201cd18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201cd1c:	e0bffc17 	ldw	r2,-16(fp)
 201cd20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 201cd24:	e037883a 	mov	sp,fp
 201cd28:	df000017 	ldw	fp,0(sp)
 201cd2c:	dec00104 	addi	sp,sp,4
 201cd30:	f800283a 	ret

0201cd34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 201cd34:	defffd04 	addi	sp,sp,-12
 201cd38:	dfc00215 	stw	ra,8(sp)
 201cd3c:	df000115 	stw	fp,4(sp)
 201cd40:	df000104 	addi	fp,sp,4
 201cd44:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 201cd48:	201f9240 	call	201f924 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 201cd4c:	00800044 	movi	r2,1
 201cd50:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 201cd54:	e037883a 	mov	sp,fp
 201cd58:	dfc00117 	ldw	ra,4(sp)
 201cd5c:	df000017 	ldw	fp,0(sp)
 201cd60:	dec00204 	addi	sp,sp,8
 201cd64:	f800283a 	ret

0201cd68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 201cd68:	defffe04 	addi	sp,sp,-8
 201cd6c:	dfc00115 	stw	ra,4(sp)
 201cd70:	df000015 	stw	fp,0(sp)
 201cd74:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 201cd78:	01014034 	movhi	r4,1280
 201cd7c:	000b883a 	mov	r5,zero
 201cd80:	000d883a 	mov	r6,zero
 201cd84:	01c0fa04 	movi	r7,1000
 201cd88:	201e5b40 	call	201e5b4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 201cd8c:	010080b4 	movhi	r4,514
 201cd90:	2107c904 	addi	r4,r4,7972
 201cd94:	201ce040 	call	201ce04 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 201cd98:	010080b4 	movhi	r4,514
 201cd9c:	21080504 	addi	r4,r4,8212
 201cda0:	000b883a 	mov	r5,zero
 201cda4:	01800144 	movi	r6,5
 201cda8:	201d9300 	call	201d930 <altera_avalon_jtag_uart_init>
 201cdac:	010080b4 	movhi	r4,514
 201cdb0:	2107fb04 	addi	r4,r4,8172
 201cdb4:	201cdcc0 	call	201cdcc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 201cdb8:	e037883a 	mov	sp,fp
 201cdbc:	dfc00117 	ldw	ra,4(sp)
 201cdc0:	df000017 	ldw	fp,0(sp)
 201cdc4:	dec00204 	addi	sp,sp,8
 201cdc8:	f800283a 	ret

0201cdcc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 201cdcc:	defffd04 	addi	sp,sp,-12
 201cdd0:	dfc00215 	stw	ra,8(sp)
 201cdd4:	df000115 	stw	fp,4(sp)
 201cdd8:	df000104 	addi	fp,sp,4
 201cddc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 201cde0:	e13fff17 	ldw	r4,-4(fp)
 201cde4:	014080b4 	movhi	r5,514
 201cde8:	294c2004 	addi	r5,r5,12416
 201cdec:	201efb80 	call	201efb8 <alt_dev_llist_insert>
}
 201cdf0:	e037883a 	mov	sp,fp
 201cdf4:	dfc00117 	ldw	ra,4(sp)
 201cdf8:	df000017 	ldw	fp,0(sp)
 201cdfc:	dec00204 	addi	sp,sp,8
 201ce00:	f800283a 	ret

0201ce04 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 201ce04:	defffc04 	addi	sp,sp,-16
 201ce08:	dfc00315 	stw	ra,12(sp)
 201ce0c:	df000215 	stw	fp,8(sp)
 201ce10:	df000204 	addi	fp,sp,8
 201ce14:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 201ce18:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 201ce1c:	e13fff17 	ldw	r4,-4(fp)
 201ce20:	201ce900 	call	201ce90 <alt_epcs_flash_query>
 201ce24:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 201ce28:	e0bffe17 	ldw	r2,-8(fp)
 201ce2c:	1004c03a 	cmpne	r2,r2,zero
 201ce30:	1000031e 	bne	r2,zero,201ce40 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 201ce34:	e13fff17 	ldw	r4,-4(fp)
 201ce38:	201ce580 	call	201ce58 <alt_flash_device_register>
 201ce3c:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 201ce40:	e0bffe17 	ldw	r2,-8(fp)
}
 201ce44:	e037883a 	mov	sp,fp
 201ce48:	dfc00117 	ldw	ra,4(sp)
 201ce4c:	df000017 	ldw	fp,0(sp)
 201ce50:	dec00204 	addi	sp,sp,8
 201ce54:	f800283a 	ret

0201ce58 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 201ce58:	defffd04 	addi	sp,sp,-12
 201ce5c:	dfc00215 	stw	ra,8(sp)
 201ce60:	df000115 	stw	fp,4(sp)
 201ce64:	df000104 	addi	fp,sp,4
 201ce68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 201ce6c:	e13fff17 	ldw	r4,-4(fp)
 201ce70:	014080b4 	movhi	r5,514
 201ce74:	294c2404 	addi	r5,r5,12432
 201ce78:	201efb80 	call	201efb8 <alt_dev_llist_insert>
}
 201ce7c:	e037883a 	mov	sp,fp
 201ce80:	dfc00117 	ldw	ra,4(sp)
 201ce84:	df000017 	ldw	fp,0(sp)
 201ce88:	dec00204 	addi	sp,sp,8
 201ce8c:	f800283a 	ret

0201ce90 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 201ce90:	defffc04 	addi	sp,sp,-16
 201ce94:	dfc00315 	stw	ra,12(sp)
 201ce98:	df000215 	stw	fp,8(sp)
 201ce9c:	df000204 	addi	fp,sp,8
 201cea0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 201cea4:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 201cea8:	e0bfff17 	ldw	r2,-4(fp)
 201ceac:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
 201ceb0:	e0bfff17 	ldw	r2,-4(fp)
 201ceb4:	11002d17 	ldw	r4,180(r2)
 201ceb8:	201eb7c0 	call	201eb7c <epcs_read_electronic_signature>
 201cebc:	10c03fcc 	andi	r3,r2,255
 201cec0:	e0bfff17 	ldw	r2,-4(fp)
 201cec4:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 201cec8:	e0bfff17 	ldw	r2,-4(fp)
 201cecc:	10802f17 	ldw	r2,188(r2)
 201ced0:	10800598 	cmpnei	r2,r2,22
 201ced4:	10000a1e 	bne	r2,zero,201cf00 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 201ced8:	e0ffff17 	ldw	r3,-4(fp)
 201cedc:	00802034 	movhi	r2,128
 201cee0:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 201cee4:	e0ffff17 	ldw	r3,-4(fp)
 201cee8:	00802004 	movi	r2,128
 201ceec:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 201cef0:	e0ffff17 	ldw	r3,-4(fp)
 201cef4:	00800074 	movhi	r2,1
 201cef8:	18801015 	stw	r2,64(r3)
 201cefc:	00007306 	br	201d0cc <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 201cf00:	e0bfff17 	ldw	r2,-4(fp)
 201cf04:	10802f17 	ldw	r2,188(r2)
 201cf08:	10800518 	cmpnei	r2,r2,20
 201cf0c:	10000a1e 	bne	r2,zero,201cf38 <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 201cf10:	e0ffff17 	ldw	r3,-4(fp)
 201cf14:	00800834 	movhi	r2,32
 201cf18:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 201cf1c:	e0ffff17 	ldw	r3,-4(fp)
 201cf20:	00800804 	movi	r2,32
 201cf24:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 201cf28:	e0ffff17 	ldw	r3,-4(fp)
 201cf2c:	00800074 	movhi	r2,1
 201cf30:	18801015 	stw	r2,64(r3)
 201cf34:	00006506 	br	201d0cc <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 201cf38:	e0bfff17 	ldw	r2,-4(fp)
 201cf3c:	10802f17 	ldw	r2,188(r2)
 201cf40:	108004d8 	cmpnei	r2,r2,19
 201cf44:	10000a1e 	bne	r2,zero,201cf70 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 201cf48:	e0ffff17 	ldw	r3,-4(fp)
 201cf4c:	00800434 	movhi	r2,16
 201cf50:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 201cf54:	e0ffff17 	ldw	r3,-4(fp)
 201cf58:	00800404 	movi	r2,16
 201cf5c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 201cf60:	e0ffff17 	ldw	r3,-4(fp)
 201cf64:	00800074 	movhi	r2,1
 201cf68:	18801015 	stw	r2,64(r3)
 201cf6c:	00005706 	br	201d0cc <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 201cf70:	e0bfff17 	ldw	r2,-4(fp)
 201cf74:	10802f17 	ldw	r2,188(r2)
 201cf78:	10800498 	cmpnei	r2,r2,18
 201cf7c:	10000a1e 	bne	r2,zero,201cfa8 <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 201cf80:	e0ffff17 	ldw	r3,-4(fp)
 201cf84:	00800234 	movhi	r2,8
 201cf88:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 201cf8c:	e0ffff17 	ldw	r3,-4(fp)
 201cf90:	00800204 	movi	r2,8
 201cf94:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 201cf98:	e0ffff17 	ldw	r3,-4(fp)
 201cf9c:	00800074 	movhi	r2,1
 201cfa0:	18801015 	stw	r2,64(r3)
 201cfa4:	00004906 	br	201d0cc <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 201cfa8:	e0bfff17 	ldw	r2,-4(fp)
 201cfac:	10802f17 	ldw	r2,188(r2)
 201cfb0:	10800418 	cmpnei	r2,r2,16
 201cfb4:	10000a1e 	bne	r2,zero,201cfe0 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 201cfb8:	e0ffff17 	ldw	r3,-4(fp)
 201cfbc:	008000b4 	movhi	r2,2
 201cfc0:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 201cfc4:	e0ffff17 	ldw	r3,-4(fp)
 201cfc8:	00800104 	movi	r2,4
 201cfcc:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 201cfd0:	e0ffff17 	ldw	r3,-4(fp)
 201cfd4:	00a00014 	movui	r2,32768
 201cfd8:	18801015 	stw	r2,64(r3)
 201cfdc:	00003b06 	br	201d0cc <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 201cfe0:	e0bfff17 	ldw	r2,-4(fp)
 201cfe4:	11002d17 	ldw	r4,180(r2)
 201cfe8:	201ebe80 	call	201ebe8 <epcs_read_device_id>
 201cfec:	1007883a 	mov	r3,r2
 201cff0:	e0bfff17 	ldw	r2,-4(fp)
 201cff4:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 201cff8:	e0bfff17 	ldw	r2,-4(fp)
 201cffc:	10c02f17 	ldw	r3,188(r2)
 201d000:	00804034 	movhi	r2,256
 201d004:	10bfffc4 	addi	r2,r2,-1
 201d008:	1886703a 	and	r3,r3,r2
 201d00c:	00800874 	movhi	r2,33
 201d010:	10ae8604 	addi	r2,r2,-17896
 201d014:	18800a1e 	bne	r3,r2,201d040 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 201d018:	e0ffff17 	ldw	r3,-4(fp)
 201d01c:	00804034 	movhi	r2,256
 201d020:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 201d024:	e0ffff17 	ldw	r3,-4(fp)
 201d028:	00804004 	movi	r2,256
 201d02c:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 201d030:	e0ffff17 	ldw	r3,-4(fp)
 201d034:	00800074 	movhi	r2,1
 201d038:	18801015 	stw	r2,64(r3)
 201d03c:	00002306 	br	201d0cc <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 201d040:	e0bfff17 	ldw	r2,-4(fp)
 201d044:	10802f17 	ldw	r2,188(r2)
 201d048:	10803fcc 	andi	r2,r2,255
 201d04c:	10800618 	cmpnei	r2,r2,24
 201d050:	10000a1e 	bne	r2,zero,201d07c <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 201d054:	e0ffff17 	ldw	r3,-4(fp)
 201d058:	00804034 	movhi	r2,256
 201d05c:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 201d060:	e0ffff17 	ldw	r3,-4(fp)
 201d064:	00801004 	movi	r2,64
 201d068:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
 201d06c:	e0ffff17 	ldw	r3,-4(fp)
 201d070:	00800134 	movhi	r2,4
 201d074:	18801015 	stw	r2,64(r3)
 201d078:	00001406 	br	201d0cc <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 201d07c:	e0bfff17 	ldw	r2,-4(fp)
 201d080:	10802f17 	ldw	r2,188(r2)
 201d084:	10803fcc 	andi	r2,r2,255
 201d088:	10800658 	cmpnei	r2,r2,25
 201d08c:	10000d1e 	bne	r2,zero,201d0c4 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 201d090:	e0ffff17 	ldw	r3,-4(fp)
 201d094:	00808034 	movhi	r2,512
 201d098:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 201d09c:	e0ffff17 	ldw	r3,-4(fp)
 201d0a0:	00808004 	movi	r2,512
 201d0a4:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 201d0a8:	e0ffff17 	ldw	r3,-4(fp)
 201d0ac:	00800074 	movhi	r2,1
 201d0b0:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 201d0b4:	e0ffff17 	ldw	r3,-4(fp)
 201d0b8:	00800044 	movi	r2,1
 201d0bc:	18803115 	stw	r2,196(r3)
 201d0c0:	00000206 	br	201d0cc <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 201d0c4:	00bffb44 	movi	r2,-19
 201d0c8:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 201d0cc:	e0bfff17 	ldw	r2,-4(fp)
 201d0d0:	10800e17 	ldw	r2,56(r2)
 201d0d4:	1007883a 	mov	r3,r2
 201d0d8:	e0bfff17 	ldw	r2,-4(fp)
 201d0dc:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 201d0e0:	e0ffff17 	ldw	r3,-4(fp)
 201d0e4:	00800044 	movi	r2,1
 201d0e8:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 201d0ec:	e0bfff17 	ldw	r2,-4(fp)
 201d0f0:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 201d0f4:	e0ffff17 	ldw	r3,-4(fp)
 201d0f8:	00804004 	movi	r2,256
 201d0fc:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 201d100:	e0bffe17 	ldw	r2,-8(fp)
}
 201d104:	e037883a 	mov	sp,fp
 201d108:	dfc00117 	ldw	ra,4(sp)
 201d10c:	df000017 	ldw	fp,0(sp)
 201d110:	dec00204 	addi	sp,sp,8
 201d114:	f800283a 	ret

0201d118 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 201d118:	deffeb04 	addi	sp,sp,-84
 201d11c:	dfc01415 	stw	ra,80(sp)
 201d120:	df001315 	stw	fp,76(sp)
 201d124:	df001304 	addi	fp,sp,76
 201d128:	e13ff915 	stw	r4,-28(fp)
 201d12c:	e17ffa15 	stw	r5,-24(fp)
 201d130:	e1bffb15 	stw	r6,-20(fp)
 201d134:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 201d138:	00800804 	movi	r2,32
 201d13c:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 201d140:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 201d144:	00002c06 	br	201d1f8 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 201d148:	e0bff017 	ldw	r2,-64(fp)
 201d14c:	e0bfff15 	stw	r2,-4(fp)
 201d150:	e0fffc17 	ldw	r3,-16(fp)
 201d154:	e0fffe15 	stw	r3,-8(fp)
 201d158:	e0bfff17 	ldw	r2,-4(fp)
 201d15c:	e0fffe17 	ldw	r3,-8(fp)
 201d160:	10c0022e 	bgeu	r2,r3,201d16c <alt_epcs_flash_memcmp+0x54>
 201d164:	e0bfff17 	ldw	r2,-4(fp)
 201d168:	e0bffe15 	stw	r2,-8(fp)
 201d16c:	e0fffe17 	ldw	r3,-8(fp)
 201d170:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 201d174:	e0fffb17 	ldw	r3,-20(fp)
 201d178:	e0bfef17 	ldw	r2,-68(fp)
 201d17c:	188b883a 	add	r5,r3,r2
 201d180:	e1bff104 	addi	r6,fp,-60
 201d184:	e13ff917 	ldw	r4,-28(fp)
 201d188:	e1ffee17 	ldw	r7,-72(fp)
 201d18c:	201d7500 	call	201d750 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 201d190:	1004403a 	cmpge	r2,r2,zero
 201d194:	1000031e 	bne	r2,zero,201d1a4 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 201d198:	00bfffc4 	movi	r2,-1
 201d19c:	e0bffd15 	stw	r2,-12(fp)
 201d1a0:	00001906 	br	201d208 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 201d1a4:	e0fffa17 	ldw	r3,-24(fp)
 201d1a8:	e0bfef17 	ldw	r2,-68(fp)
 201d1ac:	1889883a 	add	r4,r3,r2
 201d1b0:	e1bfee17 	ldw	r6,-72(fp)
 201d1b4:	e17ff104 	addi	r5,fp,-60
 201d1b8:	20203540 	call	2020354 <memcmp>
 201d1bc:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 201d1c0:	e0bfed17 	ldw	r2,-76(fp)
 201d1c4:	1005003a 	cmpeq	r2,r2,zero
 201d1c8:	1000031e 	bne	r2,zero,201d1d8 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 201d1cc:	e0ffed17 	ldw	r3,-76(fp)
 201d1d0:	e0fffd15 	stw	r3,-12(fp)
 201d1d4:	00000c06 	br	201d208 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 201d1d8:	e0ffee17 	ldw	r3,-72(fp)
 201d1dc:	e0bffc17 	ldw	r2,-16(fp)
 201d1e0:	10c5c83a 	sub	r2,r2,r3
 201d1e4:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 201d1e8:	e0ffef17 	ldw	r3,-68(fp)
 201d1ec:	e0bfee17 	ldw	r2,-72(fp)
 201d1f0:	1885883a 	add	r2,r3,r2
 201d1f4:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 201d1f8:	e0bffc17 	ldw	r2,-16(fp)
 201d1fc:	1004c03a 	cmpne	r2,r2,zero
 201d200:	103fd11e 	bne	r2,zero,201d148 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 201d204:	e03ffd15 	stw	zero,-12(fp)
 201d208:	e0bffd17 	ldw	r2,-12(fp)
}
 201d20c:	e037883a 	mov	sp,fp
 201d210:	dfc00117 	ldw	ra,4(sp)
 201d214:	df000017 	ldw	fp,0(sp)
 201d218:	dec00204 	addi	sp,sp,8
 201d21c:	f800283a 	ret

0201d220 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 201d220:	defff204 	addi	sp,sp,-56
 201d224:	dfc00d15 	stw	ra,52(sp)
 201d228:	df000c15 	stw	fp,48(sp)
 201d22c:	df000c04 	addi	fp,sp,48
 201d230:	e13ffa15 	stw	r4,-24(fp)
 201d234:	e17ffb15 	stw	r5,-20(fp)
 201d238:	e1bffc15 	stw	r6,-16(fp)
 201d23c:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 201d240:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 201d244:	e03ff815 	stw	zero,-32(fp)
 201d248:	00008b06 	br	201d478 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 201d24c:	e0bff817 	ldw	r2,-32(fp)
 201d250:	e0fffa17 	ldw	r3,-24(fp)
 201d254:	1004913a 	slli	r2,r2,4
 201d258:	10c5883a 	add	r2,r2,r3
 201d25c:	10800d04 	addi	r2,r2,52
 201d260:	10c00017 	ldw	r3,0(r2)
 201d264:	e0bffb17 	ldw	r2,-20(fp)
 201d268:	10c08016 	blt	r2,r3,201d46c <alt_epcs_flash_write+0x24c>
 201d26c:	e0bff817 	ldw	r2,-32(fp)
 201d270:	e0fffa17 	ldw	r3,-24(fp)
 201d274:	1004913a 	slli	r2,r2,4
 201d278:	10c5883a 	add	r2,r2,r3
 201d27c:	10800d04 	addi	r2,r2,52
 201d280:	11000017 	ldw	r4,0(r2)
 201d284:	e0bff817 	ldw	r2,-32(fp)
 201d288:	e0fffa17 	ldw	r3,-24(fp)
 201d28c:	1004913a 	slli	r2,r2,4
 201d290:	10c5883a 	add	r2,r2,r3
 201d294:	10800e04 	addi	r2,r2,56
 201d298:	10800017 	ldw	r2,0(r2)
 201d29c:	2087883a 	add	r3,r4,r2
 201d2a0:	e0bffb17 	ldw	r2,-20(fp)
 201d2a4:	10c0710e 	bge	r2,r3,201d46c <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 201d2a8:	e0bff817 	ldw	r2,-32(fp)
 201d2ac:	e0fffa17 	ldw	r3,-24(fp)
 201d2b0:	1004913a 	slli	r2,r2,4
 201d2b4:	10c5883a 	add	r2,r2,r3
 201d2b8:	10800d04 	addi	r2,r2,52
 201d2bc:	10800017 	ldw	r2,0(r2)
 201d2c0:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 201d2c4:	e03ff715 	stw	zero,-36(fp)
 201d2c8:	00006006 	br	201d44c <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 201d2cc:	e0fffb17 	ldw	r3,-20(fp)
 201d2d0:	e0bff517 	ldw	r2,-44(fp)
 201d2d4:	18805116 	blt	r3,r2,201d41c <alt_epcs_flash_write+0x1fc>
 201d2d8:	e0bff817 	ldw	r2,-32(fp)
 201d2dc:	e0fffa17 	ldw	r3,-24(fp)
 201d2e0:	1004913a 	slli	r2,r2,4
 201d2e4:	10c5883a 	add	r2,r2,r3
 201d2e8:	10801004 	addi	r2,r2,64
 201d2ec:	10c00017 	ldw	r3,0(r2)
 201d2f0:	e0bff517 	ldw	r2,-44(fp)
 201d2f4:	1887883a 	add	r3,r3,r2
 201d2f8:	e0bffb17 	ldw	r2,-20(fp)
 201d2fc:	10c0470e 	bge	r2,r3,201d41c <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 201d300:	e0bff817 	ldw	r2,-32(fp)
 201d304:	e0fffa17 	ldw	r3,-24(fp)
 201d308:	1004913a 	slli	r2,r2,4
 201d30c:	10c5883a 	add	r2,r2,r3
 201d310:	10801004 	addi	r2,r2,64
 201d314:	10c00017 	ldw	r3,0(r2)
 201d318:	e0bff517 	ldw	r2,-44(fp)
 201d31c:	1887883a 	add	r3,r3,r2
 201d320:	e0bffb17 	ldw	r2,-20(fp)
 201d324:	1885c83a 	sub	r2,r3,r2
 201d328:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 201d32c:	e0bff617 	ldw	r2,-40(fp)
 201d330:	e0bfff15 	stw	r2,-4(fp)
 201d334:	e0fffd17 	ldw	r3,-12(fp)
 201d338:	e0fffe15 	stw	r3,-8(fp)
 201d33c:	e0bfff17 	ldw	r2,-4(fp)
 201d340:	e0fffe17 	ldw	r3,-8(fp)
 201d344:	10c0020e 	bge	r2,r3,201d350 <alt_epcs_flash_write+0x130>
 201d348:	e0bfff17 	ldw	r2,-4(fp)
 201d34c:	e0bffe15 	stw	r2,-8(fp)
 201d350:	e0fffe17 	ldw	r3,-8(fp)
 201d354:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 201d358:	e1fff617 	ldw	r7,-40(fp)
 201d35c:	e13ffa17 	ldw	r4,-24(fp)
 201d360:	e17ffc17 	ldw	r5,-16(fp)
 201d364:	e1bffb17 	ldw	r6,-20(fp)
 201d368:	201d1180 	call	201d118 <alt_epcs_flash_memcmp>
 201d36c:	1005003a 	cmpeq	r2,r2,zero
 201d370:	1000131e 	bne	r2,zero,201d3c0 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 201d374:	e0bffa17 	ldw	r2,-24(fp)
 201d378:	10800817 	ldw	r2,32(r2)
 201d37c:	e13ffa17 	ldw	r4,-24(fp)
 201d380:	e17ff517 	ldw	r5,-44(fp)
 201d384:	103ee83a 	callr	r2
 201d388:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 201d38c:	e0bff917 	ldw	r2,-28(fp)
 201d390:	1004c03a 	cmpne	r2,r2,zero
 201d394:	10000a1e 	bne	r2,zero,201d3c0 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 201d398:	e0bffa17 	ldw	r2,-24(fp)
 201d39c:	10c00917 	ldw	r3,36(r2)
 201d3a0:	e0bff617 	ldw	r2,-40(fp)
 201d3a4:	d8800015 	stw	r2,0(sp)
 201d3a8:	e13ffa17 	ldw	r4,-24(fp)
 201d3ac:	e17ff517 	ldw	r5,-44(fp)
 201d3b0:	e1bffb17 	ldw	r6,-20(fp)
 201d3b4:	e1fffc17 	ldw	r7,-16(fp)
 201d3b8:	183ee83a 	callr	r3
 201d3bc:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 201d3c0:	e0fffd17 	ldw	r3,-12(fp)
 201d3c4:	e0bff617 	ldw	r2,-40(fp)
 201d3c8:	18802f26 	beq	r3,r2,201d488 <alt_epcs_flash_write+0x268>
 201d3cc:	e0bff917 	ldw	r2,-28(fp)
 201d3d0:	1004c03a 	cmpne	r2,r2,zero
 201d3d4:	10002c1e 	bne	r2,zero,201d488 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 201d3d8:	e0fffd17 	ldw	r3,-12(fp)
 201d3dc:	e0bff617 	ldw	r2,-40(fp)
 201d3e0:	1885c83a 	sub	r2,r3,r2
 201d3e4:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 201d3e8:	e0bff817 	ldw	r2,-32(fp)
 201d3ec:	e0fffa17 	ldw	r3,-24(fp)
 201d3f0:	1004913a 	slli	r2,r2,4
 201d3f4:	10c5883a 	add	r2,r2,r3
 201d3f8:	10801004 	addi	r2,r2,64
 201d3fc:	10c00017 	ldw	r3,0(r2)
 201d400:	e0bff517 	ldw	r2,-44(fp)
 201d404:	1885883a 	add	r2,r3,r2
 201d408:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 201d40c:	e0fffc17 	ldw	r3,-16(fp)
 201d410:	e0bff617 	ldw	r2,-40(fp)
 201d414:	1885883a 	add	r2,r3,r2
 201d418:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 201d41c:	e0bff817 	ldw	r2,-32(fp)
 201d420:	e0fffa17 	ldw	r3,-24(fp)
 201d424:	1004913a 	slli	r2,r2,4
 201d428:	10c5883a 	add	r2,r2,r3
 201d42c:	10801004 	addi	r2,r2,64
 201d430:	10c00017 	ldw	r3,0(r2)
 201d434:	e0bff517 	ldw	r2,-44(fp)
 201d438:	10c5883a 	add	r2,r2,r3
 201d43c:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 201d440:	e0bff717 	ldw	r2,-36(fp)
 201d444:	10800044 	addi	r2,r2,1
 201d448:	e0bff715 	stw	r2,-36(fp)
 201d44c:	e0bff817 	ldw	r2,-32(fp)
 201d450:	e0fffa17 	ldw	r3,-24(fp)
 201d454:	1004913a 	slli	r2,r2,4
 201d458:	10c5883a 	add	r2,r2,r3
 201d45c:	10800f04 	addi	r2,r2,60
 201d460:	10c00017 	ldw	r3,0(r2)
 201d464:	e0bff717 	ldw	r2,-36(fp)
 201d468:	10ff9816 	blt	r2,r3,201d2cc <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 201d46c:	e0bff817 	ldw	r2,-32(fp)
 201d470:	10800044 	addi	r2,r2,1
 201d474:	e0bff815 	stw	r2,-32(fp)
 201d478:	e0bffa17 	ldw	r2,-24(fp)
 201d47c:	10c00c17 	ldw	r3,48(r2)
 201d480:	e0bff817 	ldw	r2,-32(fp)
 201d484:	10ff7116 	blt	r2,r3,201d24c <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 201d488:	e0bff917 	ldw	r2,-28(fp)
}
 201d48c:	e037883a 	mov	sp,fp
 201d490:	dfc00117 	ldw	ra,4(sp)
 201d494:	df000017 	ldw	fp,0(sp)
 201d498:	dec00204 	addi	sp,sp,8
 201d49c:	f800283a 	ret

0201d4a0 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 201d4a0:	defffa04 	addi	sp,sp,-24
 201d4a4:	df000515 	stw	fp,20(sp)
 201d4a8:	df000504 	addi	fp,sp,20
 201d4ac:	e13ffd15 	stw	r4,-12(fp)
 201d4b0:	e17ffe15 	stw	r5,-8(fp)
 201d4b4:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 201d4b8:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 201d4bc:	e0bffd17 	ldw	r2,-12(fp)
 201d4c0:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 201d4c4:	e0bffb17 	ldw	r2,-20(fp)
 201d4c8:	10c00c17 	ldw	r3,48(r2)
 201d4cc:	e0bfff17 	ldw	r2,-4(fp)
 201d4d0:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 201d4d4:	e0bffb17 	ldw	r2,-20(fp)
 201d4d8:	10800c17 	ldw	r2,48(r2)
 201d4dc:	1004c03a 	cmpne	r2,r2,zero
 201d4e0:	1000031e 	bne	r2,zero,201d4f0 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 201d4e4:	00bffec4 	movi	r2,-5
 201d4e8:	e0bffc15 	stw	r2,-16(fp)
 201d4ec:	00000b06 	br	201d51c <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 201d4f0:	e0bffb17 	ldw	r2,-20(fp)
 201d4f4:	10800c17 	ldw	r2,48(r2)
 201d4f8:	10800250 	cmplti	r2,r2,9
 201d4fc:	1000031e 	bne	r2,zero,201d50c <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 201d500:	00bffd04 	movi	r2,-12
 201d504:	e0bffc15 	stw	r2,-16(fp)
 201d508:	00000406 	br	201d51c <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 201d50c:	e0bffb17 	ldw	r2,-20(fp)
 201d510:	10c00d04 	addi	r3,r2,52
 201d514:	e0bffe17 	ldw	r2,-8(fp)
 201d518:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 201d51c:	e0bffc17 	ldw	r2,-16(fp)
}
 201d520:	e037883a 	mov	sp,fp
 201d524:	df000017 	ldw	fp,0(sp)
 201d528:	dec00104 	addi	sp,sp,4
 201d52c:	f800283a 	ret

0201d530 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 201d530:	defffa04 	addi	sp,sp,-24
 201d534:	dfc00515 	stw	ra,20(sp)
 201d538:	df000415 	stw	fp,16(sp)
 201d53c:	df000404 	addi	fp,sp,16
 201d540:	e13ffe15 	stw	r4,-8(fp)
 201d544:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 201d548:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 201d54c:	e0bffe17 	ldw	r2,-8(fp)
 201d550:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 201d554:	e13ffe17 	ldw	r4,-8(fp)
 201d558:	e17fff17 	ldw	r5,-4(fp)
 201d55c:	201d5a00 	call	201d5a0 <alt_epcs_test_address>
 201d560:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 201d564:	e0bffd17 	ldw	r2,-12(fp)
 201d568:	1004803a 	cmplt	r2,r2,zero
 201d56c:	1000061e 	bne	r2,zero,201d588 <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 201d570:	e0bffc17 	ldw	r2,-16(fp)
 201d574:	11002d17 	ldw	r4,180(r2)
 201d578:	e17fff17 	ldw	r5,-4(fp)
 201d57c:	e0bffc17 	ldw	r2,-16(fp)
 201d580:	11803117 	ldw	r6,196(r2)
 201d584:	201e6a40 	call	201e6a4 <epcs_sector_erase>
  }
  return ret_code;
 201d588:	e0bffd17 	ldw	r2,-12(fp)
}
 201d58c:	e037883a 	mov	sp,fp
 201d590:	dfc00117 	ldw	ra,4(sp)
 201d594:	df000017 	ldw	fp,0(sp)
 201d598:	dec00204 	addi	sp,sp,8
 201d59c:	f800283a 	ret

0201d5a0 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 201d5a0:	defff904 	addi	sp,sp,-28
 201d5a4:	df000615 	stw	fp,24(sp)
 201d5a8:	df000604 	addi	fp,sp,24
 201d5ac:	e13ffe15 	stw	r4,-8(fp)
 201d5b0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 201d5b4:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 201d5b8:	e0bffe17 	ldw	r2,-8(fp)
 201d5bc:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 201d5c0:	e0bffc17 	ldw	r2,-16(fp)
 201d5c4:	10800c17 	ldw	r2,48(r2)
 201d5c8:	10bfffc4 	addi	r2,r2,-1
 201d5cc:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 201d5d0:	e0bffb17 	ldw	r2,-20(fp)
 201d5d4:	e0fffc17 	ldw	r3,-16(fp)
 201d5d8:	1004913a 	slli	r2,r2,4
 201d5dc:	10c5883a 	add	r2,r2,r3
 201d5e0:	10800d04 	addi	r2,r2,52
 201d5e4:	11000017 	ldw	r4,0(r2)
 201d5e8:	e0bffb17 	ldw	r2,-20(fp)
 201d5ec:	e0fffc17 	ldw	r3,-16(fp)
 201d5f0:	1004913a 	slli	r2,r2,4
 201d5f4:	10c5883a 	add	r2,r2,r3
 201d5f8:	10800e04 	addi	r2,r2,56
 201d5fc:	10800017 	ldw	r2,0(r2)
 201d600:	2085883a 	add	r2,r4,r2
 201d604:	10bfffc4 	addi	r2,r2,-1
 201d608:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 201d60c:	e0ffff17 	ldw	r3,-4(fp)
 201d610:	e0bffa17 	ldw	r2,-24(fp)
 201d614:	10c0022e 	bgeu	r2,r3,201d620 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 201d618:	00bffec4 	movi	r2,-5
 201d61c:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 201d620:	e0bffd17 	ldw	r2,-12(fp)
}
 201d624:	e037883a 	mov	sp,fp
 201d628:	df000017 	ldw	fp,0(sp)
 201d62c:	dec00104 	addi	sp,sp,4
 201d630:	f800283a 	ret

0201d634 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 201d634:	defff204 	addi	sp,sp,-56
 201d638:	dfc00d15 	stw	ra,52(sp)
 201d63c:	df000c15 	stw	fp,48(sp)
 201d640:	df000c04 	addi	fp,sp,48
 201d644:	e13ffa15 	stw	r4,-24(fp)
 201d648:	e17ffb15 	stw	r5,-20(fp)
 201d64c:	e1bffc15 	stw	r6,-16(fp)
 201d650:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 201d654:	e0bffa17 	ldw	r2,-24(fp)
 201d658:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 201d65c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 201d660:	e13ffa17 	ldw	r4,-24(fp)
 201d664:	e17ffc17 	ldw	r5,-16(fp)
 201d668:	201d5a00 	call	201d5a0 <alt_epcs_test_address>
 201d66c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 201d670:	e0bff917 	ldw	r2,-28(fp)
 201d674:	1004803a 	cmplt	r2,r2,zero
 201d678:	10002f1e 	bne	r2,zero,201d738 <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 201d67c:	00002b06 	br	201d72c <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 201d680:	e0bff817 	ldw	r2,-32(fp)
 201d684:	10c03017 	ldw	r3,192(r2)
 201d688:	e0bffc17 	ldw	r2,-16(fp)
 201d68c:	1887883a 	add	r3,r3,r2
 201d690:	e0bff817 	ldw	r2,-32(fp)
 201d694:	10803017 	ldw	r2,192(r2)
 201d698:	0085c83a 	sub	r2,zero,r2
 201d69c:	1884703a 	and	r2,r3,r2
 201d6a0:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 201d6a4:	e0fff517 	ldw	r3,-44(fp)
 201d6a8:	e0bffc17 	ldw	r2,-16(fp)
 201d6ac:	1885c83a 	sub	r2,r3,r2
 201d6b0:	e0c00217 	ldw	r3,8(fp)
 201d6b4:	e0ffff15 	stw	r3,-4(fp)
 201d6b8:	e0bffe15 	stw	r2,-8(fp)
 201d6bc:	e0bfff17 	ldw	r2,-4(fp)
 201d6c0:	e0fffe17 	ldw	r3,-8(fp)
 201d6c4:	10c0020e 	bge	r2,r3,201d6d0 <alt_epcs_flash_write_block+0x9c>
 201d6c8:	e0bfff17 	ldw	r2,-4(fp)
 201d6cc:	e0bffe15 	stw	r2,-8(fp)
 201d6d0:	e0fffe17 	ldw	r3,-8(fp)
 201d6d4:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 201d6d8:	e0bff817 	ldw	r2,-32(fp)
 201d6dc:	11002d17 	ldw	r4,180(r2)
 201d6e0:	e0fffd17 	ldw	r3,-12(fp)
 201d6e4:	e0bff717 	ldw	r2,-36(fp)
 201d6e8:	188d883a 	add	r6,r3,r2
 201d6ec:	e0bff817 	ldw	r2,-32(fp)
 201d6f0:	10803117 	ldw	r2,196(r2)
 201d6f4:	d8800015 	stw	r2,0(sp)
 201d6f8:	e17ffc17 	ldw	r5,-16(fp)
 201d6fc:	e1fff617 	ldw	r7,-40(fp)
 201d700:	201ea0c0 	call	201ea0c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 201d704:	e0c00217 	ldw	r3,8(fp)
 201d708:	e0bff617 	ldw	r2,-40(fp)
 201d70c:	1885c83a 	sub	r2,r3,r2
 201d710:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 201d714:	e0fff717 	ldw	r3,-36(fp)
 201d718:	e0bff617 	ldw	r2,-40(fp)
 201d71c:	1885883a 	add	r2,r3,r2
 201d720:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 201d724:	e0bff517 	ldw	r2,-44(fp)
 201d728:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 201d72c:	e0800217 	ldw	r2,8(fp)
 201d730:	1004c03a 	cmpne	r2,r2,zero
 201d734:	103fd21e 	bne	r2,zero,201d680 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 201d738:	e0bff917 	ldw	r2,-28(fp)
}
 201d73c:	e037883a 	mov	sp,fp
 201d740:	dfc00117 	ldw	ra,4(sp)
 201d744:	df000017 	ldw	fp,0(sp)
 201d748:	dec00204 	addi	sp,sp,8
 201d74c:	f800283a 	ret

0201d750 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 201d750:	defff704 	addi	sp,sp,-36
 201d754:	dfc00815 	stw	ra,32(sp)
 201d758:	df000715 	stw	fp,28(sp)
 201d75c:	df000704 	addi	fp,sp,28
 201d760:	e13ffc15 	stw	r4,-16(fp)
 201d764:	e17ffd15 	stw	r5,-12(fp)
 201d768:	e1bffe15 	stw	r6,-8(fp)
 201d76c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 201d770:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 201d774:	e0bffc17 	ldw	r2,-16(fp)
 201d778:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 201d77c:	e13ffc17 	ldw	r4,-16(fp)
 201d780:	e17ffd17 	ldw	r5,-12(fp)
 201d784:	201d5a00 	call	201d5a0 <alt_epcs_test_address>
 201d788:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 201d78c:	e0bffb17 	ldw	r2,-20(fp)
 201d790:	1004803a 	cmplt	r2,r2,zero
 201d794:	10000e1e 	bne	r2,zero,201d7d0 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 201d798:	e0bffa17 	ldw	r2,-24(fp)
 201d79c:	11002d17 	ldw	r4,180(r2)
 201d7a0:	e1bffe17 	ldw	r6,-8(fp)
 201d7a4:	e0bffa17 	ldw	r2,-24(fp)
 201d7a8:	10803117 	ldw	r2,196(r2)
 201d7ac:	d8800015 	stw	r2,0(sp)
 201d7b0:	e17ffd17 	ldw	r5,-12(fp)
 201d7b4:	e1ffff17 	ldw	r7,-4(fp)
 201d7b8:	201e80c0 	call	201e80c <epcs_read_buffer>
 201d7bc:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 201d7c0:	e0fffb17 	ldw	r3,-20(fp)
 201d7c4:	e0bfff17 	ldw	r2,-4(fp)
 201d7c8:	1880011e 	bne	r3,r2,201d7d0 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 201d7cc:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 201d7d0:	e0bffb17 	ldw	r2,-20(fp)
}
 201d7d4:	e037883a 	mov	sp,fp
 201d7d8:	dfc00117 	ldw	ra,4(sp)
 201d7dc:	df000017 	ldw	fp,0(sp)
 201d7e0:	dec00204 	addi	sp,sp,8
 201d7e4:	f800283a 	ret

0201d7e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 201d7e8:	defffa04 	addi	sp,sp,-24
 201d7ec:	dfc00515 	stw	ra,20(sp)
 201d7f0:	df000415 	stw	fp,16(sp)
 201d7f4:	df000404 	addi	fp,sp,16
 201d7f8:	e13ffd15 	stw	r4,-12(fp)
 201d7fc:	e17ffe15 	stw	r5,-8(fp)
 201d800:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201d804:	e0bffd17 	ldw	r2,-12(fp)
 201d808:	10800017 	ldw	r2,0(r2)
 201d80c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 201d810:	e0bffc17 	ldw	r2,-16(fp)
 201d814:	11000a04 	addi	r4,r2,40
 201d818:	e0bffd17 	ldw	r2,-12(fp)
 201d81c:	11c00217 	ldw	r7,8(r2)
 201d820:	e17ffe17 	ldw	r5,-8(fp)
 201d824:	e1bfff17 	ldw	r6,-4(fp)
 201d828:	201dfa80 	call	201dfa8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 201d82c:	e037883a 	mov	sp,fp
 201d830:	dfc00117 	ldw	ra,4(sp)
 201d834:	df000017 	ldw	fp,0(sp)
 201d838:	dec00204 	addi	sp,sp,8
 201d83c:	f800283a 	ret

0201d840 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 201d840:	defffa04 	addi	sp,sp,-24
 201d844:	dfc00515 	stw	ra,20(sp)
 201d848:	df000415 	stw	fp,16(sp)
 201d84c:	df000404 	addi	fp,sp,16
 201d850:	e13ffd15 	stw	r4,-12(fp)
 201d854:	e17ffe15 	stw	r5,-8(fp)
 201d858:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201d85c:	e0bffd17 	ldw	r2,-12(fp)
 201d860:	10800017 	ldw	r2,0(r2)
 201d864:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 201d868:	e0bffc17 	ldw	r2,-16(fp)
 201d86c:	11000a04 	addi	r4,r2,40
 201d870:	e0bffd17 	ldw	r2,-12(fp)
 201d874:	11c00217 	ldw	r7,8(r2)
 201d878:	e17ffe17 	ldw	r5,-8(fp)
 201d87c:	e1bfff17 	ldw	r6,-4(fp)
 201d880:	201e2680 	call	201e268 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 201d884:	e037883a 	mov	sp,fp
 201d888:	dfc00117 	ldw	ra,4(sp)
 201d88c:	df000017 	ldw	fp,0(sp)
 201d890:	dec00204 	addi	sp,sp,8
 201d894:	f800283a 	ret

0201d898 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 201d898:	defffc04 	addi	sp,sp,-16
 201d89c:	dfc00315 	stw	ra,12(sp)
 201d8a0:	df000215 	stw	fp,8(sp)
 201d8a4:	df000204 	addi	fp,sp,8
 201d8a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201d8ac:	e0bfff17 	ldw	r2,-4(fp)
 201d8b0:	10800017 	ldw	r2,0(r2)
 201d8b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 201d8b8:	e0bffe17 	ldw	r2,-8(fp)
 201d8bc:	11000a04 	addi	r4,r2,40
 201d8c0:	e0bfff17 	ldw	r2,-4(fp)
 201d8c4:	11400217 	ldw	r5,8(r2)
 201d8c8:	201de400 	call	201de40 <altera_avalon_jtag_uart_close>
}
 201d8cc:	e037883a 	mov	sp,fp
 201d8d0:	dfc00117 	ldw	ra,4(sp)
 201d8d4:	df000017 	ldw	fp,0(sp)
 201d8d8:	dec00204 	addi	sp,sp,8
 201d8dc:	f800283a 	ret

0201d8e0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 201d8e0:	defffa04 	addi	sp,sp,-24
 201d8e4:	dfc00515 	stw	ra,20(sp)
 201d8e8:	df000415 	stw	fp,16(sp)
 201d8ec:	df000404 	addi	fp,sp,16
 201d8f0:	e13ffd15 	stw	r4,-12(fp)
 201d8f4:	e17ffe15 	stw	r5,-8(fp)
 201d8f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 201d8fc:	e0bffd17 	ldw	r2,-12(fp)
 201d900:	10800017 	ldw	r2,0(r2)
 201d904:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 201d908:	e0bffc17 	ldw	r2,-16(fp)
 201d90c:	11000a04 	addi	r4,r2,40
 201d910:	e17ffe17 	ldw	r5,-8(fp)
 201d914:	e1bfff17 	ldw	r6,-4(fp)
 201d918:	201deb40 	call	201deb4 <altera_avalon_jtag_uart_ioctl>
}
 201d91c:	e037883a 	mov	sp,fp
 201d920:	dfc00117 	ldw	ra,4(sp)
 201d924:	df000017 	ldw	fp,0(sp)
 201d928:	dec00204 	addi	sp,sp,8
 201d92c:	f800283a 	ret

0201d930 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 201d930:	defff404 	addi	sp,sp,-48
 201d934:	dfc00b15 	stw	ra,44(sp)
 201d938:	df000a15 	stw	fp,40(sp)
 201d93c:	df000a04 	addi	fp,sp,40
 201d940:	e13ffd15 	stw	r4,-12(fp)
 201d944:	e17ffe15 	stw	r5,-8(fp)
 201d948:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 201d94c:	e0bffd17 	ldw	r2,-12(fp)
 201d950:	10800c04 	addi	r2,r2,48
 201d954:	e0bffb15 	stw	r2,-20(fp)
 201d958:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 201d95c:	e13ffc0b 	ldhu	r4,-16(fp)
 201d960:	e17ffc84 	addi	r5,fp,-14
 201d964:	20170500 	call	2017050 <OSFlagCreate>
 201d968:	1007883a 	mov	r3,r2
 201d96c:	e0bffb17 	ldw	r2,-20(fp)
 201d970:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 201d974:	e0bffd17 	ldw	r2,-12(fp)
 201d978:	10800a04 	addi	r2,r2,40
 201d97c:	e0bff915 	stw	r2,-28(fp)
 201d980:	00800044 	movi	r2,1
 201d984:	e0bffa0d 	sth	r2,-24(fp)
 201d988:	e13ffa0b 	ldhu	r4,-24(fp)
 201d98c:	201a2540 	call	201a254 <OSSemCreate>
 201d990:	1007883a 	mov	r3,r2
 201d994:	e0bff917 	ldw	r2,-28(fp)
 201d998:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 201d99c:	e0bffd17 	ldw	r2,-12(fp)
 201d9a0:	10800b04 	addi	r2,r2,44
 201d9a4:	e0bff715 	stw	r2,-36(fp)
 201d9a8:	00800044 	movi	r2,1
 201d9ac:	e0bff80d 	sth	r2,-32(fp)
 201d9b0:	e13ff80b 	ldhu	r4,-32(fp)
 201d9b4:	201a2540 	call	201a254 <OSSemCreate>
 201d9b8:	1007883a 	mov	r3,r2
 201d9bc:	e0bff717 	ldw	r2,-36(fp)
 201d9c0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201d9c4:	e0fffd17 	ldw	r3,-12(fp)
 201d9c8:	00800044 	movi	r2,1
 201d9cc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 201d9d0:	e0bffd17 	ldw	r2,-12(fp)
 201d9d4:	10800017 	ldw	r2,0(r2)
 201d9d8:	11000104 	addi	r4,r2,4
 201d9dc:	e0bffd17 	ldw	r2,-12(fp)
 201d9e0:	10800817 	ldw	r2,32(r2)
 201d9e4:	1007883a 	mov	r3,r2
 201d9e8:	2005883a 	mov	r2,r4
 201d9ec:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 201d9f0:	e13ffe17 	ldw	r4,-8(fp)
 201d9f4:	e17fff17 	ldw	r5,-4(fp)
 201d9f8:	d8000015 	stw	zero,0(sp)
 201d9fc:	018080b4 	movhi	r6,514
 201da00:	31b69a04 	addi	r6,r6,-9624
 201da04:	e1fffd17 	ldw	r7,-12(fp)
 201da08:	201f2580 	call	201f258 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 201da0c:	e0bffd17 	ldw	r2,-12(fp)
 201da10:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 201da14:	e0bffd17 	ldw	r2,-12(fp)
 201da18:	11000204 	addi	r4,r2,8
 201da1c:	008080b4 	movhi	r2,514
 201da20:	1093d104 	addi	r2,r2,20292
 201da24:	10800017 	ldw	r2,0(r2)
 201da28:	100b883a 	mov	r5,r2
 201da2c:	018080b4 	movhi	r6,514
 201da30:	31b74b04 	addi	r6,r6,-8916
 201da34:	e1fffd17 	ldw	r7,-12(fp)
 201da38:	201ed180 	call	201ed18 <alt_alarm_start>
 201da3c:	1004403a 	cmpge	r2,r2,zero
 201da40:	1000041e 	bne	r2,zero,201da54 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 201da44:	e0fffd17 	ldw	r3,-12(fp)
 201da48:	00a00034 	movhi	r2,32768
 201da4c:	10bfffc4 	addi	r2,r2,-1
 201da50:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 201da54:	e037883a 	mov	sp,fp
 201da58:	dfc00117 	ldw	ra,4(sp)
 201da5c:	df000017 	ldw	fp,0(sp)
 201da60:	dec00204 	addi	sp,sp,8
 201da64:	f800283a 	ret

0201da68 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 201da68:	defff204 	addi	sp,sp,-56
 201da6c:	dfc00d15 	stw	ra,52(sp)
 201da70:	df000c15 	stw	fp,48(sp)
 201da74:	df000c04 	addi	fp,sp,48
 201da78:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 201da7c:	e0bfff17 	ldw	r2,-4(fp)
 201da80:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 201da84:	e0bffd17 	ldw	r2,-12(fp)
 201da88:	10800017 	ldw	r2,0(r2)
 201da8c:	e0bffc15 	stw	r2,-16(fp)
 201da90:	00000006 	br	201da94 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201da94:	e0bffc17 	ldw	r2,-16(fp)
 201da98:	10800104 	addi	r2,r2,4
 201da9c:	10800037 	ldwio	r2,0(r2)
 201daa0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 201daa4:	e0bffb17 	ldw	r2,-20(fp)
 201daa8:	1080c00c 	andi	r2,r2,768
 201daac:	1005003a 	cmpeq	r2,r2,zero
 201dab0:	1000991e 	bne	r2,zero,201dd18 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 201dab4:	e0bffb17 	ldw	r2,-20(fp)
 201dab8:	1080400c 	andi	r2,r2,256
 201dabc:	1005003a 	cmpeq	r2,r2,zero
 201dac0:	1000481e 	bne	r2,zero,201dbe4 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 201dac4:	00800074 	movhi	r2,1
 201dac8:	e0bffa15 	stw	r2,-24(fp)
 201dacc:	00000006 	br	201dad0 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201dad0:	e0bffd17 	ldw	r2,-12(fp)
 201dad4:	10800d17 	ldw	r2,52(r2)
 201dad8:	10800044 	addi	r2,r2,1
 201dadc:	1081ffcc 	andi	r2,r2,2047
 201dae0:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 201dae4:	e0bffd17 	ldw	r2,-12(fp)
 201dae8:	10c00e17 	ldw	r3,56(r2)
 201daec:	e0bff917 	ldw	r2,-28(fp)
 201daf0:	18802826 	beq	r3,r2,201db94 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 201daf4:	e0bffc17 	ldw	r2,-16(fp)
 201daf8:	10800037 	ldwio	r2,0(r2)
 201dafc:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 201db00:	e0bffa17 	ldw	r2,-24(fp)
 201db04:	10a0000c 	andi	r2,r2,32768
 201db08:	1005003a 	cmpeq	r2,r2,zero
 201db0c:	1000211e 	bne	r2,zero,201db94 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 201db10:	e0bffd17 	ldw	r2,-12(fp)
 201db14:	10c00d17 	ldw	r3,52(r2)
 201db18:	e0bffa17 	ldw	r2,-24(fp)
 201db1c:	1009883a 	mov	r4,r2
 201db20:	e0bffd17 	ldw	r2,-12(fp)
 201db24:	1885883a 	add	r2,r3,r2
 201db28:	10801104 	addi	r2,r2,68
 201db2c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201db30:	e0bffd17 	ldw	r2,-12(fp)
 201db34:	10800d17 	ldw	r2,52(r2)
 201db38:	10800044 	addi	r2,r2,1
 201db3c:	10c1ffcc 	andi	r3,r2,2047
 201db40:	e0bffd17 	ldw	r2,-12(fp)
 201db44:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 201db48:	e0bffd17 	ldw	r2,-12(fp)
 201db4c:	10800c17 	ldw	r2,48(r2)
 201db50:	e0bff615 	stw	r2,-40(fp)
 201db54:	00800044 	movi	r2,1
 201db58:	e0bff70d 	sth	r2,-36(fp)
 201db5c:	00800044 	movi	r2,1
 201db60:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201db64:	008080b4 	movhi	r2,514
 201db68:	1093d744 	addi	r2,r2,20317
 201db6c:	10800003 	ldbu	r2,0(r2)
 201db70:	10803fcc 	andi	r2,r2,255
 201db74:	1005003a 	cmpeq	r2,r2,zero
 201db78:	103fd51e 	bne	r2,zero,201dad0 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
 201db7c:	e17ff70b 	ldhu	r5,-36(fp)
 201db80:	e1bff783 	ldbu	r6,-34(fp)
 201db84:	e1fffe04 	addi	r7,fp,-8
 201db88:	e13ff617 	ldw	r4,-40(fp)
 201db8c:	2017d780 	call	2017d78 <OSFlagPost>
    return err;
 201db90:	003fcf06 	br	201dad0 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 201db94:	e0bffa17 	ldw	r2,-24(fp)
 201db98:	10bfffec 	andhi	r2,r2,65535
 201db9c:	1005003a 	cmpeq	r2,r2,zero
 201dba0:	1000101e 	bne	r2,zero,201dbe4 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201dba4:	e0bffd17 	ldw	r2,-12(fp)
 201dba8:	10c00817 	ldw	r3,32(r2)
 201dbac:	00bfff84 	movi	r2,-2
 201dbb0:	1886703a 	and	r3,r3,r2
 201dbb4:	e0bffd17 	ldw	r2,-12(fp)
 201dbb8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 201dbbc:	e0bffc17 	ldw	r2,-16(fp)
 201dbc0:	11000104 	addi	r4,r2,4
 201dbc4:	e0bffd17 	ldw	r2,-12(fp)
 201dbc8:	10800817 	ldw	r2,32(r2)
 201dbcc:	1007883a 	mov	r3,r2
 201dbd0:	2005883a 	mov	r2,r4
 201dbd4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201dbd8:	e0bffc17 	ldw	r2,-16(fp)
 201dbdc:	10800104 	addi	r2,r2,4
 201dbe0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 201dbe4:	e0bffb17 	ldw	r2,-20(fp)
 201dbe8:	1080800c 	andi	r2,r2,512
 201dbec:	1005003a 	cmpeq	r2,r2,zero
 201dbf0:	103fa81e 	bne	r2,zero,201da94 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 201dbf4:	e0bffb17 	ldw	r2,-20(fp)
 201dbf8:	10bfffec 	andhi	r2,r2,65535
 201dbfc:	1004d43a 	srli	r2,r2,16
 201dc00:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 201dc04:	00002706 	br	201dca4 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 201dc08:	e13ffc17 	ldw	r4,-16(fp)
 201dc0c:	e0bffd17 	ldw	r2,-12(fp)
 201dc10:	10c01017 	ldw	r3,64(r2)
 201dc14:	e0bffd17 	ldw	r2,-12(fp)
 201dc18:	1885883a 	add	r2,r3,r2
 201dc1c:	10821104 	addi	r2,r2,2116
 201dc20:	10800003 	ldbu	r2,0(r2)
 201dc24:	10c03fcc 	andi	r3,r2,255
 201dc28:	18c0201c 	xori	r3,r3,128
 201dc2c:	18ffe004 	addi	r3,r3,-128
 201dc30:	2005883a 	mov	r2,r4
 201dc34:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201dc38:	e0bffd17 	ldw	r2,-12(fp)
 201dc3c:	10801017 	ldw	r2,64(r2)
 201dc40:	10800044 	addi	r2,r2,1
 201dc44:	10c1ffcc 	andi	r3,r2,2047
 201dc48:	e0bffd17 	ldw	r2,-12(fp)
 201dc4c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 201dc50:	e0bffd17 	ldw	r2,-12(fp)
 201dc54:	10800c17 	ldw	r2,48(r2)
 201dc58:	e0bff415 	stw	r2,-48(fp)
 201dc5c:	00800084 	movi	r2,2
 201dc60:	e0bff50d 	sth	r2,-44(fp)
 201dc64:	00800044 	movi	r2,1
 201dc68:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201dc6c:	008080b4 	movhi	r2,514
 201dc70:	1093d744 	addi	r2,r2,20317
 201dc74:	10800003 	ldbu	r2,0(r2)
 201dc78:	10803fcc 	andi	r2,r2,255
 201dc7c:	1005003a 	cmpeq	r2,r2,zero
 201dc80:	1000051e 	bne	r2,zero,201dc98 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
 201dc84:	e17ff50b 	ldhu	r5,-44(fp)
 201dc88:	e1bff583 	ldbu	r6,-42(fp)
 201dc8c:	e1fffe44 	addi	r7,fp,-7
 201dc90:	e13ff417 	ldw	r4,-48(fp)
 201dc94:	2017d780 	call	2017d78 <OSFlagPost>

        space--;
 201dc98:	e0bff817 	ldw	r2,-32(fp)
 201dc9c:	10bfffc4 	addi	r2,r2,-1
 201dca0:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 201dca4:	e0bff817 	ldw	r2,-32(fp)
 201dca8:	1005003a 	cmpeq	r2,r2,zero
 201dcac:	1000051e 	bne	r2,zero,201dcc4 <altera_avalon_jtag_uart_irq+0x25c>
 201dcb0:	e0bffd17 	ldw	r2,-12(fp)
 201dcb4:	10c01017 	ldw	r3,64(r2)
 201dcb8:	e0bffd17 	ldw	r2,-12(fp)
 201dcbc:	10800f17 	ldw	r2,60(r2)
 201dcc0:	18bfd11e 	bne	r3,r2,201dc08 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 201dcc4:	e0bff817 	ldw	r2,-32(fp)
 201dcc8:	1005003a 	cmpeq	r2,r2,zero
 201dccc:	103f711e 	bne	r2,zero,201da94 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201dcd0:	e0bffd17 	ldw	r2,-12(fp)
 201dcd4:	10c00817 	ldw	r3,32(r2)
 201dcd8:	00bfff44 	movi	r2,-3
 201dcdc:	1886703a 	and	r3,r3,r2
 201dce0:	e0bffd17 	ldw	r2,-12(fp)
 201dce4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201dce8:	e0bffd17 	ldw	r2,-12(fp)
 201dcec:	10800017 	ldw	r2,0(r2)
 201dcf0:	11000104 	addi	r4,r2,4
 201dcf4:	e0bffd17 	ldw	r2,-12(fp)
 201dcf8:	10800817 	ldw	r2,32(r2)
 201dcfc:	1007883a 	mov	r3,r2
 201dd00:	2005883a 	mov	r2,r4
 201dd04:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201dd08:	e0bffc17 	ldw	r2,-16(fp)
 201dd0c:	10800104 	addi	r2,r2,4
 201dd10:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 201dd14:	003f5f06 	br	201da94 <altera_avalon_jtag_uart_irq+0x2c>
}
 201dd18:	e037883a 	mov	sp,fp
 201dd1c:	dfc00117 	ldw	ra,4(sp)
 201dd20:	df000017 	ldw	fp,0(sp)
 201dd24:	dec00204 	addi	sp,sp,8
 201dd28:	f800283a 	ret

0201dd2c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 201dd2c:	defff804 	addi	sp,sp,-32
 201dd30:	dfc00715 	stw	ra,28(sp)
 201dd34:	df000615 	stw	fp,24(sp)
 201dd38:	df000604 	addi	fp,sp,24
 201dd3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 201dd40:	e0bfff17 	ldw	r2,-4(fp)
 201dd44:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 201dd48:	e0bffd17 	ldw	r2,-12(fp)
 201dd4c:	10800017 	ldw	r2,0(r2)
 201dd50:	10800104 	addi	r2,r2,4
 201dd54:	10800037 	ldwio	r2,0(r2)
 201dd58:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 201dd5c:	e0bffc17 	ldw	r2,-16(fp)
 201dd60:	1081000c 	andi	r2,r2,1024
 201dd64:	1005003a 	cmpeq	r2,r2,zero
 201dd68:	10000c1e 	bne	r2,zero,201dd9c <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 201dd6c:	e0bffd17 	ldw	r2,-12(fp)
 201dd70:	10800017 	ldw	r2,0(r2)
 201dd74:	11000104 	addi	r4,r2,4
 201dd78:	e0bffd17 	ldw	r2,-12(fp)
 201dd7c:	10800817 	ldw	r2,32(r2)
 201dd80:	10810014 	ori	r2,r2,1024
 201dd84:	1007883a 	mov	r3,r2
 201dd88:	2005883a 	mov	r2,r4
 201dd8c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 201dd90:	e0bffd17 	ldw	r2,-12(fp)
 201dd94:	10000915 	stw	zero,36(r2)
 201dd98:	00002106 	br	201de20 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 201dd9c:	e0bffd17 	ldw	r2,-12(fp)
 201dda0:	10c00917 	ldw	r3,36(r2)
 201dda4:	00a00034 	movhi	r2,32768
 201dda8:	10bfff04 	addi	r2,r2,-4
 201ddac:	10c01c36 	bltu	r2,r3,201de20 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 201ddb0:	e0bffd17 	ldw	r2,-12(fp)
 201ddb4:	10800917 	ldw	r2,36(r2)
 201ddb8:	10c00044 	addi	r3,r2,1
 201ddbc:	e0bffd17 	ldw	r2,-12(fp)
 201ddc0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 201ddc4:	e0bffd17 	ldw	r2,-12(fp)
 201ddc8:	10c00917 	ldw	r3,36(r2)
 201ddcc:	e0bffd17 	ldw	r2,-12(fp)
 201ddd0:	10800117 	ldw	r2,4(r2)
 201ddd4:	18801236 	bltu	r3,r2,201de20 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 201ddd8:	e0bffd17 	ldw	r2,-12(fp)
 201dddc:	10800c17 	ldw	r2,48(r2)
 201dde0:	e0bffa15 	stw	r2,-24(fp)
 201dde4:	00800104 	movi	r2,4
 201dde8:	e0bffb0d 	sth	r2,-20(fp)
 201ddec:	00800044 	movi	r2,1
 201ddf0:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201ddf4:	008080b4 	movhi	r2,514
 201ddf8:	1093d744 	addi	r2,r2,20317
 201ddfc:	10800003 	ldbu	r2,0(r2)
 201de00:	10803fcc 	andi	r2,r2,255
 201de04:	1005003a 	cmpeq	r2,r2,zero
 201de08:	1000051e 	bne	r2,zero,201de20 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 201de0c:	e17ffb0b 	ldhu	r5,-20(fp)
 201de10:	e1bffb83 	ldbu	r6,-18(fp)
 201de14:	e1fffe04 	addi	r7,fp,-8
 201de18:	e13ffa17 	ldw	r4,-24(fp)
 201de1c:	2017d780 	call	2017d78 <OSFlagPost>
 201de20:	008080b4 	movhi	r2,514
 201de24:	1093d104 	addi	r2,r2,20292
 201de28:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 201de2c:	e037883a 	mov	sp,fp
 201de30:	dfc00117 	ldw	ra,4(sp)
 201de34:	df000017 	ldw	fp,0(sp)
 201de38:	dec00204 	addi	sp,sp,8
 201de3c:	f800283a 	ret

0201de40 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 201de40:	defffc04 	addi	sp,sp,-16
 201de44:	df000315 	stw	fp,12(sp)
 201de48:	df000304 	addi	fp,sp,12
 201de4c:	e13ffd15 	stw	r4,-12(fp)
 201de50:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201de54:	00000706 	br	201de74 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 201de58:	e0bffe17 	ldw	r2,-8(fp)
 201de5c:	1090000c 	andi	r2,r2,16384
 201de60:	1005003a 	cmpeq	r2,r2,zero
 201de64:	1000031e 	bne	r2,zero,201de74 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 201de68:	00bffd44 	movi	r2,-11
 201de6c:	e0bfff15 	stw	r2,-4(fp)
 201de70:	00000b06 	br	201dea0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201de74:	e0bffd17 	ldw	r2,-12(fp)
 201de78:	10c01017 	ldw	r3,64(r2)
 201de7c:	e0bffd17 	ldw	r2,-12(fp)
 201de80:	10800f17 	ldw	r2,60(r2)
 201de84:	18800526 	beq	r3,r2,201de9c <altera_avalon_jtag_uart_close+0x5c>
 201de88:	e0bffd17 	ldw	r2,-12(fp)
 201de8c:	10c00917 	ldw	r3,36(r2)
 201de90:	e0bffd17 	ldw	r2,-12(fp)
 201de94:	10800117 	ldw	r2,4(r2)
 201de98:	18bfef36 	bltu	r3,r2,201de58 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 201de9c:	e03fff15 	stw	zero,-4(fp)
 201dea0:	e0bfff17 	ldw	r2,-4(fp)
}
 201dea4:	e037883a 	mov	sp,fp
 201dea8:	df000017 	ldw	fp,0(sp)
 201deac:	dec00104 	addi	sp,sp,4
 201deb0:	f800283a 	ret

0201deb4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 201deb4:	defff804 	addi	sp,sp,-32
 201deb8:	df000715 	stw	fp,28(sp)
 201debc:	df000704 	addi	fp,sp,28
 201dec0:	e13ffb15 	stw	r4,-20(fp)
 201dec4:	e17ffc15 	stw	r5,-16(fp)
 201dec8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 201decc:	00bff9c4 	movi	r2,-25
 201ded0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 201ded4:	e0bffc17 	ldw	r2,-16(fp)
 201ded8:	e0bfff15 	stw	r2,-4(fp)
 201dedc:	e0ffff17 	ldw	r3,-4(fp)
 201dee0:	189a8060 	cmpeqi	r2,r3,27137
 201dee4:	1000041e 	bne	r2,zero,201def8 <altera_avalon_jtag_uart_ioctl+0x44>
 201dee8:	e0ffff17 	ldw	r3,-4(fp)
 201deec:	189a80a0 	cmpeqi	r2,r3,27138
 201def0:	10001b1e 	bne	r2,zero,201df60 <altera_avalon_jtag_uart_ioctl+0xac>
 201def4:	00002706 	br	201df94 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 201def8:	e0bffb17 	ldw	r2,-20(fp)
 201defc:	10c00117 	ldw	r3,4(r2)
 201df00:	00a00034 	movhi	r2,32768
 201df04:	10bfffc4 	addi	r2,r2,-1
 201df08:	18802226 	beq	r3,r2,201df94 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 201df0c:	e0bffd17 	ldw	r2,-12(fp)
 201df10:	10800017 	ldw	r2,0(r2)
 201df14:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 201df18:	e0bff917 	ldw	r2,-28(fp)
 201df1c:	10800090 	cmplti	r2,r2,2
 201df20:	1000071e 	bne	r2,zero,201df40 <altera_avalon_jtag_uart_ioctl+0x8c>
 201df24:	e0fff917 	ldw	r3,-28(fp)
 201df28:	00a00034 	movhi	r2,32768
 201df2c:	10bfffc4 	addi	r2,r2,-1
 201df30:	18800326 	beq	r3,r2,201df40 <altera_avalon_jtag_uart_ioctl+0x8c>
 201df34:	e0bff917 	ldw	r2,-28(fp)
 201df38:	e0bffe15 	stw	r2,-8(fp)
 201df3c:	00000306 	br	201df4c <altera_avalon_jtag_uart_ioctl+0x98>
 201df40:	00e00034 	movhi	r3,32768
 201df44:	18ffff84 	addi	r3,r3,-2
 201df48:	e0fffe15 	stw	r3,-8(fp)
 201df4c:	e0bffb17 	ldw	r2,-20(fp)
 201df50:	e0fffe17 	ldw	r3,-8(fp)
 201df54:	10c00115 	stw	r3,4(r2)
      rc = 0;
 201df58:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 201df5c:	00000d06 	br	201df94 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 201df60:	e0bffb17 	ldw	r2,-20(fp)
 201df64:	10c00117 	ldw	r3,4(r2)
 201df68:	00a00034 	movhi	r2,32768
 201df6c:	10bfffc4 	addi	r2,r2,-1
 201df70:	18800826 	beq	r3,r2,201df94 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 201df74:	e13ffd17 	ldw	r4,-12(fp)
 201df78:	e0bffb17 	ldw	r2,-20(fp)
 201df7c:	10c00917 	ldw	r3,36(r2)
 201df80:	e0bffb17 	ldw	r2,-20(fp)
 201df84:	10800117 	ldw	r2,4(r2)
 201df88:	1885803a 	cmpltu	r2,r3,r2
 201df8c:	20800015 	stw	r2,0(r4)
      rc = 0;
 201df90:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 201df94:	e0bffa17 	ldw	r2,-24(fp)
}
 201df98:	e037883a 	mov	sp,fp
 201df9c:	df000017 	ldw	fp,0(sp)
 201dfa0:	dec00104 	addi	sp,sp,4
 201dfa4:	f800283a 	ret

0201dfa8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 201dfa8:	deffeb04 	addi	sp,sp,-84
 201dfac:	dfc01415 	stw	ra,80(sp)
 201dfb0:	df001315 	stw	fp,76(sp)
 201dfb4:	df001304 	addi	fp,sp,76
 201dfb8:	e13ffb15 	stw	r4,-20(fp)
 201dfbc:	e17ffc15 	stw	r5,-16(fp)
 201dfc0:	e1bffd15 	stw	r6,-12(fp)
 201dfc4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 201dfc8:	e0bffc17 	ldw	r2,-16(fp)
 201dfcc:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 201dfd0:	e0bffb17 	ldw	r2,-20(fp)
 201dfd4:	10800a17 	ldw	r2,40(r2)
 201dfd8:	e0bff315 	stw	r2,-52(fp)
 201dfdc:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 201dfe0:	e17ff40b 	ldhu	r5,-48(fp)
 201dfe4:	e1bffa44 	addi	r6,fp,-23
 201dfe8:	e13ff317 	ldw	r4,-52(fp)
 201dfec:	201a6080 	call	201a608 <OSSemPend>

  while (space > 0)
 201dff0:	00006406 	br	201e184 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 201dff4:	e0bffb17 	ldw	r2,-20(fp)
 201dff8:	10800d17 	ldw	r2,52(r2)
 201dffc:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 201e000:	e0bffb17 	ldw	r2,-20(fp)
 201e004:	10800e17 	ldw	r2,56(r2)
 201e008:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 201e00c:	e0fff617 	ldw	r3,-40(fp)
 201e010:	e0bff517 	ldw	r2,-44(fp)
 201e014:	18800536 	bltu	r3,r2,201e02c <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 201e018:	e0bff617 	ldw	r2,-40(fp)
 201e01c:	e0fff517 	ldw	r3,-44(fp)
 201e020:	10c5c83a 	sub	r2,r2,r3
 201e024:	e0bff715 	stw	r2,-36(fp)
 201e028:	00000406 	br	201e03c <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 201e02c:	00820004 	movi	r2,2048
 201e030:	e0fff517 	ldw	r3,-44(fp)
 201e034:	10c5c83a 	sub	r2,r2,r3
 201e038:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 201e03c:	e0bff717 	ldw	r2,-36(fp)
 201e040:	1005003a 	cmpeq	r2,r2,zero
 201e044:	10001f1e 	bne	r2,zero,201e0c4 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 201e048:	e0fffd17 	ldw	r3,-12(fp)
 201e04c:	e0bff717 	ldw	r2,-36(fp)
 201e050:	1880022e 	bgeu	r3,r2,201e05c <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 201e054:	e0bffd17 	ldw	r2,-12(fp)
 201e058:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 201e05c:	e0bffb17 	ldw	r2,-20(fp)
 201e060:	10c01104 	addi	r3,r2,68
 201e064:	e0bff517 	ldw	r2,-44(fp)
 201e068:	1887883a 	add	r3,r3,r2
 201e06c:	e0bff917 	ldw	r2,-28(fp)
 201e070:	1009883a 	mov	r4,r2
 201e074:	180b883a 	mov	r5,r3
 201e078:	e1bff717 	ldw	r6,-36(fp)
 201e07c:	200d2e80 	call	200d2e8 <memcpy>
      ptr   += n;
 201e080:	e0fff717 	ldw	r3,-36(fp)
 201e084:	e0bff917 	ldw	r2,-28(fp)
 201e088:	10c5883a 	add	r2,r2,r3
 201e08c:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 201e090:	e0fffd17 	ldw	r3,-12(fp)
 201e094:	e0bff717 	ldw	r2,-36(fp)
 201e098:	1885c83a 	sub	r2,r3,r2
 201e09c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201e0a0:	e0fff517 	ldw	r3,-44(fp)
 201e0a4:	e0bff717 	ldw	r2,-36(fp)
 201e0a8:	1885883a 	add	r2,r3,r2
 201e0ac:	10c1ffcc 	andi	r3,r2,2047
 201e0b0:	e0bffb17 	ldw	r2,-20(fp)
 201e0b4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 201e0b8:	e0bffd17 	ldw	r2,-12(fp)
 201e0bc:	10800048 	cmpgei	r2,r2,1
 201e0c0:	103fcc1e 	bne	r2,zero,201dff4 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 201e0c4:	e0fff917 	ldw	r3,-28(fp)
 201e0c8:	e0bffc17 	ldw	r2,-16(fp)
 201e0cc:	1880301e 	bne	r3,r2,201e190 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 201e0d0:	e0bffe17 	ldw	r2,-8(fp)
 201e0d4:	1090000c 	andi	r2,r2,16384
 201e0d8:	1004c03a 	cmpne	r2,r2,zero
 201e0dc:	10002c1e 	bne	r2,zero,201e190 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 201e0e0:	008080b4 	movhi	r2,514
 201e0e4:	1093d744 	addi	r2,r2,20317
 201e0e8:	10800003 	ldbu	r2,0(r2)
 201e0ec:	10803fcc 	andi	r2,r2,255
 201e0f0:	10800058 	cmpnei	r2,r2,1
 201e0f4:	1000161e 	bne	r2,zero,201e150 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 201e0f8:	e0bffb17 	ldw	r2,-20(fp)
 201e0fc:	10800c17 	ldw	r2,48(r2)
 201e100:	e0bff015 	stw	r2,-64(fp)
 201e104:	00800144 	movi	r2,5
 201e108:	e0bff10d 	sth	r2,-60(fp)
 201e10c:	00bfe0c4 	movi	r2,-125
 201e110:	e0bff185 	stb	r2,-58(fp)
 201e114:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201e118:	008080b4 	movhi	r2,514
 201e11c:	1093d744 	addi	r2,r2,20317
 201e120:	10800003 	ldbu	r2,0(r2)
 201e124:	10803fcc 	andi	r2,r2,255
 201e128:	1005003a 	cmpeq	r2,r2,zero
 201e12c:	1000111e 	bne	r2,zero,201e174 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201e130:	e17ff10b 	ldhu	r5,-60(fp)
 201e134:	e1bff183 	ldbu	r6,-58(fp)
 201e138:	e1fff20b 	ldhu	r7,-56(fp)
 201e13c:	e0bffa04 	addi	r2,fp,-24
 201e140:	d8800015 	stw	r2,0(sp)
 201e144:	e13ff017 	ldw	r4,-64(fp)
 201e148:	20176cc0 	call	20176cc <OSFlagPend>
    return err;
 201e14c:	00000906 	br	201e174 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 201e150:	e0bffb17 	ldw	r2,-20(fp)
 201e154:	10c00d17 	ldw	r3,52(r2)
 201e158:	e0bff617 	ldw	r2,-40(fp)
 201e15c:	1880051e 	bne	r3,r2,201e174 <altera_avalon_jtag_uart_read+0x1cc>
 201e160:	e0bffb17 	ldw	r2,-20(fp)
 201e164:	10c00917 	ldw	r3,36(r2)
 201e168:	e0bffb17 	ldw	r2,-20(fp)
 201e16c:	10800117 	ldw	r2,4(r2)
 201e170:	18bff736 	bltu	r3,r2,201e150 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 201e174:	e0bffb17 	ldw	r2,-20(fp)
 201e178:	10c00d17 	ldw	r3,52(r2)
 201e17c:	e0bff617 	ldw	r2,-40(fp)
 201e180:	18800326 	beq	r3,r2,201e190 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 201e184:	e0bffd17 	ldw	r2,-12(fp)
 201e188:	10800048 	cmpgei	r2,r2,1
 201e18c:	103f991e 	bne	r2,zero,201dff4 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 201e190:	e0bffb17 	ldw	r2,-20(fp)
 201e194:	11000a17 	ldw	r4,40(r2)
 201e198:	201aa000 	call	201aa00 <OSSemPost>

  if (ptr != buffer)
 201e19c:	e0fff917 	ldw	r3,-28(fp)
 201e1a0:	e0bffc17 	ldw	r2,-16(fp)
 201e1a4:	18801926 	beq	r3,r2,201e20c <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e1a8:	0005303a 	rdctl	r2,status
 201e1ac:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e1b0:	e0ffef17 	ldw	r3,-68(fp)
 201e1b4:	00bfff84 	movi	r2,-2
 201e1b8:	1884703a 	and	r2,r3,r2
 201e1bc:	1001703a 	wrctl	status,r2
  
  return context;
 201e1c0:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 201e1c4:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 201e1c8:	e0bffb17 	ldw	r2,-20(fp)
 201e1cc:	10800817 	ldw	r2,32(r2)
 201e1d0:	10c00054 	ori	r3,r2,1
 201e1d4:	e0bffb17 	ldw	r2,-20(fp)
 201e1d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201e1dc:	e0bffb17 	ldw	r2,-20(fp)
 201e1e0:	10800017 	ldw	r2,0(r2)
 201e1e4:	11000104 	addi	r4,r2,4
 201e1e8:	e0bffb17 	ldw	r2,-20(fp)
 201e1ec:	10800817 	ldw	r2,32(r2)
 201e1f0:	1007883a 	mov	r3,r2
 201e1f4:	2005883a 	mov	r2,r4
 201e1f8:	10c00035 	stwio	r3,0(r2)
 201e1fc:	e0bff817 	ldw	r2,-32(fp)
 201e200:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e204:	e0bfee17 	ldw	r2,-72(fp)
 201e208:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 201e20c:	e0fff917 	ldw	r3,-28(fp)
 201e210:	e0bffc17 	ldw	r2,-16(fp)
 201e214:	18800526 	beq	r3,r2,201e22c <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 201e218:	e0fff917 	ldw	r3,-28(fp)
 201e21c:	e0bffc17 	ldw	r2,-16(fp)
 201e220:	1887c83a 	sub	r3,r3,r2
 201e224:	e0ffff15 	stw	r3,-4(fp)
 201e228:	00000906 	br	201e250 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 201e22c:	e0bffe17 	ldw	r2,-8(fp)
 201e230:	1090000c 	andi	r2,r2,16384
 201e234:	1005003a 	cmpeq	r2,r2,zero
 201e238:	1000031e 	bne	r2,zero,201e248 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 201e23c:	00bffd44 	movi	r2,-11
 201e240:	e0bfff15 	stw	r2,-4(fp)
 201e244:	00000206 	br	201e250 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 201e248:	00bffec4 	movi	r2,-5
 201e24c:	e0bfff15 	stw	r2,-4(fp)
 201e250:	e0bfff17 	ldw	r2,-4(fp)
}
 201e254:	e037883a 	mov	sp,fp
 201e258:	dfc00117 	ldw	ra,4(sp)
 201e25c:	df000017 	ldw	fp,0(sp)
 201e260:	dec00204 	addi	sp,sp,8
 201e264:	f800283a 	ret

0201e268 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 201e268:	deffeb04 	addi	sp,sp,-84
 201e26c:	dfc01415 	stw	ra,80(sp)
 201e270:	df001315 	stw	fp,76(sp)
 201e274:	df001304 	addi	fp,sp,76
 201e278:	e13ffb15 	stw	r4,-20(fp)
 201e27c:	e17ffc15 	stw	r5,-16(fp)
 201e280:	e1bffd15 	stw	r6,-12(fp)
 201e284:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 201e288:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 201e28c:	e0bffc17 	ldw	r2,-16(fp)
 201e290:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 201e294:	e0bffb17 	ldw	r2,-20(fp)
 201e298:	10800b17 	ldw	r2,44(r2)
 201e29c:	e0bff315 	stw	r2,-52(fp)
 201e2a0:	e03ff40d 	sth	zero,-48(fp)
 201e2a4:	e17ff40b 	ldhu	r5,-48(fp)
 201e2a8:	e1bffa04 	addi	r6,fp,-24
 201e2ac:	e13ff317 	ldw	r4,-52(fp)
 201e2b0:	201a6080 	call	201a608 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201e2b4:	00003a06 	br	201e3a0 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 201e2b8:	e0bffb17 	ldw	r2,-20(fp)
 201e2bc:	10800f17 	ldw	r2,60(r2)
 201e2c0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 201e2c4:	e0bffb17 	ldw	r2,-20(fp)
 201e2c8:	10801017 	ldw	r2,64(r2)
 201e2cc:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 201e2d0:	e0fff917 	ldw	r3,-28(fp)
 201e2d4:	e0bff817 	ldw	r2,-32(fp)
 201e2d8:	1880062e 	bgeu	r3,r2,201e2f4 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 201e2dc:	e0fff817 	ldw	r3,-32(fp)
 201e2e0:	e0bff917 	ldw	r2,-28(fp)
 201e2e4:	1885c83a 	sub	r2,r3,r2
 201e2e8:	10bfffc4 	addi	r2,r2,-1
 201e2ec:	e0bff715 	stw	r2,-36(fp)
 201e2f0:	00000c06 	br	201e324 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 201e2f4:	e0bff817 	ldw	r2,-32(fp)
 201e2f8:	1005003a 	cmpeq	r2,r2,zero
 201e2fc:	1000051e 	bne	r2,zero,201e314 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 201e300:	00820004 	movi	r2,2048
 201e304:	e0fff917 	ldw	r3,-28(fp)
 201e308:	10c5c83a 	sub	r2,r2,r3
 201e30c:	e0bff715 	stw	r2,-36(fp)
 201e310:	00000406 	br	201e324 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 201e314:	0081ffc4 	movi	r2,2047
 201e318:	e0fff917 	ldw	r3,-28(fp)
 201e31c:	10c5c83a 	sub	r2,r2,r3
 201e320:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 201e324:	e0bff717 	ldw	r2,-36(fp)
 201e328:	1005003a 	cmpeq	r2,r2,zero
 201e32c:	10001f1e 	bne	r2,zero,201e3ac <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 201e330:	e0fffd17 	ldw	r3,-12(fp)
 201e334:	e0bff717 	ldw	r2,-36(fp)
 201e338:	1880022e 	bgeu	r3,r2,201e344 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 201e33c:	e0bffd17 	ldw	r2,-12(fp)
 201e340:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 201e344:	e0bffb17 	ldw	r2,-20(fp)
 201e348:	10c21104 	addi	r3,r2,2116
 201e34c:	e0bff917 	ldw	r2,-28(fp)
 201e350:	1885883a 	add	r2,r3,r2
 201e354:	e0fffc17 	ldw	r3,-16(fp)
 201e358:	1009883a 	mov	r4,r2
 201e35c:	180b883a 	mov	r5,r3
 201e360:	e1bff717 	ldw	r6,-36(fp)
 201e364:	200d2e80 	call	200d2e8 <memcpy>
      ptr   += n;
 201e368:	e0fff717 	ldw	r3,-36(fp)
 201e36c:	e0bffc17 	ldw	r2,-16(fp)
 201e370:	10c5883a 	add	r2,r2,r3
 201e374:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 201e378:	e0fffd17 	ldw	r3,-12(fp)
 201e37c:	e0bff717 	ldw	r2,-36(fp)
 201e380:	1885c83a 	sub	r2,r3,r2
 201e384:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201e388:	e0fff917 	ldw	r3,-28(fp)
 201e38c:	e0bff717 	ldw	r2,-36(fp)
 201e390:	1885883a 	add	r2,r3,r2
 201e394:	10c1ffcc 	andi	r3,r2,2047
 201e398:	e0bffb17 	ldw	r2,-20(fp)
 201e39c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201e3a0:	e0bffd17 	ldw	r2,-12(fp)
 201e3a4:	10800048 	cmpgei	r2,r2,1
 201e3a8:	103fc31e 	bne	r2,zero,201e2b8 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e3ac:	0005303a 	rdctl	r2,status
 201e3b0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e3b4:	e0fff217 	ldw	r3,-56(fp)
 201e3b8:	00bfff84 	movi	r2,-2
 201e3bc:	1884703a 	and	r2,r3,r2
 201e3c0:	1001703a 	wrctl	status,r2
  
  return context;
 201e3c4:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 201e3c8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201e3cc:	e0bffb17 	ldw	r2,-20(fp)
 201e3d0:	10800817 	ldw	r2,32(r2)
 201e3d4:	10c00094 	ori	r3,r2,2
 201e3d8:	e0bffb17 	ldw	r2,-20(fp)
 201e3dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201e3e0:	e0bffb17 	ldw	r2,-20(fp)
 201e3e4:	10800017 	ldw	r2,0(r2)
 201e3e8:	11000104 	addi	r4,r2,4
 201e3ec:	e0bffb17 	ldw	r2,-20(fp)
 201e3f0:	10800817 	ldw	r2,32(r2)
 201e3f4:	1007883a 	mov	r3,r2
 201e3f8:	2005883a 	mov	r2,r4
 201e3fc:	10c00035 	stwio	r3,0(r2)
 201e400:	e0bff617 	ldw	r2,-40(fp)
 201e404:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e408:	e0bff117 	ldw	r2,-60(fp)
 201e40c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 201e410:	e0bffd17 	ldw	r2,-12(fp)
 201e414:	10800050 	cmplti	r2,r2,1
 201e418:	10002d1e 	bne	r2,zero,201e4d0 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 201e41c:	e0bffe17 	ldw	r2,-8(fp)
 201e420:	1090000c 	andi	r2,r2,16384
 201e424:	1004c03a 	cmpne	r2,r2,zero
 201e428:	10002c1e 	bne	r2,zero,201e4dc <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 201e42c:	008080b4 	movhi	r2,514
 201e430:	1093d744 	addi	r2,r2,20317
 201e434:	10800003 	ldbu	r2,0(r2)
 201e438:	10803fcc 	andi	r2,r2,255
 201e43c:	10800058 	cmpnei	r2,r2,1
 201e440:	1000161e 	bne	r2,zero,201e49c <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
 201e444:	e0bffb17 	ldw	r2,-20(fp)
 201e448:	10800c17 	ldw	r2,48(r2)
 201e44c:	e0bfee15 	stw	r2,-72(fp)
 201e450:	00800184 	movi	r2,6
 201e454:	e0bfef0d 	sth	r2,-68(fp)
 201e458:	00bfe0c4 	movi	r2,-125
 201e45c:	e0bfef85 	stb	r2,-66(fp)
 201e460:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201e464:	008080b4 	movhi	r2,514
 201e468:	1093d744 	addi	r2,r2,20317
 201e46c:	10800003 	ldbu	r2,0(r2)
 201e470:	10803fcc 	andi	r2,r2,255
 201e474:	1005003a 	cmpeq	r2,r2,zero
 201e478:	1000111e 	bne	r2,zero,201e4c0 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201e47c:	e17fef0b 	ldhu	r5,-68(fp)
 201e480:	e1bfef83 	ldbu	r6,-66(fp)
 201e484:	e1fff00b 	ldhu	r7,-64(fp)
 201e488:	e0bffa44 	addi	r2,fp,-23
 201e48c:	d8800015 	stw	r2,0(sp)
 201e490:	e13fee17 	ldw	r4,-72(fp)
 201e494:	20176cc0 	call	20176cc <OSFlagPend>
    return err;
 201e498:	00000906 	br	201e4c0 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 201e49c:	e0bffb17 	ldw	r2,-20(fp)
 201e4a0:	10c01017 	ldw	r3,64(r2)
 201e4a4:	e0bff817 	ldw	r2,-32(fp)
 201e4a8:	1880051e 	bne	r3,r2,201e4c0 <altera_avalon_jtag_uart_write+0x258>
 201e4ac:	e0bffb17 	ldw	r2,-20(fp)
 201e4b0:	10c00917 	ldw	r3,36(r2)
 201e4b4:	e0bffb17 	ldw	r2,-20(fp)
 201e4b8:	10800117 	ldw	r2,4(r2)
 201e4bc:	18bff736 	bltu	r3,r2,201e49c <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 201e4c0:	e0bffb17 	ldw	r2,-20(fp)
 201e4c4:	10c01017 	ldw	r3,64(r2)
 201e4c8:	e0bff817 	ldw	r2,-32(fp)
 201e4cc:	18800326 	beq	r3,r2,201e4dc <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
 201e4d0:	e0bffd17 	ldw	r2,-12(fp)
 201e4d4:	10800048 	cmpgei	r2,r2,1
 201e4d8:	103fb11e 	bne	r2,zero,201e3a0 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 201e4dc:	e0bffb17 	ldw	r2,-20(fp)
 201e4e0:	11000b17 	ldw	r4,44(r2)
 201e4e4:	201aa000 	call	201aa00 <OSSemPost>

  if (ptr != start)
 201e4e8:	e0fffc17 	ldw	r3,-16(fp)
 201e4ec:	e0bff517 	ldw	r2,-44(fp)
 201e4f0:	18800526 	beq	r3,r2,201e508 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 201e4f4:	e0fffc17 	ldw	r3,-16(fp)
 201e4f8:	e0bff517 	ldw	r2,-44(fp)
 201e4fc:	1887c83a 	sub	r3,r3,r2
 201e500:	e0ffff15 	stw	r3,-4(fp)
 201e504:	00000906 	br	201e52c <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 201e508:	e0bffe17 	ldw	r2,-8(fp)
 201e50c:	1090000c 	andi	r2,r2,16384
 201e510:	1005003a 	cmpeq	r2,r2,zero
 201e514:	1000031e 	bne	r2,zero,201e524 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 201e518:	00bffd44 	movi	r2,-11
 201e51c:	e0bfff15 	stw	r2,-4(fp)
 201e520:	00000206 	br	201e52c <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
 201e524:	00bffec4 	movi	r2,-5
 201e528:	e0bfff15 	stw	r2,-4(fp)
 201e52c:	e0bfff17 	ldw	r2,-4(fp)
}
 201e530:	e037883a 	mov	sp,fp
 201e534:	dfc00117 	ldw	ra,4(sp)
 201e538:	df000017 	ldw	fp,0(sp)
 201e53c:	dec00204 	addi	sp,sp,8
 201e540:	f800283a 	ret

0201e544 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 201e544:	defffa04 	addi	sp,sp,-24
 201e548:	dfc00515 	stw	ra,20(sp)
 201e54c:	df000415 	stw	fp,16(sp)
 201e550:	df000404 	addi	fp,sp,16
 201e554:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 201e558:	e0bfff17 	ldw	r2,-4(fp)
 201e55c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 201e560:	e0bfff17 	ldw	r2,-4(fp)
 201e564:	10800104 	addi	r2,r2,4
 201e568:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201e56c:	0005303a 	rdctl	r2,status
 201e570:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201e574:	e0fffd17 	ldw	r3,-12(fp)
 201e578:	00bfff84 	movi	r2,-2
 201e57c:	1884703a 	and	r2,r3,r2
 201e580:	1001703a 	wrctl	status,r2
  
  return context;
 201e584:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 201e588:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 201e58c:	20143e00 	call	20143e0 <alt_tick>
 201e590:	e0bffe17 	ldw	r2,-8(fp)
 201e594:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201e598:	e0bffc17 	ldw	r2,-16(fp)
 201e59c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 201e5a0:	e037883a 	mov	sp,fp
 201e5a4:	dfc00117 	ldw	ra,4(sp)
 201e5a8:	df000017 	ldw	fp,0(sp)
 201e5ac:	dec00204 	addi	sp,sp,8
 201e5b0:	f800283a 	ret

0201e5b4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 201e5b4:	defff804 	addi	sp,sp,-32
 201e5b8:	dfc00715 	stw	ra,28(sp)
 201e5bc:	df000615 	stw	fp,24(sp)
 201e5c0:	df000604 	addi	fp,sp,24
 201e5c4:	e13ffc15 	stw	r4,-16(fp)
 201e5c8:	e17ffd15 	stw	r5,-12(fp)
 201e5cc:	e1bffe15 	stw	r6,-8(fp)
 201e5d0:	e1ffff15 	stw	r7,-4(fp)
 201e5d4:	e0bfff17 	ldw	r2,-4(fp)
 201e5d8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 201e5dc:	008080b4 	movhi	r2,514
 201e5e0:	1093d104 	addi	r2,r2,20292
 201e5e4:	10800017 	ldw	r2,0(r2)
 201e5e8:	1004c03a 	cmpne	r2,r2,zero
 201e5ec:	1000041e 	bne	r2,zero,201e600 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 201e5f0:	00c080b4 	movhi	r3,514
 201e5f4:	18d3d104 	addi	r3,r3,20292
 201e5f8:	e0bffb17 	ldw	r2,-20(fp)
 201e5fc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 201e600:	e0bffc17 	ldw	r2,-16(fp)
 201e604:	10800104 	addi	r2,r2,4
 201e608:	1007883a 	mov	r3,r2
 201e60c:	008001c4 	movi	r2,7
 201e610:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 201e614:	d8000015 	stw	zero,0(sp)
 201e618:	e13ffd17 	ldw	r4,-12(fp)
 201e61c:	e17ffe17 	ldw	r5,-8(fp)
 201e620:	018080b4 	movhi	r6,514
 201e624:	31b95104 	addi	r6,r6,-6844
 201e628:	e1fffc17 	ldw	r7,-16(fp)
 201e62c:	201f2580 	call	201f258 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 201e630:	e037883a 	mov	sp,fp
 201e634:	dfc00117 	ldw	ra,4(sp)
 201e638:	df000017 	ldw	fp,0(sp)
 201e63c:	dec00204 	addi	sp,sp,8
 201e640:	f800283a 	ret

0201e644 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 201e644:	defff904 	addi	sp,sp,-28
 201e648:	dfc00615 	stw	ra,24(sp)
 201e64c:	df000515 	stw	fp,20(sp)
 201e650:	df000504 	addi	fp,sp,20
 201e654:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 201e658:	00800144 	movi	r2,5
 201e65c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 201e660:	00800044 	movi	r2,1
 201e664:	d8800015 	stw	r2,0(sp)
 201e668:	e0bffe44 	addi	r2,fp,-7
 201e66c:	d8800115 	stw	r2,4(sp)
 201e670:	d8000215 	stw	zero,8(sp)
 201e674:	e13fff17 	ldw	r4,-4(fp)
 201e678:	000b883a 	mov	r5,zero
 201e67c:	01800044 	movi	r6,1
 201e680:	e1fffe04 	addi	r7,fp,-8
 201e684:	201fe2c0 	call	201fe2c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 201e688:	e0bffe43 	ldbu	r2,-7(fp)
 201e68c:	10803fcc 	andi	r2,r2,255
}
 201e690:	e037883a 	mov	sp,fp
 201e694:	dfc00117 	ldw	ra,4(sp)
 201e698:	df000017 	ldw	fp,0(sp)
 201e69c:	dec00204 	addi	sp,sp,8
 201e6a0:	f800283a 	ret

0201e6a4 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 201e6a4:	defff604 	addi	sp,sp,-40
 201e6a8:	dfc00915 	stw	ra,36(sp)
 201e6ac:	df000815 	stw	fp,32(sp)
 201e6b0:	df000804 	addi	fp,sp,32
 201e6b4:	e13ffd15 	stw	r4,-12(fp)
 201e6b8:	e17ffe15 	stw	r5,-8(fp)
 201e6bc:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 201e6c0:	e0bfff17 	ldw	r2,-4(fp)
 201e6c4:	1005003a 	cmpeq	r2,r2,zero
 201e6c8:	1000121e 	bne	r2,zero,201e714 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 201e6cc:	00bff604 	movi	r2,-40
 201e6d0:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 201e6d4:	e0bffe17 	ldw	r2,-8(fp)
 201e6d8:	1004d63a 	srli	r2,r2,24
 201e6dc:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 201e6e0:	e0bffe17 	ldw	r2,-8(fp)
 201e6e4:	1004d43a 	srli	r2,r2,16
 201e6e8:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 201e6ec:	e0bffe17 	ldw	r2,-8(fp)
 201e6f0:	1004d23a 	srli	r2,r2,8
 201e6f4:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 201e6f8:	e0bffe17 	ldw	r2,-8(fp)
 201e6fc:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 201e700:	00800144 	movi	r2,5
 201e704:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 201e708:	e13ffd17 	ldw	r4,-12(fp)
 201e70c:	201ec680 	call	201ec68 <epcs_enter_4_bytes_mode>
 201e710:	00000c06 	br	201e744 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
 201e714:	00bff604 	movi	r2,-40
 201e718:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 201e71c:	e0bffe17 	ldw	r2,-8(fp)
 201e720:	1004d43a 	srli	r2,r2,16
 201e724:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 201e728:	e0bffe17 	ldw	r2,-8(fp)
 201e72c:	1004d23a 	srli	r2,r2,8
 201e730:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 201e734:	e0bffe17 	ldw	r2,-8(fp)
 201e738:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 201e73c:	00800104 	movi	r2,4
 201e740:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 201e744:	e13ffd17 	ldw	r4,-12(fp)
 201e748:	201e9580 	call	201e958 <epcs_write_enable>

  alt_avalon_spi_command(
 201e74c:	e1bffb03 	ldbu	r6,-20(fp)
 201e750:	e1fffb44 	addi	r7,fp,-19
 201e754:	d8000015 	stw	zero,0(sp)
 201e758:	d8000115 	stw	zero,4(sp)
 201e75c:	d8000215 	stw	zero,8(sp)
 201e760:	e13ffd17 	ldw	r4,-12(fp)
 201e764:	000b883a 	mov	r5,zero
 201e768:	201fe2c0 	call	201fe2c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 201e76c:	e13ffd17 	ldw	r4,-12(fp)
 201e770:	201e79c0 	call	201e79c <epcs_await_wip_released>

  if(four_bytes_mode)
 201e774:	e0bfff17 	ldw	r2,-4(fp)
 201e778:	1005003a 	cmpeq	r2,r2,zero
 201e77c:	1000021e 	bne	r2,zero,201e788 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 201e780:	e13ffd17 	ldw	r4,-12(fp)
 201e784:	201ecc00 	call	201ecc0 <epcs_exit_4_bytes_mode>
  }
}
 201e788:	e037883a 	mov	sp,fp
 201e78c:	dfc00117 	ldw	ra,4(sp)
 201e790:	df000017 	ldw	fp,0(sp)
 201e794:	dec00204 	addi	sp,sp,8
 201e798:	f800283a 	ret

0201e79c <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 201e79c:	defffd04 	addi	sp,sp,-12
 201e7a0:	dfc00215 	stw	ra,8(sp)
 201e7a4:	df000115 	stw	fp,4(sp)
 201e7a8:	df000104 	addi	fp,sp,4
 201e7ac:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 201e7b0:	e13fff17 	ldw	r4,-4(fp)
 201e7b4:	201e7d40 	call	201e7d4 <epcs_test_wip>
 201e7b8:	1004c03a 	cmpne	r2,r2,zero
 201e7bc:	103ffc1e 	bne	r2,zero,201e7b0 <epcs_await_wip_released+0x14>
  {
  }
}
 201e7c0:	e037883a 	mov	sp,fp
 201e7c4:	dfc00117 	ldw	ra,4(sp)
 201e7c8:	df000017 	ldw	fp,0(sp)
 201e7cc:	dec00204 	addi	sp,sp,8
 201e7d0:	f800283a 	ret

0201e7d4 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 201e7d4:	defffd04 	addi	sp,sp,-12
 201e7d8:	dfc00215 	stw	ra,8(sp)
 201e7dc:	df000115 	stw	fp,4(sp)
 201e7e0:	df000104 	addi	fp,sp,4
 201e7e4:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 201e7e8:	e13fff17 	ldw	r4,-4(fp)
 201e7ec:	201e6440 	call	201e644 <epcs_read_status_register>
 201e7f0:	10803fcc 	andi	r2,r2,255
 201e7f4:	1080004c 	andi	r2,r2,1
}
 201e7f8:	e037883a 	mov	sp,fp
 201e7fc:	dfc00117 	ldw	ra,4(sp)
 201e800:	df000017 	ldw	fp,0(sp)
 201e804:	dec00204 	addi	sp,sp,8
 201e808:	f800283a 	ret

0201e80c <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 201e80c:	defff404 	addi	sp,sp,-48
 201e810:	dfc00b15 	stw	ra,44(sp)
 201e814:	df000a15 	stw	fp,40(sp)
 201e818:	df000a04 	addi	fp,sp,40
 201e81c:	e13ffc15 	stw	r4,-16(fp)
 201e820:	e17ffd15 	stw	r5,-12(fp)
 201e824:	e1bffe15 	stw	r6,-8(fp)
 201e828:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 201e82c:	008000c4 	movi	r2,3
 201e830:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 201e834:	e0800217 	ldw	r2,8(fp)
 201e838:	1005003a 	cmpeq	r2,r2,zero
 201e83c:	10001c1e 	bne	r2,zero,201e8b0 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 201e840:	e0bffd17 	ldw	r2,-12(fp)
 201e844:	1005d63a 	srai	r2,r2,24
 201e848:	1007883a 	mov	r3,r2
 201e84c:	00bfffc4 	movi	r2,-1
 201e850:	1884703a 	and	r2,r3,r2
 201e854:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 201e858:	e0bffd17 	ldw	r2,-12(fp)
 201e85c:	1005d43a 	srai	r2,r2,16
 201e860:	1007883a 	mov	r3,r2
 201e864:	00bfffc4 	movi	r2,-1
 201e868:	1884703a 	and	r2,r3,r2
 201e86c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 201e870:	e0bffd17 	ldw	r2,-12(fp)
 201e874:	1005d23a 	srai	r2,r2,8
 201e878:	1007883a 	mov	r3,r2
 201e87c:	00bfffc4 	movi	r2,-1
 201e880:	1884703a 	and	r2,r3,r2
 201e884:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 201e888:	e0bffd17 	ldw	r2,-12(fp)
 201e88c:	1007883a 	mov	r3,r2
 201e890:	00bfffc4 	movi	r2,-1
 201e894:	1884703a 	and	r2,r3,r2
 201e898:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 201e89c:	00800144 	movi	r2,5
 201e8a0:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 201e8a4:	e13ffc17 	ldw	r4,-16(fp)
 201e8a8:	201ec680 	call	201ec68 <epcs_enter_4_bytes_mode>
 201e8ac:	00001306 	br	201e8fc <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 201e8b0:	e0bffd17 	ldw	r2,-12(fp)
 201e8b4:	1005d43a 	srai	r2,r2,16
 201e8b8:	1007883a 	mov	r3,r2
 201e8bc:	00bfffc4 	movi	r2,-1
 201e8c0:	1884703a 	and	r2,r3,r2
 201e8c4:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 201e8c8:	e0bffd17 	ldw	r2,-12(fp)
 201e8cc:	1005d23a 	srai	r2,r2,8
 201e8d0:	1007883a 	mov	r3,r2
 201e8d4:	00bfffc4 	movi	r2,-1
 201e8d8:	1884703a 	and	r2,r3,r2
 201e8dc:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 201e8e0:	e0bffd17 	ldw	r2,-12(fp)
 201e8e4:	1007883a 	mov	r3,r2
 201e8e8:	00bfffc4 	movi	r2,-1
 201e8ec:	1884703a 	and	r2,r3,r2
 201e8f0:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 201e8f4:	00800104 	movi	r2,4
 201e8f8:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 201e8fc:	e13ffc17 	ldw	r4,-16(fp)
 201e900:	201e79c0 	call	201e79c <epcs_await_wip_released>

  alt_avalon_spi_command(
 201e904:	e0bfff17 	ldw	r2,-4(fp)
 201e908:	e1fffa04 	addi	r7,fp,-24
 201e90c:	d8800015 	stw	r2,0(sp)
 201e910:	e0bffe17 	ldw	r2,-8(fp)
 201e914:	d8800115 	stw	r2,4(sp)
 201e918:	d8000215 	stw	zero,8(sp)
 201e91c:	e13ffc17 	ldw	r4,-16(fp)
 201e920:	000b883a 	mov	r5,zero
 201e924:	e1bff917 	ldw	r6,-28(fp)
 201e928:	201fe2c0 	call	201fe2c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 201e92c:	e0800217 	ldw	r2,8(fp)
 201e930:	1005003a 	cmpeq	r2,r2,zero
 201e934:	1000021e 	bne	r2,zero,201e940 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
 201e938:	e13ffc17 	ldw	r4,-16(fp)
 201e93c:	201ecc00 	call	201ecc0 <epcs_exit_4_bytes_mode>
  }

  return length;
 201e940:	e0bfff17 	ldw	r2,-4(fp)
}
 201e944:	e037883a 	mov	sp,fp
 201e948:	dfc00117 	ldw	ra,4(sp)
 201e94c:	df000017 	ldw	fp,0(sp)
 201e950:	dec00204 	addi	sp,sp,8
 201e954:	f800283a 	ret

0201e958 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 201e958:	defff904 	addi	sp,sp,-28
 201e95c:	dfc00615 	stw	ra,24(sp)
 201e960:	df000515 	stw	fp,20(sp)
 201e964:	df000504 	addi	fp,sp,20
 201e968:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 201e96c:	00800184 	movi	r2,6
 201e970:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 201e974:	d8000015 	stw	zero,0(sp)
 201e978:	d8000115 	stw	zero,4(sp)
 201e97c:	d8000215 	stw	zero,8(sp)
 201e980:	e13fff17 	ldw	r4,-4(fp)
 201e984:	000b883a 	mov	r5,zero
 201e988:	01800044 	movi	r6,1
 201e98c:	e1fffe04 	addi	r7,fp,-8
 201e990:	201fe2c0 	call	201fe2c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 201e994:	e037883a 	mov	sp,fp
 201e998:	dfc00117 	ldw	ra,4(sp)
 201e99c:	df000017 	ldw	fp,0(sp)
 201e9a0:	dec00204 	addi	sp,sp,8
 201e9a4:	f800283a 	ret

0201e9a8 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 201e9a8:	defff804 	addi	sp,sp,-32
 201e9ac:	dfc00715 	stw	ra,28(sp)
 201e9b0:	df000615 	stw	fp,24(sp)
 201e9b4:	df000604 	addi	fp,sp,24
 201e9b8:	e13ffe15 	stw	r4,-8(fp)
 201e9bc:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 201e9c0:	00800044 	movi	r2,1
 201e9c4:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 201e9c8:	e0bfff03 	ldbu	r2,-4(fp)
 201e9cc:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 201e9d0:	d8000015 	stw	zero,0(sp)
 201e9d4:	d8000115 	stw	zero,4(sp)
 201e9d8:	d8000215 	stw	zero,8(sp)
 201e9dc:	e13ffe17 	ldw	r4,-8(fp)
 201e9e0:	000b883a 	mov	r5,zero
 201e9e4:	01800084 	movi	r6,2
 201e9e8:	e1fffd04 	addi	r7,fp,-12
 201e9ec:	201fe2c0 	call	201fe2c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 201e9f0:	e13ffe17 	ldw	r4,-8(fp)
 201e9f4:	201e79c0 	call	201e79c <epcs_await_wip_released>
}
 201e9f8:	e037883a 	mov	sp,fp
 201e9fc:	dfc00117 	ldw	ra,4(sp)
 201ea00:	df000017 	ldw	fp,0(sp)
 201ea04:	dec00204 	addi	sp,sp,8
 201ea08:	f800283a 	ret

0201ea0c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 201ea0c:	defff404 	addi	sp,sp,-48
 201ea10:	dfc00b15 	stw	ra,44(sp)
 201ea14:	df000a15 	stw	fp,40(sp)
 201ea18:	df000a04 	addi	fp,sp,40
 201ea1c:	e13ffc15 	stw	r4,-16(fp)
 201ea20:	e17ffd15 	stw	r5,-12(fp)
 201ea24:	e1bffe15 	stw	r6,-8(fp)
 201ea28:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 201ea2c:	00800084 	movi	r2,2
 201ea30:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 201ea34:	e0800217 	ldw	r2,8(fp)
 201ea38:	1005003a 	cmpeq	r2,r2,zero
 201ea3c:	10001c1e 	bne	r2,zero,201eab0 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
 201ea40:	e0bffd17 	ldw	r2,-12(fp)
 201ea44:	1005d63a 	srai	r2,r2,24
 201ea48:	1007883a 	mov	r3,r2
 201ea4c:	00bfffc4 	movi	r2,-1
 201ea50:	1884703a 	and	r2,r3,r2
 201ea54:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 201ea58:	e0bffd17 	ldw	r2,-12(fp)
 201ea5c:	1005d43a 	srai	r2,r2,16
 201ea60:	1007883a 	mov	r3,r2
 201ea64:	00bfffc4 	movi	r2,-1
 201ea68:	1884703a 	and	r2,r3,r2
 201ea6c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 201ea70:	e0bffd17 	ldw	r2,-12(fp)
 201ea74:	1005d23a 	srai	r2,r2,8
 201ea78:	1007883a 	mov	r3,r2
 201ea7c:	00bfffc4 	movi	r2,-1
 201ea80:	1884703a 	and	r2,r3,r2
 201ea84:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 201ea88:	e0bffd17 	ldw	r2,-12(fp)
 201ea8c:	1007883a 	mov	r3,r2
 201ea90:	00bfffc4 	movi	r2,-1
 201ea94:	1884703a 	and	r2,r3,r2
 201ea98:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 201ea9c:	00800144 	movi	r2,5
 201eaa0:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 201eaa4:	e13ffc17 	ldw	r4,-16(fp)
 201eaa8:	201ec680 	call	201ec68 <epcs_enter_4_bytes_mode>
 201eaac:	00001306 	br	201eafc <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 201eab0:	e0bffd17 	ldw	r2,-12(fp)
 201eab4:	1005d43a 	srai	r2,r2,16
 201eab8:	1007883a 	mov	r3,r2
 201eabc:	00bfffc4 	movi	r2,-1
 201eac0:	1884703a 	and	r2,r3,r2
 201eac4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 201eac8:	e0bffd17 	ldw	r2,-12(fp)
 201eacc:	1005d23a 	srai	r2,r2,8
 201ead0:	1007883a 	mov	r3,r2
 201ead4:	00bfffc4 	movi	r2,-1
 201ead8:	1884703a 	and	r2,r3,r2
 201eadc:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 201eae0:	e0bffd17 	ldw	r2,-12(fp)
 201eae4:	1007883a 	mov	r3,r2
 201eae8:	00bfffc4 	movi	r2,-1
 201eaec:	1884703a 	and	r2,r3,r2
 201eaf0:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 201eaf4:	00800104 	movi	r2,4
 201eaf8:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 201eafc:	e13ffc17 	ldw	r4,-16(fp)
 201eb00:	201e9580 	call	201e958 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 201eb04:	e1fffa04 	addi	r7,fp,-24
 201eb08:	d8000015 	stw	zero,0(sp)
 201eb0c:	d8000115 	stw	zero,4(sp)
 201eb10:	00800044 	movi	r2,1
 201eb14:	d8800215 	stw	r2,8(sp)
 201eb18:	e13ffc17 	ldw	r4,-16(fp)
 201eb1c:	000b883a 	mov	r5,zero
 201eb20:	e1bff917 	ldw	r6,-28(fp)
 201eb24:	201fe2c0 	call	201fe2c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 201eb28:	e1bfff17 	ldw	r6,-4(fp)
 201eb2c:	d8000015 	stw	zero,0(sp)
 201eb30:	d8000115 	stw	zero,4(sp)
 201eb34:	d8000215 	stw	zero,8(sp)
 201eb38:	e13ffc17 	ldw	r4,-16(fp)
 201eb3c:	000b883a 	mov	r5,zero
 201eb40:	e1fffe17 	ldw	r7,-8(fp)
 201eb44:	201fe2c0 	call	201fe2c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 201eb48:	e13ffc17 	ldw	r4,-16(fp)
 201eb4c:	201e79c0 	call	201e79c <epcs_await_wip_released>

  if(four_bytes_mode)
 201eb50:	e0800217 	ldw	r2,8(fp)
 201eb54:	1005003a 	cmpeq	r2,r2,zero
 201eb58:	1000021e 	bne	r2,zero,201eb64 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
 201eb5c:	e13ffc17 	ldw	r4,-16(fp)
 201eb60:	201ecc00 	call	201ecc0 <epcs_exit_4_bytes_mode>
  }

  return length;
 201eb64:	e0bfff17 	ldw	r2,-4(fp)
}
 201eb68:	e037883a 	mov	sp,fp
 201eb6c:	dfc00117 	ldw	ra,4(sp)
 201eb70:	df000017 	ldw	fp,0(sp)
 201eb74:	dec00204 	addi	sp,sp,8
 201eb78:	f800283a 	ret

0201eb7c <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 201eb7c:	defff804 	addi	sp,sp,-32
 201eb80:	dfc00715 	stw	ra,28(sp)
 201eb84:	df000615 	stw	fp,24(sp)
 201eb88:	df000604 	addi	fp,sp,24
 201eb8c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 201eb90:	00bfeac4 	movi	r2,-85
 201eb94:	e0bffd05 	stb	r2,-12(fp)
 201eb98:	e03ffd45 	stb	zero,-11(fp)
 201eb9c:	e03ffd85 	stb	zero,-10(fp)
 201eba0:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 201eba4:	00800044 	movi	r2,1
 201eba8:	d8800015 	stw	r2,0(sp)
 201ebac:	e0bffe04 	addi	r2,fp,-8
 201ebb0:	d8800115 	stw	r2,4(sp)
 201ebb4:	d8000215 	stw	zero,8(sp)
 201ebb8:	e13fff17 	ldw	r4,-4(fp)
 201ebbc:	000b883a 	mov	r5,zero
 201ebc0:	01800104 	movi	r6,4
 201ebc4:	e1fffd04 	addi	r7,fp,-12
 201ebc8:	201fe2c0 	call	201fe2c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 201ebcc:	e0bffe03 	ldbu	r2,-8(fp)
 201ebd0:	10803fcc 	andi	r2,r2,255
}
 201ebd4:	e037883a 	mov	sp,fp
 201ebd8:	dfc00117 	ldw	ra,4(sp)
 201ebdc:	df000017 	ldw	fp,0(sp)
 201ebe0:	dec00204 	addi	sp,sp,8
 201ebe4:	f800283a 	ret

0201ebe8 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 201ebe8:	defff904 	addi	sp,sp,-28
 201ebec:	dfc00615 	stw	ra,24(sp)
 201ebf0:	df000515 	stw	fp,20(sp)
 201ebf4:	df000504 	addi	fp,sp,20
 201ebf8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 201ebfc:	00bfe7c4 	movi	r2,-97
 201ec00:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 201ec04:	008000c4 	movi	r2,3
 201ec08:	d8800015 	stw	r2,0(sp)
 201ec0c:	e0bffe44 	addi	r2,fp,-7
 201ec10:	d8800115 	stw	r2,4(sp)
 201ec14:	d8000215 	stw	zero,8(sp)
 201ec18:	e13fff17 	ldw	r4,-4(fp)
 201ec1c:	000b883a 	mov	r5,zero
 201ec20:	01800044 	movi	r6,1
 201ec24:	e1fffe04 	addi	r7,fp,-8
 201ec28:	201fe2c0 	call	201fe2c <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 201ec2c:	e0bffe43 	ldbu	r2,-7(fp)
 201ec30:	10803fcc 	andi	r2,r2,255
 201ec34:	1006943a 	slli	r3,r2,16
 201ec38:	e0bffe83 	ldbu	r2,-6(fp)
 201ec3c:	10803fcc 	andi	r2,r2,255
 201ec40:	1004923a 	slli	r2,r2,8
 201ec44:	1886b03a 	or	r3,r3,r2
 201ec48:	e0bffec3 	ldbu	r2,-5(fp)
 201ec4c:	10803fcc 	andi	r2,r2,255
 201ec50:	1884b03a 	or	r2,r3,r2
}
 201ec54:	e037883a 	mov	sp,fp
 201ec58:	dfc00117 	ldw	ra,4(sp)
 201ec5c:	df000017 	ldw	fp,0(sp)
 201ec60:	dec00204 	addi	sp,sp,8
 201ec64:	f800283a 	ret

0201ec68 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 201ec68:	defff904 	addi	sp,sp,-28
 201ec6c:	dfc00615 	stw	ra,24(sp)
 201ec70:	df000515 	stw	fp,20(sp)
 201ec74:	df000504 	addi	fp,sp,20
 201ec78:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 201ec7c:	00bfedc4 	movi	r2,-73
 201ec80:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 201ec84:	e13fff17 	ldw	r4,-4(fp)
 201ec88:	201e9580 	call	201e958 <epcs_write_enable>

  alt_avalon_spi_command(
 201ec8c:	d8000015 	stw	zero,0(sp)
 201ec90:	d8000115 	stw	zero,4(sp)
 201ec94:	d8000215 	stw	zero,8(sp)
 201ec98:	e13fff17 	ldw	r4,-4(fp)
 201ec9c:	000b883a 	mov	r5,zero
 201eca0:	01800044 	movi	r6,1
 201eca4:	e1fffe04 	addi	r7,fp,-8
 201eca8:	201fe2c0 	call	201fe2c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 201ecac:	e037883a 	mov	sp,fp
 201ecb0:	dfc00117 	ldw	ra,4(sp)
 201ecb4:	df000017 	ldw	fp,0(sp)
 201ecb8:	dec00204 	addi	sp,sp,8
 201ecbc:	f800283a 	ret

0201ecc0 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 201ecc0:	defff904 	addi	sp,sp,-28
 201ecc4:	dfc00615 	stw	ra,24(sp)
 201ecc8:	df000515 	stw	fp,20(sp)
 201eccc:	df000504 	addi	fp,sp,20
 201ecd0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 201ecd4:	00bffa44 	movi	r2,-23
 201ecd8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 201ecdc:	e13fff17 	ldw	r4,-4(fp)
 201ece0:	201e9580 	call	201e958 <epcs_write_enable>

  alt_avalon_spi_command(
 201ece4:	d8000015 	stw	zero,0(sp)
 201ece8:	d8000115 	stw	zero,4(sp)
 201ecec:	d8000215 	stw	zero,8(sp)
 201ecf0:	e13fff17 	ldw	r4,-4(fp)
 201ecf4:	000b883a 	mov	r5,zero
 201ecf8:	01800044 	movi	r6,1
 201ecfc:	e1fffe04 	addi	r7,fp,-8
 201ed00:	201fe2c0 	call	201fe2c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 201ed04:	e037883a 	mov	sp,fp
 201ed08:	dfc00117 	ldw	ra,4(sp)
 201ed0c:	df000017 	ldw	fp,0(sp)
 201ed10:	dec00204 	addi	sp,sp,8
 201ed14:	f800283a 	ret

0201ed18 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 201ed18:	defff404 	addi	sp,sp,-48
 201ed1c:	df000b15 	stw	fp,44(sp)
 201ed20:	df000b04 	addi	fp,sp,44
 201ed24:	e13ffb15 	stw	r4,-20(fp)
 201ed28:	e17ffc15 	stw	r5,-16(fp)
 201ed2c:	e1bffd15 	stw	r6,-12(fp)
 201ed30:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 201ed34:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201ed38:	008080b4 	movhi	r2,514
 201ed3c:	1093d104 	addi	r2,r2,20292
 201ed40:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 201ed44:	1005003a 	cmpeq	r2,r2,zero
 201ed48:	1000411e 	bne	r2,zero,201ee50 <alt_alarm_start+0x138>
  {
    if (alarm)
 201ed4c:	e0bffb17 	ldw	r2,-20(fp)
 201ed50:	1005003a 	cmpeq	r2,r2,zero
 201ed54:	10003b1e 	bne	r2,zero,201ee44 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 201ed58:	e0fffb17 	ldw	r3,-20(fp)
 201ed5c:	e0bffd17 	ldw	r2,-12(fp)
 201ed60:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 201ed64:	e0fffb17 	ldw	r3,-20(fp)
 201ed68:	e0bffe17 	ldw	r2,-8(fp)
 201ed6c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ed70:	0005303a 	rdctl	r2,status
 201ed74:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ed78:	e0fff817 	ldw	r3,-32(fp)
 201ed7c:	00bfff84 	movi	r2,-2
 201ed80:	1884703a 	and	r2,r3,r2
 201ed84:	1001703a 	wrctl	status,r2
  
  return context;
 201ed88:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 201ed8c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 201ed90:	008080b4 	movhi	r2,514
 201ed94:	1093d204 	addi	r2,r2,20296
 201ed98:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 201ed9c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 201eda0:	e0fffc17 	ldw	r3,-16(fp)
 201eda4:	e0bff917 	ldw	r2,-28(fp)
 201eda8:	1885883a 	add	r2,r3,r2
 201edac:	10c00044 	addi	r3,r2,1
 201edb0:	e0bffb17 	ldw	r2,-20(fp)
 201edb4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 201edb8:	e0bffb17 	ldw	r2,-20(fp)
 201edbc:	10c00217 	ldw	r3,8(r2)
 201edc0:	e0bff917 	ldw	r2,-28(fp)
 201edc4:	1880042e 	bgeu	r3,r2,201edd8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 201edc8:	e0fffb17 	ldw	r3,-20(fp)
 201edcc:	00800044 	movi	r2,1
 201edd0:	18800405 	stb	r2,16(r3)
 201edd4:	00000206 	br	201ede0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 201edd8:	e0bffb17 	ldw	r2,-20(fp)
 201eddc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 201ede0:	e0fffb17 	ldw	r3,-20(fp)
 201ede4:	008080b4 	movhi	r2,514
 201ede8:	108c2804 	addi	r2,r2,12448
 201edec:	e0bff615 	stw	r2,-40(fp)
 201edf0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201edf4:	e0fff717 	ldw	r3,-36(fp)
 201edf8:	e0bff617 	ldw	r2,-40(fp)
 201edfc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 201ee00:	e0bff617 	ldw	r2,-40(fp)
 201ee04:	10c00017 	ldw	r3,0(r2)
 201ee08:	e0bff717 	ldw	r2,-36(fp)
 201ee0c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201ee10:	e0bff617 	ldw	r2,-40(fp)
 201ee14:	10c00017 	ldw	r3,0(r2)
 201ee18:	e0bff717 	ldw	r2,-36(fp)
 201ee1c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 201ee20:	e0fff617 	ldw	r3,-40(fp)
 201ee24:	e0bff717 	ldw	r2,-36(fp)
 201ee28:	18800015 	stw	r2,0(r3)
 201ee2c:	e0bffa17 	ldw	r2,-24(fp)
 201ee30:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ee34:	e0bff517 	ldw	r2,-44(fp)
 201ee38:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 201ee3c:	e03fff15 	stw	zero,-4(fp)
 201ee40:	00000506 	br	201ee58 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 201ee44:	00bffa84 	movi	r2,-22
 201ee48:	e0bfff15 	stw	r2,-4(fp)
 201ee4c:	00000206 	br	201ee58 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 201ee50:	00bfde84 	movi	r2,-134
 201ee54:	e0bfff15 	stw	r2,-4(fp)
 201ee58:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 201ee5c:	e037883a 	mov	sp,fp
 201ee60:	df000017 	ldw	fp,0(sp)
 201ee64:	dec00104 	addi	sp,sp,4
 201ee68:	f800283a 	ret

0201ee6c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 201ee6c:	defffa04 	addi	sp,sp,-24
 201ee70:	dfc00515 	stw	ra,20(sp)
 201ee74:	df000415 	stw	fp,16(sp)
 201ee78:	df000404 	addi	fp,sp,16
 201ee7c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 201ee80:	008000c4 	movi	r2,3
 201ee84:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 201ee88:	e0fffc17 	ldw	r3,-16(fp)
 201ee8c:	008003f4 	movhi	r2,15
 201ee90:	10909004 	addi	r2,r2,16960
 201ee94:	188b383a 	mul	r5,r3,r2
 201ee98:	01017db4 	movhi	r4,1526
 201ee9c:	21384004 	addi	r4,r4,-7936
 201eea0:	2005ab40 	call	2005ab4 <__udivsi3>
 201eea4:	100b883a 	mov	r5,r2
 201eea8:	01200034 	movhi	r4,32768
 201eeac:	213fffc4 	addi	r4,r4,-1
 201eeb0:	2005ab40 	call	2005ab4 <__udivsi3>
 201eeb4:	100b883a 	mov	r5,r2
 201eeb8:	e13fff17 	ldw	r4,-4(fp)
 201eebc:	2005ab40 	call	2005ab4 <__udivsi3>
 201eec0:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 201eec4:	e0bffd17 	ldw	r2,-12(fp)
 201eec8:	1005003a 	cmpeq	r2,r2,zero
 201eecc:	1000281e 	bne	r2,zero,201ef70 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 201eed0:	e03ffe15 	stw	zero,-8(fp)
 201eed4:	00001606 	br	201ef30 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 201eed8:	00a00034 	movhi	r2,32768
 201eedc:	10bfffc4 	addi	r2,r2,-1
 201eee0:	10bfffc4 	addi	r2,r2,-1
 201eee4:	103ffe1e 	bne	r2,zero,201eee0 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 201eee8:	e0fffc17 	ldw	r3,-16(fp)
 201eeec:	008003f4 	movhi	r2,15
 201eef0:	10909004 	addi	r2,r2,16960
 201eef4:	188b383a 	mul	r5,r3,r2
 201eef8:	01017db4 	movhi	r4,1526
 201eefc:	21384004 	addi	r4,r4,-7936
 201ef00:	2005ab40 	call	2005ab4 <__udivsi3>
 201ef04:	100b883a 	mov	r5,r2
 201ef08:	01200034 	movhi	r4,32768
 201ef0c:	213fffc4 	addi	r4,r4,-1
 201ef10:	2005ab40 	call	2005ab4 <__udivsi3>
 201ef14:	1007883a 	mov	r3,r2
 201ef18:	e0bfff17 	ldw	r2,-4(fp)
 201ef1c:	10c5c83a 	sub	r2,r2,r3
 201ef20:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 201ef24:	e0bffe17 	ldw	r2,-8(fp)
 201ef28:	10800044 	addi	r2,r2,1
 201ef2c:	e0bffe15 	stw	r2,-8(fp)
 201ef30:	e0fffe17 	ldw	r3,-8(fp)
 201ef34:	e0bffd17 	ldw	r2,-12(fp)
 201ef38:	18bfe716 	blt	r3,r2,201eed8 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 201ef3c:	e0fffc17 	ldw	r3,-16(fp)
 201ef40:	008003f4 	movhi	r2,15
 201ef44:	10909004 	addi	r2,r2,16960
 201ef48:	188b383a 	mul	r5,r3,r2
 201ef4c:	01017db4 	movhi	r4,1526
 201ef50:	21384004 	addi	r4,r4,-7936
 201ef54:	2005ab40 	call	2005ab4 <__udivsi3>
 201ef58:	1007883a 	mov	r3,r2
 201ef5c:	e0bfff17 	ldw	r2,-4(fp)
 201ef60:	1885383a 	mul	r2,r3,r2
 201ef64:	10bfffc4 	addi	r2,r2,-1
 201ef68:	103ffe1e 	bne	r2,zero,201ef64 <alt_busy_sleep+0xf8>
 201ef6c:	00000c06 	br	201efa0 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 201ef70:	e0fffc17 	ldw	r3,-16(fp)
 201ef74:	008003f4 	movhi	r2,15
 201ef78:	10909004 	addi	r2,r2,16960
 201ef7c:	188b383a 	mul	r5,r3,r2
 201ef80:	01017db4 	movhi	r4,1526
 201ef84:	21384004 	addi	r4,r4,-7936
 201ef88:	2005ab40 	call	2005ab4 <__udivsi3>
 201ef8c:	1007883a 	mov	r3,r2
 201ef90:	e0bfff17 	ldw	r2,-4(fp)
 201ef94:	1885383a 	mul	r2,r3,r2
 201ef98:	10bfffc4 	addi	r2,r2,-1
 201ef9c:	00bffe16 	blt	zero,r2,201ef98 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 201efa0:	0005883a 	mov	r2,zero
}
 201efa4:	e037883a 	mov	sp,fp
 201efa8:	dfc00117 	ldw	ra,4(sp)
 201efac:	df000017 	ldw	fp,0(sp)
 201efb0:	dec00204 	addi	sp,sp,8
 201efb4:	f800283a 	ret

0201efb8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 201efb8:	defff904 	addi	sp,sp,-28
 201efbc:	dfc00615 	stw	ra,24(sp)
 201efc0:	df000515 	stw	fp,20(sp)
 201efc4:	df000504 	addi	fp,sp,20
 201efc8:	e13ffd15 	stw	r4,-12(fp)
 201efcc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 201efd0:	e0bffd17 	ldw	r2,-12(fp)
 201efd4:	1005003a 	cmpeq	r2,r2,zero
 201efd8:	1000041e 	bne	r2,zero,201efec <alt_dev_llist_insert+0x34>
 201efdc:	e0bffd17 	ldw	r2,-12(fp)
 201efe0:	10800217 	ldw	r2,8(r2)
 201efe4:	1004c03a 	cmpne	r2,r2,zero
 201efe8:	1000071e 	bne	r2,zero,201f008 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 201efec:	201f06c0 	call	201f06c <alt_get_errno>
 201eff0:	1007883a 	mov	r3,r2
 201eff4:	00800584 	movi	r2,22
 201eff8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 201effc:	00bffa84 	movi	r2,-22
 201f000:	e0bfff15 	stw	r2,-4(fp)
 201f004:	00001306 	br	201f054 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 201f008:	e0fffd17 	ldw	r3,-12(fp)
 201f00c:	e0bffe17 	ldw	r2,-8(fp)
 201f010:	e0bffb15 	stw	r2,-20(fp)
 201f014:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201f018:	e0fffc17 	ldw	r3,-16(fp)
 201f01c:	e0bffb17 	ldw	r2,-20(fp)
 201f020:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 201f024:	e0bffb17 	ldw	r2,-20(fp)
 201f028:	10c00017 	ldw	r3,0(r2)
 201f02c:	e0bffc17 	ldw	r2,-16(fp)
 201f030:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201f034:	e0bffb17 	ldw	r2,-20(fp)
 201f038:	10c00017 	ldw	r3,0(r2)
 201f03c:	e0bffc17 	ldw	r2,-16(fp)
 201f040:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 201f044:	e0fffb17 	ldw	r3,-20(fp)
 201f048:	e0bffc17 	ldw	r2,-16(fp)
 201f04c:	18800015 	stw	r2,0(r3)

  return 0;  
 201f050:	e03fff15 	stw	zero,-4(fp)
 201f054:	e0bfff17 	ldw	r2,-4(fp)
}
 201f058:	e037883a 	mov	sp,fp
 201f05c:	dfc00117 	ldw	ra,4(sp)
 201f060:	df000017 	ldw	fp,0(sp)
 201f064:	dec00204 	addi	sp,sp,8
 201f068:	f800283a 	ret

0201f06c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201f06c:	defffd04 	addi	sp,sp,-12
 201f070:	dfc00215 	stw	ra,8(sp)
 201f074:	df000115 	stw	fp,4(sp)
 201f078:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 201f07c:	008080b4 	movhi	r2,514
 201f080:	108c2304 	addi	r2,r2,12428
 201f084:	10800017 	ldw	r2,0(r2)
 201f088:	1005003a 	cmpeq	r2,r2,zero
 201f08c:	1000061e 	bne	r2,zero,201f0a8 <alt_get_errno+0x3c>
 201f090:	008080b4 	movhi	r2,514
 201f094:	108c2304 	addi	r2,r2,12428
 201f098:	10800017 	ldw	r2,0(r2)
 201f09c:	103ee83a 	callr	r2
 201f0a0:	e0bfff15 	stw	r2,-4(fp)
 201f0a4:	00000306 	br	201f0b4 <alt_get_errno+0x48>
 201f0a8:	008080b4 	movhi	r2,514
 201f0ac:	1093c804 	addi	r2,r2,20256
 201f0b0:	e0bfff15 	stw	r2,-4(fp)
 201f0b4:	e0bfff17 	ldw	r2,-4(fp)
}
 201f0b8:	e037883a 	mov	sp,fp
 201f0bc:	dfc00117 	ldw	ra,4(sp)
 201f0c0:	df000017 	ldw	fp,0(sp)
 201f0c4:	dec00204 	addi	sp,sp,8
 201f0c8:	f800283a 	ret

0201f0cc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 201f0cc:	defffd04 	addi	sp,sp,-12
 201f0d0:	dfc00215 	stw	ra,8(sp)
 201f0d4:	df000115 	stw	fp,4(sp)
 201f0d8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201f0dc:	00bfff04 	movi	r2,-4
 201f0e0:	00c080b4 	movhi	r3,514
 201f0e4:	18c1c804 	addi	r3,r3,1824
 201f0e8:	1885883a 	add	r2,r3,r2
 201f0ec:	e0bfff15 	stw	r2,-4(fp)
 201f0f0:	00000606 	br	201f10c <_do_ctors+0x40>
        (*ctor) (); 
 201f0f4:	e0bfff17 	ldw	r2,-4(fp)
 201f0f8:	10800017 	ldw	r2,0(r2)
 201f0fc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201f100:	e0bfff17 	ldw	r2,-4(fp)
 201f104:	10bfff04 	addi	r2,r2,-4
 201f108:	e0bfff15 	stw	r2,-4(fp)
 201f10c:	e0ffff17 	ldw	r3,-4(fp)
 201f110:	008080b4 	movhi	r2,514
 201f114:	1081c704 	addi	r2,r2,1820
 201f118:	18bff62e 	bgeu	r3,r2,201f0f4 <_do_ctors+0x28>
        (*ctor) (); 
}
 201f11c:	e037883a 	mov	sp,fp
 201f120:	dfc00117 	ldw	ra,4(sp)
 201f124:	df000017 	ldw	fp,0(sp)
 201f128:	dec00204 	addi	sp,sp,8
 201f12c:	f800283a 	ret

0201f130 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 201f130:	defffd04 	addi	sp,sp,-12
 201f134:	dfc00215 	stw	ra,8(sp)
 201f138:	df000115 	stw	fp,4(sp)
 201f13c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201f140:	00bfff04 	movi	r2,-4
 201f144:	00c080b4 	movhi	r3,514
 201f148:	18c1c804 	addi	r3,r3,1824
 201f14c:	1885883a 	add	r2,r3,r2
 201f150:	e0bfff15 	stw	r2,-4(fp)
 201f154:	00000606 	br	201f170 <_do_dtors+0x40>
        (*dtor) (); 
 201f158:	e0bfff17 	ldw	r2,-4(fp)
 201f15c:	10800017 	ldw	r2,0(r2)
 201f160:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201f164:	e0bfff17 	ldw	r2,-4(fp)
 201f168:	10bfff04 	addi	r2,r2,-4
 201f16c:	e0bfff15 	stw	r2,-4(fp)
 201f170:	e0ffff17 	ldw	r3,-4(fp)
 201f174:	008080b4 	movhi	r2,514
 201f178:	1081c804 	addi	r2,r2,1824
 201f17c:	18bff62e 	bgeu	r3,r2,201f158 <_do_dtors+0x28>
        (*dtor) (); 
}
 201f180:	e037883a 	mov	sp,fp
 201f184:	dfc00117 	ldw	ra,4(sp)
 201f188:	df000017 	ldw	fp,0(sp)
 201f18c:	dec00204 	addi	sp,sp,8
 201f190:	f800283a 	ret

0201f194 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 201f194:	defff904 	addi	sp,sp,-28
 201f198:	dfc00615 	stw	ra,24(sp)
 201f19c:	df000515 	stw	fp,20(sp)
 201f1a0:	df000504 	addi	fp,sp,20
 201f1a4:	e13ffd15 	stw	r4,-12(fp)
 201f1a8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 201f1ac:	e0bffe17 	ldw	r2,-8(fp)
 201f1b0:	10800017 	ldw	r2,0(r2)
 201f1b4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 201f1b8:	e13ffd17 	ldw	r4,-12(fp)
 201f1bc:	2006cd40 	call	2006cd4 <strlen>
 201f1c0:	10800044 	addi	r2,r2,1
 201f1c4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201f1c8:	00000d06 	br	201f200 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 201f1cc:	e0bffc17 	ldw	r2,-16(fp)
 201f1d0:	11000217 	ldw	r4,8(r2)
 201f1d4:	e1bffb17 	ldw	r6,-20(fp)
 201f1d8:	e17ffd17 	ldw	r5,-12(fp)
 201f1dc:	20203540 	call	2020354 <memcmp>
 201f1e0:	1004c03a 	cmpne	r2,r2,zero
 201f1e4:	1000031e 	bne	r2,zero,201f1f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 201f1e8:	e0bffc17 	ldw	r2,-16(fp)
 201f1ec:	e0bfff15 	stw	r2,-4(fp)
 201f1f0:	00000706 	br	201f210 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 201f1f4:	e0bffc17 	ldw	r2,-16(fp)
 201f1f8:	10800017 	ldw	r2,0(r2)
 201f1fc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201f200:	e0fffe17 	ldw	r3,-8(fp)
 201f204:	e0bffc17 	ldw	r2,-16(fp)
 201f208:	10fff01e 	bne	r2,r3,201f1cc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 201f20c:	e03fff15 	stw	zero,-4(fp)
 201f210:	e0bfff17 	ldw	r2,-4(fp)
}
 201f214:	e037883a 	mov	sp,fp
 201f218:	dfc00117 	ldw	ra,4(sp)
 201f21c:	df000017 	ldw	fp,0(sp)
 201f220:	dec00204 	addi	sp,sp,8
 201f224:	f800283a 	ret

0201f228 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 201f228:	defffe04 	addi	sp,sp,-8
 201f22c:	dfc00115 	stw	ra,4(sp)
 201f230:	df000015 	stw	fp,0(sp)
 201f234:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 201f238:	0009883a 	mov	r4,zero
 201f23c:	01410004 	movi	r5,1024
 201f240:	20202780 	call	2020278 <alt_icache_flush>
#endif
}
 201f244:	e037883a 	mov	sp,fp
 201f248:	dfc00117 	ldw	ra,4(sp)
 201f24c:	df000017 	ldw	fp,0(sp)
 201f250:	dec00204 	addi	sp,sp,8
 201f254:	f800283a 	ret

0201f258 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201f258:	defff904 	addi	sp,sp,-28
 201f25c:	dfc00615 	stw	ra,24(sp)
 201f260:	df000515 	stw	fp,20(sp)
 201f264:	df000504 	addi	fp,sp,20
 201f268:	e13ffc15 	stw	r4,-16(fp)
 201f26c:	e17ffd15 	stw	r5,-12(fp)
 201f270:	e1bffe15 	stw	r6,-8(fp)
 201f274:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 201f278:	e0800217 	ldw	r2,8(fp)
 201f27c:	d8800015 	stw	r2,0(sp)
 201f280:	e13ffc17 	ldw	r4,-16(fp)
 201f284:	e17ffd17 	ldw	r5,-12(fp)
 201f288:	e1bffe17 	ldw	r6,-8(fp)
 201f28c:	e1ffff17 	ldw	r7,-4(fp)
 201f290:	201f42c0 	call	201f42c <alt_iic_isr_register>
}  
 201f294:	e037883a 	mov	sp,fp
 201f298:	dfc00117 	ldw	ra,4(sp)
 201f29c:	df000017 	ldw	fp,0(sp)
 201f2a0:	dec00204 	addi	sp,sp,8
 201f2a4:	f800283a 	ret

0201f2a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 201f2a8:	defff904 	addi	sp,sp,-28
 201f2ac:	df000615 	stw	fp,24(sp)
 201f2b0:	df000604 	addi	fp,sp,24
 201f2b4:	e13ffe15 	stw	r4,-8(fp)
 201f2b8:	e17fff15 	stw	r5,-4(fp)
 201f2bc:	e0bfff17 	ldw	r2,-4(fp)
 201f2c0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f2c4:	0005303a 	rdctl	r2,status
 201f2c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f2cc:	e0fffb17 	ldw	r3,-20(fp)
 201f2d0:	00bfff84 	movi	r2,-2
 201f2d4:	1884703a 	and	r2,r3,r2
 201f2d8:	1001703a 	wrctl	status,r2
  
  return context;
 201f2dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201f2e0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 201f2e4:	e0fffc17 	ldw	r3,-16(fp)
 201f2e8:	00800044 	movi	r2,1
 201f2ec:	10c4983a 	sll	r2,r2,r3
 201f2f0:	1007883a 	mov	r3,r2
 201f2f4:	008080b4 	movhi	r2,514
 201f2f8:	1093cd04 	addi	r2,r2,20276
 201f2fc:	10800017 	ldw	r2,0(r2)
 201f300:	1886b03a 	or	r3,r3,r2
 201f304:	008080b4 	movhi	r2,514
 201f308:	1093cd04 	addi	r2,r2,20276
 201f30c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201f310:	008080b4 	movhi	r2,514
 201f314:	1093cd04 	addi	r2,r2,20276
 201f318:	10800017 	ldw	r2,0(r2)
 201f31c:	100170fa 	wrctl	ienable,r2
 201f320:	e0bffd17 	ldw	r2,-12(fp)
 201f324:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f328:	e0bffa17 	ldw	r2,-24(fp)
 201f32c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201f330:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 201f334:	e037883a 	mov	sp,fp
 201f338:	df000017 	ldw	fp,0(sp)
 201f33c:	dec00104 	addi	sp,sp,4
 201f340:	f800283a 	ret

0201f344 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 201f344:	defff904 	addi	sp,sp,-28
 201f348:	df000615 	stw	fp,24(sp)
 201f34c:	df000604 	addi	fp,sp,24
 201f350:	e13ffe15 	stw	r4,-8(fp)
 201f354:	e17fff15 	stw	r5,-4(fp)
 201f358:	e0bfff17 	ldw	r2,-4(fp)
 201f35c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f360:	0005303a 	rdctl	r2,status
 201f364:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f368:	e0fffb17 	ldw	r3,-20(fp)
 201f36c:	00bfff84 	movi	r2,-2
 201f370:	1884703a 	and	r2,r3,r2
 201f374:	1001703a 	wrctl	status,r2
  
  return context;
 201f378:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201f37c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 201f380:	e0fffc17 	ldw	r3,-16(fp)
 201f384:	00800044 	movi	r2,1
 201f388:	10c4983a 	sll	r2,r2,r3
 201f38c:	0084303a 	nor	r2,zero,r2
 201f390:	1007883a 	mov	r3,r2
 201f394:	008080b4 	movhi	r2,514
 201f398:	1093cd04 	addi	r2,r2,20276
 201f39c:	10800017 	ldw	r2,0(r2)
 201f3a0:	1886703a 	and	r3,r3,r2
 201f3a4:	008080b4 	movhi	r2,514
 201f3a8:	1093cd04 	addi	r2,r2,20276
 201f3ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201f3b0:	008080b4 	movhi	r2,514
 201f3b4:	1093cd04 	addi	r2,r2,20276
 201f3b8:	10800017 	ldw	r2,0(r2)
 201f3bc:	100170fa 	wrctl	ienable,r2
 201f3c0:	e0bffd17 	ldw	r2,-12(fp)
 201f3c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f3c8:	e0bffa17 	ldw	r2,-24(fp)
 201f3cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201f3d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 201f3d4:	e037883a 	mov	sp,fp
 201f3d8:	df000017 	ldw	fp,0(sp)
 201f3dc:	dec00104 	addi	sp,sp,4
 201f3e0:	f800283a 	ret

0201f3e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 201f3e4:	defffc04 	addi	sp,sp,-16
 201f3e8:	df000315 	stw	fp,12(sp)
 201f3ec:	df000304 	addi	fp,sp,12
 201f3f0:	e13ffe15 	stw	r4,-8(fp)
 201f3f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 201f3f8:	000530fa 	rdctl	r2,ienable
 201f3fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 201f400:	e0ffff17 	ldw	r3,-4(fp)
 201f404:	00800044 	movi	r2,1
 201f408:	10c4983a 	sll	r2,r2,r3
 201f40c:	1007883a 	mov	r3,r2
 201f410:	e0bffd17 	ldw	r2,-12(fp)
 201f414:	1884703a 	and	r2,r3,r2
 201f418:	1004c03a 	cmpne	r2,r2,zero
}
 201f41c:	e037883a 	mov	sp,fp
 201f420:	df000017 	ldw	fp,0(sp)
 201f424:	dec00104 	addi	sp,sp,4
 201f428:	f800283a 	ret

0201f42c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201f42c:	defff404 	addi	sp,sp,-48
 201f430:	dfc00b15 	stw	ra,44(sp)
 201f434:	df000a15 	stw	fp,40(sp)
 201f438:	df000a04 	addi	fp,sp,40
 201f43c:	e13ffb15 	stw	r4,-20(fp)
 201f440:	e17ffc15 	stw	r5,-16(fp)
 201f444:	e1bffd15 	stw	r6,-12(fp)
 201f448:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 201f44c:	00bffa84 	movi	r2,-22
 201f450:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 201f454:	e0bffc17 	ldw	r2,-16(fp)
 201f458:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 201f45c:	e0bff917 	ldw	r2,-28(fp)
 201f460:	10800808 	cmpgei	r2,r2,32
 201f464:	1000291e 	bne	r2,zero,201f50c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201f468:	0005303a 	rdctl	r2,status
 201f46c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201f470:	e0fff717 	ldw	r3,-36(fp)
 201f474:	00bfff84 	movi	r2,-2
 201f478:	1884703a 	and	r2,r3,r2
 201f47c:	1001703a 	wrctl	status,r2
  
  return context;
 201f480:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 201f484:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 201f488:	e0bff917 	ldw	r2,-28(fp)
 201f48c:	00c080f4 	movhi	r3,515
 201f490:	18e0ca04 	addi	r3,r3,-31960
 201f494:	100490fa 	slli	r2,r2,3
 201f498:	10c7883a 	add	r3,r2,r3
 201f49c:	e0bffd17 	ldw	r2,-12(fp)
 201f4a0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 201f4a4:	e0bff917 	ldw	r2,-28(fp)
 201f4a8:	00c080f4 	movhi	r3,515
 201f4ac:	18e0ca04 	addi	r3,r3,-31960
 201f4b0:	100490fa 	slli	r2,r2,3
 201f4b4:	10c5883a 	add	r2,r2,r3
 201f4b8:	10c00104 	addi	r3,r2,4
 201f4bc:	e0bffe17 	ldw	r2,-8(fp)
 201f4c0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 201f4c4:	e0bffd17 	ldw	r2,-12(fp)
 201f4c8:	1005003a 	cmpeq	r2,r2,zero
 201f4cc:	1000051e 	bne	r2,zero,201f4e4 <alt_iic_isr_register+0xb8>
 201f4d0:	e17ff917 	ldw	r5,-28(fp)
 201f4d4:	e13ffb17 	ldw	r4,-20(fp)
 201f4d8:	201f2a80 	call	201f2a8 <alt_ic_irq_enable>
 201f4dc:	e0bfff15 	stw	r2,-4(fp)
 201f4e0:	00000406 	br	201f4f4 <alt_iic_isr_register+0xc8>
 201f4e4:	e17ff917 	ldw	r5,-28(fp)
 201f4e8:	e13ffb17 	ldw	r4,-20(fp)
 201f4ec:	201f3440 	call	201f344 <alt_ic_irq_disable>
 201f4f0:	e0bfff15 	stw	r2,-4(fp)
 201f4f4:	e0bfff17 	ldw	r2,-4(fp)
 201f4f8:	e0bffa15 	stw	r2,-24(fp)
 201f4fc:	e0bff817 	ldw	r2,-32(fp)
 201f500:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201f504:	e0bff617 	ldw	r2,-40(fp)
 201f508:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 201f50c:	e0bffa17 	ldw	r2,-24(fp)
}
 201f510:	e037883a 	mov	sp,fp
 201f514:	dfc00117 	ldw	ra,4(sp)
 201f518:	df000017 	ldw	fp,0(sp)
 201f51c:	dec00204 	addi	sp,sp,8
 201f520:	f800283a 	ret

0201f524 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 201f524:	defff904 	addi	sp,sp,-28
 201f528:	dfc00615 	stw	ra,24(sp)
 201f52c:	df000515 	stw	fp,20(sp)
 201f530:	df000504 	addi	fp,sp,20
 201f534:	e13ffc15 	stw	r4,-16(fp)
 201f538:	e17ffd15 	stw	r5,-12(fp)
 201f53c:	e1bffe15 	stw	r6,-8(fp)
 201f540:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 201f544:	e13ffd17 	ldw	r4,-12(fp)
 201f548:	e17ffe17 	ldw	r5,-8(fp)
 201f54c:	e1bfff17 	ldw	r6,-4(fp)
 201f550:	201f73c0 	call	201f73c <open>
 201f554:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 201f558:	e0bffb17 	ldw	r2,-20(fp)
 201f55c:	1004803a 	cmplt	r2,r2,zero
 201f560:	10001c1e 	bne	r2,zero,201f5d4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 201f564:	e0bffb17 	ldw	r2,-20(fp)
 201f568:	00c080b4 	movhi	r3,514
 201f56c:	18c76904 	addi	r3,r3,7588
 201f570:	10800324 	muli	r2,r2,12
 201f574:	10c5883a 	add	r2,r2,r3
 201f578:	10c00017 	ldw	r3,0(r2)
 201f57c:	e0bffc17 	ldw	r2,-16(fp)
 201f580:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 201f584:	e0bffb17 	ldw	r2,-20(fp)
 201f588:	00c080b4 	movhi	r3,514
 201f58c:	18c76904 	addi	r3,r3,7588
 201f590:	10800324 	muli	r2,r2,12
 201f594:	10c5883a 	add	r2,r2,r3
 201f598:	10800104 	addi	r2,r2,4
 201f59c:	10c00017 	ldw	r3,0(r2)
 201f5a0:	e0bffc17 	ldw	r2,-16(fp)
 201f5a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 201f5a8:	e0bffb17 	ldw	r2,-20(fp)
 201f5ac:	00c080b4 	movhi	r3,514
 201f5b0:	18c76904 	addi	r3,r3,7588
 201f5b4:	10800324 	muli	r2,r2,12
 201f5b8:	10c5883a 	add	r2,r2,r3
 201f5bc:	10800204 	addi	r2,r2,8
 201f5c0:	10c00017 	ldw	r3,0(r2)
 201f5c4:	e0bffc17 	ldw	r2,-16(fp)
 201f5c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 201f5cc:	e13ffb17 	ldw	r4,-20(fp)
 201f5d0:	201422c0 	call	201422c <alt_release_fd>
  }
} 
 201f5d4:	e037883a 	mov	sp,fp
 201f5d8:	dfc00117 	ldw	ra,4(sp)
 201f5dc:	df000017 	ldw	fp,0(sp)
 201f5e0:	dec00204 	addi	sp,sp,8
 201f5e4:	f800283a 	ret

0201f5e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 201f5e8:	defffb04 	addi	sp,sp,-20
 201f5ec:	dfc00415 	stw	ra,16(sp)
 201f5f0:	df000315 	stw	fp,12(sp)
 201f5f4:	df000304 	addi	fp,sp,12
 201f5f8:	e13ffd15 	stw	r4,-12(fp)
 201f5fc:	e17ffe15 	stw	r5,-8(fp)
 201f600:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 201f604:	010080b4 	movhi	r4,514
 201f608:	21076c04 	addi	r4,r4,7600
 201f60c:	e17ffd17 	ldw	r5,-12(fp)
 201f610:	01800044 	movi	r6,1
 201f614:	01c07fc4 	movi	r7,511
 201f618:	201f5240 	call	201f524 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 201f61c:	010080b4 	movhi	r4,514
 201f620:	21076904 	addi	r4,r4,7588
 201f624:	e17ffe17 	ldw	r5,-8(fp)
 201f628:	000d883a 	mov	r6,zero
 201f62c:	01c07fc4 	movi	r7,511
 201f630:	201f5240 	call	201f524 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 201f634:	010080b4 	movhi	r4,514
 201f638:	21076f04 	addi	r4,r4,7612
 201f63c:	e17fff17 	ldw	r5,-4(fp)
 201f640:	01800044 	movi	r6,1
 201f644:	01c07fc4 	movi	r7,511
 201f648:	201f5240 	call	201f524 <alt_open_fd>
}  
 201f64c:	e037883a 	mov	sp,fp
 201f650:	dfc00117 	ldw	ra,4(sp)
 201f654:	df000017 	ldw	fp,0(sp)
 201f658:	dec00204 	addi	sp,sp,8
 201f65c:	f800283a 	ret

0201f660 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 201f660:	defffc04 	addi	sp,sp,-16
 201f664:	df000315 	stw	fp,12(sp)
 201f668:	df000304 	addi	fp,sp,12
 201f66c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 201f670:	e0bffe17 	ldw	r2,-8(fp)
 201f674:	10800217 	ldw	r2,8(r2)
 201f678:	10d00034 	orhi	r3,r2,16384
 201f67c:	e0bffe17 	ldw	r2,-8(fp)
 201f680:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201f684:	e03ffd15 	stw	zero,-12(fp)
 201f688:	00002006 	br	201f70c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201f68c:	e0bffd17 	ldw	r2,-12(fp)
 201f690:	00c080b4 	movhi	r3,514
 201f694:	18c76904 	addi	r3,r3,7588
 201f698:	10800324 	muli	r2,r2,12
 201f69c:	10c5883a 	add	r2,r2,r3
 201f6a0:	10c00017 	ldw	r3,0(r2)
 201f6a4:	e0bffe17 	ldw	r2,-8(fp)
 201f6a8:	10800017 	ldw	r2,0(r2)
 201f6ac:	1880141e 	bne	r3,r2,201f700 <alt_file_locked+0xa0>
 201f6b0:	e0bffd17 	ldw	r2,-12(fp)
 201f6b4:	00c080b4 	movhi	r3,514
 201f6b8:	18c76904 	addi	r3,r3,7588
 201f6bc:	10800324 	muli	r2,r2,12
 201f6c0:	10c5883a 	add	r2,r2,r3
 201f6c4:	10800204 	addi	r2,r2,8
 201f6c8:	10800017 	ldw	r2,0(r2)
 201f6cc:	1004403a 	cmpge	r2,r2,zero
 201f6d0:	10000b1e 	bne	r2,zero,201f700 <alt_file_locked+0xa0>
 201f6d4:	e0bffd17 	ldw	r2,-12(fp)
 201f6d8:	10800324 	muli	r2,r2,12
 201f6dc:	1007883a 	mov	r3,r2
 201f6e0:	008080b4 	movhi	r2,514
 201f6e4:	10876904 	addi	r2,r2,7588
 201f6e8:	1887883a 	add	r3,r3,r2
 201f6ec:	e0bffe17 	ldw	r2,-8(fp)
 201f6f0:	18800326 	beq	r3,r2,201f700 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 201f6f4:	00bffcc4 	movi	r2,-13
 201f6f8:	e0bfff15 	stw	r2,-4(fp)
 201f6fc:	00000a06 	br	201f728 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201f700:	e0bffd17 	ldw	r2,-12(fp)
 201f704:	10800044 	addi	r2,r2,1
 201f708:	e0bffd15 	stw	r2,-12(fp)
 201f70c:	008080b4 	movhi	r2,514
 201f710:	108c2204 	addi	r2,r2,12424
 201f714:	10800017 	ldw	r2,0(r2)
 201f718:	1007883a 	mov	r3,r2
 201f71c:	e0bffd17 	ldw	r2,-12(fp)
 201f720:	18bfda2e 	bgeu	r3,r2,201f68c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 201f724:	e03fff15 	stw	zero,-4(fp)
 201f728:	e0bfff17 	ldw	r2,-4(fp)
}
 201f72c:	e037883a 	mov	sp,fp
 201f730:	df000017 	ldw	fp,0(sp)
 201f734:	dec00104 	addi	sp,sp,4
 201f738:	f800283a 	ret

0201f73c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 201f73c:	defff404 	addi	sp,sp,-48
 201f740:	dfc00b15 	stw	ra,44(sp)
 201f744:	df000a15 	stw	fp,40(sp)
 201f748:	df000a04 	addi	fp,sp,40
 201f74c:	e13ffb15 	stw	r4,-20(fp)
 201f750:	e17ffc15 	stw	r5,-16(fp)
 201f754:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 201f758:	00bfffc4 	movi	r2,-1
 201f75c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 201f760:	00bffb44 	movi	r2,-19
 201f764:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 201f768:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 201f76c:	e13ffb17 	ldw	r4,-20(fp)
 201f770:	014080b4 	movhi	r5,514
 201f774:	294c2004 	addi	r5,r5,12416
 201f778:	201f1940 	call	201f194 <alt_find_dev>
 201f77c:	e0bffa15 	stw	r2,-24(fp)
 201f780:	e0bffa17 	ldw	r2,-24(fp)
 201f784:	1004c03a 	cmpne	r2,r2,zero
 201f788:	1000051e 	bne	r2,zero,201f7a0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 201f78c:	e13ffb17 	ldw	r4,-20(fp)
 201f790:	20200640 	call	2020064 <alt_find_file>
 201f794:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 201f798:	00800044 	movi	r2,1
 201f79c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 201f7a0:	e0bffa17 	ldw	r2,-24(fp)
 201f7a4:	1005003a 	cmpeq	r2,r2,zero
 201f7a8:	1000301e 	bne	r2,zero,201f86c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 201f7ac:	e13ffa17 	ldw	r4,-24(fp)
 201f7b0:	20201840 	call	2020184 <alt_get_fd>
 201f7b4:	e0bff815 	stw	r2,-32(fp)
 201f7b8:	e0bff817 	ldw	r2,-32(fp)
 201f7bc:	1004403a 	cmpge	r2,r2,zero
 201f7c0:	1000031e 	bne	r2,zero,201f7d0 <open+0x94>
    {
      status = index;
 201f7c4:	e0bff817 	ldw	r2,-32(fp)
 201f7c8:	e0bff715 	stw	r2,-36(fp)
 201f7cc:	00002906 	br	201f874 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 201f7d0:	e0bff817 	ldw	r2,-32(fp)
 201f7d4:	10800324 	muli	r2,r2,12
 201f7d8:	1007883a 	mov	r3,r2
 201f7dc:	008080b4 	movhi	r2,514
 201f7e0:	10876904 	addi	r2,r2,7588
 201f7e4:	1885883a 	add	r2,r3,r2
 201f7e8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 201f7ec:	e0fffc17 	ldw	r3,-16(fp)
 201f7f0:	00900034 	movhi	r2,16384
 201f7f4:	10bfffc4 	addi	r2,r2,-1
 201f7f8:	1886703a 	and	r3,r3,r2
 201f7fc:	e0bff917 	ldw	r2,-28(fp)
 201f800:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 201f804:	e0bff617 	ldw	r2,-40(fp)
 201f808:	1004c03a 	cmpne	r2,r2,zero
 201f80c:	1000061e 	bne	r2,zero,201f828 <open+0xec>
 201f810:	e13ff917 	ldw	r4,-28(fp)
 201f814:	201f6600 	call	201f660 <alt_file_locked>
 201f818:	e0bff715 	stw	r2,-36(fp)
 201f81c:	e0bff717 	ldw	r2,-36(fp)
 201f820:	1004803a 	cmplt	r2,r2,zero
 201f824:	1000131e 	bne	r2,zero,201f874 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 201f828:	e0bffa17 	ldw	r2,-24(fp)
 201f82c:	10800317 	ldw	r2,12(r2)
 201f830:	1005003a 	cmpeq	r2,r2,zero
 201f834:	1000091e 	bne	r2,zero,201f85c <open+0x120>
 201f838:	e0bffa17 	ldw	r2,-24(fp)
 201f83c:	10800317 	ldw	r2,12(r2)
 201f840:	e13ff917 	ldw	r4,-28(fp)
 201f844:	e17ffb17 	ldw	r5,-20(fp)
 201f848:	e1bffc17 	ldw	r6,-16(fp)
 201f84c:	e1fffd17 	ldw	r7,-12(fp)
 201f850:	103ee83a 	callr	r2
 201f854:	e0bfff15 	stw	r2,-4(fp)
 201f858:	00000106 	br	201f860 <open+0x124>
 201f85c:	e03fff15 	stw	zero,-4(fp)
 201f860:	e0bfff17 	ldw	r2,-4(fp)
 201f864:	e0bff715 	stw	r2,-36(fp)
 201f868:	00000206 	br	201f874 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201f86c:	00bffb44 	movi	r2,-19
 201f870:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 201f874:	e0bff717 	ldw	r2,-36(fp)
 201f878:	1004403a 	cmpge	r2,r2,zero
 201f87c:	1000091e 	bne	r2,zero,201f8a4 <open+0x168>
  {
    alt_release_fd (index);  
 201f880:	e13ff817 	ldw	r4,-32(fp)
 201f884:	201422c0 	call	201422c <alt_release_fd>
    ALT_ERRNO = -status;
 201f888:	201f8c40 	call	201f8c4 <alt_get_errno>
 201f88c:	e0fff717 	ldw	r3,-36(fp)
 201f890:	00c7c83a 	sub	r3,zero,r3
 201f894:	10c00015 	stw	r3,0(r2)
    return -1;
 201f898:	00bfffc4 	movi	r2,-1
 201f89c:	e0bffe15 	stw	r2,-8(fp)
 201f8a0:	00000206 	br	201f8ac <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 201f8a4:	e0bff817 	ldw	r2,-32(fp)
 201f8a8:	e0bffe15 	stw	r2,-8(fp)
 201f8ac:	e0bffe17 	ldw	r2,-8(fp)
}
 201f8b0:	e037883a 	mov	sp,fp
 201f8b4:	dfc00117 	ldw	ra,4(sp)
 201f8b8:	df000017 	ldw	fp,0(sp)
 201f8bc:	dec00204 	addi	sp,sp,8
 201f8c0:	f800283a 	ret

0201f8c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201f8c4:	defffd04 	addi	sp,sp,-12
 201f8c8:	dfc00215 	stw	ra,8(sp)
 201f8cc:	df000115 	stw	fp,4(sp)
 201f8d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 201f8d4:	008080b4 	movhi	r2,514
 201f8d8:	108c2304 	addi	r2,r2,12428
 201f8dc:	10800017 	ldw	r2,0(r2)
 201f8e0:	1005003a 	cmpeq	r2,r2,zero
 201f8e4:	1000061e 	bne	r2,zero,201f900 <alt_get_errno+0x3c>
 201f8e8:	008080b4 	movhi	r2,514
 201f8ec:	108c2304 	addi	r2,r2,12428
 201f8f0:	10800017 	ldw	r2,0(r2)
 201f8f4:	103ee83a 	callr	r2
 201f8f8:	e0bfff15 	stw	r2,-4(fp)
 201f8fc:	00000306 	br	201f90c <alt_get_errno+0x48>
 201f900:	008080b4 	movhi	r2,514
 201f904:	1093c804 	addi	r2,r2,20256
 201f908:	e0bfff15 	stw	r2,-4(fp)
 201f90c:	e0bfff17 	ldw	r2,-4(fp)
}
 201f910:	e037883a 	mov	sp,fp
 201f914:	dfc00117 	ldw	ra,4(sp)
 201f918:	df000017 	ldw	fp,0(sp)
 201f91c:	dec00204 	addi	sp,sp,8
 201f920:	f800283a 	ret

0201f924 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 201f924:	deffff04 	addi	sp,sp,-4
 201f928:	df000015 	stw	fp,0(sp)
 201f92c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 201f930:	000170fa 	wrctl	ienable,zero
}
 201f934:	e037883a 	mov	sp,fp
 201f938:	df000017 	ldw	fp,0(sp)
 201f93c:	dec00104 	addi	sp,sp,4
 201f940:	f800283a 	ret

0201f944 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 201f944:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 201f948:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 201f94c:	d127d017 	ldw	r4,-24768(gp)

      stw ra,  0(sp)
 201f950:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 201f954:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 201f958:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 201f95c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 201f960:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 201f964:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 201f968:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 201f96c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 201f970:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 201f974:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 201f978:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 201f97c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201f980:	201fd640 	call	201fd64 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 201f984:	d127cb17 	ldw	r4,-24788(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 201f988:	d167c307 	ldb	r5,-24820(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 201f98c:	d127d015 	stw	r4,-24768(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 201f990:	d167c345 	stb	r5,-24819(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 201f994:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 201f998:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 201f99c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 201f9a0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 201f9a4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 201f9a8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 201f9ac:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 201f9b0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 201f9b4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 201f9b8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 201f9bc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 201f9c0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 201f9c4:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 201f9c8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 201f9cc:	f800283a 	ret

0201f9d0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 201f9d0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 201f9d4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 201f9d8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 201f9dc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 201f9e0:	201fd640 	call	201fd64 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 201f9e4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 201f9e8:	d4a7c145 	stb	r18,-24827(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 201f9ec:	003fe506 	br	201f984 <OSCtxSw+0x40>

0201f9f0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 201f9f0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 201f9f4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 201f9f8:	10800054 	ori	r2,r2,1
      wrctl status, r2
 201f9fc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 201fa00:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 201fa04:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 201fa08:	dec00204 	addi	sp,sp,8

      callr r2
 201fa0c:	103ee83a 	callr	r2

      nop
 201fa10:	0001883a 	nop

0201fa14 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 201fa14:	defff704 	addi	sp,sp,-36
 201fa18:	dfc00815 	stw	ra,32(sp)
 201fa1c:	df000715 	stw	fp,28(sp)
 201fa20:	df000704 	addi	fp,sp,28
 201fa24:	e13ffc15 	stw	r4,-16(fp)
 201fa28:	e17ffd15 	stw	r5,-12(fp)
 201fa2c:	e1bffe15 	stw	r6,-8(fp)
 201fa30:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 201fa34:	e0bffe17 	ldw	r2,-8(fp)
 201fa38:	1007883a 	mov	r3,r2
 201fa3c:	00bfff04 	movi	r2,-4
 201fa40:	1884703a 	and	r2,r3,r2
 201fa44:	10bf0004 	addi	r2,r2,-1024
 201fa48:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 201fa4c:	e0bff917 	ldw	r2,-28(fp)
 201fa50:	10000015 	stw	zero,0(r2)
 201fa54:	e0bff917 	ldw	r2,-28(fp)
 201fa58:	10c0bb04 	addi	r3,r2,748
 201fa5c:	e0bff917 	ldw	r2,-28(fp)
 201fa60:	10c00115 	stw	r3,4(r2)
 201fa64:	e0bff917 	ldw	r2,-28(fp)
 201fa68:	1080bb04 	addi	r2,r2,748
 201fa6c:	10c01704 	addi	r3,r2,92
 201fa70:	e0bff917 	ldw	r2,-28(fp)
 201fa74:	10c00215 	stw	r3,8(r2)
 201fa78:	e0bff917 	ldw	r2,-28(fp)
 201fa7c:	1080bb04 	addi	r2,r2,748
 201fa80:	10c02e04 	addi	r3,r2,184
 201fa84:	e0bff917 	ldw	r2,-28(fp)
 201fa88:	10c00315 	stw	r3,12(r2)
 201fa8c:	e0bff917 	ldw	r2,-28(fp)
 201fa90:	10000415 	stw	zero,16(r2)
 201fa94:	e0bff917 	ldw	r2,-28(fp)
 201fa98:	10800504 	addi	r2,r2,20
 201fa9c:	1009883a 	mov	r4,r2
 201faa0:	01800644 	movi	r6,25
 201faa4:	000b883a 	mov	r5,zero
 201faa8:	200d4680 	call	200d468 <memset>
 201faac:	e0bff917 	ldw	r2,-28(fp)
 201fab0:	10000c15 	stw	zero,48(r2)
 201fab4:	e0fff917 	ldw	r3,-28(fp)
 201fab8:	008080b4 	movhi	r2,514
 201fabc:	1084d104 	addi	r2,r2,4932
 201fac0:	18800d15 	stw	r2,52(r3)
 201fac4:	e0bff917 	ldw	r2,-28(fp)
 201fac8:	10000e15 	stw	zero,56(r2)
 201facc:	e0bff917 	ldw	r2,-28(fp)
 201fad0:	10000f15 	stw	zero,60(r2)
 201fad4:	e0bff917 	ldw	r2,-28(fp)
 201fad8:	10001015 	stw	zero,64(r2)
 201fadc:	e0bff917 	ldw	r2,-28(fp)
 201fae0:	10001115 	stw	zero,68(r2)
 201fae4:	e0bff917 	ldw	r2,-28(fp)
 201fae8:	10001215 	stw	zero,72(r2)
 201faec:	e0bff917 	ldw	r2,-28(fp)
 201faf0:	10001315 	stw	zero,76(r2)
 201faf4:	e0bff917 	ldw	r2,-28(fp)
 201faf8:	10001415 	stw	zero,80(r2)
 201fafc:	e0bff917 	ldw	r2,-28(fp)
 201fb00:	10001515 	stw	zero,84(r2)
 201fb04:	e0bff917 	ldw	r2,-28(fp)
 201fb08:	10001615 	stw	zero,88(r2)
 201fb0c:	e0bff917 	ldw	r2,-28(fp)
 201fb10:	10001715 	stw	zero,92(r2)
 201fb14:	e0bff917 	ldw	r2,-28(fp)
 201fb18:	10001805 	stb	zero,96(r2)
 201fb1c:	e0bff917 	ldw	r2,-28(fp)
 201fb20:	10801f04 	addi	r2,r2,124
 201fb24:	10000015 	stw	zero,0(r2)
 201fb28:	10000115 	stw	zero,4(r2)
 201fb2c:	10000215 	stw	zero,8(r2)
 201fb30:	10000315 	stw	zero,12(r2)
 201fb34:	10000415 	stw	zero,16(r2)
 201fb38:	10000515 	stw	zero,20(r2)
 201fb3c:	10000615 	stw	zero,24(r2)
 201fb40:	10000715 	stw	zero,28(r2)
 201fb44:	10000815 	stw	zero,32(r2)
 201fb48:	e0bff917 	ldw	r2,-28(fp)
 201fb4c:	10002815 	stw	zero,160(r2)
 201fb50:	e0fff917 	ldw	r3,-28(fp)
 201fb54:	00800044 	movi	r2,1
 201fb58:	18802915 	stw	r2,164(r3)
 201fb5c:	18002a15 	stw	zero,168(r3)
 201fb60:	e0fff917 	ldw	r3,-28(fp)
 201fb64:	008cc384 	movi	r2,13070
 201fb68:	18802b0d 	sth	r2,172(r3)
 201fb6c:	e0fff917 	ldw	r3,-28(fp)
 201fb70:	00aaf344 	movi	r2,-21555
 201fb74:	18802b8d 	sth	r2,174(r3)
 201fb78:	e0fff917 	ldw	r3,-28(fp)
 201fb7c:	00848d04 	movi	r2,4660
 201fb80:	18802c0d 	sth	r2,176(r3)
 201fb84:	e0fff917 	ldw	r3,-28(fp)
 201fb88:	00b99b44 	movi	r2,-6547
 201fb8c:	18802c8d 	sth	r2,178(r3)
 201fb90:	e0fff917 	ldw	r3,-28(fp)
 201fb94:	00b7bb04 	movi	r2,-8468
 201fb98:	18802d0d 	sth	r2,180(r3)
 201fb9c:	e0fff917 	ldw	r3,-28(fp)
 201fba0:	00800144 	movi	r2,5
 201fba4:	18802d8d 	sth	r2,182(r3)
 201fba8:	e0fff917 	ldw	r3,-28(fp)
 201fbac:	008002c4 	movi	r2,11
 201fbb0:	18802e0d 	sth	r2,184(r3)
 201fbb4:	e0bff917 	ldw	r2,-28(fp)
 201fbb8:	10002f15 	stw	zero,188(r2)
 201fbbc:	e0bff917 	ldw	r2,-28(fp)
 201fbc0:	10003015 	stw	zero,192(r2)
 201fbc4:	e0bff917 	ldw	r2,-28(fp)
 201fbc8:	10003115 	stw	zero,196(r2)
 201fbcc:	e0bff917 	ldw	r2,-28(fp)
 201fbd0:	10003215 	stw	zero,200(r2)
 201fbd4:	e0bff917 	ldw	r2,-28(fp)
 201fbd8:	10003315 	stw	zero,204(r2)
 201fbdc:	e0bff917 	ldw	r2,-28(fp)
 201fbe0:	10003415 	stw	zero,208(r2)
 201fbe4:	e0bff917 	ldw	r2,-28(fp)
 201fbe8:	10003e15 	stw	zero,248(r2)
 201fbec:	e0bff917 	ldw	r2,-28(fp)
 201fbf0:	10003f15 	stw	zero,252(r2)
 201fbf4:	e0bff917 	ldw	r2,-28(fp)
 201fbf8:	10004015 	stw	zero,256(r2)
 201fbfc:	e0bff917 	ldw	r2,-28(fp)
 201fc00:	10004115 	stw	zero,260(r2)
 201fc04:	e0bff917 	ldw	r2,-28(fp)
 201fc08:	10004215 	stw	zero,264(r2)
 201fc0c:	e0bff917 	ldw	r2,-28(fp)
 201fc10:	10004315 	stw	zero,268(r2)
 201fc14:	e0bff917 	ldw	r2,-28(fp)
 201fc18:	10004415 	stw	zero,272(r2)
 201fc1c:	e0bff917 	ldw	r2,-28(fp)
 201fc20:	10004515 	stw	zero,276(r2)
 201fc24:	e0bff917 	ldw	r2,-28(fp)
 201fc28:	10004615 	stw	zero,280(r2)
 201fc2c:	e0bff917 	ldw	r2,-28(fp)
 201fc30:	10004715 	stw	zero,284(r2)
 201fc34:	e0bff917 	ldw	r2,-28(fp)
 201fc38:	10003505 	stb	zero,212(r2)
 201fc3c:	e0bff917 	ldw	r2,-28(fp)
 201fc40:	10003705 	stb	zero,220(r2)
 201fc44:	e0bff917 	ldw	r2,-28(fp)
 201fc48:	10003d15 	stw	zero,244(r2)
 201fc4c:	e0bff917 	ldw	r2,-28(fp)
 201fc50:	10005215 	stw	zero,328(r2)
 201fc54:	e0bff917 	ldw	r2,-28(fp)
 201fc58:	10005315 	stw	zero,332(r2)
 201fc5c:	e0bff917 	ldw	r2,-28(fp)
 201fc60:	10005415 	stw	zero,336(r2)
 201fc64:	e0bff917 	ldw	r2,-28(fp)
 201fc68:	10005515 	stw	zero,340(r2)
 201fc6c:	e0bff917 	ldw	r2,-28(fp)
 201fc70:	1000b515 	stw	zero,724(r2)
 201fc74:	e0bff917 	ldw	r2,-28(fp)
 201fc78:	10007515 	stw	zero,468(r2)
 201fc7c:	e0bff917 	ldw	r2,-28(fp)
 201fc80:	1000b715 	stw	zero,732(r2)
 201fc84:	e0bff917 	ldw	r2,-28(fp)
 201fc88:	1000b815 	stw	zero,736(r2)
 201fc8c:	e0bff917 	ldw	r2,-28(fp)
 201fc90:	1000b915 	stw	zero,740(r2)
 201fc94:	e0bff917 	ldw	r2,-28(fp)
 201fc98:	1000ba15 	stw	zero,744(r2)
 201fc9c:	e0bff917 	ldw	r2,-28(fp)
 201fca0:	1080bb04 	addi	r2,r2,748
 201fca4:	1009883a 	mov	r4,r2
 201fca8:	01804504 	movi	r6,276
 201fcac:	000b883a 	mov	r5,zero
 201fcb0:	200d4680 	call	200d468 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 201fcb4:	e0bff917 	ldw	r2,-28(fp)
 201fcb8:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 201fcbc:	e0bffb17 	ldw	r2,-20(fp)
 201fcc0:	10bff304 	addi	r2,r2,-52
 201fcc4:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 201fcc8:	e0bffa17 	ldw	r2,-24(fp)
 201fccc:	10c00c04 	addi	r3,r2,48
 201fcd0:	e0bffc17 	ldw	r2,-16(fp)
 201fcd4:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 201fcd8:	e0bffa17 	ldw	r2,-24(fp)
 201fcdc:	10c00b04 	addi	r3,r2,44
 201fce0:	e0bffd17 	ldw	r2,-12(fp)
 201fce4:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 201fce8:	e0bffa17 	ldw	r2,-24(fp)
 201fcec:	10c00a04 	addi	r3,r2,40
 201fcf0:	e0bff917 	ldw	r2,-28(fp)
 201fcf4:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 201fcf8:	008080b4 	movhi	r2,514
 201fcfc:	10be7c04 	addi	r2,r2,-1552
 201fd00:	10c00104 	addi	r3,r2,4
 201fd04:	e0bffa17 	ldw	r2,-24(fp)
 201fd08:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 201fd0c:	e0bffa17 	ldw	r2,-24(fp)
}
 201fd10:	e037883a 	mov	sp,fp
 201fd14:	dfc00117 	ldw	ra,4(sp)
 201fd18:	df000017 	ldw	fp,0(sp)
 201fd1c:	dec00204 	addi	sp,sp,8
 201fd20:	f800283a 	ret

0201fd24 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 201fd24:	defffe04 	addi	sp,sp,-8
 201fd28:	df000115 	stw	fp,4(sp)
 201fd2c:	df000104 	addi	fp,sp,4
 201fd30:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 201fd34:	e037883a 	mov	sp,fp
 201fd38:	df000017 	ldw	fp,0(sp)
 201fd3c:	dec00104 	addi	sp,sp,4
 201fd40:	f800283a 	ret

0201fd44 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 201fd44:	defffe04 	addi	sp,sp,-8
 201fd48:	df000115 	stw	fp,4(sp)
 201fd4c:	df000104 	addi	fp,sp,4
 201fd50:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 201fd54:	e037883a 	mov	sp,fp
 201fd58:	df000017 	ldw	fp,0(sp)
 201fd5c:	dec00104 	addi	sp,sp,4
 201fd60:	f800283a 	ret

0201fd64 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 201fd64:	deffff04 	addi	sp,sp,-4
 201fd68:	df000015 	stw	fp,0(sp)
 201fd6c:	d839883a 	mov	fp,sp
}
 201fd70:	e037883a 	mov	sp,fp
 201fd74:	df000017 	ldw	fp,0(sp)
 201fd78:	dec00104 	addi	sp,sp,4
 201fd7c:	f800283a 	ret

0201fd80 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 201fd80:	deffff04 	addi	sp,sp,-4
 201fd84:	df000015 	stw	fp,0(sp)
 201fd88:	d839883a 	mov	fp,sp
}
 201fd8c:	e037883a 	mov	sp,fp
 201fd90:	df000017 	ldw	fp,0(sp)
 201fd94:	dec00104 	addi	sp,sp,4
 201fd98:	f800283a 	ret

0201fd9c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 201fd9c:	deffff04 	addi	sp,sp,-4
 201fda0:	df000015 	stw	fp,0(sp)
 201fda4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 201fda8:	e037883a 	mov	sp,fp
 201fdac:	df000017 	ldw	fp,0(sp)
 201fdb0:	dec00104 	addi	sp,sp,4
 201fdb4:	f800283a 	ret

0201fdb8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 201fdb8:	deffff04 	addi	sp,sp,-4
 201fdbc:	df000015 	stw	fp,0(sp)
 201fdc0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 201fdc4:	e037883a 	mov	sp,fp
 201fdc8:	df000017 	ldw	fp,0(sp)
 201fdcc:	dec00104 	addi	sp,sp,4
 201fdd0:	f800283a 	ret

0201fdd4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 201fdd4:	deffff04 	addi	sp,sp,-4
 201fdd8:	df000015 	stw	fp,0(sp)
 201fddc:	d839883a 	mov	fp,sp
}
 201fde0:	e037883a 	mov	sp,fp
 201fde4:	df000017 	ldw	fp,0(sp)
 201fde8:	dec00104 	addi	sp,sp,4
 201fdec:	f800283a 	ret

0201fdf0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 201fdf0:	deffff04 	addi	sp,sp,-4
 201fdf4:	df000015 	stw	fp,0(sp)
 201fdf8:	d839883a 	mov	fp,sp
}
 201fdfc:	e037883a 	mov	sp,fp
 201fe00:	df000017 	ldw	fp,0(sp)
 201fe04:	dec00104 	addi	sp,sp,4
 201fe08:	f800283a 	ret

0201fe0c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 201fe0c:	defffe04 	addi	sp,sp,-8
 201fe10:	df000115 	stw	fp,4(sp)
 201fe14:	df000104 	addi	fp,sp,4
 201fe18:	e13fff15 	stw	r4,-4(fp)
}
 201fe1c:	e037883a 	mov	sp,fp
 201fe20:	df000017 	ldw	fp,0(sp)
 201fe24:	dec00104 	addi	sp,sp,4
 201fe28:	f800283a 	ret

0201fe2c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 201fe2c:	defff404 	addi	sp,sp,-48
 201fe30:	df000b15 	stw	fp,44(sp)
 201fe34:	df000b04 	addi	fp,sp,44
 201fe38:	e13ffc15 	stw	r4,-16(fp)
 201fe3c:	e17ffd15 	stw	r5,-12(fp)
 201fe40:	e1bffe15 	stw	r6,-8(fp)
 201fe44:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 201fe48:	e0fffe17 	ldw	r3,-8(fp)
 201fe4c:	e0bfff17 	ldw	r2,-4(fp)
 201fe50:	10c5883a 	add	r2,r2,r3
 201fe54:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 201fe58:	e0c00117 	ldw	r3,4(fp)
 201fe5c:	e0800217 	ldw	r2,8(fp)
 201fe60:	10c5883a 	add	r2,r2,r3
 201fe64:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 201fe68:	e0800117 	ldw	r2,4(fp)
 201fe6c:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 201fe70:	e0bffe17 	ldw	r2,-8(fp)
 201fe74:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 201fe78:	00800044 	movi	r2,1
 201fe7c:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 201fe80:	e0bffc17 	ldw	r2,-16(fp)
 201fe84:	11000504 	addi	r4,r2,20
 201fe88:	e0fffd17 	ldw	r3,-12(fp)
 201fe8c:	00800044 	movi	r2,1
 201fe90:	10c6983a 	sll	r3,r2,r3
 201fe94:	2005883a 	mov	r2,r4
 201fe98:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 201fe9c:	e0800317 	ldw	r2,12(fp)
 201fea0:	1080008c 	andi	r2,r2,2
 201fea4:	1004c03a 	cmpne	r2,r2,zero
 201fea8:	1000051e 	bne	r2,zero,201fec0 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 201feac:	e0bffc17 	ldw	r2,-16(fp)
 201feb0:	10800304 	addi	r2,r2,12
 201feb4:	1007883a 	mov	r3,r2
 201feb8:	00810004 	movi	r2,1024
 201febc:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 201fec0:	e0bffc17 	ldw	r2,-16(fp)
 201fec4:	10800037 	ldwio	r2,0(r2)
 201fec8:	00000006 	br	201fecc <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 201fecc:	e0bffc17 	ldw	r2,-16(fp)
 201fed0:	10800204 	addi	r2,r2,8
 201fed4:	10800037 	ldwio	r2,0(r2)
 201fed8:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 201fedc:	e0bff717 	ldw	r2,-36(fp)
 201fee0:	1080100c 	andi	r2,r2,64
 201fee4:	1005003a 	cmpeq	r2,r2,zero
 201fee8:	1000031e 	bne	r2,zero,201fef8 <alt_avalon_spi_command+0xcc>
 201feec:	e0bff617 	ldw	r2,-40(fp)
 201fef0:	1004c03a 	cmpne	r2,r2,zero
 201fef4:	1000041e 	bne	r2,zero,201ff08 <alt_avalon_spi_command+0xdc>
 201fef8:	e0bff717 	ldw	r2,-36(fp)
 201fefc:	1080200c 	andi	r2,r2,128
 201ff00:	1005003a 	cmpeq	r2,r2,zero
 201ff04:	103ff11e 	bne	r2,zero,201fecc <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 201ff08:	e0bff717 	ldw	r2,-36(fp)
 201ff0c:	1080100c 	andi	r2,r2,64
 201ff10:	1005003a 	cmpeq	r2,r2,zero
 201ff14:	1000201e 	bne	r2,zero,201ff98 <alt_avalon_spi_command+0x16c>
 201ff18:	e0bff617 	ldw	r2,-40(fp)
 201ff1c:	10800050 	cmplti	r2,r2,1
 201ff20:	10001d1e 	bne	r2,zero,201ff98 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 201ff24:	e0bff617 	ldw	r2,-40(fp)
 201ff28:	10bfffc4 	addi	r2,r2,-1
 201ff2c:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 201ff30:	e0ffff17 	ldw	r3,-4(fp)
 201ff34:	e0bffb17 	ldw	r2,-20(fp)
 201ff38:	18800b2e 	bgeu	r3,r2,201ff68 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 201ff3c:	e0bffc17 	ldw	r2,-16(fp)
 201ff40:	11000104 	addi	r4,r2,4
 201ff44:	e0bfff17 	ldw	r2,-4(fp)
 201ff48:	10800003 	ldbu	r2,0(r2)
 201ff4c:	10c03fcc 	andi	r3,r2,255
 201ff50:	e0bfff17 	ldw	r2,-4(fp)
 201ff54:	10800044 	addi	r2,r2,1
 201ff58:	e0bfff15 	stw	r2,-4(fp)
 201ff5c:	2005883a 	mov	r2,r4
 201ff60:	10c00035 	stwio	r3,0(r2)
 201ff64:	00000c06 	br	201ff98 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 201ff68:	e0bff917 	ldw	r2,-28(fp)
 201ff6c:	1005003a 	cmpeq	r2,r2,zero
 201ff70:	1000071e 	bne	r2,zero,201ff90 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 201ff74:	e0bff917 	ldw	r2,-28(fp)
 201ff78:	10bfffc4 	addi	r2,r2,-1
 201ff7c:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 201ff80:	e0bffc17 	ldw	r2,-16(fp)
 201ff84:	10800104 	addi	r2,r2,4
 201ff88:	10000035 	stwio	zero,0(r2)
 201ff8c:	00000206 	br	201ff98 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 201ff90:	00bf0004 	movi	r2,-1024
 201ff94:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 201ff98:	e0bff717 	ldw	r2,-36(fp)
 201ff9c:	1080200c 	andi	r2,r2,128
 201ffa0:	1005003a 	cmpeq	r2,r2,zero
 201ffa4:	103fc91e 	bne	r2,zero,201fecc <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 201ffa8:	e0bffc17 	ldw	r2,-16(fp)
 201ffac:	10800037 	ldwio	r2,0(r2)
 201ffb0:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 201ffb4:	e0bff817 	ldw	r2,-32(fp)
 201ffb8:	1005003a 	cmpeq	r2,r2,zero
 201ffbc:	1000041e 	bne	r2,zero,201ffd0 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 201ffc0:	e0bff817 	ldw	r2,-32(fp)
 201ffc4:	10bfffc4 	addi	r2,r2,-1
 201ffc8:	e0bff815 	stw	r2,-32(fp)
 201ffcc:	00000706 	br	201ffec <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 201ffd0:	e0bff517 	ldw	r2,-44(fp)
 201ffd4:	1007883a 	mov	r3,r2
 201ffd8:	e0800217 	ldw	r2,8(fp)
 201ffdc:	10c00005 	stb	r3,0(r2)
 201ffe0:	e0800217 	ldw	r2,8(fp)
 201ffe4:	10800044 	addi	r2,r2,1
 201ffe8:	e0800215 	stw	r2,8(fp)
      credits++;
 201ffec:	e0bff617 	ldw	r2,-40(fp)
 201fff0:	10800044 	addi	r2,r2,1
 201fff4:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 201fff8:	e0bff817 	ldw	r2,-32(fp)
 201fffc:	1004c03a 	cmpne	r2,r2,zero
 2020000:	103fb21e 	bne	r2,zero,201fecc <alt_avalon_spi_command+0xa0>
 2020004:	e0c00217 	ldw	r3,8(fp)
 2020008:	e0bffa17 	ldw	r2,-24(fp)
 202000c:	18800126 	beq	r3,r2,2020014 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 2020010:	003fae06 	br	201fecc <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2020014:	e0bffc17 	ldw	r2,-16(fp)
 2020018:	10800204 	addi	r2,r2,8
 202001c:	10800037 	ldwio	r2,0(r2)
 2020020:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 2020024:	e0bff717 	ldw	r2,-36(fp)
 2020028:	1080080c 	andi	r2,r2,32
 202002c:	1005003a 	cmpeq	r2,r2,zero
 2020030:	103ff81e 	bne	r2,zero,2020014 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2020034:	e0800317 	ldw	r2,12(fp)
 2020038:	1080004c 	andi	r2,r2,1
 202003c:	1004c03a 	cmpne	r2,r2,zero
 2020040:	1000031e 	bne	r2,zero,2020050 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 2020044:	e0bffc17 	ldw	r2,-16(fp)
 2020048:	10800304 	addi	r2,r2,12
 202004c:	10000035 	stwio	zero,0(r2)

  return read_length;
 2020050:	e0800117 	ldw	r2,4(fp)
}
 2020054:	e037883a 	mov	sp,fp
 2020058:	df000017 	ldw	fp,0(sp)
 202005c:	dec00104 	addi	sp,sp,4
 2020060:	f800283a 	ret

02020064 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2020064:	defffa04 	addi	sp,sp,-24
 2020068:	dfc00515 	stw	ra,20(sp)
 202006c:	df000415 	stw	fp,16(sp)
 2020070:	df000404 	addi	fp,sp,16
 2020074:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2020078:	008080b4 	movhi	r2,514
 202007c:	108c1e04 	addi	r2,r2,12408
 2020080:	10800017 	ldw	r2,0(r2)
 2020084:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2020088:	00003306 	br	2020158 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 202008c:	e0bffd17 	ldw	r2,-12(fp)
 2020090:	11000217 	ldw	r4,8(r2)
 2020094:	2006cd40 	call	2006cd4 <strlen>
 2020098:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 202009c:	e0bffd17 	ldw	r2,-12(fp)
 20200a0:	10c00217 	ldw	r3,8(r2)
 20200a4:	e0bffc17 	ldw	r2,-16(fp)
 20200a8:	1885883a 	add	r2,r3,r2
 20200ac:	10bfffc4 	addi	r2,r2,-1
 20200b0:	10800003 	ldbu	r2,0(r2)
 20200b4:	10803fcc 	andi	r2,r2,255
 20200b8:	1080201c 	xori	r2,r2,128
 20200bc:	10bfe004 	addi	r2,r2,-128
 20200c0:	10800bd8 	cmpnei	r2,r2,47
 20200c4:	1000031e 	bne	r2,zero,20200d4 <alt_find_file+0x70>
    {
      len -= 1;
 20200c8:	e0bffc17 	ldw	r2,-16(fp)
 20200cc:	10bfffc4 	addi	r2,r2,-1
 20200d0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20200d4:	e0bffc17 	ldw	r2,-16(fp)
 20200d8:	1007883a 	mov	r3,r2
 20200dc:	e0bffe17 	ldw	r2,-8(fp)
 20200e0:	1885883a 	add	r2,r3,r2
 20200e4:	10800003 	ldbu	r2,0(r2)
 20200e8:	10803fcc 	andi	r2,r2,255
 20200ec:	1080201c 	xori	r2,r2,128
 20200f0:	10bfe004 	addi	r2,r2,-128
 20200f4:	10800be0 	cmpeqi	r2,r2,47
 20200f8:	10000a1e 	bne	r2,zero,2020124 <alt_find_file+0xc0>
 20200fc:	e0bffc17 	ldw	r2,-16(fp)
 2020100:	1007883a 	mov	r3,r2
 2020104:	e0bffe17 	ldw	r2,-8(fp)
 2020108:	1885883a 	add	r2,r3,r2
 202010c:	10800003 	ldbu	r2,0(r2)
 2020110:	10803fcc 	andi	r2,r2,255
 2020114:	1080201c 	xori	r2,r2,128
 2020118:	10bfe004 	addi	r2,r2,-128
 202011c:	1004c03a 	cmpne	r2,r2,zero
 2020120:	10000a1e 	bne	r2,zero,202014c <alt_find_file+0xe8>
 2020124:	e0bffd17 	ldw	r2,-12(fp)
 2020128:	11000217 	ldw	r4,8(r2)
 202012c:	e1bffc17 	ldw	r6,-16(fp)
 2020130:	e17ffe17 	ldw	r5,-8(fp)
 2020134:	20203540 	call	2020354 <memcmp>
 2020138:	1004c03a 	cmpne	r2,r2,zero
 202013c:	1000031e 	bne	r2,zero,202014c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2020140:	e0bffd17 	ldw	r2,-12(fp)
 2020144:	e0bfff15 	stw	r2,-4(fp)
 2020148:	00000806 	br	202016c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 202014c:	e0bffd17 	ldw	r2,-12(fp)
 2020150:	10800017 	ldw	r2,0(r2)
 2020154:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2020158:	00c080b4 	movhi	r3,514
 202015c:	18cc1e04 	addi	r3,r3,12408
 2020160:	e0bffd17 	ldw	r2,-12(fp)
 2020164:	10ffc91e 	bne	r2,r3,202008c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2020168:	e03fff15 	stw	zero,-4(fp)
 202016c:	e0bfff17 	ldw	r2,-4(fp)
}
 2020170:	e037883a 	mov	sp,fp
 2020174:	dfc00117 	ldw	ra,4(sp)
 2020178:	df000017 	ldw	fp,0(sp)
 202017c:	dec00204 	addi	sp,sp,8
 2020180:	f800283a 	ret

02020184 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2020184:	defff804 	addi	sp,sp,-32
 2020188:	dfc00715 	stw	ra,28(sp)
 202018c:	df000615 	stw	fp,24(sp)
 2020190:	df000604 	addi	fp,sp,24
 2020194:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2020198:	00bffa04 	movi	r2,-24
 202019c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 20201a0:	008080b4 	movhi	r2,514
 20201a4:	1093cc04 	addi	r2,r2,20272
 20201a8:	10800017 	ldw	r2,0(r2)
 20201ac:	e0bffa15 	stw	r2,-24(fp)
 20201b0:	e03ffb0d 	sth	zero,-20(fp)
 20201b4:	e17ffb0b 	ldhu	r5,-20(fp)
 20201b8:	e1bffe04 	addi	r6,fp,-8
 20201bc:	e13ffa17 	ldw	r4,-24(fp)
 20201c0:	201a6080 	call	201a608 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20201c4:	e03ffd15 	stw	zero,-12(fp)
 20201c8:	00001e06 	br	2020244 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 20201cc:	e0bffd17 	ldw	r2,-12(fp)
 20201d0:	00c080b4 	movhi	r3,514
 20201d4:	18c76904 	addi	r3,r3,7588
 20201d8:	10800324 	muli	r2,r2,12
 20201dc:	10c5883a 	add	r2,r2,r3
 20201e0:	10800017 	ldw	r2,0(r2)
 20201e4:	1004c03a 	cmpne	r2,r2,zero
 20201e8:	1000131e 	bne	r2,zero,2020238 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 20201ec:	e0bffd17 	ldw	r2,-12(fp)
 20201f0:	00c080b4 	movhi	r3,514
 20201f4:	18c76904 	addi	r3,r3,7588
 20201f8:	10800324 	muli	r2,r2,12
 20201fc:	10c7883a 	add	r3,r2,r3
 2020200:	e0bfff17 	ldw	r2,-4(fp)
 2020204:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 2020208:	008080b4 	movhi	r2,514
 202020c:	108c2204 	addi	r2,r2,12424
 2020210:	10c00017 	ldw	r3,0(r2)
 2020214:	e0bffd17 	ldw	r2,-12(fp)
 2020218:	1880040e 	bge	r3,r2,202022c <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 202021c:	00c080b4 	movhi	r3,514
 2020220:	18cc2204 	addi	r3,r3,12424
 2020224:	e0bffd17 	ldw	r2,-12(fp)
 2020228:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 202022c:	e0bffd17 	ldw	r2,-12(fp)
 2020230:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 2020234:	00000606 	br	2020250 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2020238:	e0bffd17 	ldw	r2,-12(fp)
 202023c:	10800044 	addi	r2,r2,1
 2020240:	e0bffd15 	stw	r2,-12(fp)
 2020244:	e0bffd17 	ldw	r2,-12(fp)
 2020248:	10800810 	cmplti	r2,r2,32
 202024c:	103fdf1e 	bne	r2,zero,20201cc <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 2020250:	008080b4 	movhi	r2,514
 2020254:	1093cc04 	addi	r2,r2,20272
 2020258:	11000017 	ldw	r4,0(r2)
 202025c:	201aa000 	call	201aa00 <OSSemPost>

  return rc;
 2020260:	e0bffc17 	ldw	r2,-16(fp)
}
 2020264:	e037883a 	mov	sp,fp
 2020268:	dfc00117 	ldw	ra,4(sp)
 202026c:	df000017 	ldw	fp,0(sp)
 2020270:	dec00204 	addi	sp,sp,8
 2020274:	f800283a 	ret

02020278 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 2020278:	defffb04 	addi	sp,sp,-20
 202027c:	df000415 	stw	fp,16(sp)
 2020280:	df000404 	addi	fp,sp,16
 2020284:	e13ffe15 	stw	r4,-8(fp)
 2020288:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 202028c:	e0bfff17 	ldw	r2,-4(fp)
 2020290:	10810070 	cmpltui	r2,r2,1025
 2020294:	1000021e 	bne	r2,zero,20202a0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 2020298:	00810004 	movi	r2,1024
 202029c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 20202a0:	e0fffe17 	ldw	r3,-8(fp)
 20202a4:	e0bfff17 	ldw	r2,-4(fp)
 20202a8:	1885883a 	add	r2,r3,r2
 20202ac:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 20202b0:	e0bffe17 	ldw	r2,-8(fp)
 20202b4:	e0bffd15 	stw	r2,-12(fp)
 20202b8:	00000506 	br	20202d0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 20202bc:	e0bffd17 	ldw	r2,-12(fp)
 20202c0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 20202c4:	e0bffd17 	ldw	r2,-12(fp)
 20202c8:	10800804 	addi	r2,r2,32
 20202cc:	e0bffd15 	stw	r2,-12(fp)
 20202d0:	e0fffd17 	ldw	r3,-12(fp)
 20202d4:	e0bffc17 	ldw	r2,-16(fp)
 20202d8:	18bff836 	bltu	r3,r2,20202bc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 20202dc:	e0bffe17 	ldw	r2,-8(fp)
 20202e0:	108007cc 	andi	r2,r2,31
 20202e4:	1005003a 	cmpeq	r2,r2,zero
 20202e8:	1000021e 	bne	r2,zero,20202f4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 20202ec:	e0bffd17 	ldw	r2,-12(fp)
 20202f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 20202f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 20202f8:	e037883a 	mov	sp,fp
 20202fc:	df000017 	ldw	fp,0(sp)
 2020300:	dec00104 	addi	sp,sp,4
 2020304:	f800283a 	ret

02020308 <atexit>:
 2020308:	200b883a 	mov	r5,r4
 202030c:	000d883a 	mov	r6,zero
 2020310:	0009883a 	mov	r4,zero
 2020314:	000f883a 	mov	r7,zero
 2020318:	20203c81 	jmpi	20203c8 <__register_exitproc>

0202031c <exit>:
 202031c:	defffe04 	addi	sp,sp,-8
 2020320:	000b883a 	mov	r5,zero
 2020324:	dc000015 	stw	r16,0(sp)
 2020328:	dfc00115 	stw	ra,4(sp)
 202032c:	2021883a 	mov	r16,r4
 2020330:	20205000 	call	2020500 <__call_exitprocs>
 2020334:	008080b4 	movhi	r2,514
 2020338:	108c1804 	addi	r2,r2,12384
 202033c:	11000017 	ldw	r4,0(r2)
 2020340:	20800f17 	ldw	r2,60(r4)
 2020344:	10000126 	beq	r2,zero,202034c <exit+0x30>
 2020348:	103ee83a 	callr	r2
 202034c:	8009883a 	mov	r4,r16
 2020350:	20206f00 	call	20206f0 <_exit>

02020354 <memcmp>:
 2020354:	00c000c4 	movi	r3,3
 2020358:	1980032e 	bgeu	r3,r6,2020368 <memcmp+0x14>
 202035c:	2144b03a 	or	r2,r4,r5
 2020360:	10c4703a 	and	r2,r2,r3
 2020364:	10000f26 	beq	r2,zero,20203a4 <memcmp+0x50>
 2020368:	31ffffc4 	addi	r7,r6,-1
 202036c:	3000061e 	bne	r6,zero,2020388 <memcmp+0x34>
 2020370:	00000a06 	br	202039c <memcmp+0x48>
 2020374:	39ffffc4 	addi	r7,r7,-1
 2020378:	00bfffc4 	movi	r2,-1
 202037c:	21000044 	addi	r4,r4,1
 2020380:	29400044 	addi	r5,r5,1
 2020384:	38800526 	beq	r7,r2,202039c <memcmp+0x48>
 2020388:	20c00003 	ldbu	r3,0(r4)
 202038c:	28800003 	ldbu	r2,0(r5)
 2020390:	18bff826 	beq	r3,r2,2020374 <memcmp+0x20>
 2020394:	1885c83a 	sub	r2,r3,r2
 2020398:	f800283a 	ret
 202039c:	0005883a 	mov	r2,zero
 20203a0:	f800283a 	ret
 20203a4:	180f883a 	mov	r7,r3
 20203a8:	20c00017 	ldw	r3,0(r4)
 20203ac:	28800017 	ldw	r2,0(r5)
 20203b0:	18bfed1e 	bne	r3,r2,2020368 <memcmp+0x14>
 20203b4:	31bfff04 	addi	r6,r6,-4
 20203b8:	21000104 	addi	r4,r4,4
 20203bc:	29400104 	addi	r5,r5,4
 20203c0:	39bff936 	bltu	r7,r6,20203a8 <memcmp+0x54>
 20203c4:	003fe806 	br	2020368 <memcmp+0x14>

020203c8 <__register_exitproc>:
 20203c8:	defffa04 	addi	sp,sp,-24
 20203cc:	008080b4 	movhi	r2,514
 20203d0:	108c1804 	addi	r2,r2,12384
 20203d4:	dc000015 	stw	r16,0(sp)
 20203d8:	14000017 	ldw	r16,0(r2)
 20203dc:	dd000415 	stw	r20,16(sp)
 20203e0:	2829883a 	mov	r20,r5
 20203e4:	81405217 	ldw	r5,328(r16)
 20203e8:	dcc00315 	stw	r19,12(sp)
 20203ec:	dc800215 	stw	r18,8(sp)
 20203f0:	dc400115 	stw	r17,4(sp)
 20203f4:	dfc00515 	stw	ra,20(sp)
 20203f8:	2023883a 	mov	r17,r4
 20203fc:	3027883a 	mov	r19,r6
 2020400:	3825883a 	mov	r18,r7
 2020404:	28002526 	beq	r5,zero,202049c <__register_exitproc+0xd4>
 2020408:	29000117 	ldw	r4,4(r5)
 202040c:	008007c4 	movi	r2,31
 2020410:	11002716 	blt	r2,r4,20204b0 <__register_exitproc+0xe8>
 2020414:	8800101e 	bne	r17,zero,2020458 <__register_exitproc+0x90>
 2020418:	2105883a 	add	r2,r4,r4
 202041c:	1085883a 	add	r2,r2,r2
 2020420:	20c00044 	addi	r3,r4,1
 2020424:	1145883a 	add	r2,r2,r5
 2020428:	0009883a 	mov	r4,zero
 202042c:	15000215 	stw	r20,8(r2)
 2020430:	28c00115 	stw	r3,4(r5)
 2020434:	2005883a 	mov	r2,r4
 2020438:	dfc00517 	ldw	ra,20(sp)
 202043c:	dd000417 	ldw	r20,16(sp)
 2020440:	dcc00317 	ldw	r19,12(sp)
 2020444:	dc800217 	ldw	r18,8(sp)
 2020448:	dc400117 	ldw	r17,4(sp)
 202044c:	dc000017 	ldw	r16,0(sp)
 2020450:	dec00604 	addi	sp,sp,24
 2020454:	f800283a 	ret
 2020458:	29802204 	addi	r6,r5,136
 202045c:	00800044 	movi	r2,1
 2020460:	110e983a 	sll	r7,r2,r4
 2020464:	30c04017 	ldw	r3,256(r6)
 2020468:	2105883a 	add	r2,r4,r4
 202046c:	1085883a 	add	r2,r2,r2
 2020470:	1185883a 	add	r2,r2,r6
 2020474:	19c6b03a 	or	r3,r3,r7
 2020478:	14802015 	stw	r18,128(r2)
 202047c:	14c00015 	stw	r19,0(r2)
 2020480:	00800084 	movi	r2,2
 2020484:	30c04015 	stw	r3,256(r6)
 2020488:	88bfe31e 	bne	r17,r2,2020418 <__register_exitproc+0x50>
 202048c:	30804117 	ldw	r2,260(r6)
 2020490:	11c4b03a 	or	r2,r2,r7
 2020494:	30804115 	stw	r2,260(r6)
 2020498:	003fdf06 	br	2020418 <__register_exitproc+0x50>
 202049c:	008080f4 	movhi	r2,515
 20204a0:	10a10a04 	addi	r2,r2,-31704
 20204a4:	100b883a 	mov	r5,r2
 20204a8:	80805215 	stw	r2,328(r16)
 20204ac:	003fd606 	br	2020408 <__register_exitproc+0x40>
 20204b0:	00808034 	movhi	r2,512
 20204b4:	1098da04 	addi	r2,r2,25448
 20204b8:	1000021e 	bne	r2,zero,20204c4 <__register_exitproc+0xfc>
 20204bc:	013fffc4 	movi	r4,-1
 20204c0:	003fdc06 	br	2020434 <__register_exitproc+0x6c>
 20204c4:	01006404 	movi	r4,400
 20204c8:	103ee83a 	callr	r2
 20204cc:	1007883a 	mov	r3,r2
 20204d0:	103ffa26 	beq	r2,zero,20204bc <__register_exitproc+0xf4>
 20204d4:	80805217 	ldw	r2,328(r16)
 20204d8:	180b883a 	mov	r5,r3
 20204dc:	18000115 	stw	zero,4(r3)
 20204e0:	18800015 	stw	r2,0(r3)
 20204e4:	80c05215 	stw	r3,328(r16)
 20204e8:	18006215 	stw	zero,392(r3)
 20204ec:	18006315 	stw	zero,396(r3)
 20204f0:	0009883a 	mov	r4,zero
 20204f4:	883fc826 	beq	r17,zero,2020418 <__register_exitproc+0x50>
 20204f8:	003fd706 	br	2020458 <__register_exitproc+0x90>

020204fc <register_fini>:
 20204fc:	f800283a 	ret

02020500 <__call_exitprocs>:
 2020500:	008080b4 	movhi	r2,514
 2020504:	108c1804 	addi	r2,r2,12384
 2020508:	10800017 	ldw	r2,0(r2)
 202050c:	defff304 	addi	sp,sp,-52
 2020510:	df000b15 	stw	fp,44(sp)
 2020514:	d8800115 	stw	r2,4(sp)
 2020518:	00808034 	movhi	r2,512
 202051c:	1098d504 	addi	r2,r2,25428
 2020520:	1005003a 	cmpeq	r2,r2,zero
 2020524:	d8800215 	stw	r2,8(sp)
 2020528:	d8800117 	ldw	r2,4(sp)
 202052c:	dd400815 	stw	r21,32(sp)
 2020530:	dd000715 	stw	r20,28(sp)
 2020534:	10805204 	addi	r2,r2,328
 2020538:	dfc00c15 	stw	ra,48(sp)
 202053c:	ddc00a15 	stw	r23,40(sp)
 2020540:	dd800915 	stw	r22,36(sp)
 2020544:	dcc00615 	stw	r19,24(sp)
 2020548:	dc800515 	stw	r18,20(sp)
 202054c:	dc400415 	stw	r17,16(sp)
 2020550:	dc000315 	stw	r16,12(sp)
 2020554:	282b883a 	mov	r21,r5
 2020558:	2039883a 	mov	fp,r4
 202055c:	d8800015 	stw	r2,0(sp)
 2020560:	2829003a 	cmpeq	r20,r5,zero
 2020564:	d8800117 	ldw	r2,4(sp)
 2020568:	14405217 	ldw	r17,328(r2)
 202056c:	88001026 	beq	r17,zero,20205b0 <__call_exitprocs+0xb0>
 2020570:	ddc00017 	ldw	r23,0(sp)
 2020574:	88800117 	ldw	r2,4(r17)
 2020578:	8c802204 	addi	r18,r17,136
 202057c:	143fffc4 	addi	r16,r2,-1
 2020580:	80000916 	blt	r16,zero,20205a8 <__call_exitprocs+0xa8>
 2020584:	05bfffc4 	movi	r22,-1
 2020588:	a000151e 	bne	r20,zero,20205e0 <__call_exitprocs+0xe0>
 202058c:	8409883a 	add	r4,r16,r16
 2020590:	2105883a 	add	r2,r4,r4
 2020594:	1485883a 	add	r2,r2,r18
 2020598:	10c02017 	ldw	r3,128(r2)
 202059c:	a8c01126 	beq	r21,r3,20205e4 <__call_exitprocs+0xe4>
 20205a0:	843fffc4 	addi	r16,r16,-1
 20205a4:	85bff81e 	bne	r16,r22,2020588 <__call_exitprocs+0x88>
 20205a8:	d8800217 	ldw	r2,8(sp)
 20205ac:	10003126 	beq	r2,zero,2020674 <__call_exitprocs+0x174>
 20205b0:	dfc00c17 	ldw	ra,48(sp)
 20205b4:	df000b17 	ldw	fp,44(sp)
 20205b8:	ddc00a17 	ldw	r23,40(sp)
 20205bc:	dd800917 	ldw	r22,36(sp)
 20205c0:	dd400817 	ldw	r21,32(sp)
 20205c4:	dd000717 	ldw	r20,28(sp)
 20205c8:	dcc00617 	ldw	r19,24(sp)
 20205cc:	dc800517 	ldw	r18,20(sp)
 20205d0:	dc400417 	ldw	r17,16(sp)
 20205d4:	dc000317 	ldw	r16,12(sp)
 20205d8:	dec00d04 	addi	sp,sp,52
 20205dc:	f800283a 	ret
 20205e0:	8409883a 	add	r4,r16,r16
 20205e4:	88c00117 	ldw	r3,4(r17)
 20205e8:	2105883a 	add	r2,r4,r4
 20205ec:	1445883a 	add	r2,r2,r17
 20205f0:	18ffffc4 	addi	r3,r3,-1
 20205f4:	11800217 	ldw	r6,8(r2)
 20205f8:	1c001526 	beq	r3,r16,2020650 <__call_exitprocs+0x150>
 20205fc:	10000215 	stw	zero,8(r2)
 2020600:	303fe726 	beq	r6,zero,20205a0 <__call_exitprocs+0xa0>
 2020604:	00c00044 	movi	r3,1
 2020608:	1c06983a 	sll	r3,r3,r16
 202060c:	90804017 	ldw	r2,256(r18)
 2020610:	8cc00117 	ldw	r19,4(r17)
 2020614:	1884703a 	and	r2,r3,r2
 2020618:	10001426 	beq	r2,zero,202066c <__call_exitprocs+0x16c>
 202061c:	90804117 	ldw	r2,260(r18)
 2020620:	1884703a 	and	r2,r3,r2
 2020624:	10000c1e 	bne	r2,zero,2020658 <__call_exitprocs+0x158>
 2020628:	2105883a 	add	r2,r4,r4
 202062c:	1485883a 	add	r2,r2,r18
 2020630:	11400017 	ldw	r5,0(r2)
 2020634:	e009883a 	mov	r4,fp
 2020638:	303ee83a 	callr	r6
 202063c:	88800117 	ldw	r2,4(r17)
 2020640:	98bfc81e 	bne	r19,r2,2020564 <__call_exitprocs+0x64>
 2020644:	b8800017 	ldw	r2,0(r23)
 2020648:	147fd526 	beq	r2,r17,20205a0 <__call_exitprocs+0xa0>
 202064c:	003fc506 	br	2020564 <__call_exitprocs+0x64>
 2020650:	8c000115 	stw	r16,4(r17)
 2020654:	003fea06 	br	2020600 <__call_exitprocs+0x100>
 2020658:	2105883a 	add	r2,r4,r4
 202065c:	1485883a 	add	r2,r2,r18
 2020660:	11000017 	ldw	r4,0(r2)
 2020664:	303ee83a 	callr	r6
 2020668:	003ff406 	br	202063c <__call_exitprocs+0x13c>
 202066c:	303ee83a 	callr	r6
 2020670:	003ff206 	br	202063c <__call_exitprocs+0x13c>
 2020674:	88800117 	ldw	r2,4(r17)
 2020678:	1000081e 	bne	r2,zero,202069c <__call_exitprocs+0x19c>
 202067c:	89000017 	ldw	r4,0(r17)
 2020680:	20000726 	beq	r4,zero,20206a0 <__call_exitprocs+0x1a0>
 2020684:	b9000015 	stw	r4,0(r23)
 2020688:	8809883a 	mov	r4,r17
 202068c:	20063540 	call	2006354 <free>
 2020690:	bc400017 	ldw	r17,0(r23)
 2020694:	883fb71e 	bne	r17,zero,2020574 <__call_exitprocs+0x74>
 2020698:	003fc506 	br	20205b0 <__call_exitprocs+0xb0>
 202069c:	89000017 	ldw	r4,0(r17)
 20206a0:	882f883a 	mov	r23,r17
 20206a4:	2023883a 	mov	r17,r4
 20206a8:	883fb21e 	bne	r17,zero,2020574 <__call_exitprocs+0x74>
 20206ac:	003fc006 	br	20205b0 <__call_exitprocs+0xb0>

020206b0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 20206b0:	defffd04 	addi	sp,sp,-12
 20206b4:	df000215 	stw	fp,8(sp)
 20206b8:	df000204 	addi	fp,sp,8
 20206bc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 20206c0:	e0bfff17 	ldw	r2,-4(fp)
 20206c4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20206c8:	e0bffe17 	ldw	r2,-8(fp)
 20206cc:	1005003a 	cmpeq	r2,r2,zero
 20206d0:	1000021e 	bne	r2,zero,20206dc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 20206d4:	002af070 	cmpltui	zero,zero,43969
 20206d8:	00000106 	br	20206e0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 20206dc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 20206e0:	e037883a 	mov	sp,fp
 20206e4:	df000017 	ldw	fp,0(sp)
 20206e8:	dec00104 	addi	sp,sp,4
 20206ec:	f800283a 	ret

020206f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20206f0:	defffd04 	addi	sp,sp,-12
 20206f4:	dfc00215 	stw	ra,8(sp)
 20206f8:	df000115 	stw	fp,4(sp)
 20206fc:	df000104 	addi	fp,sp,4
 2020700:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2020704:	008080b4 	movhi	r2,514
 2020708:	1093d744 	addi	r2,r2,20317
 202070c:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 2020710:	e13fff17 	ldw	r4,-4(fp)
 2020714:	20206b00 	call	20206b0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2020718:	003fff06 	br	2020718 <_exit+0x28>
 202071c:	020204fc 	xorhi	r8,zero,2067
